@prefix : <http://d3fend.mitre.org/ontologies/d3fend.owl#> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

<http://d3fend.mitre.org/ontologies/d3fend.owl> a owl:Ontology ;
    rdfs:comment "Use of the D3FEND Knowledge Graph, and the associated references from this ontology are subject to the Terms of Use. D3FEND is funded by the National Security Agency (NSA) Cybersecurity Directorate and managed by the National Security Engineering Center (NSEC) which is operated by The MITRE Corporation. D3FEND™ and the D3FEND logo are trademarks of The MITRE Corporation. This software was produced for the U.S. Government under Basic Contract No. W56KGU-18-D0004, and is subject to the Rights in Noncommercial Computer Software and Noncommercial Computer Software Documentation Clause 252.227-7014 (FEB 2012) Copyright 2022 The MITRE Corporation." ;
    dcterms:description "D3FEND is a framework which encodes a countermeasure knowledge base as a knowledge graph. The graph contains the types and relations that define key concepts in the cybersecurity countermeasure domain and the relations necessary to link those concepts to each other. Each of these concepts and relations are linked to references in the cybersecurity literature." ;
    dcterms:license "MIT" ;
    dcterms:title "D3FEND™ - A knowledge graph of cybersecurity countermeasures" .

### Object Properties

:abuses a owl:ObjectProperty ;
    rdfs:label "abuses" ;
    skos:altLabel "misapplies",
        "misuses" ;
    rdfs:subPropertyOf :uses ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/01163606-v> ;
    :definition "x abuses y: The entity x applies an artifact y to a wrong thing or person; x applies y badly or incorrectly." .

:accessed-by a owl:ObjectProperty ;
    rdfs:label "accessed-by" ;
    rdfs:subPropertyOf :associated-with,
        :may-be-accessed-by ;
    owl:inverseOf :accesses .

:accesses a owl:ObjectProperty ;
    rdfs:label "accesses" ;
    rdfs:subPropertyOf :associated-with,
        :may-access ;
    rdfs:range :NetworkResource ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/02673854-n> ;
    :definition "x accesses y: An subject x takes the action of reading from, writing into, or executing the stored information in the object y. Reads, writes, and executes are specific cases of accesses." .

:addressed-by a owl:ObjectProperty ;
    rdfs:label "addressed-by" ;
    rdfs:subPropertyOf :associated-with ;
    rdfs:domain :Resource ;
    rdfs:range :Identifier ;
    owl:inverseOf :addresses ;
    :definition "x addressed-by y: Relates a resource x (e.g., network host, peripheral device, disk sector, a memory cell or other logical or physical entity) to a discrete address y in an address space that points to it." .

:addresses a owl:ObjectProperty ;
    rdfs:label "addresses" ;
    skos:altLabel "points-to" ;
    rdfs:subPropertyOf :associated-with ;
    rdfs:domain :Identifier ;
    rdfs:range :Resource ;
    :definition "x addresses y: Relates a pointer x to a digital artifact y located in the address space to which x points. The address space is part of some digital store, whether it be in memory, an image, or a persistent storage device." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Pointer_(computer_programming)>,
        <http://wordnet-rdf.princeton.edu/id/02253826-v> ;
    :todo "For inference, If an object has a pointer (but is not a pointer itself), does it point to the target object of the pointer?  i.e., an image might hold a pointer pointing to some global address space, does the image itself point-to the address space?  Would we assert that directly ever or only infer it?" .

:adds a owl:ObjectProperty ;
    rdfs:label "adds" ;
    rdfs:subPropertyOf :associated-with,
        :may-add ;
    :definition "x adds y: The subject x adds a data object y, such as a file, to some other digital artifact, such as a directory. Examples include an agent or technique adding a record to a database. or a domain entry to a DNS server." .

:analyzes a owl:ObjectProperty ;
    rdfs:label "analyzes" ;
    rdfs:subPropertyOf :associated-with,
        :detects ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/00738221-v> ;
    :definition "x analyzes y: The subject x break down object y into components or essential features, assessing y by quantitative methods, qualitative methods, or both.  Usually the analysis is done in terms of some model or framework." .

:assessed-by a owl:ObjectProperty ;
    rdfs:label "assessed-by" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property ;
    owl:inverseOf :assesses .

:assesses a owl:ObjectProperty ;
    rdfs:label "assesses" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property ;
    rdfs:domain :DefensiveTechniqueClaim ;
    rdfs:range :DefensiveTechniqueAssessment .

:associated-with a owl:ObjectProperty ;
    rdfs:label "associated-with" ;
    rdfs:subPropertyOf :may-be-associated-with ;
    :definition "x associated-with y: The subject x and object y are associated in some way.  This is the most general definite relationship in d3fend (i.e., most general relationship that is not prefixed by 'may-'.)" ;
    rdfs:seeAlso <http://wordnet-rdf.princeton.edu/id/13804981-n> .

:attached-to a owl:ObjectProperty ;
    rdfs:label "attached-to" ;
    rdfs:subPropertyOf :associated-with ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/01980375-s> ;
    :definition "x attached-to y: A subject x is joined in close association to an object y." ;
    rdfs:seeAlso "d3f:connects" .

:attack-may-be-countered-by a owl:ObjectProperty ;
    rdfs:label "attack-may-be-countered-by" ;
    rdfs:subPropertyOf :may-be-tactically-associated-with .

:authenticates a owl:ObjectProperty ;
    rdfs:label "authenticates" ;
    rdfs:subPropertyOf :associated-with,
        :hardens ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/01980375-s> ;
    :definition "x authenticates y: The subject x establishes the authenticity of some y. This relation indicates an authentication event has occurred." .

:author a owl:ObjectProperty ;
    rdfs:label "author" ;
    rdfs:subPropertyOf :creator .

:authorizes a owl:ObjectProperty ;
    rdfs:label "authorizes" ;
    rdfs:subPropertyOf :associated-with,
        :hardens ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/00804987-v> ;
    :comment "Consider adding certificates (verb sense) specialization of authorizes for authorizations by certificate." ;
    :definition "x authorizes y: A subject x grants authorization or clearance for an agent y to use an object.  This relation indicates an authorization event has occurred." ;
    rdfs:seeAlso <http://wordnet-rdf.princeton.edu/id/00805664-v> .

:blocks a owl:ObjectProperty ;
    rdfs:label "blocks" ;
    rdfs:subPropertyOf :counters,
        :filters ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/01480024-v> ;
    :definition "x blocks y: The entity x blocks off the use of digital artifact y by reference to a block or allow list (or both.)" .

:broader a owl:ObjectProperty ;
    rdfs:label "broader" ;
    rdfs:subPropertyOf :semantic-relation .

:broader-transitive a owl:ObjectProperty ;
    rdfs:label "broader-transitive" ;
    rdfs:subPropertyOf :semantic-relation .

:cited-by a owl:ObjectProperty ;
    rdfs:label "cited-by" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property ;
    owl:inverseOf :cites .

:cites a owl:ObjectProperty ;
    rdfs:label "cites" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property ;
    rdfs:range :InformationContentEntity ;
    owl:inverseOf :d3fend-catalog-object-property .

:claimed-by a owl:ObjectProperty ;
    rdfs:label "claimed-by" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property ;
    owl:inverseOf :claims .

:claims a owl:ObjectProperty ;
    rdfs:label "claims" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property .

:configures a owl:ObjectProperty ;
    rdfs:label "configures" ;
    rdfs:subPropertyOf :associated-with,
        :hardens .

:connects a owl:ObjectProperty ;
    rdfs:label "connects" ;
    rdfs:subPropertyOf :associated-with ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/01071413-v> ;
    :definition "x connects y: The subject x joins system y by means of communication equipment (to some other system, typically the adversary-targeted host)." ;
    :todo "x connects y to z is a complete capture of the action, but requires and event to reify that.  y connected-to z could be relation for the state after the event \"x connects y to z\".  But there is also the likely need to model the sense of x connects y to z, where x is the communications equipment (might be a simple cable) and y and z are the systems being connected." .

:contained-by a owl:ObjectProperty,
        owl:TransitiveProperty ;
    rdfs:label "contained-by" ;
    rdfs:subPropertyOf :associated-with,
        :may-be-contained-by ;
    owl:inverseOf :contains .

:contains a owl:ObjectProperty,
        owl:TransitiveProperty ;
    rdfs:label "contains" ;
    rdfs:subPropertyOf :associated-with,
        :may-contain ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/02639021-v> ;
    :comment """d3fend uses 'contains' for the more ontologically traditional term 'has-part' and thus is transitive.  The concept of containment in other ontologies (e.g., SUMO and OBO's RO) may refer the containment of an object within a space or object defining a space, or may express the containment of subintervals or subsequences of intervals or sequences, respectively.

Moving forward different distinctions of kinds of has-part (contains) relationships may prove useful or even necessary.  Deferred for future releases""" ;
    :definition "x contains y: A core relation that holds between a whole x and its part y.  Equivalent to relational concept 'has part' and thus transitive." .

:contributor a owl:ObjectProperty ;
    rdfs:subPropertyOf :d3fend-catalog-object-property ;
    rdfs:range owl:Thing .

:copies a owl:ObjectProperty ;
    rdfs:label "copies" ;
    rdfs:subPropertyOf :creates ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/01738810-v> ;
    :definition "x copies y: An technique or agent x reproduces or makes and exact copy of some digital artifact y." .

:copy-of a owl:ObjectProperty ;
    rdfs:label "copy-of" ;
    rdfs:subPropertyOf :associated-with ;
    :definition "x copy-of y: The subject x is a duplicate of the object y" .

:counters a owl:ObjectProperty ;
    rdfs:label "counters" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property,
        :may-counter .

:created-by a owl:ObjectProperty ;
    rdfs:label "created-by" ;
    rdfs:subPropertyOf :associated-with,
        :may-be-created-by ;
    owl:inverseOf :creates .

:creates a owl:ObjectProperty ;
    rdfs:label "creates" ;
    rdfs:subPropertyOf :associated-with,
        :may-create ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/01630392-v> ;
    :definition "x creates y: The subject x bring into existence an object y.  Some technique or agent x creates a persistent digital artifact y (as opposed to production of a consumable or transient object.); i.e., bring forth or generate" ;
    rdfs:seeAlso "produces" .

:creator a owl:ObjectProperty ;
    rdfs:label "creator" ;
    rdfs:subPropertyOf :contributor ;
    :comment "Oddly, in bibo this is not an ObjectProperty.  In dcterms, author is subprop of creator, which makes sense.  Bibo does not have author as subprop of creator or contributor, but bibo /does/ have authorList which is subtype of conributorList." .

:d3fend-catalog-object-property a owl:ObjectProperty ;
    rdfs:label "d3fend-catalog-object-property" ;
    skos:altLabel "d3fend-vendor-registry-object-property" ;
    rdfs:subPropertyOf :d3fend-object-property .

:d3fend-general-object-property a owl:ObjectProperty ;
    rdfs:subPropertyOf :d3fend-object-property .

:d3fend-kb-object-property a owl:ObjectProperty ;
    rdfs:label "d3fend-kb-object-property" ;
    rdfs:subPropertyOf :d3fend-object-property ;
    :definition "x d3fend-kb-object-property y: The object y is a d3fend knowledge base object property. These properties allow the linkage of knowledge and information supporting and illustrating the d3fend model." .

:d3fend-object-property a owl:ObjectProperty ;
    rdfs:subPropertyOf owl:topObjectProperty .

:d3fend-process-object-property a owl:ObjectProperty ;
    rdfs:subPropertyOf :d3fend-object-property .

:d3fend-tactical-verb-property a owl:ObjectProperty ;
    rdfs:label "d3fend-tactical-verb-property" ;
    rdfs:subPropertyOf :d3fend-object-property ;
    rdfs:domain :DefensiveTechnique ;
    rdfs:range :Artifact .

:d3fend-use-case-object-property a owl:ObjectProperty ;
    rdfs:subPropertyOf :d3fend-object-property .

:deceives a owl:ObjectProperty ;
    rdfs:label "deceives" ;
    rdfs:subPropertyOf :counters .

:deceives-with a owl:ObjectProperty ;
    rdfs:label "deceives-with" ;
    rdfs:subPropertyOf :d3fend-tactical-verb-property .

:deletes a owl:ObjectProperty ;
    rdfs:label "deletes" ;
    rdfs:subPropertyOf :evicts,
        :modifies ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/01001860-v> ;
    :definition "x deletes y: A technique or agent x wipes out the digitally or magnetically recorded information of digital object y." .

:dependent a owl:ObjectProperty ;
    rdfs:label "dependent" ;
    rdfs:subPropertyOf :associated-with ;
    rdfs:isDefinedBy "http://wordnet-rdf.princeton.edu/id/00729216-a" ;
    :definition "x dependent y: A dependent y is an entity that requires the fulfillment of the requirements specified in dependency x." .

:dependsOn a owl:ObjectProperty ;
    rdfs:label "depends-on" ;
    rdfs:subPropertyOf :associated-with ;
    owl:inverseOf :has-dependent ;
    rdfs:isDefinedBy "http://wordnet-rdf.princeton.edu/id/00729216-a",
        "x depends-on y: The entity x is contingent on y being available; x relies on y." ;
    rdfs:seeAlso "https://www.cisa.gov/what-are-dependencies" .

:detects a owl:ObjectProperty ;
    rdfs:label "detects" ;
    rdfs:subPropertyOf :counters,
        :d3fend-tactical-verb-property .

:disables a owl:ObjectProperty ;
    rdfs:label "disables" ;
    rdfs:subPropertyOf :evicts,
        :may-disable,
        :modifies ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/00513267-v> ;
    :definition "x disables y: The technique or agent x makes an entity y unable to perform its actions or capabilities." .

:drives a owl:ObjectProperty ;
    rdfs:label "drives" ;
    rdfs:subPropertyOf :associated-with ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/01184038-v> ;
    :definition "x drives y: The device driver x causes a system component y to function by controlling it." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Device_driver> .

:employed-by a owl:ObjectProperty ;
    rdfs:label "employed-by" ;
    rdfs:subPropertyOf :associated-with ;
    owl:inverseOf :employs ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/01161188-v> ;
    :definition "x employed-by y: An entity x is put into service by a technique or agent y.  Inverse of y employs x." .

:employs a owl:ObjectProperty ;
    rdfs:subPropertyOf :associated-with .

:enabled-by a owl:ObjectProperty ;
    rdfs:label "enabled-by" ;
    rdfs:subPropertyOf :associated-with ;
    owl:inverseOf :enables ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/00513958-v> ;
    :definition "x enabled-by y: A top level technique y enables a tactic x, that is, the property indicates that a technique y is used to put a particular tactic x into action. In other words, y renders x capable or able for some task.  Inverse of enables." .

:enables a owl:ObjectProperty ;
    rdfs:label "enables" ;
    rdfs:subPropertyOf :associated-with ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/00513958-v> ;
    :definition "x enables y: A top level technique x enables a tactic y, that is, the property indicates that a technique x is used to put a particular tactic y into action. In other words, x renders y capable or able for some task." .

:encrypts a owl:ObjectProperty ;
    rdfs:label "encrypts" ;
    rdfs:subPropertyOf :associated-with,
        :hardens ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/00996121-v> ;
    :definition "x encrypts y: The entity x converts the ordinary representation of a digital artifact y into a secret code." .

:end a owl:ObjectProperty ;
    rdfs:subPropertyOf :d3fend-process-object-property .

:enumerates a owl:ObjectProperty ;
    rdfs:label "enumerates" ;
    rdfs:subPropertyOf :reads ;
    :definition "definition \"x enumerates y: The subject x takes the action of reading from a digital source y to acquire data and create a list of its contents." .

:evaluated-by a owl:ObjectProperty ;
    rdfs:label "evaluated-by" ;
    rdfs:subPropertyOf :associated-with ;
    owl:inverseOf :evaluates .

:evaluates a owl:ObjectProperty ;
    rdfs:label "evaluates" ;
    rdfs:subPropertyOf :associated-with,
        :may-evaluate .

:evaluator a owl:ObjectProperty ;
    rdfs:label "evaluator" ;
    rdfs:subPropertyOf :contributor .

:evicts a owl:ObjectProperty ;
    rdfs:label "evicts" ;
    rdfs:subPropertyOf :counters,
        :d3fend-tactical-verb-property,
        :may-evict .

:exactly a owl:ObjectProperty ;
    rdfs:label "exactly" ;
    rdfs:subPropertyOf :semantic-relation .

:executes a owl:ObjectProperty ;
    rdfs:label "executes" ;
    rdfs:subPropertyOf :accesses,
        :may-execute,
        :runs ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/02569242-v> ;
    :definition "x executes y: The subject x takes the action of carrying out (executing) y, which is a single software module, function, or instruction." .

:expected-latency a owl:ObjectProperty ;
    rdfs:label "expected-latency" ;
    rdfs:subPropertyOf :latency ;
    rdfs:range [ a owl:Restriction ;
            owl:onProperty :latency ;
            owl:someValuesFrom :Latency ] .

:extends a owl:ObjectProperty ;
    rdfs:label "extends" ;
    rdfs:subPropertyOf :modifies ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/00541315-v> ;
    :definition "x extends y: The entity x extend the scope or range or area of entity y, especially in the sense of widen the range of applications." .

:features a owl:ObjectProperty ;
    rdfs:label "features" ;
    rdfs:subPropertyOf :claims ;
    rdfs:domain :CapabilityFeatureClaim ;
    rdfs:range :CapabilityFeature .

:filters a owl:ObjectProperty ;
    rdfs:label "filters" ;
    rdfs:subPropertyOf :associated-with,
        :isolates ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/01461293-v> ;
    :definition "x filters y: An technique or agent x removes some specified set of of entities from the content of a digital artifact y, by passing an artifact's content through a filter.  A filter is a device that removes something from whatever passes through it." ;
    rdfs:seeAlso <http://wordnet-rdf.princeton.edu/id/03344588-n>,
        <http://www.ontologyrepository.com/CommonCoreOntologies/Filter> .

:forges a owl:ObjectProperty ;
    rdfs:label "forges" ;
    rdfs:subPropertyOf :creates ;
    :definition "x forges y: An technique or agent x counterfeits a digital artifact y, such as a fake credential, with the intent to deceive." ;
    rdfs:seeAlso <http://wordnet-rdf.princeton.edu/id/01657814-v> .

:fork a owl:ObjectProperty ;
    rdfs:subPropertyOf :d3fend-process-object-property .

:hardens a owl:ObjectProperty ;
    rdfs:label "hardens" ;
    rdfs:subPropertyOf :counters,
        :d3fend-tactical-verb-property .

:has-account a owl:ObjectProperty ;
    rdfs:label "has-account" ;
    rdfs:subPropertyOf :owns ;
    :definition "x has-account y: The subject x has ownership or possession of some account y." ;
    rdfs:seeAlso <http://wordnet-rdf.princeton.edu/id/02209474-v> .

:has-audience a owl:ObjectProperty ;
    rdfs:subPropertyOf :d3fend-use-case-object-property .

:has-contribution a owl:ObjectProperty ;
    rdfs:subPropertyOf :d3fend-kb-object-property .

:has-contributor a owl:ObjectProperty ;
    rdfs:subPropertyOf :d3fend-kb-object-property .

:has-dependent a owl:ObjectProperty ;
    rdfs:label "has-dependent" ;
    rdfs:subPropertyOf :associated-with .

:has-evidence a owl:ObjectProperty ;
    rdfs:label "has-evidence" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property .

:has-feature a owl:ObjectProperty ;
    rdfs:label "has-feature" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property .

:has-goal a owl:ObjectProperty ;
    rdfs:subPropertyOf :d3fend-use-case-object-property .

:has-implementation a owl:ObjectProperty ;
    rdfs:label "has-implementation" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property .

:has-location a owl:ObjectProperty ;
    rdfs:label "has-location" ;
    skos:altLabel "located_in" ;
    rdfs:subPropertyOf :associated-with ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/02133811-s> ;
    :definition "x has-location y: The entity x is situated in a particular spot or position y." ;
    rdfs:seeAlso <http://www.obofoundry.org/ro/#OBO_REL:located_in> .

:has-member a owl:ObjectProperty ;
    rdfs:label "has-member" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property ;
    owl:inverseOf :member-of .

:has-prerequisite a owl:ObjectProperty ;
    rdfs:subPropertyOf :d3fend-use-case-object-property .

:has-procedure a owl:ObjectProperty ;
    rdfs:subPropertyOf :d3fend-general-object-property .

:has-recipient a owl:ObjectProperty ;
    rdfs:label "has-recipient" ;
    rdfs:subPropertyOf :associated-with ;
    rdfs:isDefinedBy <http://www.ontologyrepository.com/CommonCoreOntologies/has_recipient> ;
    :definition "x has_recipient y: An agent y is the intended recipient and decoder of the information contained in communication x." ;
    rdfs:seeAlso <http://wordnet-rdf.princeton.edu/id/09651094-n>,
        <http://wordnet-rdf.princeton.edu/id/09788768-n> .

:has-sender a owl:ObjectProperty ;
    rdfs:label "has-sender" ;
    rdfs:subPropertyOf :associated-with ;
    rdfs:isDefinedBy <http://www.ontologyrepository.com/CommonCoreOntologies/has_sender> ;
    :definition "x has_sender y: An agent y is the sender and encoder of the information contained in communication x." ;
    rdfs:seeAlso <http://wordnet-rdf.princeton.edu/id/10598214-n> .

:has-weakness a owl:ObjectProperty ;
    rdfs:subPropertyOf :may-have-weakness .

:hides a owl:ObjectProperty ;
    rdfs:label "hides" ;
    rdfs:subPropertyOf :associated-with ;
    rdfs:range :DigitalArtifact ;
    :definition "x hides y: A technique or operation x conceals the digital artifact y." .

:identified-by a owl:ObjectProperty ;
    rdfs:subPropertyOf :associated-with ;
    owl:inverseOf :identified-by .

:identifies a owl:ObjectProperty ;
    rdfs:subPropertyOf :associated-with .

:impairs a owl:ObjectProperty ;
    rdfs:label "impairs" ;
    rdfs:subPropertyOf :associated-with .

:implemented-by a owl:ObjectProperty ;
    rdfs:label "implemented-by" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property ;
    rdfs:range :CapabilityImplementation ;
    owl:inverseOf :implements .

:implements a owl:ObjectProperty ;
    rdfs:label "implements" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property ;
    rdfs:domain :CapabilityImplementation .

:injects a owl:ObjectProperty ;
    rdfs:label "injects" ;
    rdfs:subPropertyOf :executes ;
    :definition "x injects y: The subject x takes the action of exploiting a security flaw by introducing (injecting) y, which is code or data that will change the course of execution or state of a computing process to an alternate course or state. Typically code injection is associated with adversaries intending the alternate course to facilitate a malevolent purpose; however, code injection can be unintentional or the intentions behind it may be good or benign." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Code_injection>,
        <http://wordnet-rdf.princeton.edu/id/00916722-v> ;
    :todo "We use injects for IPC as well as more ordinary injection attacks, hence \"execution or state\" phrasing. Might distinguish after discussion and investigation." .

:installs a owl:ObjectProperty ;
    rdfs:label "installs" ;
    rdfs:subPropertyOf :associated-with ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/01572394-v> ;
    :definition "x installs y: An entity x sets up a digital artifact y for subsequent use.  For example, an installation program can install application software." .

:instructed-by a owl:ObjectProperty ;
    rdfs:label "instructed-by" ;
    rdfs:subPropertyOf :associated-with ;
    :definition "definition \"x instructed-by y: A subject x takes machine instructions from object y.\"" .

:instructs a owl:ObjectProperty ;
    rdfs:label "instructs" ;
    rdfs:subPropertyOf :associated-with ;
    :definition "definition \"x instructs y: A subject x delivers machine instructions to object y.\"" .

:interprets a owl:ObjectProperty ;
    rdfs:label "interprets" ;
    rdfs:subPropertyOf :executes,
        :may-interpret ;
    :definition "x interprets y: The subject x interprets the executable script y. The sense of interprets is here 'Parse the source code and perform its behavior directly.'" ;
    rdfs:seeAlso <http://dbpedia.org/resource/Interpreter_(computing)> .

:inventoried-by a owl:ObjectProperty ;
    rdfs:label "inventoried-by" ;
    rdfs:subPropertyOf :associated-with ;
    owl:inverseOf :inventories .

:inventories a owl:ObjectProperty ;
    rdfs:label "inventories" ;
    rdfs:subPropertyOf :associated-with .

:invoked-by a owl:ObjectProperty ;
    rdfs:label "invoked-by" ;
    rdfs:subPropertyOf :associated-with,
        :may-be-invoked-by ;
    owl:inverseOf :invokes .

:invokes a owl:ObjectProperty ;
    rdfs:label "invokes" ;
    skos:altLabel "calls" ;
    rdfs:subPropertyOf :executes,
        :may-invoke ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/06599393-n> ;
    :definition "x invokes y: The subject x invokes a system service y by use of an instruction object y that interrupts the program being executed and passes control to the operating system to perform that operation." ;
    rdfs:seeAlso <http://dbpedia.org/resource/System_call> ;
    :todo "Calls in Wordnet can be function call or system / supervisor call; we may want to make this distinction in future.  So far, we have always used this in the second sense (system call.)" .

:isolates a owl:ObjectProperty ;
    rdfs:label "isolates" ;
    rdfs:subPropertyOf :associated-with,
        :d3fend-tactical-verb-property ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/00496744-v> ;
    :definition "x isolates y: The technique or agent x sets digital artifact y apart from other digital artifacts, sequestering y." .

:kb-reference a owl:ObjectProperty ;
    rdfs:label "kb-reference" ;
    skos:altLabel "has-technique-reference" ;
    rdfs:subPropertyOf :d3fend-kb-object-property ;
    owl:inverseOf :kb-reference-of .

:kb-reference-of a owl:ObjectProperty ;
    rdfs:label "kb-reference-of" ;
    skos:altLabel "kb-is-example-of" ;
    rdfs:subPropertyOf :d3fend-kb-object-property ;
    rdfs:domain :Reference ;
    rdfs:range :Technique ;
    :definition "x kb-is-example-of y: The reference x is an example of technique y." .

:latency a owl:ObjectProperty ;
    rdfs:label "latency" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property ;
    rdfs:range [ a owl:Restriction ;
            owl:onProperty :latency ;
            owl:someValuesFrom :Latency ] ;
    :todo "Consider if want to keep this as is or distinguish with property name variation rather than type at end of property.  Could do both.  If just one, drop analytic in enumeration of value options and just have 'real-time', 'non-real-time', etc.  Do we need to distinguish between the individuals is real-time-eviction different from real-time-analytic?" .

:license a owl:ObjectProperty ;
    rdfs:label "license" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property ;
    rdfs:range [ a owl:Restriction ;
            owl:onProperty :license ;
            owl:someValuesFrom :License ] .

:limits a owl:ObjectProperty ;
    rdfs:label "limits" ;
    skos:altLabel "cutoff" ;
    rdfs:subPropertyOf :restricts ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/13781154-n> ;
    :definition "x limits y: An entity x specifies a designated limit beyond which some entity y cannot function or must be terminated." ;
    rdfs:seeAlso <http://wordnet-rdf.princeton.edu/id/13780436-n> .

:loaded-by a owl:ObjectProperty ;
    rdfs:label "loaded-by" ;
    rdfs:subPropertyOf :associated-with ;
    owl:inverseOf :loads .

:loads a owl:ObjectProperty ;
    rdfs:label "loads" ;
    rdfs:subPropertyOf :associated-with ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/02236692-v> ;
    :definition "x loads y: The technique or process x transfers a software from a storage y to a computer's memory for subsequent execution." .

:manages a owl:ObjectProperty ;
    rdfs:label "manages" ;
    skos:altLabel "oversees",
        "supervises" ;
    rdfs:subPropertyOf :associated-with ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/02447914-v> ;
    :definition "x manages y: The technique or agent x watches and directs the use of a digital artifact y." .

:mapped-by a owl:ObjectProperty ;
    rdfs:label "mapped-by" ;
    rdfs:subPropertyOf :associated-with ;
    owl:inverseOf :maps .

:maps a owl:ObjectProperty ;
    rdfs:label "maps" ;
    rdfs:subPropertyOf :may-map .

:may-access a owl:ObjectProperty ;
    rdfs:label "may-access" ;
    rdfs:subPropertyOf :may-be-associated-with ;
    owl:inverseOf :may-be-accessed-by ;
    :definition "x may-access y: They entity x may access the thing y; that is, 'x accesses y' may be true." .

:may-add a owl:ObjectProperty ;
    rdfs:label "may-add" ;
    rdfs:subPropertyOf :may-be-associated-with ;
    :definition "x may-add y: They entity x may add the thing y; that is, 'x adds y' may be true." .

:may-be-accessed-by a owl:ObjectProperty ;
    rdfs:label "may-be-accessed-by" ;
    rdfs:subPropertyOf :may-be-associated-with .

:may-be-associated-with a owl:ObjectProperty ;
    rdfs:label "may-be-associated-with" ;
    rdfs:subPropertyOf :d3fend-object-property ;
    :comment "Any relationship intended to relate subjects to d3f:DigitalArtifacts is expected to be a subproperty of this object property." ;
    :definition "x may-be-associated-with y: The subject x and object y may be associated in some way." ;
    rdfs:seeAlso <http://wordnet-rdf.princeton.edu/id/13804981-n> .

:may-be-contained-by a owl:ObjectProperty,
        owl:TransitiveProperty ;
    rdfs:label "may-be-contained-by" ;
    rdfs:subPropertyOf :may-be-associated-with ;
    owl:inverseOf :may-contain .

:may-be-created-by a owl:ObjectProperty ;
    rdfs:label "may-be-created-by" ;
    rdfs:subPropertyOf :may-be-associated-with ;
    owl:inverseOf :may-create .

:may-be-deceived-by a owl:ObjectProperty ;
    rdfs:label "may-be-deceived-by" ;
    rdfs:subPropertyOf :attack-may-be-countered-by ;
    owl:inverseOf :may-deceive ;
    :pref-label "may be deceived by" .

:may-be-detected-by a owl:ObjectProperty ;
    rdfs:label "may-be-detected-by" ;
    rdfs:subPropertyOf :attack-may-be-countered-by ;
    owl:inverseOf :may-detect ;
    :pref-label "may be detected by" .

:may-be-evicted-by a owl:ObjectProperty ;
    rdfs:label "may-be-evicted-by" ;
    rdfs:subPropertyOf :attack-may-be-countered-by ;
    owl:inverseOf :may-evict ;
    :pref-label "may be evicted by" .

:may-be-hardened-against-by a owl:ObjectProperty ;
    rdfs:label "may-be-hardened-against-by" ;
    rdfs:subPropertyOf :attack-may-be-countered-by ;
    owl:inverseOf :may-harden ;
    :pref-label "may be hardened against by" .

:may-be-invoked-by a owl:ObjectProperty ;
    rdfs:label "may-be-invoked-by" ;
    rdfs:subPropertyOf :may-be-associated-with ;
    owl:inverseOf :may-invoke .

:may-be-isolated-by a owl:ObjectProperty ;
    rdfs:label "may-be-isolated-by" ;
    rdfs:subPropertyOf :attack-may-be-countered-by ;
    owl:inverseOf :may-isolate ;
    :pref-label "may be isolated by" .

:may-be-modified-by a owl:ObjectProperty ;
    rdfs:label "may-be-modified-by" ;
    rdfs:subPropertyOf :may-be-associated-with ;
    owl:inverseOf :may-modify .

:may-be-tactically-associated-with a owl:ObjectProperty ;
    rdfs:label "may-be-tactically-associated-with" ;
    rdfs:subPropertyOf :may-be-associated-with ;
    rdfs:domain :DefensiveTechnique ;
    rdfs:range :OffensiveTechnique ;
    :comment "Most/all of these properties are (will be) realized via inference over chain property path axioms and atomic assertions. Promote this to regular comment once definitions no longer in comments." ;
    :definition "x may-be-tactically-associated-with y: the defensive technique x may be a tactic that counters offensive technique y." ;
    :todo "Needs name change... With the right name change to better capture definition can keep this definition" .

:may-be-weakness-of a owl:ObjectProperty ;
    rdfs:subPropertyOf :may-be-associated-with ;
    rdfs:domain :Weakness ;
    rdfs:range :Artifact .

:may-contain a owl:ObjectProperty,
        owl:TransitiveProperty ;
    rdfs:label "may-contain" ;
    rdfs:subPropertyOf :may-be-associated-with ;
    :definition "to potentially have as contents or constituent parts; comprise; include." .

:may-counter a owl:ObjectProperty ;
    rdfs:label "may-counter" ;
    rdfs:subPropertyOf :may-be-associated-with .

:may-counter-attack a owl:ObjectProperty ;
    rdfs:label "may-counter-attack" ;
    rdfs:subPropertyOf :may-be-tactically-associated-with .

:may-create a owl:ObjectProperty ;
    rdfs:label "may-create" ;
    rdfs:subPropertyOf :may-be-associated-with ;
    :definition "x may-create y: They entity x may create the entity y; that is, 'x creates y' may be true." .

:may-deceive a owl:ObjectProperty ;
    rdfs:label "may-deceive" ;
    rdfs:subPropertyOf :may-counter-attack ;
    :pref-label "may deceive" .

:may-detect a owl:ObjectProperty ;
    rdfs:label "may-detect" ;
    rdfs:subPropertyOf :may-counter-attack ;
    :pref-label "may detect" .

:may-disable a owl:ObjectProperty ;
    rdfs:label "may-disable" ;
    rdfs:subPropertyOf :may-evict .

:may-evaluate a owl:ObjectProperty ;
    rdfs:subPropertyOf :may-be-associated-with .

:may-evict a owl:ObjectProperty ;
    rdfs:label "may-evict" ;
    rdfs:subPropertyOf :may-counter,
        :may-counter-attack ;
    :pref-label "may evict" .

:may-execute a owl:ObjectProperty ;
    rdfs:label "may-execute" ;
    rdfs:subPropertyOf :may-be-associated-with ;
    :definition "x may execute y: The subject x might take the action of carrying out (executing) y, which is a single software module, function, or instruction." .

:may-harden a owl:ObjectProperty ;
    rdfs:label "may-harden" ;
    rdfs:subPropertyOf :may-counter-attack ;
    :pref-label "may harden" ;
    :todo "Need to identify verbs for hardening, don't want modifies o modified-by patterns as these are evictions." .

:may-have-weakness a owl:ObjectProperty ;
    rdfs:subPropertyOf :may-be-associated-with ;
    rdfs:domain :Artifact ;
    rdfs:range :Weakness .

:may-interpret a owl:ObjectProperty ;
    rdfs:label "may-interpret" ;
    rdfs:subPropertyOf :may-be-associated-with ;
    :definition "x may-interpret y: They entity x may interpret the thing y; that is, 'x interprets y' may be true." .

:may-invoke a owl:ObjectProperty ;
    rdfs:label "may-invoke" ;
    rdfs:subPropertyOf :may-be-associated-with ;
    :definition "x may-invoke y: They entity x may invoke the thing y; that is, 'x invokes y' may be true." .

:may-isolate a owl:ObjectProperty ;
    rdfs:label "may-isolate" ;
    rdfs:subPropertyOf :may-counter-attack ;
    :pref-label "may isolate" ;
    :todo "There are some d3f isolation techniques H b P I and E T and M A C that use isolates directly which is different sense that this tactial isolates/may-isolates." .

:may-map a owl:ObjectProperty ;
    rdfs:label "may-map" ;
    rdfs:subPropertyOf :may-be-associated-with .

:may-modify a owl:ObjectProperty ;
    rdfs:label "may-modify" ;
    rdfs:subPropertyOf :may-be-associated-with ;
    :definition "x may-modify y: They entity x may modify the thing y; that is, 'x modifies y' may be true." .

:may-produce a owl:ObjectProperty ;
    rdfs:label "may-produce" ;
    rdfs:subPropertyOf :may-be-associated-with ;
    :definition "x may-produce y: They entity x may produce the thing y; that is, 'x produces y' may be true." .

:may-query a owl:ObjectProperty ;
    rdfs:label "may-query" ;
    rdfs:subPropertyOf :may-be-associated-with .

:may-run a owl:ObjectProperty ;
    rdfs:label "may-run" ;
    rdfs:subPropertyOf :may-be-associated-with ;
    :definition "x may-run y: They entity x may run the thing y; that is, 'x runs y' may be true." .

:may-transfer a owl:ObjectProperty ;
    rdfs:label "may-transfer" ;
    rdfs:subPropertyOf :may-be-associated-with ;
    :definition "x may-transfer y: They entity x might send the thing y; that is, 'x transfers y' may be true." .

:member-of a owl:ObjectProperty ;
    rdfs:label "member-of" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property .

:modified-by a owl:ObjectProperty ;
    rdfs:label "modified-by" ;
    rdfs:subPropertyOf :associated-with,
        :may-be-modified-by ;
    owl:inverseOf :modifies .

:modifies a owl:ObjectProperty ;
    rdfs:label "modifies" ;
    skos:altLabel "alters" ;
    rdfs:subPropertyOf :accesses,
        :associated-with,
        :may-modify ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/00126072-v> ;
    :definition "x modifies y: A technique or agent x causes a digital object y to change; become different; or undertake a transformation.  Afterwards, the data or state held by a digital object is changed." .

:modifies-part a owl:ObjectProperty ;
    rdfs:label "modifies-part" ;
    rdfs:subPropertyOf :may-modify ;
    owl:propertyChainAxiom (
            :modifies
            :contains ) ;
    :definition "x modifies-part y: The entity x modifies a part of y.  [Note: This is a rolification property for the rule 'if one modifies a part of a whole, they modify the whole.'  Reasoning for this and similar semantics to come are under evaluation and not part of current d3fend inferences.]" .

:monitors a owl:ObjectProperty ;
    rdfs:label "monitors" ;
    rdfs:subPropertyOf :associated-with,
        :detects ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/02167732-v> ;
    :definition "x monitors y: The technique or agent x keep tabs on; keeps an eye on; or keep the digital artifact y under surveillance." .

:narrower a owl:ObjectProperty ;
    rdfs:label "narrower" ;
    rdfs:subPropertyOf :semantic-relation .

:narrower-transitive a owl:ObjectProperty ;
    rdfs:label "narrower-transitive" ;
    rdfs:subPropertyOf :semantic-relation .

:neutralizes a owl:ObjectProperty ;
    rdfs:label "neutralizes" ;
    rdfs:subPropertyOf :associated-with,
        :hardens ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/00471015-v> ;
    :definition "x neutralizes y: The technique x makes the execution of actions of y ineffective by preventing or counterbalancing the effect of y." .

:next a owl:ObjectProperty ;
    rdfs:subPropertyOf :d3fend-process-object-property .

:obfuscates a owl:ObjectProperty ;
    rdfs:label "obfuscates" ;
    rdfs:subPropertyOf :evicts,
        :modifies ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/00942245-v> ;
    :definition "x obfuscates y: The technique x makes the digital artifact y unclear or obscure.  Typically obfuscation is a way to hide a digital artifact from discovery, use, or both." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Obfuscation_(software)> .

:originates-from a owl:ObjectProperty ;
    rdfs:label "originates-from" ;
    rdfs:subPropertyOf :associated-with ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/02749218-v> ;
    :definition "x originates-from y: The digital event or artifact x began its network transit from a physical location y." .

:owns a owl:ObjectProperty ;
    rdfs:label "owns" ;
    skos:altLabel "possesses" ;
    rdfs:subPropertyOf :associated-with ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/02209474-v> ;
    :definition "x owns y: The subject x has ownership or possession of some object y." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Ownership> .

:process-ancestor a owl:ObjectProperty,
        owl:TransitiveProperty ;
    rdfs:label "process-ancestor" ;
    rdfs:subPropertyOf :process-property ;
    :definition "x process-ancestor y: The process y is a process ancestor of process x, indicating one or more process creation events were conducted were started at process y and subsequently created process x." .

:process-image-path a owl:ObjectProperty ;
    rdfs:label "process-image-path" ;
    skos:altLabel "processImagePath" ;
    rdfs:subPropertyOf :process-property ;
    :definition "x process-image-path y: The filepath y is the process image path for the process x, indicating the path to the resource from which the process's image was loaded." .

:process-parent a owl:ObjectProperty ;
    rdfs:label "process-parent" ;
    skos:altLabel "processParent" ;
    rdfs:subPropertyOf :process-ancestor ;
    :definition "x process-parent y: The process y created the process x (directly) with a create process event." .

:process-property a owl:ObjectProperty ;
    rdfs:label "process-property" ;
    rdfs:subPropertyOf :associated-with ;
    :definition "x process-property y: Process x has the a process-property y.  This is generalization for specific process object properties." .

:process-user a owl:ObjectProperty ;
    rdfs:label "process-user" ;
    skos:altLabel "processUser" ;
    rdfs:subPropertyOf :process-property ;
    :definition "x process-user y: The process x has been executed by the user y." .

:produced-by a owl:ObjectProperty ;
    rdfs:label "produced-by" ;
    rdfs:subPropertyOf :associated-with ;
    owl:inverseOf :produces .

:producer a owl:ObjectProperty ;
    rdfs:label "producer" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property ;
    owl:inverseOf :produces .

:produces a owl:ObjectProperty ;
    rdfs:label "produces" ;
    skos:altLabel "outputs" ;
    rdfs:subPropertyOf :associated-with,
        :d3fend-catalog-object-property,
        :may-produce ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/01625832-v> ;
    :definition "x produces y: The subject entity x or process produces a data object y, which may be discrete digital object or a stream (e.g., a stream such as network traffic.)" ;
    rdfs:seeAlso "creates" ;
    :todo "Make definition of produces more generic to match sense of Product Developer produces Product (so generalize to any object really, not just computery digital stuff.)" .

:provider a owl:ObjectProperty ;
    rdfs:label "provider" ;
    rdfs:subPropertyOf :associated-with ;
    rdfs:isDefinedBy "http://wordnet-rdf.princeton.edu/id/05901034-n" ;
    :definition "x provider y: A provider y is an entity that supplies a service, system, or data resources to a dependent entity x." ;
    rdfs:seeAlso "http://wordnet-rdf.princeton.edu/id/10696710-n" .

:provides a owl:ObjectProperty ;
    rdfs:label "provides" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property .

:publisher a owl:ObjectProperty ;
    rdfs:label "publisher" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property ;
    owl:inverseOf :publishes .

:publishes a owl:ObjectProperty ;
    rdfs:label "publishes" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property .

:queries a owl:ObjectProperty ;
    rdfs:label "queries" ;
    rdfs:subPropertyOf :associated-with,
        :may-query .

:reads a owl:ObjectProperty ;
    rdfs:label "reads" ;
    rdfs:subPropertyOf :accesses ;
    :definition "x reads y: The subject x takes the action of reading from a digital source y to acquire data and placing it into volatile memory for processing." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Reading_(computer)>,
        <http://wordnet-rdf.princeton.edu/id/00629157-v> .

:recorded-in a owl:ObjectProperty ;
    rdfs:label "recorded-in" ;
    rdfs:subPropertyOf :associated-with .

:records a owl:ObjectProperty ;
    rdfs:label "records" ;
    rdfs:subPropertyOf :associated-with ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/01002259-v> ;
    :definition "x records y: The digital artifact x makes a record of events y; set down in permanent form." ;
    rdfs:seeAlso <http://wordnet-rdf.princeton.edu/id/01003181-v> ;
    :todo "a log doesn't summarize an event, it records it; it logs it in the sense of holding the records; it contains it in sense of a record in a historical list of records, maybe---but if we model loggers we might want to reserve 'log' to say they 'log' the event.  The chronological order of the log events (log event records to be exact) would suggest 'chronicles' but that verb might be too twee for first D3FEND release." .

:regenerates a owl:ObjectProperty ;
    rdfs:label "regenerates" ;
    rdfs:subPropertyOf :associated-with,
        :hardens ;
    rdfs:isDefinedBy "http://wordnet-rdf.princeton.edu/id/00167632-v" ;
    :definition "x regenerates y: The entity x discards the current digital artifact y and creates a new version that serves the same function." .

:related a owl:ObjectProperty ;
    rdfs:label "related" ;
    rdfs:subPropertyOf :semantic-relation ;
    rdfs:isDefinedBy skos:related ;
    :definition "x related y: x has a symmetric associative relation to y." .

:restricted-by a owl:ObjectProperty ;
    rdfs:label "restricted-by" ;
    rdfs:subPropertyOf :associated-with ;
    owl:inverseOf :restricts .

:restricts a owl:ObjectProperty ;
    rdfs:label "restricts" ;
    rdfs:subPropertyOf :associated-with ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/00234091-v> ;
    :definition "x restricts y: An entity x bounds the use of entity y." .

:runs a owl:ObjectProperty ;
    rdfs:label "runs" ;
    rdfs:subPropertyOf :associated-with,
        :may-run ;
    :definition "x runs y: To carry out a process or program y, as on a computer or a machine x; where y may be a large software assembly or a specific module or instruction.  Examples: \"run a new program on the Mac\"; \"the computer runs the application software\"." ;
    rdfs:seeAlso <http://wordnet-rdf.princeton.edu/id/02569242-v> .

:seller a owl:ObjectProperty ;
    rdfs:label "seller" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property ;
    owl:inverseOf :sells .

:sells a owl:ObjectProperty ;
    rdfs:label "sells" ;
    rdfs:subPropertyOf :d3fend-catalog-object-property .

:semantic-relation a owl:ObjectProperty ;
    rdfs:label "semantic-relation" ;
    rdfs:subPropertyOf :associated-with .

:spoofs a owl:ObjectProperty ;
    rdfs:label "spoofs" ;
    rdfs:subPropertyOf :associated-with,
        :deceives-with ;
    :definition "x spoofs y: The technique x creates a fake instance of a digital artifact y; that is, y is a decoy, fake, or counterfeit." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Spoof>,
        <http://wordnet-rdf.princeton.edu/id/03323383-n> .

:start a owl:ObjectProperty ;
    rdfs:subPropertyOf :d3fend-process-object-property .

:strengthens a owl:ObjectProperty ;
    rdfs:label "strengthens" ;
    rdfs:subPropertyOf :associated-with,
        :hardens ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/00165779-v> ;
    :definition "x strengthens y: The technique x make digital artifact y resistant (to harm or misuse.)" .

:submitter a owl:ObjectProperty ;
    rdfs:label "submitter" ;
    rdfs:subPropertyOf :contributor .

:summarizes a owl:ObjectProperty ;
    rdfs:label "summarizes" ;
    rdfs:subPropertyOf :associated-with ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/02758570-v> ;
    :definition "x summarizes y: The sensor x summarizes a set y of events concerning digital artifacts over time" .

:suspends a owl:ObjectProperty ;
    rdfs:label "suspends" ;
    rdfs:subPropertyOf :evicts ;
    rdfs:isDefinedBy "http://wordnet-rdf.princeton.edu/id/00543748-v" ;
    :definition "x suspends y: The agent or technique x pauses entity y." .

:terminates a owl:ObjectProperty ;
    rdfs:label "terminates" ;
    rdfs:subPropertyOf :associated-with,
        :evicts ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/00353480-v> ;
    :definition "x terminates y: The technique x brings to an end or halt to some activity y." ;
    rdfs:seeAlso <http://wordnet-rdf.princeton.edu/id/00354493-v> ;
    :synonym "aborts" .

:unmounts a owl:ObjectProperty ;
    rdfs:label "unmounts" ;
    rdfs:subPropertyOf :associated-with ;
    :definition "x unmounts y: An operation x removes the access via computer system's file system the availability of files and directories on a storage artifact y.  Unmounts reverse or undo prior mount operations." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Mount_(computing)> .

:updates a owl:ObjectProperty ;
    rdfs:label "updates" ;
    rdfs:subPropertyOf :hardens,
        :modifies ;
    :definition "x updates y: The technique x updates the software for component y." .

:use-limits a owl:ObjectProperty ;
    rdfs:label "use-limits" ;
    rdfs:subPropertyOf :limits ;
    :definition "x use-limits y: An entity x specifies a designated number of uses beyond which some entity y cannot function or must be terminated." ;
    rdfs:seeAlso <http://wordnet-rdf.princeton.edu/id/13781154-n> .

:used-by a owl:ObjectProperty ;
    rdfs:label "used-by" ;
    rdfs:subPropertyOf :associated-with ;
    owl:inverseOf :uses ;
    :definition "x used-by y: is inverse of y uses x." .

:uses a owl:ObjectProperty ;
    rdfs:label "uses" ;
    rdfs:subPropertyOf :associated-with ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/01161188-v> ;
    :definition "x uses y: An entity x puts into service a resource or implement y; makes y work or employ for a particular purpose or for its inherent or natural purpose." .

:validates a owl:ObjectProperty ;
    rdfs:label "validates" ;
    rdfs:subPropertyOf :associated-with,
        :hardens ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/00669142-v> ;
    :definition "x validates y: The technique x proves the digital artifact y is valid; that is, x shows or confirms the validity of y." .

:validator a owl:ObjectProperty ;
    rdfs:label "validator" ;
    rdfs:subPropertyOf :contributor .

:verifies a owl:ObjectProperty ;
    rdfs:label "verifies" ;
    rdfs:subPropertyOf :analyzes,
        :associated-with ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/00666401-v> ;
    :definition "x verifies y: A technique x confirms the truth of a digital artifact y." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Formal_verification>,
        <http://dbpedia.org/resource/Runtime_verification>,
        <http://wordnet-rdf.princeton.edu/id/00665271-v> ;
    :todo "verifies and validates both share common parent confirms ala Wordnet (they are siblings). Might be useful parent, but leave out until it is clear it is helpful.  Wordnet 'checks' might also be in play here, though in our world spec of verifies as in http://wordnet-rdf.princeton.edu/id/00665271-v, or is that checks more like validates?  Eschewing altLabel 'checks' for either for now." .

:weakness-of a owl:ObjectProperty ;
    rdfs:subPropertyOf :may-be-weakness-of .

:writes a owl:ObjectProperty ;
    rdfs:label "writes" ;
    rdfs:subPropertyOf :accesses ;
    :definition "x writes y: The subject x takes the action of writing to a digital artifact y to store data and placing it into persistent memory for later reference." ;
    rdfs:seeAlso <http://wordnet-rdf.princeton.edu/id/01000931-v> .

### Annotation Properties

:attack-id a owl:AnnotationProperty ;
    rdfs:label "attack-id" ;
    rdfs:subPropertyOf :attack-kb-annotation ;
    rdfs:domain :OffensiveTechnique ;
    rdfs:range xsd:string ;
    :definition "x attack-id y: The offensive technique x has the att&ck unique id of y." ;
    :todo "Drop as annotation and merge any as attack-technique-id data property. Reason: The unique id of a technique may be needed even for OWL 2 DL reasoning as it is the surrogate identity key (and the primary key) for all ATT&CK techniques." .

:attack-kb-annotation a owl:AnnotationProperty ;
    rdfs:label "attack-kb-annotation" ;
    rdfs:subPropertyOf :d3fend-annotation ;
    rdfs:domain :OffensiveTechnique ;
    :definition "x attack-kb-annotation y: The offensive technique x has the kb annotation of y." .

:comment a owl:AnnotationProperty ;
    rdfs:label "comment" ;
    rdfs:subPropertyOf :d3fend-private-annotation ;
    :definition "x comment y: The d3fend object x a d3fend team specific comment y.  Not for use external to the MITRE development team." .

:cwe-id a owl:AnnotationProperty ;
    rdfs:subPropertyOf :cwe-kb-annotation .

:cwe-kb-annotation a owl:AnnotationProperty ;
    rdfs:subPropertyOf :d3fend-annotation .

:d3fend-annotation a owl:AnnotationProperty ;
    rdfs:label "d3fend-annotation" ;
    :definition "x d3fend-annotation y: The d3fend object x has the annotation y." .

:d3fend-catalog-annotation-property a owl:AnnotationProperty ;
    rdfs:label "d3fend-catalog-annotation-property" ;
    skos:altLabel "d3fend-vendor-registry-annotation-property" ;
    rdfs:subPropertyOf :d3fend-annotation .

:d3fend-display-annotation a owl:AnnotationProperty ;
    rdfs:subPropertyOf :d3fend-annotation .

:d3fend-kb-annotation-property a owl:AnnotationProperty ;
    rdfs:label "d3fend-kb-annotation-property" ;
    rdfs:subPropertyOf :d3fend-annotation ;
    :definition "x d3fend-kb-annotation-property y: The entity x had the d3fend kb annotation y." ;
    :todo "Move all subproperties under d3fend-kb-data-property and drop this (d3fend-kb-annotation-property) property definition." .

:d3fend-kb-reference-annotation a owl:AnnotationProperty ;
    rdfs:label "d3fend-kb-reference-annotation" ;
    rdfs:subPropertyOf :d3fend-kb-annotation-property ;
    rdfs:domain :Reference ;
    rdfs:range xsd:string ;
    :definition "x d3fend-kb-data-property y: The reference x has the data property y." ;
    :todo "Move subproperties under d3fend-kb-data-property and rename this d3fend-kb-reference-property definition." .

:d3fend-private-annotation a owl:AnnotationProperty ;
    rdfs:label "d3fend-private-annotation" ;
    rdfs:subPropertyOf :d3fend-annotation ;
    :definition "x d3fend-private-annotation: The d3fend object x has the internal comment or tracking property y.  Not for use external to the MITRE development team." .

dcterms:description a owl:AnnotationProperty ;
    rdfs:label "description" .

dcterms:license a owl:AnnotationProperty ;
    rdfs:label "license" .

dcterms:title a owl:AnnotationProperty ;
    rdfs:label "title" .

:definition a owl:AnnotationProperty ;
    rdfs:label "comment",
        "definition" ;
    rdfs:subPropertyOf :d3fend-annotation ;
    rdfs:isDefinedBy <http://purl.obolibrary.org/obo/IAO_0000115> ;
    :comment "Intended d3fend equivalent to http://purl.obolibrary.org/obo/IAO_0000115; will take over from use of rdfs:comment to hold definition." ;
    :definition "x definition y: The d3fend object x has the definition y." ;
    :todo "Will port rdfs:comment entries that have been definitions to d3f:definition to free up comments for non-definitional expansions and commentary." .

:description a owl:AnnotationProperty ;
    rdfs:label "description"@en ;
    rdfs:subPropertyOf :d3fend-catalog-annotation-property ;
    rdfs:isDefinedBy "http://wordnet-rdf.princeton.edu/id/06737512-n"^^xsd:anyURI ;
    :definition "A statement that represents something in words." .

:display-baseurl a owl:AnnotationProperty ;
    rdfs:subPropertyOf :d3fend-display-annotation ;
    :definition "A base string to use as prefix to create a full URL for an entity. The baseurl must end in a forward slash: /" .

:display-order a owl:AnnotationProperty ;
    rdfs:label "display-order" ;
    rdfs:subPropertyOf :d3fend-display-annotation ;
    :definition "x display-order y: An object x should be displayed in ordinal position y when placed or listed in a d3fend display with other objects of its kind." ;
    :todo "This should be an annotation property." .

:display-priority a owl:AnnotationProperty ;
    rdfs:subPropertyOf :d3fend-display-annotation .

:draft a owl:AnnotationProperty ;
    rdfs:label "draft" ;
    rdfs:subPropertyOf :d3fend-private-annotation .

:kb-abstract a owl:AnnotationProperty ;
    rdfs:label "kb-abstract" ;
    rdfs:subPropertyOf :d3fend-kb-reference-annotation ;
    rdfs:domain :Reference ;
    rdfs:range xsd:string ;
    :definition "x kb-abstract y: The reference x has the abstract y." .

:kb-article a owl:AnnotationProperty ;
    rdfs:label "kb-article" ;
    rdfs:subPropertyOf :d3fend-kb-reference-annotation ;
    rdfs:domain :Technique ;
    rdfs:range xsd:string ;
    :definition "The technique x has the kb-article y, where y is written in Markdown." ;
    :todo "make a d3fend-kb-data-property" .

:kb-author a owl:AnnotationProperty ;
    rdfs:label "kb-author" ;
    rdfs:subPropertyOf :d3fend-kb-reference-annotation ;
    rdfs:domain :Reference ;
    rdfs:range xsd:string ;
    :definition "x kb-author y: The reference x has some author y." ;
    :todo "Eventually would be best to resolve these to Person instances in KB.  This might be kept as kb-author-string.  Also, we might choose to drop kb- prefix on many of these.",
        "make a d3fend-kb-data-property" .

:kb-mitre-analysis a owl:AnnotationProperty ;
    rdfs:label "kb-mitre-analysis" ;
    rdfs:subPropertyOf :d3fend-kb-annotation-property ;
    rdfs:domain :Reference ;
    rdfs:range xsd:string ;
    :definition "x kb-mitre-analysis y: The reference x has the mitre d3fend analysis y." ;
    :todo "make a d3fend-kb-data-property" .

:kb-organization a owl:AnnotationProperty ;
    rdfs:label "kb-organization" ;
    rdfs:subPropertyOf :d3fend-kb-annotation-property ;
    :definition "x kb-organization y: The reference x was created or owned by the organization y." ;
    :todo "Eventually would be best to resolve these to Organization instances in KB.  This might be kept as kb-organization-string.  Also, we might choose to drop kb- prefix on many of these.",
        "make a d3fend-kb-data-property" .

:label a owl:AnnotationProperty ;
    rdfs:label "label"@en ;
    rdfs:subPropertyOf rdfs:label .

:pref-label a owl:AnnotationProperty ;
    rdfs:label "pref-label" ;
    rdfs:subPropertyOf :d3fend-annotation ;
    :definition "x pref-label y: The preferred display value for x is y in d3fend tools." .

rdfs:isDefinedBy a owl:AnnotationProperty ;
    rdfs:label "isDefinedBy" .

rdfs:label a owl:AnnotationProperty .

rdfs:seeAlso a owl:AnnotationProperty .

:release-date a owl:AnnotationProperty ;
    rdfs:label "release-date" ;
    rdfs:subPropertyOf :d3fend-annotation,
        owl:versionInfo ;
    :definition "x release-date y: The object x has the release-date y." ;
    :todo "remove and place info in versionInfo on ontology annotations header" .

skos:altLabel a owl:AnnotationProperty ;
    rdfs:label "altLabel"@en ;
    rdfs:isDefinedBy skos: .

:synonym a owl:AnnotationProperty ;
    rdfs:label "synonym" ;
    rdfs:subPropertyOf :d3fend-annotation ;
    :definition "an equivalent term." .

:todo a owl:AnnotationProperty ;
    rdfs:label "todo" ;
    rdfs:subPropertyOf :d3fend-private-annotation ;
    :definition "x todo y: The d3fend object x has a todo annotation y specific to the d3fend team. These may serve as a guide to implementing a low-level change; before work commences should be reflected in the tasks/issues.  Not for use external to the MITRE development team." .

### Data Properties

:archived-at a owl:DatatypeProperty ;
    rdfs:label "archived-at"@en ;
    rdfs:subPropertyOf :d3fend-catalog-data-property ;
    rdfs:range xsd:anyURI ;
    :comment "schema.org's archivedAt vice schema.org notion of url, previously has-link" .

:attack-kb-data-property a owl:DatatypeProperty ;
    rdfs:label "attack-kb-data-property" ;
    skos:altLabel "attack-kb-property" ;
    rdfs:subPropertyOf owl:topDataProperty .

:available a owl:DatatypeProperty ;
    rdfs:label "date available"@en ;
    rdfs:subPropertyOf :date ;
    rdfs:range xsd:dateTime ;
    :comment "d3f:available casts the dcterms:available rdf Property as a DatatypeProperty." ;
    :definition "Date that the resource became or will become available." .

:capec-id a owl:DatatypeProperty ;
    rdfs:label "capec-id" ;
    rdfs:subPropertyOf :d3fend-kb-data-property ;
    :definition "Unique identifier for a CAPEC technique, i.e. a common attack pattern identified by the pattern CAPEC-[number]." .

:comments a owl:DatatypeProperty,
        owl:FunctionalProperty ;
    rdfs:label "comments" ;
    rdfs:subPropertyOf :d3fend-catalog-data-property ;
    rdfs:domain :CapabilityFeatureClaim ;
    rdfs:range xsd:string ;
    :definition "x comments y: x claim has provider comments y." .

:confidence a owl:DatatypeProperty ;
    rdfs:label "confidence" ;
    rdfs:subPropertyOf :d3fend-catalog-data-property .

:control-name a owl:DatatypeProperty ;
    rdfs:label "control-name" ;
    rdfs:subPropertyOf :d3fend-external-control-data-property ;
    :definition "The control (or control enhancement) name." .

:created a owl:DatatypeProperty ;
    rdfs:label "date created"@en ;
    rdfs:subPropertyOf :date ;
    rdfs:range xsd:dateTime ;
    :comment "d3f:created casts dcterms:created rdf Property as a DatatypeProperty." ;
    :definition "Date of creation of the resource." .

:d3fend-artifact-data-property a owl:DatatypeProperty ;
    rdfs:label "d3fend-artifact-data-property" ;
    rdfs:subPropertyOf :d3fend-data-property ;
    rdfs:domain :DigitalArtifact ;
    :definition "x d3fend-artifact-data-property y: The artifact x has the data property y." .

:d3fend-catalog-data-property a owl:DatatypeProperty ;
    rdfs:label "d3fend-catalog-data-property" ;
    skos:altLabel "d3fend-vendor-registry-data-property"@en ;
    rdfs:subPropertyOf :d3fend-data-property .

:d3fend-comment a owl:DatatypeProperty ;
    rdfs:label "d3fend-comment" ;
    rdfs:subPropertyOf :d3fend-kb-data-property ;
    :definition "x d3fend-comment y: The entity x has an D3FEND team written a public note about entity y." .

:d3fend-data-property a owl:DatatypeProperty ;
    rdfs:label "d3fend-data-property" ;
    rdfs:subPropertyOf owl:topDataProperty .

:d3fend-display-property a owl:DatatypeProperty ;
    rdfs:label "d3fend-display-property" ;
    rdfs:subPropertyOf :d3fend-data-property ;
    :definition "x d3fend-display-property y: An object x should be displayed using the display property y, when it applies." ;
    :todo "This should be an annotation property." .

:d3fend-external-control-data-property a owl:DatatypeProperty ;
    rdfs:label "d3fend-external-control-data-property" ;
    rdfs:subPropertyOf :d3fend-data-property .

:d3fend-id a owl:DatatypeProperty ;
    rdfs:label "d3fend-id" ;
    rdfs:subPropertyOf :d3fend-kb-data-property ;
    :definition "Unique identifier for a D3FEND technique. D3-[Acronym]." .

:d3fend-kb-data-property a owl:DatatypeProperty ;
    rdfs:label "d3fend-kb-data-property" ;
    rdfs:subPropertyOf :d3fend-data-property ;
    :definition "x d3fend-kb-data-property y: The d3fend knowledge base object x has a data property y; e.g., a string capturing a particular aspect or section of a knowledge base article." .

:date a owl:DatatypeProperty ;
    rdfs:label "date"@en ;
    rdfs:subPropertyOf :d3fend-data-property ;
    rdfs:range xsd:dateTime ;
    :comment "d3f:date casts the dcterms:date rdf Property as a DatatypeProperty." ;
    :definition "A point or period of time associated with an event in the lifecycle of the resource." ;
    rdfs:seeAlso "https://www.w3.org/wiki/Good_Ontologies#The_Dublin_Core_.28DC.29_ontology"^^xsd:anyURI .

:expectation-rating a owl:DatatypeProperty ;
    rdfs:subPropertyOf :d3fend-catalog-data-property .

:has-link a owl:DatatypeProperty ;
    rdfs:label "has-link" ;
    rdfs:subPropertyOf :d3fend-kb-data-property ;
    rdfs:range xsd:anyURI ;
    :definition "x has-link y: The d3fend analysis x has the link y." .

:identifier a owl:DatatypeProperty ;
    rdfs:label "identifier"@en ;
    rdfs:subPropertyOf :d3fend-catalog-data-property ;
    rdfs:range xsd:string .

:issued a owl:DatatypeProperty ;
    rdfs:label "date issued"@en ;
    rdfs:subPropertyOf :date ;
    rdfs:range xsd:dateTime ;
    :comment "d3f:issued casts the dcterms:issued rdf Property as a DatatypeProperty." ;
    :definition "Date of formal issuance of the resource." .

:kb-reference-title a owl:DatatypeProperty ;
    rdfs:label "kb-reference-title" ;
    rdfs:subPropertyOf :d3fend-kb-data-property ;
    rdfs:domain :Reference ;
    rdfs:range xsd:string ;
    :definition "x kb-reference-title y: The d3fend knowledge base reference x has the reference title string y." .

:modified a owl:DatatypeProperty ;
    rdfs:label "date modified"@en ;
    rdfs:subPropertyOf :date ;
    rdfs:range xsd:dateTime ;
    :comment "d3f:modified casts the dcterms:modified rdf Property as a DatatypeProperty." ;
    :definition "Date on which the resource was changed." .

:name a owl:DatatypeProperty ;
    rdfs:label "name"@en ;
    rdfs:subPropertyOf :d3fend-catalog-data-property .

:operating-system a owl:DatatypeProperty ;
    rdfs:label "operating-system"@en ;
    rdfs:subPropertyOf :d3fend-catalog-data-property ;
    rdfs:domain :CapabilityImplementation ;
    rdfs:range xsd:string ;
    :definition "x operating-system y: The product x is supported on operating system y." .

:process-command-line-arguments a owl:DatatypeProperty ;
    rdfs:label "process-command-line-arguments" ;
    rdfs:subPropertyOf :process-data-property ;
    :definition "x process-command-line-arguments y: The process x has the process command line arguments data y." .

:process-data-property a owl:DatatypeProperty ;
    rdfs:label "process-data-property" ;
    rdfs:subPropertyOf :d3fend-artifact-data-property ;
    :definition "x process-data-property y: The process x has the data property y." .

:process-environmental-variables a owl:DatatypeProperty ;
    rdfs:label "process-environmental-variables" ;
    skos:altLabel "process-environmental-variable" ;
    rdfs:subPropertyOf :process-data-property ;
    :definition "x process-environment-variables y: The process x has the process environmental variables data y." .

:process-identifier a owl:DatatypeProperty ;
    rdfs:label "process-identifier" ;
    rdfs:subPropertyOf :process-data-property ;
    :definition "x process-identifier y: The process x has the process identifier y." .

:process-security-context a owl:DatatypeProperty ;
    rdfs:label "process-security-context" ;
    rdfs:subPropertyOf :process-data-property ;
    rdfs:domain :Process ;
    :definition "x process-security-context y: The process x has the process security context data y." .

:published a owl:DatatypeProperty ;
    rdfs:label "date published"@en ;
    rdfs:subPropertyOf :date ;
    rdfs:range xsd:dateTime ;
    :definition "Date of publication of the resource." .

:rating a owl:DatatypeProperty,
        owl:FunctionalProperty ;
    rdfs:label "rating" ;
    rdfs:subPropertyOf :d3fend-catalog-data-property .

:stage a owl:DatatypeProperty,
        owl:FunctionalProperty ;
    rdfs:label "stage" ;
    rdfs:subPropertyOf :d3fend-catalog-data-property .

:text a owl:DatatypeProperty ;
    rdfs:label "text"@en ;
    rdfs:subPropertyOf :d3fend-catalog-data-property ;
    :definition "The text of the document (i.e., terms of license.)" .

:title a owl:DatatypeProperty ;
    rdfs:label "title"@en ;
    rdfs:subPropertyOf :d3fend-catalog-data-property ;
    rdfs:range xsd:string ;
    :comment "d3f:title casts dcterms:title rdf Property as a DatatypeProperty." ;
    :definition "A name given to the resource." .

:valid a owl:DatatypeProperty ;
    rdfs:label "date valid"@en ;
    rdfs:subPropertyOf :date ;
    rdfs:range xsd:dateTime ;
    :comment "d3f:valid casts dcterms:valid rdf Property as a DatatypeProperty." ;
    :definition "Date (often a range) of validity of a resource." .

:version a owl:DatatypeProperty,
        owl:FunctionalProperty ;
    rdfs:label "version"@en ;
    rdfs:subPropertyOf :d3fend-catalog-data-property,
        :d3fend-external-control-data-property ;
    rdfs:domain [ a owl:Class ;
            owl:unionOf (
                    :CapabilityImplementation
                    :ControlCatalog ) ] ;
    rdfs:range [ a rdfs:Datatype ;
            owl:unionOf (
                    xsd:integer
                    xsd:string ) ] ;
    :definition "x version y: The product or service x has the version y." .

:windows-registry-data-property a owl:DatatypeProperty ;
    rdfs:label "windows-registry-data-property" ;
    rdfs:subPropertyOf :d3fend-artifact-data-property ;
    :definition "x windows-registry-data-property y: The windows registry entry x has the property y." .

:windows-registry-key a owl:DatatypeProperty ;
    rdfs:label "windows-registry-key" ;
    skos:altLabel "key" ;
    rdfs:subPropertyOf :windows-registry-data-property ;
    :definition "x value y: The key-value pair x has the key y." .

:windows-registry-value a owl:DatatypeProperty ;
    rdfs:label "windows-registry-value" ;
    skos:altLabel "value" ;
    rdfs:subPropertyOf :windows-registry-data-property ;
    :definition "x value y: The key-value pair x has the data value y." .

### Classes

:AcademicArticle a owl:Class ;
    rdfs:label "Academic Article" ;
    rdfs:subClassOf :Article .

:AcademicPaperReference a owl:Class ;
    rdfs:label "Academic Paper Reference" ;
    rdfs:subClassOf :TechniqueReference ;
    :pref-label "Academic Paper" .

:AccessControlConfiguration a owl:Class ;
    rdfs:label "Access Control Configuration" ;
    rdfs:subClassOf :ConfigurationResource ;
    :definition "Information about what access permissions are granted to particular users for particular objects" ;
    rdfs:seeAlso <http://dbpedia.org/resource/Access-control_list> .

:AccessControlList a owl:Class ;
    rdfs:label "Access Control List" ;
    rdfs:subClassOf :AccessControlConfiguration,
        [ a owl:Restriction ;
            owl:onProperty :restricts ;
            owl:someValuesFrom :UserGroup ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Access-control_list> ;
    :definition "A list of permissions attached to an object." .

:AccessModeling a :OperationalActivityMapping,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Access Modeling" ;
    rdfs:subClassOf :OperationalActivityMapping,
        [ a owl:Restriction ;
            owl:onProperty :maps ;
            owl:someValuesFrom :AccessControlConfiguration ],
        [ a owl:Restriction ;
            owl:onProperty :maps ;
            owl:someValuesFrom :UserAccount ] ;
    :d3fend-id "D3-AM" ;
    :definition "Access modeling identifies and records the access permissions granted to administrators, users, groups, and systems." ;
    :kb-reference :Reference-RFC7642SystemForCrossDomainIdentityManagementDefinitionsOverviewConceptsAndRequirements .

:AccessToken a owl:Class ;
    rdfs:label "Access Token" ;
    skos:altLabel "Ticket",
        "Token" ;
    rdfs:subClassOf :Credential ;
    :definition "In computer systems, an access token contains the security credentials for a login session and identifies the user, the user's groups, the user's privileges, and, in some cases, a particular application. Typically one may be asked to enter the access token (e.g. 40 random characters) rather than the usual password (it therefore should be kept secret just like a password)." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Access_token> .

:AccountLocking a :CredentialEviction,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Account Locking" ;
    rdfs:subClassOf :CredentialEviction,
        [ a owl:Restriction ;
            owl:onProperty :disables ;
            owl:someValuesFrom :UserAccount ] ;
    :created "2020-08-05T00:00:00"^^xsd:dateTime ;
    :d3fend-id "D3-AL" ;
    :definition "The process of temporarily disabling user accounts on a system or domain." ;
    :kb-article """## How it works
Management servers with enterprise policies for account management provide the ability to enable and disable account for given rules. The rules may include specific periods of time (eg. weekend, plant shutdown, leave periods), specific user types or groups, or individual users.

## Considerations
* Local accounts caches vs centralized account management
* Single Sign-on
* Role based vs Attribute based systems

## Examples of account configuration stores
* Directory Services
* Active Directory
* RADIUS
* LDAP
* Oracle User Account Management
* JumpCloud""" ;
    :kb-reference :Reference-AccountMonitoring_ForescoutTechnologies,
        :Reference-FrameworkForNotifyingADirectoryServiceOfAuthenticationEventsProcessedOutsideTheDirectoryService_OracleInternationalCorp .

:ActiveCertificateAnalysis a :ActiveCertificateAnalysis,
        :CertificateAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Active Certificate Analysis" ;
    rdfs:subClassOf :CertificateAnalysis ;
    :created "2020-08-05T00:00:00"^^xsd:dateTime ;
    :d3fend-id "D3-ACA" ;
    :definition "Actively collecting PKI certificates by connecting to the server and downloading its server certificates for analysis." ;
    :kb-article """## How it works
Analysis of server certificates using active methods to detect if certificates have been misconfigured or spoofed by using elements of the certificate, certificate authorities and signatures.

### Certificate validity analysis
This can be accomplished by verifying the digital signature on certificate.

### Certificate path analysis
The client's browser can perform path verification to ensure that the server's certificate contains a valid trust anchor.

### Certificate configuration analysis
Some browsers can be configured to implement the key-usage extensions contained certificates. This can help to prevent a certificate from being misused.

### Certificate revocation status analysis
Using either Certificate Revocation Lists (CRLs) or Online Certificate Status Protocol (OCSP) to determine the revocation status. OCSP Stapling, binding the status with the certificate, helps to mitigate potential delay in status verifications.

## Considerations
* Management of the PKI across the enterprise typically requires automation to maintain scalability and flexibility
* If the certificate authority, issuing the certificate, is compromised then all of the certificates issued by the CA are suspect
* There may be delays associated with updates to certificates
* Revoked certificates give the appearance of valid certificates until they are published to a trusted revocation service (OCSP or CRL)
* The revocation service (OCSP or CRL) may be down during our connection and a browser will need to make a decision will need to be made about trusting the connection""" ;
    :kb-reference :Reference-SecuringWebTransactions .

:ActiveLearning a owl:Class ;
    rdfs:label "Active Learning" ;
    rdfs:subClassOf :MachineLearning ;
    :definition "Active learning aims to improve learning efficiency by allowing the learning algorithm to select which data to learn from." ;
    :kb-article """## How it works
Traditional supervised learning often requires a large number of labeled instances, which can be costly or time-consuming to obtain. Active learning addresses this labeling bottleneck by asking an oracle (e.g., a human annotator) to label selected unlabeled instances. The goal is to achieve high accuracy with minimal labeling effort. 

## Considerations 
Active learning is particularly useful in scenarios where data is abundant but labeled instances are scarce or expensive. Examples include speech recognition, information extraction, and document classification.

## References 
- https://en.wikipedia.org/wiki/Active_learning_(machine_learning)
- https://burrsettles.com/pub/settles.activelearning.pdf""" .

:ActiveLogicalLinkMapping a :LogicalLinkMapping,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Active Logical Link Mapping" ;
    rdfs:subClassOf :LogicalLinkMapping,
        [ a owl:Restriction ;
            owl:onProperty :may-query ;
            owl:someValuesFrom :CollectorAgent ] ;
    :d3fend-id "D3-ALLM" ;
    :definition "Active logical link mapping sends and receives network traffic as a means to map the whole data link layer, where the links represent logical data flows rather than physical connection" ;
    :kb-article """## How it works

Active logical link mapping establishes awareness of logical links in the network by sending data over the network to gather information about logical connections in the network.

Typically this will be achieved through network telemetry coordinated for network management and monitoring and will use a link layer discovery protocol such as LLDP and the information gathered and aggregated a higher levels using an application protocol such as SNMP.  The information may be polled by network management softare or configured once and then pushed from network sensors (or agents.)

Another means of establishing network connectivity is by means of sendingn traffic through the use of a tool such as traceroute, to determine the logical paths through the network architecture.

## Considerations

* Best practice is to encrypte network monitoring data and require authentication for queries or admin/management functions.
* Push notifications reduce bandwidth necessary to capture and maintain information if reliable transport is used.
* Special consideration should be made before using of active scanning in OT networks and OT-safe options chosen where available.""" ;
    :kb-reference :Reference-IdentificationOfTracerouteNodesAndAssociatedDevices,
        :Reference-SNMPNetworkAutoDiscovery .

:ActivePhysicalLinkMapping a owl:Class,
        owl:NamedIndividual,
        :PhysicalLinkMapping ;
    rdfs:label "Active Physical Link Mapping" ;
    rdfs:subClassOf :PhysicalLinkMapping,
        [ a owl:Restriction ;
            owl:onProperty :may-query ;
            owl:someValuesFrom :CollectorAgent ] ;
    owl:disjointWith :PassivePhysicalLinkMapping ;
    :d3fend-id "D3-APLM" ;
    :definition "Active physical link mapping sends and receives network traffic as a means to map the physical layer." ;
    :kb-reference :Reference-IdentificationOfTracerouteNodesAndAssociatedDevices,
        :Reference-UsingSpanningTreeProtocolSTPToEnhanceLayer2NetworkTopologyMaps ;
    :synonym "Active Physical Layer Mapping" .

:Activity a owl:Class ;
    rdfs:label "Activity" ;
    rdfs:subClassOf :D3FENDThing ;
    :definition "An activity is a specific behavior representing a set of actions that may be accomplished by an agent." ;
    rdfs:seeAlso "http://wordnet-rdf.princeton.edu/id/00408356-n",
        "https://en.wikipedia.org/wiki/Business_Process_Model_and_Notation",
        "https://en.wikipedia.org/wiki/IDEF0",
        "https://enterpriseintegrationlab.github.io/icity/Activity/doc/index-en.html" .

:ActivityDependency a owl:Class ;
    rdfs:label "Activity Dependency" ;
    rdfs:subClassOf :Dependency ;
    :definition "An activity dependency is a dependency that indicates an activity has an activity or agent which relies on it in order to be functional." .

:Actor-Critic a owl:Class ;
    rdfs:label "Actor-Critic" ;
    rdfs:subClassOf :PolicyGradient,
        :TemporalDifferenceLearning .

:AdaptiveResonanceTheoryClustering a owl:Class ;
    rdfs:label "Adaptive Resonance Theory Clustering" ;
    rdfs:subClassOf :ANN-basedClustering ;
    :definition "Adaptive Resonance Theory (ART) Clustering is a self-organizing neural network algorithm used for clustering data, which creates clusters based on the similarity of input data. Introduced by Stephen Grossberg in 1976, this approach is notable for its capability to automatically determine the number of clusters and its adaptability to changes in non-stationary data." ;
    :kb-article """## How it Works
ART Clustering operates on the basis of resonance, which happens when an input pattern is sufficiently similar to a previously learned pattern. The algorithm maintains a set of prototype vectors, each representing a cluster. When a new input vector is presented, the prototype that is closest (in terms of a specified similarity measure) to the input is chosen. If the similarity is above a certain threshold (termed the 'vigilance' parameter), the input is considered to belong to the cluster represented by that prototype, and the prototype is adjusted towards the input vector.

However, if no such prototype exists (i.e., the similarity is below the vigilance parameter), a new prototype is created to represent a new cluster. The key feature here is that this process allows the system to adaptively 'resonate' between comparing and learning from the input patterns. It enables the algorithm to learn in real-time and remain flexible to changes in the input data patterns.

## Considerations
- **Vigilance Parameter**: The vigilance parameter, which determines the threshold for similarity, is a critical factor in ART Clustering. A low value might result in over-clustering (many small clusters), while a high value could lead to under-clustering (fewer, larger clusters). 

- **Data Scaling**: The effectiveness of ART Clustering can be significantly influenced by the scaling of the data. Therefore, pre-processing to normalize the data might be necessary.

- **Non-Stationary Data**: ART Clustering performs well with non-stationary data, where the data's statistical properties change over time. However, this can be both a strength and a weakness, depending on the specific use case.

- **Complexity**: ART Clustering can be more computationally complex than other clustering algorithms, especially with large data sets. The choice between this algorithm and simpler algorithms like K-Means should be informed by the specific requirements of the task.

## References
1. Grossberg, S. (1976). Adaptive pattern classification and universal recoding: I. Parallel development and coding of neural feature detectors. Biological cybernetics, 23(3), 121-134. [Link](https://link.springer.com/article/10.1007/BF00337259)

2. Carpenter, G. A., & Grossberg, S. (1987). ART 2: Self-organization of stable category recognition codes for analog input patterns. Applied Optics, 26(23), 4919-4930. [Link](https://www.osapublishing.org/ao/abstract.cfm?uri=ao-26-23-4919)

3. Pal, S. K., & Mitra, S. (1992). Multilayer perceptron, fuzzy sets, and classification. IEEE Transactions on Neural Networks, 3(5), 683-697. [Link](https://ieeexplore.ieee.org/abstract/document/149551)""" .

:AddressSpace a owl:Class ;
    rdfs:label "Address Space" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy "https://dbpedia.org/page/Address_space" ;
    :definition "An address space defines a range of discrete addresses, each of which may correspond to a network host, peripheral device, disk sector, a memory cell or other logical or physical entity. For software programs to save and retrieve stored data, each unit of data must have an address where it can be located. The number of address spaces available depends on the underlying address structure, which is usually limited by the computer architecture being used." .

:AdminFeatureAssessment a owl:Class ;
    rdfs:label "Admin Feature Assessment" ;
    rdfs:subClassOf :FeatureAssessment,
        [ a owl:Restriction ;
            owl:onProperty :assesses ;
            owl:someValuesFrom :AdminFeatureClaim ] .

:AdminFeatureClaim a owl:Class ;
    rdfs:label "Admin Feature Claim" ;
    rdfs:subClassOf :CapabilityFeatureClaim,
        [ a owl:Restriction ;
            owl:onProperty :cites ;
            owl:someValuesFrom :InformationContentEntity ],
        [ a owl:Restriction ;
            owl:onProperty :claims ;
            owl:someValuesFrom :AdministrativeFeature ],
        [ a owl:Restriction ;
            owl:onProperty :features ;
            owl:allValuesFrom :AdministrativeFeature ] .

:AdministrativeFeature a owl:Class ;
    rdfs:label "Administrative Feature" ;
    skos:altLabel "Administrative Capability" ;
    rdfs:subClassOf :CapabilityFeature .

:AdministrativeNetworkActivityAnalysis a :NetworkTrafficAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Administrative Network Activity Analysis" ;
    rdfs:subClassOf :NetworkTrafficAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :IntranetAdministrativeNetworkTraffic ] ;
    :created "2020-08-05T00:00:00"^^xsd:dateTime ;
    :d3fend-id "D3-ANAA" ;
    :definition "Detection of unauthorized use of administrative network protocols by analyzing network activity against a baseline." ;
    :kb-article """## How it works
Network protocols such as RDP, IPMI, SSH, SNMP, VNC, MOSH, NX, TeamViewer, SPICE, PCoIP, and others are used by system administrators to remotely manage servers. Defenders monitor administrative network activity to determine if the use of remote protocols is malicious. Attackers can abuse administrative protocols and leverage them for initial access to various endpoints. For example, an attacker with valid credentials will remotely SSH or RDP into a server and attempt to blend in with existing traffic from system administrators. By monitoring the traffic activity, it is possible to detect when the protocols are behaving differently from a known baseline of system administration activity.

## Considerations
* Administrative traffic can be encrypted, making network protocol analysis a challenge
* False alarms can be mitigated by integration with inventory management systems""" ;
    :kb-reference :Reference-MethodAndSystemForDetectingSuspiciousAdministrativeActivity_VectraNetworksInc,
        :Reference-RemoteRegistry_MITRE,
        :Reference-WindowsRemoteManagement_WinRM_MITRE .

:AdministrativeNetworkTraffic a owl:Class ;
    rdfs:label "Administrative Network Traffic" ;
    rdfs:subClassOf :NetworkTraffic ;
    :definition "Administrative network traffic is network traffic related to the remote administration or control of hosts or devices through a standard remote administrative protocol.  Remote shells, terminals, RDP, and VNC are examples of these protocols, which are typically only used by administrators." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Remote_administration> .

:Agent a owl:Class ;
    rdfs:label "Agent" ;
    rdfs:subClassOf :D3FENDCatalogThing .

:AgglomerativeClustering a owl:Class ;
    rdfs:label "Agglomerative Clustering" ;
    rdfs:subClassOf :ClusterAnalysis .

:AlethicLogic a owl:Class ;
    rdfs:label "Alethic Logic" ;
    rdfs:subClassOf :ModalLogic .

:Alias a owl:Class ;
    rdfs:label "Alias" ;
    rdfs:subClassOf :SlowSymbolicLink ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Alias_(Mac_OS)> ;
    :definition "In macOS, an alias is a small file that represents another object in a local, remote, or removable[1] file system and provides a dynamic link to it; the target object may be moved or renamed, and the alias will still link to it (unless the original file is recreated; such an alias is ambiguous and how it is resolved depends on the version of macOS)." .

:AllocateMemory a owl:Class ;
    rdfs:label "Allocate Memory" ;
    rdfs:subClassOf :SystemCall,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :MemoryBlock ] .

:AnalysisOfAlternatives a owl:Class ;
    rdfs:label "Analysis of Alternatives" ;
    rdfs:subClassOf :D3FENDCatalogThing,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :PortfolioAssessment ],
        [ a owl:Restriction ;
            owl:onProperty :author ;
            owl:someValuesFrom :Agent ] .

:AnalyticalPurpose a owl:Class ;
    rdfs:label "Analytical Purpose" ;
    rdfs:subClassOf :D3FENDThing .

:AnalyticLatency a owl:Class ;
    rdfs:label "Analytic Latency" ;
    rdfs:subClassOf :Latency .

:AnalyticTechnique a owl:Class ;
    rdfs:label "Analytic Technique" ;
    rdfs:subClassOf :D3FENDThing ;
    rdfs:isDefinedBy "https://dictionary.cambridge.org/us/dictionary/english/analytics" ;
    :definition "A process in which a computer examines information using mathematical methods in order to find useful patterns." .

:ANN-basedClustering a owl:Class ;
    rdfs:label "ANN-based Clustering" ;
    rdfs:subClassOf :ClusterAnalysis ;
    :definition "Artificial Neural Network (ANN) Based Clustering is a machine learning technique that combines the principles of artificial neural networks with clustering methodologies. It is an unsupervised learning process that segregates datasets into clusters based on similarity patterns, using the computational and adaptive nature of neural networks." ;
    :kb-article """## How it works
ANN Based Clustering employs neural networks for detecting patterns and learning from input data. An initial clustering algorithm, such as K-Means or DBSCAN, is often used to form a preliminary grouping of the data. The artificial neural network then refines these clusters by training on the input data, using its layers of interconnected neurons to iteratively adjust its weights and biases based on the propagation of error signals. 

Through this iterative learning process, the neural network can recognize complex patterns and correlations within the data. This leads to a more robust and adaptive clustering, accommodating data patterns that may be non-linear and multidimensional. Over time, the neural network can fine-tune the clusters, optimally segregating the data based on learned patterns. 

## Considerations 

- **Data Preprocessing**: ANN based clustering often requires data to be normalized or standardized to avoid bias towards high magnitude features.
- **Computational Complexity**: This technique can be computationally intensive, especially for large datasets, given the iterative nature of neural network training.
- **Hyperparameter Tuning**: The choice of hyperparameters such as learning rate, number of layers, and neurons in the ANN can significantly influence the performance of the clustering.
- **Initial Clustering Algorithm**: The selection of an initial clustering method can affect the accuracy of the final clusters, making it crucial to choose a suitable algorithm for the given data. 

## References 

1. Lek, S., Delacoste, M. (1992). Application of neural networks to modelling nonlinear relationships in ecology. Ecological Modelling, 90(1), 39–52. [Link](https://doi.org/10.1016/0304-3800(95)00070-4)
2. Hruschka, Eduardo R., Campello, Ricardo J.G.B., Freitas, Alex A., de Carvalho, André C.P.L.F. (2009). A survey of evolutionary algorithms for clustering. IEEE Transactions on Systems, Man, and Cybernetics, Part C (Applications and Reviews), 39(2), 133–155. [Link](https://doi.org/10.1109/TSMCC.2008.2007252)
3. Xu, Rui, Wunsch, Donald. (2005). Survey of Clustering Algorithms. IEEE Transactions on Neural Networks, 16(3), 645–678. [Link](https://doi.org/10.1109/TNN.2005.845141) 
4. Zhang, Bing, Hsu, M., Dayal, Umeshwar. (1996). K-harmonic means—A spatial clustering algorithm with boosting. Proceedings of the fifth ACM SIGKDD international conference on Knowledge discovery and data mining - KDD ’99. [Link](https://doi.org/10.1145/312129.312220)""" .

:AnswerSetProgramming a owl:Class ;
    rdfs:label "Answer Set Programming" ;
    rdfs:subClassOf :LogicProgramming ;
    :definition "A form of declarative programming oriented towards difficult (primarily NP-hard) search problems. It is based on the stable model (answer set) semantics of logic programming." ;
    :kb-article """## How it works
_TBD enter text here for how the thing works_

## Considerations 

## References 
https://en.wikipedia.org/wiki/Answer_set_programming""" .

:Appliance a owl:Class ;
    rdfs:label "Appliance" ;
    rdfs:subClassOf :Product .

:Application a owl:Class ;
    rdfs:label "Application" ;
    rdfs:subClassOf :Software,
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :ApplicationConfiguration ] ;
    :definition "A program that gives a computer instructions that provide the user with tools to accomplish a task; \"he has tried several different word processing applications\".  Distinct from system software that is intrinsically part of the operating system.  An application can be made up of executable files, configuration files, shared libraries, etc." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Application_software>,
        <http://wordnet-rdf.princeton.edu/id/06582286-n> .

:ApplicationConfiguration a owl:Class ;
    rdfs:label "Application Configuration" ;
    rdfs:subClassOf :ConfigurationResource ;
    :definition "Information used to configure the parameters and initial settings for an application." ;
    rdfs:seeAlso <http://wordnet-rdf.princeton.edu/id/05739724-n> .

:ApplicationConfigurationDatabase a owl:Class ;
    rdfs:label "Application Configuration Database" ;
    rdfs:subClassOf :ConfigurationDatabase,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :ApplicationConfigurationDatabaseRecord ] ;
    :definition "A database used to hold application configuration data." .

:ApplicationConfigurationDatabaseRecord a owl:Class ;
    rdfs:label "Application Configuration Database Record" ;
    rdfs:subClassOf :ApplicationConfiguration,
        :ConfigurationDatabaseRecord ;
    :definition "A database record holding information used to configure the parameters and initial settings for an application." .

:ApplicationConfigurationFile a owl:Class ;
    rdfs:label "Application Configuration File" ;
    rdfs:subClassOf :ConfigurationFile,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :ApplicationConfiguration ] ;
    :definition "A file containing Information used to configure the parameters and initial settings for an application.. A plist file is an example of this type of file for macOS.  Usually text-based." .

:ApplicationConfigurationHardening a :ApplicationHardening,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Application Configuration Hardening" ;
    rdfs:subClassOf :ApplicationHardening,
        [ a owl:Restriction ;
            owl:onProperty :hardens ;
            owl:someValuesFrom :ApplicationConfiguration ] ;
    :d3fend-id "D3-ACH" ;
    :definition "Modifying an application's configuration to reduce its attack surface." ;
    :kb-article """## How it works
Application configuration settings can be configured to limit the permissions on an application or disable certain vulnerable application features.

Hardening an application's configuration involves analyzing not only the application but also the environment in which the application is run in for potential vulnerabilities.""" ;
    :kb-reference :Reference-RedHatEnterpriseLinux8SecurityTechnicalImplementationGuide,
        :Reference-Windows10STIG .

:ApplicationHardening a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Application Hardening" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Harden ] ;
    :d3fend-id "D3-AH" ;
    :definition "Application Hardening makes an executable application more resilient to a class of exploits which either introduce new code or execute unwanted existing code. These techniques may be applied at compile-time or on an application binary." ;
    :enables :Harden ;
    :kb-article """## Technique Overview

Exploits may, for example, rely on knowledge of addresses in a process's memory, they may alter memory contents, and they may cause a program to use instructions in a way that they were not intended.  By, for example, including code that dynamically changes the memory address of data or code on each run, introducing logic to validating the memory contents before certain potentially dangerous flows are executed, or monitoring a program for unusual sequence of instructions, this makes it harder for an attacker to craft a working exploit.""" ;
    :synonym "Process Hardening" .

:ApplicationInstaller a owl:Class ;
    rdfs:label "Application Installer" ;
    rdfs:subClassOf :UserApplication .

:ApplicationInventorySensor a owl:Class ;
    rdfs:label "Application Inventory Sensor" ;
    rdfs:subClassOf :EndpointSensor,
        [ a owl:Restriction ;
            owl:onProperty :monitors ;
            owl:someValuesFrom :Application ] ;
    :definition "Collects information on applications on an endpoint." .

:ApplicationLayerFirewall a owl:Class ;
    rdfs:label "Application Layer Firewall" ;
    skos:altLabel "Application Firewall" ;
    rdfs:subClassOf :Firewall ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Application_firewall> ;
    :definition "An application firewall is a form of firewall that controls input, output, and/or access from, to, or by an application or service. It operates by monitoring and potentially blocking the input, output, or system service calls that do not meet the configured policy of the firewall. The application firewall is typically built to control all network traffic on any OSI layer up to the application layer. It is able to control applications or services specifically, unlike a stateful network firewall, which is - without additional software - unable to control network traffic regarding a specific application. There are two primary categories of application firewalls, network-based application firewalls and host-based application firewalls." .

:ApplicationLayerLink a owl:Class ;
    rdfs:label "Application Layer Link" ;
    rdfs:subClassOf :LogicalLink .

:ApplicationProcess a owl:Class ;
    rdfs:label "Application Process" ;
    rdfs:subClassOf :UserProcess,
        [ a owl:Restriction ;
            owl:onProperty :runs ;
            owl:someValuesFrom :Application ] ;
    :definition "An application process is an instance of an application computer program that is being executed." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Application_software> .

:ApplicationProcessConfiguration a owl:Class ;
    rdfs:label "Application Process Configuration" ;
    rdfs:subClassOf :ApplicationConfiguration ;
    :definition "The current configuration of an application process, stored in memory. It may have been sourced from other types of application configurations, e.g. Application Configuration Files or Application Configuration Database Records." .

:ApplicationRule a owl:Class ;
    rdfs:label "Application Rule" ;
    rdfs:subClassOf :ApplicationConfiguration ;
    :definition "A configuration of an application which is used to apply logical or data processing functions to data processed by the application." .

:ApplicationShim a owl:Class ;
    rdfs:label "Application Shim" ;
    rdfs:subClassOf :Shim ;
    :definition "An application shim adapts an application program to run on a version of a platform for which they were not originally created. Most commonly \"Application Shimming\" refers to use of The Windows Application Compatibility Toolkit (ACT) provides backward compatibility by simulating the behavior of older version of Windows." ;
    rdfs:seeAlso "d3f:Shim",
        <http://dbpedia.org/resource/Shim_(computing)#Examples> .

:ArchiveFile a owl:Class ;
    rdfs:label "Archive File" ;
    rdfs:subClassOf :File ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Archive_file> ;
    :definition "An archive file is a file that is composed of one or more computer files along with metadata. Archive files are used to collect multiple data files together into a single file for easier portability and storage, or simply to compress files to use less storage space. Archive files often store directory structures, error detection and correction information, arbitrary comments, and sometimes use built-in encryption." .

:ARIMAModel a owl:Class ;
    rdfs:label "ARIMA Model" ;
    rdfs:subClassOf :TimeSeriesAnalysis ;
    :synonym "Autoregressive Integrated Moving Average Model" .

:Article a owl:Class ;
    rdfs:label "Article" ;
    rdfs:subClassOf :Document .

:Artifact a owl:Class ;
    rdfs:label "Artifact" ;
    rdfs:subClassOf :D3FENDThing ;
    :definition "A man-made object taken as a whole.",
        <http://www.ontologyrepository.com/CommonCoreOntologies/Artifact> ;
    rdfs:seeAlso "Asset",
        <http://d3fend.mitre.org/ontologies/d3fend.owl>,
        <http://wordnet-rdf.princeton.edu/id/00022119-n> .

:ArtifactServer a owl:Class ;
    rdfs:label "Artifact Server" ;
    rdfs:subClassOf :WebServer ;
    :definition "A digital artifact server provides access services to digital artifacts in a repository.  It provides an associated set of data management, search and access methods allowing application-independent access to the content." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Content_management>,
        <http://dbpedia.org/resource/Content_repository> .

:ArtificialNeuralNetClassification a owl:Class ;
    rdfs:label "Artificial Neural Network Classification" ;
    rdfs:subClassOf :Classification ;
    :d3fend-annotation "An Artificial Neural Network (ANN) Classification is a type of supervised learning method within machine learning that is inspired by the structure and functional aspects of biological neural networks. It utilizes interconnected processing nodes, referred to as neurons, arranged in layers to make predictions or decisions, specifically for the task of categorizing inputs into one or more classes." ;
    :kb-article """## How it works
In supervised learning, specifically in classification, a model is trained using a labeled dataset, i.e., each input instance in the training data comes with a corresponding target output, known as a label, representing a specific class. During the training phase, the model learns to map the inputs to their respective labels. This mapping function can be linear or non-linear, depending on the complexity of the task and the specific algorithm employed.

Once the model is trained, it can be used to predict the class of unseen data points. When new, unlabeled data is fed into the model, it uses the learned function to predict which class the new instance most likely belongs to. Commonly used classification algorithms include decision trees, k-nearest neighbors (k-NN), support vector machines (SVMs), and logistic regression, among others.

## Considerations 

* **Quality of Training Data**: The success of a classification model is highly dependent on the quality of the training data. Data should be cleaned and preprocessed to remove noise and inconsistencies.
* **Class Imbalance**: In some datasets, certain classes can be underrepresented. This can lead to a bias in the model, where it performs poorly on the minority class. Techniques like oversampling, undersampling, or SMOTE can be used to address this issue.
* **Model Complexity**: A more complex model might capture intricate patterns in the data but also runs the risk of overfitting, i.e., performing well on the training data but poorly on unseen data. Regularization techniques and proper model validation can help in controlling overfitting.
* **Feature Selection**: The choice of features used to train the model can significantly impact performance. Irrelevant or redundant features might reduce model accuracy and increase computation time.
  
## References 

1. Bishop, Christopher M. (2006). [Pattern Recognition and Machine Learning](https://www.springer.com/gp/book/9780387310732). Springer. 
2. James, Gareth; Witten, Daniela; Hastie, Trevor; Tibshirani, Robert (2013). [An Introduction to Statistical Learning](https://www.springer.com/gp/book/9781461471370). Springer.
3. Scikit-Learn User Guide: [Supervised learning](https://scikit-learn.org/stable/supervised_learning.html#supervised-learning).
4. Towards Data Science: [Handling Imbalanced Datasets in Deep Learning](https://towardsdatascience.com/handling-imbalanced-datasets-in-deep-learning-f48407a0e758). 
- http://uc-r.github.io/ann_classification#:~:text=Classification%20ANNs%20seek%20to%20classify,feature%20as%20the%20dependent%20variable.""" .

:Assessment a owl:Class ;
    rdfs:label "Assessment" ;
    rdfs:subClassOf :D3FENDCatalogThing,
        [ a owl:Restriction ;
            owl:onProperty :author ;
            owl:someValuesFrom :Agent ],
        [ a owl:Restriction ;
            owl:onProperty :expectation-rating ;
            owl:allValuesFrom [ a rdfs:Datatype ;
                    owl:oneOf (
                            "below"
                            "exceeded"
                            "met" ) ] ] ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/05741528-n> ;
    :comment "This is really an assessment result. If we need to model the assessment as a process in the future we will append Result to these classes." ;
    :definition "The classification of someone or something with respect to its worth." .

:AssetInventory a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Asset Inventory" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Model ] ;
    :d3fend-id "D3-AI" ;
    :definition "Asset inventorying identifies and records the organization's assets and enriches each inventory item with knowledge about their vulnerabilities." ;
    :display-order 1 ;
    :synonym "Asset Discovery",
        "Asset Inventorying" .

:AssetVulnerabilityEnumeration a :AssetInventory,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Asset Vulnerability Enumeration" ;
    rdfs:subClassOf :AssetInventory,
        [ a owl:Restriction ;
            owl:onProperty :evaluates ;
            owl:someValuesFrom :DigitalArtifact ],
        [ a owl:Restriction ;
            owl:onProperty :identifies ;
            owl:someValuesFrom :Vulnerability ] ;
    :d3fend-id "D3-AVE" ;
    :definition "Asset vulnerability enumeration enriches inventory items with knowledge identifying their vulnerabilities." ;
    :kb-reference :Reference-AutomatedComputerVulnerabilityResolutionSystem,
        :Reference-SecurityVulnerabilityInformationAggregation,
        :Reference-SystemAndMethodForVulnerabilityRiskAssessment .

:AssociationRuleLearning a owl:Class ;
    rdfs:label "Association Rule Learning" ;
    rdfs:subClassOf :UnsupervisedLearning ;
    :definition "Association Rule Learning is a machine learning method used to identify patterns and relationships within large sets of data. The method's goal is to find strong rules, defined as relationships between items that occur frequently together in the dataset, according to specified measures of interestingness." ;
    :kb-article """## How it works

Association Rule Learning works by employing algorithms to extract interesting relationships or "associations" among a set of items in transactional databases, relational databases, or other information repositories. The most widely used algorithm for this method is the Apriori algorithm. The algorithm generates candidate itemsets and then prunes those itemsets that have an infrequent subset. This pruning step significantly reduces the computational burden of the algorithm. The remaining frequent itemsets are used to generate association rules, which can be used for purposes such as market basket analysis, where the goal is to understand combinations of products frequently purchased together.

In essence, the algorithm's iterative process continues until the most potent rules are identified. The power of these rules is measured by parameters like support and confidence. Support refers to the prevalence of an itemset in the database, while confidence refers to the probability that an item Y is purchased when item X is purchased, indicating the strength of the rule.

## Considerations 

- **Data Quality**: The accuracy of the rules discovered heavily relies on the quality of the input data. Clean and preprocessed data is a must for optimal results.
- **Scalability**: Association Rule Learning, especially when using the Apriori algorithm, can become computationally expensive with large datasets due to the necessity of generating and testing candidate itemsets. Optimized or alternative algorithms may be necessary.
- **False Positives**: Association rules merely indicate correlation, not causation. Care should be taken when interpreting the results, as they may contain coincidental associations that are not causally related.
- **Parameter Selection**: Appropriate selection of support and confidence thresholds is essential. Too low, and you'll get many insignificant rules; too high, and you may miss interesting rules.

## References

1. Agrawal, R., Imieliński, T., Swami, A. (1993). "Mining association rules between sets of items in large databases". In: Proceedings of the 1993 ACM SIGMOD international conference on Management of data - SIGMOD '93. [Link](https://dl.acm.org/doi/10.1145/170035.170072)
2. Han, J., Pei, J., Yin, Y. (2000). "Mining Frequent Patterns without Candidate Generation". In: Proceedings of the 2000 ACM SIGMOD international conference on Management of data. [Link](https://dl.acm.org/doi/10.1145/342009.335372)
3. "Association Rule Learning" on Wikipedia: [Link](https://en.wikipedia.org/wiki/Association_rule_learning)""" .

:AsymmetricKey a owl:Class ;
    rdfs:label "Asymmetric Key" ;
    rdfs:subClassOf :CryptographicKey ;
    :definition "Asymmetric keys are public and private keys, paired such that asymmetric (public-key) cryptography algorithms can be implemented using them. Public-key cryptography, or asymmetric cryptography, is any cryptographic system that uses pairs of keys: public keys that may be disseminated widely paired with private keys which are known only to the owner. There are two functions that can be achieved: using a public key to authenticate that a message originated with a holder of the paired private key; or encrypting a message with a public key to ensure that only the holder of the paired private key can decrypt it." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Public-key_cryptography> .

:ATTACKMitigation a owl:Class ;
    rdfs:label "ATTACK Mitigation" ;
    rdfs:subClassOf :ATTACKThing,
        [ a owl:Restriction ;
            owl:onProperty :d3fend-comment ;
            owl:someValuesFrom xsd:string ],
        [ a owl:Restriction ;
            owl:onProperty :semantic-relation ;
            owl:someValuesFrom :DefensiveTechnique ] .

:ATTACKThing a owl:Class ;
    rdfs:label "ATTACK Thing" ;
    :definition "ATTACK things are concepts defined in the ATT&CK Framework." .

:AudioInputDevice a owl:Class ;
    rdfs:label "Audio Input Device" ;
    rdfs:subClassOf :InputDevice ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Input_device#Voice_input_devices> ;
    :definition "Audio input devices allow a user to send audio info to a computer for processing, recording, or carrying out commands. Devices such as microphones allow users to speak to the computer in order to record a voice message or navigate software. Aside from recording, audio input devices are also used with speech recognition software." .

:AuthenticateUser a owl:Class ;
    rdfs:label "Authenticate User" ;
    rdfs:subClassOf :SystemCall,
        [ a owl:Restriction ;
            owl:onProperty :authenticates ;
            owl:someValuesFrom :UserAccount ] .

:Authentication a :Authentication,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Authentication" ;
    rdfs:subClassOf :UserAction,
        [ a owl:Restriction ;
            owl:onProperty :authenticates ;
            owl:someValuesFrom :User ],
        [ a owl:Restriction ;
            owl:onProperty :may-create ;
            owl:someValuesFrom :IntranetNetworkTraffic ],
        [ a owl:Restriction ;
            owl:onProperty :originates-from ;
            owl:someValuesFrom :PhysicalLocation ] ;
    :definition "A request-response comprising a user credential presentation to a system and a verification response." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Authentication>,
        <http://wordnet-rdf.princeton.edu/id/00155053-n> .

:AuthenticationCacheInvalidation a :CredentialEviction,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Authentication Cache Invalidation" ;
    rdfs:subClassOf :CredentialEviction,
        [ a owl:Restriction ;
            owl:onProperty :deletes ;
            owl:someValuesFrom :Credential ] ;
    :d3fend-id "D3-ANCI" ;
    :definition "Removing tokens or credentials from an authentication cache to prevent further user associated account accesses." ;
    :kb-article """## How it works
Applications can locally cache user authentication credentials for certain server connections. An application may attempt to use the cached credential for a connection. If the cached credentials exist then the user will not be typically prompted for new credentials.


## Considerations
Are these cached credentials only on the local host? Can they be persisted to the remote server?

## Examples
Windows Credential Management API""" ;
    :kb-reference :Reference-SecureCachingOfServerCredentials_DellProductsLP,
        :Reference-SystemAndMethodForProvidingAnActivelyInvalidatedClient-sideNetworkResourceCache_IMVU .

:AuthenticationEventThresholding a owl:Class,
        owl:NamedIndividual,
        :UserBehaviorAnalysis ;
    rdfs:label "Authentication Event Thresholding" ;
    rdfs:subClassOf :UserBehaviorAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :Authentication ] ;
    :created "2020-08-05T00:00:00"^^xsd:dateTime ;
    :d3fend-id "D3-ANET" ;
    :definition "Collecting authentication events, creating a baseline user profile, and determining whether authentication events are consistent with the baseline profile." ;
    :kb-article """## How it works
Authentication event data is collected (logon information such as device id, time of day, day of week, geo-location, etc.) to create an activity baseline. Then, a threshold is determined either through a manually specified configuration, or a statistical analysis of deviations in historical data. New authentication events are evaluated to determine if a threshold is exceeded. Thresholds can be static or dynamic.

### Actions
As a result of the analysis, actions taken could include:

* [Account Locking](/technique/d3f:AccountLocking)
* Raising an alert

### Example data sources
 * Directory server logs
 * VPN Server logs
 * IDAM Capability logs
 * NAC logs
 * Authentication client logs
 * Kerberos network traffic
 * LDAP network traffic

## Considerations

This technique covers statistical outliers. Though depending on the complexity or dimensionality of the data considered, outliers may not be obvious to a human analyst reviewing events in simplistic analytic views. If the malicious activity is not statistically different from benign activity, an alert threshold will not be met.""" ;
    :kb-reference <http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-System,Method,AndComputerProgramProductForDetectingAndAssessingSecurityRisksInANetwork_ExabeamInc>,
        :Reference-MethodAndApparatusForNetworkFraudDetectionAndRemediationThroughAnalytics_IdaptiveLLC,
        :Reference-SimultaneousLoginsOnAHost_MITRE,
        :Reference-UserLoggedInToMultipleHosts_MITRE,
        :Reference-UserLoginActivityMonitoring_MITRE .

:AuthenticationFunction a owl:Class ;
    rdfs:label "Authentication Function" ;
    rdfs:subClassOf :Subroutine,
        [ a owl:Restriction ;
            owl:onProperty :authenticates ;
            owl:someValuesFrom :UserAccount ] ;
    :definition "Authenticates a user account by verifying a presented credential." .

:AuthenticationLog a owl:Class ;
    rdfs:label "Authentication Log" ;
    rdfs:subClassOf :Log,
        [ a owl:Restriction ;
            owl:onProperty :records ;
            owl:someValuesFrom :Authentication ] ;
    :definition "A log of authentication events." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Authorization>,
        <http://wordnet-rdf.princeton.edu/id/00155053-n> .

:AuthenticationServer a owl:Class ;
    rdfs:label "Authentication Server" ;
    rdfs:subClassOf :Server ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Authentication_server> ;
    :definition "An authentication server provides a network service that applications use to authenticate the credentials, usually account names and passwords, of their users. When a client submits a valid set of credentials, it receives a cryptographic ticket that it can subsequently use to access various services. Major authentication algorithms include passwords, Kerberos, and public key encryption." .

:AuthenticationService a owl:Class ;
    rdfs:label "Authentication Service" ;
    rdfs:subClassOf :ServiceApplicationProcess ;
    rdfs:isDefinedBy <https://www.gartner.com/en/information-technology/glossary/authentication-service> ;
    :definition "An authentication service is a mechanism, analogous to the use of passwords on time-sharing systems, for the secure authentication of the identity of network clients by servers and vice versa, without presuming the operating system integrity of either (e.g., Kerberos)." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Authentication> .

:Authorization a owl:Class ;
    rdfs:label "Authorization" ;
    rdfs:subClassOf :UserAction,
        [ a owl:Restriction ;
            owl:onProperty :authorizes ;
            owl:someValuesFrom :NetworkResourceAccess ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Authorization> ;
    :definition "Authorization is the function of specifying access rights to resources related to information security and computer security in general and to access control in particular. More formally, \"to authorize\" is to define an access policy. For example, human resources staff is normally authorized to access employee records and this policy is usually formalized as access control rules in a computer system. During operation, the system uses the access control rules to decide whether access requests from (authenticated) consumers shall be approved (granted) or disapproved (rejected). Resources include individual files or an item's data, computer programs, computer devices and functionality provided by computer applications. Examples of consumers are computer users, computer program" .

:AuthorizationEventThresholding a owl:Class,
        owl:NamedIndividual,
        :UserBehaviorAnalysis ;
    rdfs:label "Authorization Event Thresholding" ;
    rdfs:subClassOf :UserBehaviorAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :Authorization ] ;
    :created "2020-08-05T00:00:00"^^xsd:dateTime ;
    :d3fend-id "D3-AZET" ;
    :definition "Collecting authorization events, creating a baseline user profile, and determining whether authorization events are consistent with the baseline profile." ;
    :kb-article """## How it works

Authorization event data is collected to create a baseline user profile. Authorization events that deviate from the baseline and exceed a static or dynamic threshold are identified for further action. Authorization events can include successful and failed authorization attempts as well as events related to permissions including viewing, editing, deleting, creating files, databases etc.

## Considerations

Depending on the complexity of the data considered, outliers may not be obvious to a human analyst reviewing events in simplistic analytic views. If malicious activity is not statistically different from benign activity, an alert threshold will not be met.""" ;
    :kb-reference <http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-System,Method,AndComputerProgramProductForDetectingAndAssessingSecurityRisksInANetwork_ExabeamInc>,
        :Reference-MethodAndApparatusForNetworkFraudDetectionAndRemediationThroughAnalytics_IdaptiveLLC,
        :Reference-SMBSessionSetups_MITRE,
        :Reference-UserLoggedInToMultipleHosts_MITRE .

:AuthorizationLog a owl:Class ;
    rdfs:label "Authorization Log" ;
    rdfs:subClassOf :Log,
        [ a owl:Restriction ;
            owl:onProperty :records ;
            owl:someValuesFrom :NetworkResourceAccess ] ;
    :definition "A log of authorization events." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Authorization>,
        <http://wordnet-rdf.princeton.edu/id/00155053-n> .

:AuthorizationService a owl:Class ;
    rdfs:label "Authorization Service" ;
    rdfs:subClassOf :NetworkService,
        :ServiceApplicationProcess ;
    rdfs:isDefinedBy <https://www.sciencedirect.com/referencework/9780122272400/encyclopedia-of-information-systems> ;
    :definition "An authorization service ensures that the user is authorized to have access to a particular resource. Authorization can be done through role-based access control (RBAC) or list-based access control (LBAC)." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Authorization> .

:Autoencoding a owl:Class ;
    rdfs:label "Autoencoding" ;
    rdfs:subClassOf :DimensionReduction ;
    :definition "Autoencoding is a type of artificial neural network used for learning efficient codings of input data. It's primarily a dimensionality reduction (or feature learning) method, where the network is trained to reconstruct its input data, thereby forcing it to learn compressed representations of the input." ;
    :kb-article """## How it Works
Autoencoders are built with an encoder and a decoder. The encoder learns to compress the input data into a lower-dimensional code (latent space representation), and the decoder learns to reconstruct the original input data from this compressed representation. During training, the aim is to minimize the difference (reconstruction error) between the original input and the reconstructed output.

Autoencoders are typically structured as feed-forward neural networks, though variants exist like Convolutional Autoencoders for image data, Sequence-to-sequence autoencoders for sequential data, Variational Autoencoders, and others. The learned lower-dimensional space tends to have useful properties such as noise reduction and feature extraction, thereby making it useful for tasks like anomaly detection, denoising, and data generation.

## Considerations
- Choosing the right size for the hidden (encoding) layer is crucial. Too large, and the model will merely learn to copy the inputs to the outputs without learning any meaningful representations. Too small, and the model might lose too much information to effectively reconstruct the input.
- Autoencoders can be prone to overfitting, especially with large networks and small datasets. Regularization techniques such as Dropout, L1/L2 regularization, or adding noise to the input data (denoising autoencoder) can be used to prevent this.
- The type of autoencoder chosen should be suitable for the data at hand. For instance, Convolutional Autoencoders are more effective for image data, while Sequence-to-sequence autoencoders work well with sequential data.

## References 
1. Hinton, G. E., & Salakhutdinov, R. R. (2006). Reducing the dimensionality of data with neural networks. Science, 313(5786), 504-507. [Link](https://www.cs.toronto.edu/~hinton/science.pdf)
2. Goodfellow, I., Bengio, Y., & Courville, A. (2016). Deep learning. MIT press. [Link](https://www.deeplearningbook.org/contents/autoencoders.html)
3. Chollet, F. (2017). Deep Learning with Python. Manning Publications. [Link](https://www.manning.com/books/deep-learning-with-python)
4. Kingma, D. P., & Welling, M. (2013). Auto-encoding variational bayes. arXiv preprint arXiv:1312.6114. [Link](https://arxiv.org/abs/1312.6114)""" .

:AutoregressiveModel a owl:Class ;
    rdfs:label "Autoregressive Model" ;
    rdfs:subClassOf :TimeSeriesAnalysis ;
    :synonym "AR Model" .

:AverageAbsoluteDeviation a owl:Class ;
    rdfs:label "Average Absolute Deviation" ;
    rdfs:subClassOf :Variability .

:BarcodeScannerInputDevice a owl:Class ;
    rdfs:label "Barcode Scanner Input Device" ;
    skos:altLabel "Barcode Reader" ;
    rdfs:subClassOf :ImageScannerInputDevice ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Barcode_reader> ;
    :definition "A barcode reader (or barcode scanner) is an optical scanner that can read printed barcodes, decode the data contained in the barcode and send the data to a computer. Like a flatbed scanner, it consists of a light source, a lens and a light sensor translating for optical impulses into electrical signals. Additionally, nearly all barcode readers contain decoder circuitry that can analyze the barcode's image data provided by the sensor and sending the barcode's content to the scanner's output port." .

:BayesianEstimation a owl:Class ;
    rdfs:label "Bayesian Estimation" ;
    rdfs:subClassOf :BayesianMethod .

:BayesianHypothesisTesting a owl:Class ;
    rdfs:label "Bayesian Hypothesis Testing" ;
    rdfs:subClassOf :BayesianMethod .

:BayesianLinearRegression a owl:Class ;
    rdfs:label "Bayesian Linear Regression" ;
    rdfs:subClassOf :RegressionAnalysis ;
    :definition "Bayesian Linear Regression is a statistical technique that extends traditional linear regression by incorporating Bayesian inference. This method allows for the quantification and incorporation of uncertainty into the model's predictions, by treating regression parameters as random variables, instead of fixed values." ;
    :kb-article """## How it Works
Bayesian Linear Regression begins by establishing a prior distribution on the parameters of the model, which describes our beliefs about these parameters before observing any data. This is one of the unique aspects of Bayesian analysis, where we formally incorporate our prior knowledge.

After setting the prior, we collect data and update our beliefs to form a "posterior" distribution. This is done using Bayes' theorem, a fundamental principle in Bayesian statistics. The posterior distribution represents our updated beliefs about the parameters after considering the observed data. In essence, the prior distribution is updated with the data to yield the posterior distribution.

When predicting new data points, Bayesian Linear Regression doesn't just provide a single best estimate (like the point estimate in traditional linear regression), but a distribution of possible outcomes, taking into account the uncertainty in the model parameters. Thus, it provides richer information about possible outcomes and their likelihoods.

## Considerations 

* Choice of Prior: The selection of the prior distribution is subjective and may have a substantial impact on the posterior distribution, especially when dealing with smaller datasets.
* Computational Complexity: Bayesian methods can be computationally intensive, especially with larger datasets. This is because they often involve calculating and manipulating multidimensional integrals.
* Interpretability: While Bayesian Linear Regression gives a probabilistic and often more realistic approach, the interpretability can be less straightforward compared to ordinary linear regression.
* Overfitting: Due to the inherent uncertainty of the process, Bayesian Linear Regression is typically less prone to overfitting compared to its frequentist counterpart.

## References 

* Bishop, C. M. (2006). Pattern recognition and machine learning. springer. [Link](https://www.springer.com/gp/book/9780387310732)
* Murphy, K. P. (2012). Machine learning: a probabilistic perspective. The MIT Press. [Link](https://mitpress.mit.edu/books/machine-learning-0)
* "Probabilistic Programming and Bayesian Methods for Hackers" by Cameron Davidson-Pilon. [Link](http://camdavidsonpilon.github.io/Probabilistic-Programming-and-Bayesian-Methods-for-Hackers/)""" .

:BayesianLinearRegressionLearning a owl:Class ;
    rdfs:label "Bayesian Linear Regression Learning" ;
    rdfs:subClassOf :RegressionAnalysisLearning .

:BayesianMethod a owl:Class ;
    rdfs:label "Bayesian Method" ;
    rdfs:subClassOf :StatisticalMethod .

:BayesianModelAveraging a owl:Class ;
    rdfs:label "Bayesian Model Averaging" ;
    rdfs:subClassOf :EnsembleLearning ;
    :definition "Bayesian Model Averaging (BMA) is a specific type of ensemble learning technique that involves the use of Bayesian inference to average over multiple models, each with a certain assigned posterior probability. Rather than selecting one single \"best\" model, BMA provides a systematic method for considering the ensemble of all plausible models when making predictions, effectively addressing the model uncertainty issue." ;
    :kb-article """## How it Works

BMA operates based on the principles of Bayesian statistics. In essence, BMA treats the selection of a model as a problem of uncertainty, and therefore something that can be quantified probabilistically. It considers all the potential models that can be constructed from a given dataset, assigns a posterior probability to each based on their respective Bayesian Information Criteria (BIC), and uses these probabilities to weight the contribution of each model to the final prediction.

When a new instance needs to be predicted, instead of using a single model, BMA uses all the models, weighted by their posterior probabilities. Each model gives its prediction, and then BMA produces the weighted average of these predictions, with weights being the posterior probabilities of each model.

This process allows BMA to incorporate model uncertainty into model predictions, leading to predictions that account for both the uncertainty in the model parameters and the uncertainty in model selection.

## Considerations

- **Complexity**: BMA can be computationally expensive, especially when the number of models to be averaged over is large. This may not be practical for high-dimensional datasets or in situations where computational resources are limited.
- **Assumptions**: BMA assumes that the true model is included within the model set, which might not always be the case in practice. The quality of predictions is thus dependent on the quality and diversity of the models considered.
- **Overfitting**: Even though BMA helps to prevent overfitting by averaging over multiple models, it might still overfit if the models being averaged over are themselves overfitted.

## References

1. Hoeting, J.A., Madigan, D., Raftery, A.E., and Volinsky, C.T. (1999). [Bayesian Model Averaging: A Tutorial](http://www.stat.colostate.edu/~jah/papers/statsci.pdf). Statistical Science, 14(4), 382-401.
2. Viallefont, V., Raftery, A.E., and Richardson, S. (2001). [Variable selection and Bayesian model averaging in case-control studies](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2750259/). Statistics in Medicine, 20(21), 3215-3230.
3. Bayesian Model Averaging, [Wikipedia](https://en.wikipedia.org/wiki/Bayesian_model_averaging).""" .

:BayesianModelCombination a owl:Class ;
    rdfs:label "Bayesian Model Combination" ;
    rdfs:subClassOf :EnsembleLearning ;
    :definition "Bayesian Model Combination (BMC) is an ensemble learning technique that utilizes Bayesian principles for integrating multiple models to achieve superior predictive accuracy. It's a probabilistic approach where all models in the ensemble contribute to the final prediction, and their individual contributions are determined based on posterior probabilities calculated from the training data." ;
    :kb-article """## How it works
In Bayesian Model Combination, each model in the ensemble is assigned a posterior probability that represents its reliability or trustworthiness. These probabilities are calculated based on the training data using Bayes' theorem, which computes the likelihood of a hypothesis (here, a model) given the observed data. 

The models then jointly make predictions, with each model's contribution being weighted by its posterior probability. In contrast to other ensemble techniques such as bagging or boosting where the models vote for the final prediction, BMC works by averaging the model predictions based on these weights. This approach inherently handles the uncertainty and variance across different models, aiming to deliver more robust and accurate predictions.

## Considerations 
- **Model Diversity:** The strength of Bayesian Model Combination lies in the diversity of the models in the ensemble. If the models are very similar or identical, the benefits of ensemble learning are diminished.
- **Computationally Intensive:** Computing the posterior probabilities for each model can be computationally intensive, especially when dealing with large ensembles or complex models. 
- **Complexity of Interpretation:** While the predictive power of BMC may be superior, the complexity of interpretation increases as compared to individual models. The decision-making process of the ensemble can be harder to explain due to the combination of multiple models.

## References 
1. [Kuncheva, L. I., & Whitaker, C. J. (2003). Measures of diversity in classifier ensembles and their relationship with the ensemble accuracy. Machine learning, 51(2), 181-207.](https://link.springer.com/article/10.1023/A:1022859003006)
2. [Monteith, K., Carroll, J., Seppi, K., & Martinez, T. (2011). Turning Bayesian model averaging into Bayesian model combination. In 2011 IEEE International Joint Conference on Neural Networks (pp. 2657-2663). IEEE.](https://ieeexplore.ieee.org/document/6033621)
3. [Bishop, C. M. (2006). Pattern Recognition and Machine Learning. Springer.](https://www.springer.com/gp/book/9780387310732)""" .

:BayesOptimalClassifier a owl:Class ;
    rdfs:label "Bayes Optimal Classifier" ;
    rdfs:subClassOf :EnsembleLearning ;
    :definition "Ensemble Learning: Bayes Optimal Classifier refers to the application of ensemble learning methods with Bayes Optimal Classifier. Ensemble learning is a machine learning paradigm where multiple models (often called \"base learners\") are trained to solve the same problem and combined to get better results. The concept of a Bayes Optimal Classifier within an ensemble approach means combining the predictions of multiple models in a way that aligns with the principles of Bayesian probability." ;
    :kb-article """## How it Works
Ensemble Learning with the Bayes Optimal Classifier combines the concept of ensemble learning with the principles of Bayesian probability. In this setup, an ensemble of base learners is created, each of which is a unique machine learning model trained on the dataset. The individual predictions of these base learners are then combined according to the principles of Bayesian probability to make a final prediction.

The main idea here is that while a single model may not be able to perfectly estimate the true probability distribution of the data, an ensemble of models, each with different strengths and weaknesses, can collectively offer a more accurate approximation. The Bayes Optimal Classifier then serves as the decision-making mechanism, choosing the class with the highest combined probability as per the base learners' predictions.

This approach leverages the strengths of both ensemble learning (the ability to counteract individual model biases and improve generalizability) and the Bayes Optimal Classifier (the probabilistic framework for making optimal decisions given the available evidence).

## Considerations
- Ensemble methods are computationally intensive and can be slower than single-model approaches due to the need to train multiple base learners and combine their predictions.
- The choice of base learners and the method for combining their predictions are critical to the success of the ensemble.
- Implementing a Bayes Optimal Classifier in an ensemble requires a reliable way to estimate class probabilities from the base learners' predictions.
- Careful tuning of base learners and ensemble parameters is often necessary to prevent overfitting while maintaining high performance.
- The model interpretability may decrease, as ensemble models, particularly those combined using sophisticated methods, can be more complex and harder to understand than individual models.

## References
1. ["Ensemble Learning"](https://en.wikipedia.org/wiki/Ensemble_learning)
2. ["Bayesian Classification"](https://en.wikipedia.org/wiki/Bayesian_classification)
3. Zhou, Zhi-Hua. 2012. "Ensemble Methods: Foundations and Algorithms." Chapman and Hall/CRC.
4. Bishop, Christopher M. 2006. "Pattern Recognition and Machine Learning." Springer.
5. Dietterich, Thomas G. 2000. ["Ensemble Methods in Machine Learning"](https://link.springer.com/chapter/10.1007/3-540-45014-9_1) In: Kittler J., Roli F. (eds) Multiple Classifier Systems. MCS 2000. Lecture Notes in Computer Science, vol 1857. Springer, Berlin, Heidelberg.""" .

:BERT a owl:Class ;
    rdfs:label "BERT" ;
    rdfs:subClassOf :Transformer-basedLearning ;
    :synonym "Bidirectional Encoder Representations from Transformers" .

:BinaryClassification a owl:Class ;
    rdfs:label "Binary Classification" ;
    rdfs:subClassOf :Classifying .

:BinaryLargeObject a owl:Class ;
    rdfs:label "Binary Large Object" ;
    skos:altLabel "BLOB",
        "Blob" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Binary_large_object> ;
    :definition "A binary large object (BLOB) is a collection of binary data stored as a single entity. Blobs are typically images, audio or other multimedia objects, though sometimes binary executable code is stored as a blob." ;
    :todo "sometimes a record, but not always.  always Binary Data (but we don't have Data and Binary Data tax).  Also do we need to distinguish between information and data?  Don't think so.  IBO that is encoded as binary is Binary Data.  The notion of \"object\" is distinct as it may be part of file, part of DB, or file (part of file system).  Binary padding would relate, though is padding information if just used to pad (e.g., all zeroes?)" .

:BinarySegment a owl:Class ;
    rdfs:label "Binary Segment" ;
    rdfs:subClassOf :DigitalArtifact ;
    :definition "A binary segment is a partition of binary information within a larger binary object, which arranges a set of binary objects for its purpose.   For example, code, data, heap, and stack segments are segments of the binary information used by a process.  Code and data segments are also found in object files." .

:BiometricAuthentication a :CredentialHardening,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Biometric Authentication" ;
    rdfs:subClassOf :CredentialHardening,
        [ a owl:Restriction ;
            owl:onProperty :authenticates ;
            owl:someValuesFrom :UserAccount ] ;
    :d3fend-id "D3-BAN" ;
    :definition "Using biological measures in order to authenticate a user." ;
    :kb-reference :BiometricAuthentication,
        :Reference-TokenlessBiometricTransactionAuthorizationMethodAndSystem,
        :Reference-www.biometric-solutions.com_keystroke-dynamics .

:Blob a owl:Class ;
    rdfs:label "Blob" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Binary_large_object> ;
    :definition "A binary large object (BLOB) is a collection of binary data stored as a single entity. Blobs are typically images, audio or other multimedia objects, though sometimes binary executable code is stored as a blob. They can exist as persistent values inside some databases, or exist at runtime as program variables in some languages. The term is used in NoSQL databases, especially in key-value store databases such as Redis. The term is also used by languages that allow runtime manipulation of Blobs, like JavaScript. (en)" .

:BlockDevice a owl:Class ;
    rdfs:label "Block Device" ;
    skos:altLabel "Block Special File" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :BootSector ],
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :Partition ],
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :PartitionTable ],
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :Volume ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Device_file#BLOCKDEV> ;
    :definition """A block device (or block special file) provides buffered access to hardware devices, and provides some abstraction from their specifics.

IEEE Std 1003.1-2017: A file that refers to a device. A block special file is normally distinguished from a character special file by providing access to the device in a manner such that the hardware characteristics of the device are not visible.""" ;
    rdfs:seeAlso <https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_79> .

:BookReference a owl:Class ;
    rdfs:label "Book Reference" ;
    rdfs:subClassOf :TechniqueReference ;
    :pref-label "Book" .

:BooleanExpressionMatching a owl:Class ;
    rdfs:label "Boolean Expression Matching" ;
    rdfs:subClassOf :LogicalRules ;
    :definition "Boolean Expression Matching is a computational technique used in symbolic logic and computer science. It involves the process of evaluating or comparing boolean expressions, which are logical statements that can either be true or false, against certain patterns or conditions. This technique is widely used in fields like search engine algorithms, database queries, and computer programming languages." ;
    :kb-article """## How it works
Boolean Expression Matching essentially involves applying logical operations (AND, OR, NOT) to evaluate or match boolean expressions. This is typically done in two steps:

1. **Parsing**: The boolean expression is first parsed into a form that the machine can understand. This involves breaking the expression into individual components (variables, operators, and parentheses), and organizing these components into a logical structure, often a binary tree. Each node in the tree represents a logical operation (AND, OR, NOT), and the leaves represent the variables.

2. **Evaluation or Matching**: Once the parsing is complete, the evaluation or matching process begins. For evaluation, truth values are assigned to the variables, and the logical operations are executed to determine the overall truth value of the expression. For matching, the parsed boolean expression is compared against a pattern or a set of conditions. This is often done by traversing the tree and checking each node and leaf against the pattern. 

## Considerations
- Complexity: The complexity of Boolean Expression Matching can increase exponentially with the size of the expression, so it's important to consider the performance implications for large expressions.
- Error Handling: Errors in boolean expressions (e.g., missing or extra operators, unmatched parentheses) can lead to incorrect results or system failures. Therefore, robust error handling is essential.
- Truth Table: For complex boolean expressions, a truth table can be useful for understanding and verifying the expected outcomes.
- Optimization: Techniques like Boolean simplification or minimization can be used to optimize the expression and improve performance.

## References
1. M. Huth, M. Ryan, "Logic in Computer Science: Modelling and Reasoning about Systems", Cambridge University Press, 2nd edition. [Link](https://www.cambridge.org/gb/academic/subjects/computer-science/programming-languages-and-applied-logic/logic-computer-science-modelling-and-reasoning-about-systems-2nd-edition?format=HB)
2. George Boole, "An Investigation of the Laws of Thought", Dover Publications. [Link](https://www.amazon.com/Investigation-Laws-Thought-George-Boole/dp/0486788822)
3. "How to Construct a Truth Table for a Boolean Expression", Brilliant.org. [Link](https://brilliant.org/wiki/truth-tables/)""" .

:Boosting a owl:Class ;
    rdfs:label "Boosting" ;
    rdfs:subClassOf :EnsembleLearning ;
    :definition "Boosting employs sequential ensemble techniques, where learners are trained sequentially, and fusion methods rely on different voting mechanisms. The goal is to create a strong classifier from multiple weak classifiers by building models that learn from the training data and attempt to correct the errors of the previous models." ;
    :kb-article """## How it works
Boosting is a sequential ensemble learning method where each subsequent model aims to correct the mistakes made by the previous models. It starts by training a weak learner on the input data. Then, a second weak learner is trained, with a focus on the previously misclassified instances, in an attempt to improve upon the errors of the first model. This process continues iteratively, with each new model giving more importance to the data points that were poorly handled by the previous models. The final prediction is made by aggregating the predictions of all the weak learners. Boosting algorithms, such as AdaBoost, SGB, and XGBoost, offer interpretability, help reduce bias and variance, and are applicable to regression and classification problems. 

## Considerations 
Boosting can be computationally expensive, prone to overfitting, and slower to train compared to other ensemble methods. Nevertheless, boosting provides an effective approach for building strong classifiers from multiple weak learners through a sequential learning process.

There are three main types of Boosting algorithms
 - Adaptive Boosting
Adaptive Boosting (sometimes called AdaBoost) works by adding equal importance to each piece of a dataset and running it through the base learning algorithms. Every algorithm that errors, the boosting algorithm assigns a higher importance to. This continues until an acceptable level of confidence is reached.
 - Gradient Boosting
Gradient Boosting starts by training multiple models simultaneously to gather a strong estimate of strength to build new base learning algorithms.
 - XGBoosting
XGBoosting is a scalable tree boosting model. Using decision trees, weight is assigned to each variable and put into a decision tree. Outputs that are classified by the algorithm as wrong or weak are put into a second decision tree and the results form a stronger model.

## References 
_TBD See KB Cards for content_ 
- https://en.wikipedia.org/wiki/Ensemble_learning
- https://reader.elsevier.com/reader/sd/pii/S1319157823000228?token=B05B898C984FAB268E6646A481ACF213B56D930F15DCA0F9F4D603E1FC9AA37472627AF9A2F96E99D0299C071F4FD666&originRegion=us-east-1&originCreation=20230512212601
 - Mitchell, Rory, and Eibe Frank. "Accelerating the XGBoost algorithm using GPU computing." PeerJ Computer Science 3 (2017): e127.
 - Natekin, Alexey, and Alois Knoll. "Gradient boosting machines, a tutorial." Frontiers in neurorobotics 7 (2013): 21.
 - Schapire, Robert E. "A brief introduction to boosting." Ijcai. Vol. 99. 1999.
 - Zhang, Cha, and Yunqian Ma, eds. Ensemble machine learning: methods and applications. Springer Science & Business Media, 2012.""" .

:BootLoader a owl:Class ;
    rdfs:label "Boot Loader" ;
    skos:altLabel "Bootloader" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Bootloader> ;
    :definition "A bootloader is software that is responsible for booting a computer. When a computer is turned off, its software‍—‌including operating systems, application code, and data‍—‌remains stored on non-volatile memory. When the computer is powered on, it typically does not have an operating system or its loader in random-access memory (RAM). The computer first executes a relatively small program stored in read-only memory (ROM, and later EEPROM, NOR flash) along with some needed data, to initialize RAM (especially on x86 systems) to access the nonvolatile device (usually block device, eg NAND flash) or devices from which the operating system programs and data can be loaded into RAM." .

:BootloaderAuthentication a owl:Class,
        owl:NamedIndividual,
        :PlatformHardening ;
    rdfs:label "Bootloader Authentication" ;
    rdfs:subClassOf :PlatformHardening,
        [ a owl:Restriction ;
            owl:onProperty :authenticates ;
            owl:someValuesFrom :BootLoader ] ;
    :d3fend-id "D3-BA" ;
    :definition "Cryptographically authenticating the bootloader software before system boot." ;
    :kb-reference :Reference-UEFIPlatformInitialization-Specification ;
    :synonym "Secure Boot" .

:BootRecord a owl:Class ;
    rdfs:label "Boot Record" ;
    rdfs:subClassOf :Record ;
    :definition "A d3f:Record which is an essential component of the early boot (system initialization) process." .

:BootSector a owl:Class ;
    rdfs:label "Boot Sector" ;
    rdfs:subClassOf :BootRecord ;
    :definition "A boot record [boot sector] is the sector of a persistent data storage device (e.g., hard disk, floppy disk, optical disc, etc.) which contains machine code to be loaded into random-access memory (RAM) and then executed by a computer system's built-in firmware (e.g., the BIOS, Das U-Boot, etc.)." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Boot_sector> .

:BootstrapAggregating a owl:Class ;
    rdfs:label "Bootstrap Aggregating" ;
    rdfs:subClassOf :ResamplingEnsemble ;
    :definition "Bootstrap Aggregating, often called Bagging, is a resampling ensemble machine learning technique. The primary aim of this method is to reduce the variance in a prediction model by generating multiple versions of the original dataset through bootstrapping and then aggregating the outputs of individual models built on these different datasets." ;
    :kb-article """## How it works
The bagging algorithm works by generating several sub-samples from the original dataset, with replacement. Each of these sub-samples is used to train a separate model, and the results of these models are then combined to give a final prediction. This is typically achieved through majority voting for classification tasks or averaging for regression tasks.

The basic idea is to create several different models which are slightly different due to the randomness in the dataset they are trained on. By aggregating the results of these models, the variance is reduced, and the robustness of the predictions is increased. This is particularly effective for algorithms that have high variance, like decision trees.

## Considerations
- Bagging is a powerful tool to reduce variance, but it's important to remember it won't help reduce bias. If the underlying model is biased, the bagging method may not improve prediction accuracy.
- Bagging works well for high variance, low bias models (complex models), but might not be as effective for high bias, low variance models (simpler models).
- Bagging can lead to increased computational cost because multiple models have to be trained on different samples. This can become an issue with larger datasets.
- The underlying models must be independent of each other for bagging to work well. If the models are highly correlated, bagging may not effectively reduce the variance.
- The choice of the base estimator can greatly influence the performance of bagging. Decision trees are often used due to their susceptibility to variations in the input data.

## References
1. [Bootstrap Aggregating Wikipedia](https://en.wikipedia.org/wiki/Bootstrap_aggregating)
2. [Introduction to Bagging](https://towardsdatascience.com/introduction-to-bagging-7f39e691bdf0)
3. [Ensemble Learning in Machine Learning: Getting Started](https://machinelearningmastery.com/start-here/#algorithms)
4. [Breiman, L. (1996). Bagging predictors. Machine learning, 24(2), 123-140.](https://link.springer.com/article/10.1023/A:1018054314350)
5. [Bagging and Random Forest Ensemble Algorithms for Machine Learning](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3885826/)""" .

:BroadcastDomainIsolation a :NetworkIsolation,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Broadcast Domain Isolation" ;
    rdfs:subClassOf :NetworkIsolation,
        [ a owl:Restriction ;
            owl:onProperty :filters ;
            owl:someValuesFrom :LocalAreaNetworkTraffic ] ;
    :d3fend-id "D3-BDI" ;
    :definition "Broadcast isolation restricts the number of computers a host can contact on their LAN." ;
    :kb-article """## How it works
Software Defined Networking, or other network encapsulation technologies intercept host broadcast traffic then route it to a specified destination per a configured policy.

This can be implemented within hypervisors, networking hardware (WAPs, switches, routers), or virutal hardware.

## Considerations
This technique is highly dependent on network infrastructure and networking requirements.""" ;
    :kb-reference :Reference-BroadcastIsolationAndLevel3NetworkSwitch_HewlettPackardEnterpriseDevelopmentLP,
        :Reference-PrivateVirtualLocalAreaNetworkIsolation_CiscoTechnologyInc ;
    :synonym "Network Segmentation" .

:Browser a owl:Class ;
    rdfs:label "Browser" ;
    rdfs:subClassOf :UserApplication,
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :BrowserExtension ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Web_browser> ;
    :definition "A web browser (commonly referred to as a browser) is a software application for retrieving, presenting, and traversing information resources on the World Wide Web. An information resource is identified by a Uniform Resource Identifier (URI/URL) and may be a web page, image, video or other piece of content. Hyperlinks present in resources enable users easily to navigate their browsers to related resources. Although browsers are primarily intended to use the World Wide Web, they can also be used to access information provided by web servers in private networks or files in file systems." ;
    rdfs:seeAlso <http://wordnet-rdf.princeton.edu/id/13376000-n> .

:BrowserExtension a owl:Class ;
    rdfs:label "Browser Extension" ;
    rdfs:subClassOf :UserApplication,
        [ a owl:Restriction ;
            owl:onProperty :extends ;
            owl:someValuesFrom :Browser ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Browser_extension> ;
    :definition "A browser extension is a plug-in that extends the functionality of a web browser in some way. Some extensions are authored using web technologies such as HTML, JavaScript, and CSS. Browser extensions can change the user interface of the web browser without directly affecting viewable content of a web page; for example, by adding a \"toolbar.\"" .

:BucketOfModels a owl:Class ;
    rdfs:label "Bucket of Models" ;
    rdfs:subClassOf :EnsembleLearning ;
    :definition "A bucket of models is an ensemble technique in which a model selection algorithm is used to choose the best model for each problem." ;
    :kb-article """## How it works
When tested with only one problem, a bucket of models can produce no better results than the best model in the set, but when evaluated across many problems, it will typically produce much better results, on average, than any model in the set.

## Considerations 

## References 
- https://en.wikipedia.org/wiki/Ensemble_learning""" ;
    :todo "Review: Does Best Model exist?" .

:BuildTool a owl:Class ;
    rdfs:label "Build Tool" ;
    skos:altLabel "Build Automation Tool" ;
    rdfs:subClassOf :DeveloperApplication ;
    :definition "A tool that automates the process of creating a software build and the associated processes including: compiling computer source code into binary code, packaging binary code, and running automated tests." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Build_automation> .

:BusinessCommunicationPlatformClient a owl:Class ;
    rdfs:label "Business Communication Platform Client" ;
    rdfs:subClassOf :CollaborativeSoftware ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Business_communication> ;
    :definition "Client software to enable the process of sharing information between employees within and outside a company.  Business communication encompasses topics such as marketing, brand management, customer relations, consumer behavior, advertising, public relations, corporate communication, community engagement, reputation management, interpersonal communication, employee engagement, and event management. It is closely related to the fields of professional communication and technical communication." .

:ByteSequenceEmulation a :NetworkTrafficAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Byte Sequence Emulation" ;
    rdfs:subClassOf :NetworkTrafficAnalysis ;
    :d3fend-id "D3-BSE" ;
    :definition "Analyzing sequences of bytes and determining if they likely represent malicious shellcode." ;
    :kb-article """## How it works

Bytes are analyzed as if they are machine code instructions, and such instructions that are a common component of known shellcode are noted, such as stack pivots, reads from a Memory Address Table, and system calls for functions that disable protections or execute code.  For example, the x86 instruction `b0 0b: mov $11, %ax`, with no further alterations to the `%ax` register, followed by `cd 80: syscall` executes the system call `execve()` in the Linux kernel, which replaces the current process with another one specified -- this is a common action in shellcode, so this sequence would be flagged.

This technique detects shellcode despite whether or not it would cause a buffer overflow in the target binary.

If the sequence of bytes contains a sequence similar to that used in malicious shellcode, the entire byte sequence is flagged and a follow-on technique may be invoked.

## Considerations

### False Negatives
If the shellcode instructions are far apart, simple implementations might not detect the shellcode.

Due to the nature of assembly instructions not having a defined start or end, implementations which do not process all start sequences (for example, when they a find byte sequence of interest, continue scanning forwards from the end of it) might not detect the shellcode.

This technique might not detect more complex or obfuscated instructions.  For that purpose, Dynamic Analysis or Emulated File Analysis could assist by analyzing the actual instruction function.

This technique may not detect self-modifying code.  To make it harder for a process to modify itself, Process Segment Execution Prevention should be used, while noting its considerations.

This technique might not detect malicious shellcode which reuses instructions in the target binary for malicious effect, as memory references in the presumed assembly code are not dereferenced.  Dynamic Analysis and Emulated File Analysis, when set up properly to fork from the running target binary, might detect this.  Process Segment Execution Prevention combined with Segment Address Offset Randomization frequently makes introduction of shellcode through overwriting a saved return pointer more difficult.  Call stack depth analysis might detect excessive reuse of instructions in the target binary.  Shadow Stack Frames might detect that a stack frame's return address has changed and Stack Frame Canary Verification might detect that the stack frame's return address was overwritten.  Other heuristic methods might detect jump-oriented programming shellcode.

With inserting code directly, that it is not a buffer overflow, and just some place where code is executed either to a file or a write-what-where, the buffer overflow mitigations do not help.  Behavioral analysis could detect this, or proper access control could mitigate this.

### False Positives

Byte sequences containing code that is never used as machine code are still analyzed and flagged for anomalies, and [eventually](http://mathforum.org/library/drmath/view/55871.html), it is likely that an attack sequence will arise from the sheer volume of bytes transmitted.""" ;
    :kb-reference :Reference-Network-BasedBufferOverflowDetectionByExploitCodeAnalysis_InformationSecurityResearchCentre,
        :Reference-Network-levelPolymorphicShellcodeDetectionUsingEmulation ;
    :synonym "Shellcode Transmission Detection" .

:C4.5 a owl:Class ;
    rdfs:label "C4.5" ;
    rdfs:subClassOf :DecisionTree ;
    :definition """C4.5 is a supervised learning algorithm developed by Ross Quinlan which is used for classification tasks. It is a statistical classifier which creates a decision tree to make predictions based on input variables. The algorithm uses a set of training instances to derive a decision tree that can classify additional instances.

or 

C4.5 is an algorithm that is strongly based off ID3. It creates decision trees the same way as ID3. C4.5 improves on several aspects of ID3, including handling discreet variables, handling training data with missing values, and has the ability to automatically prune the decision trees it creates.""" ;
    :kb-article """## How it works
C4.5 builds decision trees the same way as ID3, using the concept of information entropy. C4.5 improves on several aspects of ID3, including handling discrete variables, handling training data with missing values, and has the ability to automatically prune the decision trees it creates.  C4.5 uses information gain ratio as its splitting criterion rather than information gain.


## How it works
C4.5 begins by inspecting the input data and determining the attribute that most effectively splits the data into distinct classes - this attribute is placed at the root of the decision tree. The dataset is then divided based on the values of this attribute. This process is recursively applied to each divided subset in a depth-first manner, producing a decision tree where each node is a decision point and each leaf node is a class label. 

The C4.5 algorithm also handles missing data and attributes with differing costs. It uses entropy and information gain for attribute selection and can handle continuous attributes by splitting them into binary ones. Post-pruning techniques are used in the C4.5 algorithm to overcome overfitting, a common issue with decision tree algorithms, enhancing its accuracy on unseen data.

## Considerations 

- Performance: C4.5 performs best with datasets having many attributes, as the algorithm constructs trees based on attribute values.

- Overfitting: While C4.5 does use post-pruning techniques to handle overfitting, it may still be sensitive to noise and outliers in the data.

- Missing data: C4.5 can handle missing data, but the treatment of missing values may impact the tree's effectiveness.

- Interpretability: The decision tree models created by C4.5 are quite interpretable and can be readily understood by humans.

## References 

- [J. R. Quinlan. C4.5: Programs for Machine Learning. Morgan Kaufmann Publishers, 1993.](http://hunch.net/~coms-4771/quinlan.pdf)
  
- [Kotsiantis, S.B. (2013) Decision trees: a recent overview. Artif. Intell. Rev. 39, 261–283](https://link.springer.com/article/10.1007/s10462-011-9272-4)

- [A Detailed Introduction to the C4.5 Algorithm](https://towardsdatascience.com/a-detailed-introduction-to-the-c4-5-algorithm-933b5fca0e49)""" ;
    :todo "Review: Definition" .

:C5.0 a owl:Class ;
    rdfs:label "C5.0" ;
    rdfs:subClassOf :DecisionTree ;
    :definition "C5.0 is an algorithm used for decision tree learning, which also forms the base for other machine learning models like random forests and rule-based models. It is an extension of Quinlan's earlier C4.5 algorithm and is known for its efficiency and accuracy in predicting the outcome based on learned decision rules." ;
    :kb-article """## How it works

C5.0 creates a decision tree from a set of training data using the concept of information entropy. The algorithm begins by choosing an attribute of the data that most effectively splits its set of samples into subsets enriched in one class or the other. Its effectiveness is measured by the normalized information gain (difference in entropy). The attribute with the highest normalized information gain is chosen to make the decision. The algorithm then recurses on the smaller sublists.

One of the key improvements of C5.0 over C4.5 is the use of a boosting mechanism to build an ensemble of classifiers. Boosting is an iterative process where each new classifier focuses on the instances misclassified by the previous ones. These classifiers then vote on the final classification. In this way, C5.0 can build more accurate and robust predictive models.

## Considerations 

- C5.0 decision trees can potentially become complex and hard to interpret when dealing with high-dimensional data. Pruning strategies may be necessary to avoid overfitting.
- Despite having boosting mechanisms to handle noise and outliers, C5.0 can still be sensitive to noisy data and may perform poorly on such datasets.
- As with all decision tree algorithms, C5.0 might not perform well on tasks where linear separation is more natural.

## References 

1. [C5.0 Decision Tree - Algorithm by Salford Systems](https://www.salford-systems.com/resources/c50-algorithm/)
2. Kelleher, J., Mac Namee, B., & D'Arcy, A. (2015). [Fundamentals of machine learning for predictive data analytics: algorithms, worked examples, and case studies](https://mitpress.mit.edu/books/fundamentals-machine-learning-predictive-data-analytics). MIT Press.
3. Quinlan, J. R. (1993). [C4.5: Programs for Machine Learning](https://www.elsevier.com/books/c45-programs-for-machine-learning/quinlan/978-1-55860-238-0). Morgan Kaufmann Publishers.""" .

:CACertificateFile a owl:Class ;
    rdfs:label "CA Certificate File" ;
    rdfs:subClassOf :CertificateFile ;
    :definition "A file containing a digital certificate issued by a certificate authority (CA).  Certificate authorities store, issue, and sign digital certificates used as part of the public key infrastructure." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Certificate_authority>,
        <http://dbpedia.org/resource/Public_key_infrastructure> .

:CacheMemory a owl:Class ;
    rdfs:label "Processor Cache Memory" ;
    rdfs:subClassOf :PrimaryStorage,
        [ a owl:Restriction ;
            owl:onProperty :accessed-by ;
            owl:someValuesFrom :CentralProcessingUnit ],
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :ProcessSegment ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :CacheMemory ] ;
    rdfs:isDefinedBy "https://whatis.techtarget.com/definition/memory" ;
    :definition "Cache memory is temporary storage that is more readily available to the processor than the computer's main memory source, located between the main memory and the processor.  It is typically either integrated directly into the CPU chip (level 1 cache) or placed on a separate chip with a bus interconnect with the CPU (level 2 cache)." ;
    rdfs:seeAlso "https://dbpedia.org/page/CPU_cache" .

:CallStack a owl:Class ;
    rdfs:label "Call Stack" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :StackFrame ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Call_stack> ;
    :definition "In computer science, a call stack is a stack data structure that stores information about the active subroutines of a computer program. This kind of stack is also known as an execution stack, program stack, control stack, run-time stack, or machine stack, and is often shortened to just \"the stack\". Although maintenance of the call stack is important for the proper functioning of most software, the details are normally hidden and automatic in high-level programming languages. Many computer instruction sets provide special instructions for manipulating stacks." .

:CanopyClustering a owl:Class ;
    rdfs:label "Canopy Clustering" ;
    rdfs:subClassOf :ClusterAnalysis ;
    :definition "Canopy Clustering is a fast, unsupervised pre-clustering algorithm often utilized to speed up the more computationally-intensive clustering methods like K-Means or Hierarchical Clustering. The technique separates data points into overlapping \"canopies\" or rough clusters, based on a simple distance measure, before the main clustering algorithm is applied." ;
    :kb-article """## How it works
Canopy Clustering works in two stages. In the first stage, the algorithm iterates through the data points, assigning each point to a 'canopy' based on a pre-specified distance measure. Each data point can belong to more than one canopy, leading to overlapping clusters. This process continues until all data points are assigned to at least one canopy. 

In the second stage, the algorithm employs a stricter distance measure within each canopy to form the final clusters. The canopies help to reduce the search space and therefore computational cost by allowing the algorithm to only consider data points within the same canopy for clustering in this stage. The exact way this is done varies depending on what other clustering algorithm is being sped up.

## Considerations
- Canopy Clustering is primarily a pre-processing step, not an end in itself. It is typically used to speed up more computationally expensive clustering algorithms.
- The performance of Canopy Clustering is largely dependent on the choice of distance measures. Therefore, understanding the dataset and the relationship between data points is crucial.
- Canopy Clustering creates overlapping clusters, which can be a benefit or a drawback depending on the context. It might not be suitable for applications where distinct, non-overlapping clusters are required.
- The algorithm is sensitive to the order of the input data. Different orderings of data points can result in different canopies.

## References
1. Andrew McCallum, Kamal Nigam, and Lyle H. Ungar. [Efficient Clustering of High Dimensional Data Sets with Application to Reference Matching](https://dl.acm.org/doi/10.1145/502512.502525). Proceedings of the sixth ACM SIGKDD international conference on Knowledge discovery and data mining.
2. M. Steinbach, G. Karypis, V. Kumar, [A comparison of document clustering techniques](http://glaros.dtc.umn.edu/gkhome/node/115), in: Proceedings of KDD Workshop on Text Mining, Boston, 2000.""" .

:Capability a owl:Class ;
    rdfs:label "Capability" ;
    rdfs:subClassOf :D3FENDThing,
        [ a owl:Restriction ;
            owl:onProperty :assessed-by ;
            owl:someValuesFrom :CapabilityAssessment ],
        [ a owl:Restriction ;
            owl:onProperty :has-feature ;
            owl:someValuesFrom :CapabilityFeature ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Capability_(systems_engineering)> ;
    :comment """Source Definitions for DoDAF-DM2 Term: "(JCIDS):  The ability to achieve a desired effect under specified standards and conditions through combinations of means and ways to perform a set of tasks.
(DoDAF/CADM):  An ability to achieve an objective. (DDDS Counter (333/1)(A))
(JC3IEDM):  The potential ability to do work, perform a function or mission, achieve an objective, or provide a service.
(MODAF):  Capabilities in the MODAF sense are specifically not about equipment but are a high level specification of the enterprise’s ability. A capability is a classification of some ability – and can be specified regardless of whether the enterprise is currently able to achieve it. For example, one could define a capability “Manned Interplanetary Travel” which no-one can currently achieve, but which may be planned or aspired to. Capabilities in MODAF are not time-dependent – once defined they are persistent. It is only the Capability Requirement that changes.
(NAF):  The ability of one or more resources to deliver a specified type of effect or a specified course of action. (GEN TERM)
(NAF):  A high level specification of the enterprise's ability. (MM)
(JCS 1-02):  The ability to execute a specified course of action. (A capability may or may not be accompanied by an intention.)
(Webster's):  1. The quality of being capable; ability.  2. A talent or ability that has potential for development or use.  3. The capacity to be used, treated, or developed for a specific purpose.
(Merriam-Webster's Eleventh Collegiate Dictionary): A feature or factor capable of development: POTENTIALITY.    3. The facility or potential for an indicated use or deployment.
(Joint Publication 1-02, Dictionary of Military and Associated Terms, 12 Apr 2001 (as amended trhough 30 May 2008) ): The ability to exercise a specified course of action (A capability may or may not be accompanied by an intention)
(Dictionary.com): The quality of being capable; capacity; ability: His capability was unquestionable. The ability to undergo or be affected by a given treatment or action: the capability of glass in resisting heat. Usually, capabilities. qualities, abilities, features, etc., that can be used or developed; potential: Though dilapidated, the house has great capabilities
(Wiktionary): The power or ability to generate an outcome
(www.staffordshireprepared.gov.uk/glossary/): Originally a military term which includes the aspects of personnel, equipment, training, planning and operational doctrine. Now used to mean a demonstrable capacity or ability to respond to and recover from a particular threat or hazard."

CJCS Guide 3401D: https://www.jcs.mil/Portals/36/Documents/Library/Handbooks/g3401.pdf?ver=2016-02-05-175742-457 : "capability. The ability to execute a specified course of action. (A capability may or may not be accompanied by an intention.)"

USG Compendium of Interagency and Associated Terms: https://www.jcs.mil/Portals/36/Documents/Doctrine/dictionary/repository/usg_compendium.pdf?ver=2019-11-04-174229-423 "capability - means to accomplish a mission, function, or objective." DHS, DHS Lexicon, Terms, Mar 17;

USG Compendium of Interagency and Associated Terms: https://www.jcs.mil/Portals/36/Documents/Doctrine/dictionary/repository/usg_compendium.pdf?ver=2019-11-04-174229-423  "capability - Provides the means to accomplish a mission or function resulting from the performance of one or more critical tasks, under specified conditions, to target levels of performance. A capability may be delivered with any combination of properly planned, organized, equipped, trained, and exercised personnel that achieves the desired outcome."
DHHS, National Health Security Review 2010‐ 2014, Terms, Jan 17""" ;
    rdfs:seeAlso <https://web.archive.org/web/20081123014953/http://www.dtic.mil/doctrine/jel/new_pubs/jp1_02.pdf> .

:CapabilityAssessment a owl:Class ;
    rdfs:label "Capability Assessment" ;
    rdfs:subClassOf :Assessment,
        [ a owl:Restriction ;
            owl:onProperty :assesses ;
            owl:someValuesFrom :Capability ],
        [ a owl:Restriction ;
            owl:onProperty :has-evidence ;
            owl:someValuesFrom :AdminFeatureAssessment ],
        [ a owl:Restriction ;
            owl:onProperty :has-evidence ;
            owl:someValuesFrom :DefensiveTechniqueAssessment ],
        [ a owl:Restriction ;
            owl:onProperty :has-implementation ;
            owl:someValuesFrom :CapabilityImplementation ] .

:CapabilityFeature a owl:Class ;
    rdfs:label "Capability Feature" ;
    rdfs:subClassOf :D3FENDCatalogThing ;
    :definition "A distinguishing characteristic of a capability (e.g., performance, portability, or functionality)." .

:CapabilityFeatureClaim a owl:Class ;
    rdfs:label "Capability Feature Claim" ;
    skos:altLabel "Provider Claim" ;
    rdfs:subClassOf :Statement,
        [ a owl:Restriction ;
            owl:onProperty :assessed-by ;
            owl:someValuesFrom :DefensiveTechniqueAssessment ],
        [ a owl:Restriction ;
            owl:onProperty :author ;
            owl:someValuesFrom :Agent ],
        [ a owl:Restriction ;
            owl:onProperty :comments ;
            owl:someValuesFrom xsd:string ],
        [ a owl:Restriction ;
            owl:onProperty :created ;
            owl:someValuesFrom xsd:dateTime ],
        [ a owl:Restriction ;
            owl:onProperty :implemented-by ;
            owl:someValuesFrom :CapabilityImplementation ],
        [ a owl:Restriction ;
            owl:onProperty :modified ;
            owl:someValuesFrom xsd:dateTime ] ;
    :todo "Like proposed Claim type, specific to a CM Capability (Defensive Technique); i.e., Capability Claim." .

:CapabilityImplementation a owl:Class ;
    rdfs:label "Capability Implementation" ;
    rdfs:subClassOf :D3FENDCatalogThing,
        [ a owl:Restriction ;
            owl:onProperty :features ;
            owl:someValuesFrom :AdministrativeFeature ],
        [ a owl:Restriction ;
            owl:onProperty :latency ;
            owl:someValuesFrom :D3FENDCatalogThing ],
        [ a owl:Restriction ;
            owl:onProperty :operating-system ;
            owl:someValuesFrom xsd:string ],
        [ a owl:Restriction ;
            owl:onProperty :version ;
            owl:someValuesFrom xsd:string ] .

:CAPEC-663 a :CommonAttackPattern,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Exploitation of Transient Instruction Execution" ;
    rdfs:subClassOf :CommonAttackPattern ;
    rdfs:isDefinedBy "https://capec.mitre.org/data/definitions/663.html" ;
    :capec-id "CAPEC-553" .

:CAPECThing a owl:Class ;
    rdfs:label "CAPEC Thing" .

:CART a owl:Class ;
    rdfs:label "CART" ;
    rdfs:subClassOf :DecisionTree ;
    :definition "Classification and Regression Trees (CART) is a type of decision tree algorithm that can be used for both classification and regression predictive modeling problems. It employs a binary splitting procedure in which all possible splits for each attribute are considered and the best split is selected, based on an impurity measure. The process is recursively applied to partition the data into subsets until a stopping criterion is met." ;
    :kb-article """## How it works
CART starts with a single node, which contains all the training examples, and then iteratively partitions the data based on the attribute that provides the maximum reduction in heterogeneity. For classification problems, the impurity of the partitions is usually measured using Gini impurity, while for regression problems, the sum of squares error is used. 

In a CART model, each internal node represents a feature, each branch represents a decision rule, and each leaf node represents an outcome. The topmost node, also known as the root, provides the best single feature to split the data. Following the branches leads to a decision based on the conditions at each internal node, eventually reaching a leaf node with a predicted outcome. The tree is built by minimizing the cost function (sum of errors) in each step, known as cost complexity pruning. Pruning helps in minimizing overfitting of the model to the training data.

## Considerations 
- CART models can easily handle both categorical and numerical data; preprocessing is often not needed.
- They are quite interpretable and can handle complex nonlinear relationships between predictors and the response variable.
- CART models can easily overfit the data if not properly pruned. Overfitting can lead to poor performance on unseen data.
- The decision boundaries in CART are always perpendicular to the predictor axis, which may not always represent the true underlying relationship.
- They can be sensitive to small changes in the training data, potentially leading to different trees.
- CART doesn't handle missing values well, hence, a preprocessing step might be required to impute missing data.

## References 
- Breiman, L., Friedman, J., Stone, C. J., & Olshen, R. A. (1984). Classification and Regression Trees. CRC press. [Link to Book](https://www.taylorfrancis.com/books/mono/10.1201/9781315139470/classification-regression-trees-leo-breiman-jerome-friedman-charles-stone-ra-olshen)
- Hastie, T., Tibshirani, R., & Friedman, J. (2009). The Elements of Statistical Learning: Data Mining, Inference, and Prediction. Springer. [Link to Book](https://web.stanford.edu/~hastie/ElemStatLearn/)""" .

:Catalog a owl:Class ;
    rdfs:label "Catalog" ;
    rdfs:subClassOf :InformationContentEntity ;
    rdfs:isDefinedBy "http://wordnet-rdf.princeton.edu/id/06499734-n" ;
    :definition "A catalog is a complete list of things; usually arranged systematically." .

:CCIControl a owl:Class ;
    rdfs:label "CCI Control" ;
    rdfs:subClassOf :ExternalControl,
        [ a owl:Restriction ;
            owl:onProperty :control-name ;
            owl:someValuesFrom xsd:string ],
        [ a owl:Restriction ;
            owl:onProperty :member-of ;
            owl:someValuesFrom :ControlCorrelationIdentifierCatalog ],
        [ a owl:Restriction ;
            owl:onProperty :published ;
            owl:someValuesFrom xsd:dateTime ] .

:CentralProcessingUnit a owl:Class ;
    rdfs:label "Central Processing Unit" ;
    rdfs:subClassOf :Processor,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :ProcessorRegister ],
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :CacheMemory ],
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :MemoryManagementUnit ],
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :MemoryProtectionUnit ] ;
    rdfs:isDefinedBy "https://en.wikipedia.org/wiki/Central_processing_unit" ;
    :definition "A central processing unit (CPU), also called a central processor, main processor or just processor, is the electronic circuitry that executes instructions comprising a computer program. The CPU performs basic arithmetic, logic, controlling, and input/output (I/O) operations specified by the instructions in the program. This contrasts with external components such as main memory and I/O circuitry, and specialized processors such as graphics" ;
    :synonym "Central Processor",
        "CPU",
        "Main Processor" .

:CentralTendency a owl:Class ;
    rdfs:label "Central Tendency" ;
    rdfs:subClassOf :DescriptiveStatistics .

:Centroid-basedClustering a owl:Class ;
    rdfs:label "Centroid-based Clustering" ;
    rdfs:subClassOf :ClusterAnalysis ;
    :definition "Centroid-Based Clustering is a type of unsupervised learning algorithm used in machine learning and data mining. This technique clusters data into groups or categories based on the mean value (the centroid) of the data points within a particular cluster. K-means is a widely used algorithm in this category." ;
    :kb-article """## How it Works
In Centroid-Based Clustering, an initial set of centroids is randomly selected, with each centroid representing a cluster. The data points are then assigned to the cluster of the closest centroid, typically using the Euclidean distance as a measure of proximity. Once all data points are assigned, the centroids are recalculated by finding the mean value of all points in a cluster. This process of assigning data points and recalculating centroids continues iteratively until the centroids no longer move significantly or a predefined termination condition is met.

The effectiveness of the algorithm depends on the initial selection of centroids. Hence, several runs of the algorithm with different initializations might be required. Moreover, the number of clusters, a vital input for the algorithm, needs to be predetermined and may not always be known in advance, which can be a potential challenge.

## Considerations 

- **Number of Clusters**: Deciding the number of clusters (k) can be challenging, especially when the data distribution is unknown. Methods like the Elbow method, Silhouette method, and Gap Statistic method can help to determine the optimal number of clusters.
- **Initialization of Centroids**: The initial selection of centroids can significantly affect the clustering outcome. Different runs may yield different results. Methods like K-means++ can help to choose initial centroids that are likely to result in a better final solution.
- **Outliers**: The presence of outliers can distort the positioning of centroids, hence pre-processing steps might be required to manage outliers.
- **Metric Selection**: The metric used to calculate the 'distance' between data points can influence the shape of the clusters. While Euclidean distance is common, other metrics like Manhattan, Minkowski, or Cosine similarity might be more appropriate in some situations.

## References 

1. Jain, A. K. (2010). "Data clustering: 50 years beyond K-means." [Pattern Recognition Letters, 31(8), 651-666](https://www.sciencedirect.com/science/article/pii/S0167865509002323).
2. Arthur, D., & Vassilvitskii, S. (2007). "K-means++: The advantages of careful seeding." Proceedings of the eighteenth annual ACM-SIAM symposium on Discrete algorithms [SODA '07](https://dl.acm.org/doi/10.5555/1283383.1283494).
3. Scikit-learn User Guide: 2.3. Clustering. Retrieved from [Scikit-Learn Documentation](https://scikit-learn.org/stable/modules/clustering.html#k-means).""" .

:Certificate a owl:Class ;
    rdfs:label "Certificate" ;
    skos:altLabel "Public Key Certificate" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :Identifier ],
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :PublicKey ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Public_key_certificate> ;
    :definition "In cryptography, a public key certificate, also known as a digital certificate or identity certificate, is an electronic document used to prove the ownership of a public key. The certificate includes information about the key, information about the identity of its owner (called the subject), and the digital signature of an entity that has verified the certificate's contents (called the issuer). If the signature is valid, and the software examining the certificate trusts the issuer, then it can use that key to communicate securely with the certificate's subject. In email encryption, code signing, and e-signature systems, a certificate's subject is typically a person or organization. However, in Transport Layer Security (TLS) a certificate's subject is typically a computer or other device, t" ;
    :todo "Since we say it contains a PK, must be PKC.  Rewire certificate hierarchy to include attribute/authorization certificates more generally.  Push this down to specifically represent PKCs.  Also key and authority issues may require parallel adjustments http://dbpedia.org/resource/Authorization_certificate" .

:Certificate-basedAuthentication a :CredentialHardening,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Certificate-based Authentication" ;
    rdfs:subClassOf :CredentialHardening ;
    :d3fend-id "D3-CBAN" ;
    :definition "Requiring a digital certificate in order to authenticate a user." ;
    :kb-reference :Reference-TokenlessBiometricTransactionAuthorizationMethodAndSystem .

:CertificateAnalysis a :CertificateAnalysis,
        :NetworkTrafficAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Certificate Analysis" ;
    rdfs:subClassOf :NetworkTrafficAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :CertificateFile ] ;
    :d3fend-id "D3-CA" ;
    :definition "Analyzing Public Key Infrastructure certificates to detect if they have been misconfigured or spoofed using both network traffic, certificate fields and third-party logs." ;
    :kb-article """## How it works
Certificate Analysis ensures that the data elements of the certificate are current and anchored in a known trust model. Certificate authorities, revocation lists, and third-party secure logs are used in the analysis. Analysis includes detection of server impersonation, phishing domains, and forged certificates.

TLS certificates are designed to expire to ensure that the cryptographic keys are forced to be changed on a regular basis. The certificates in the trust path also expire and can cause a break in the trust chain. This means that even if a server certificate is updated correctly, intermediate certificates can expire and the trust chain is not maintained. This can cause services to become unavailable.""" ;
    :kb-reference :Reference-SecuringWebTransactions .

:CertificateFile a owl:Class ;
    rdfs:label "Certificate File" ;
    rdfs:subClassOf :File,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :Certificate ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Public_key_certificate> ;
    :definition "A file containing a digital certificate. In cryptography, a public key certificate (also known as a digital certificate or identity certificate) is an electronic document used to prove the ownership of a public key. The certificate includes information about the key, information about its owner's identity, and the digital signature of an entity that has verified the certificate's contents are correct. If the signature is valid, and the person examining the certificate trusts the signer, then they know they can use that key to communicate with its owner." .

:CertificatePinning a :CredentialHardening,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Certificate Pinning" ;
    rdfs:subClassOf :CredentialHardening,
        [ a owl:Restriction ;
            owl:onProperty :authenticates ;
            owl:someValuesFrom :PublicKey ] ;
    :d3fend-id "D3-CP" ;
    :definition "Persisting either a server's X509 certificate or their public key and comparing that to server's presented identity to allow for greater client confidence in the remote server's identity for SSL connections." ;
    :kb-article """## How it works
Pinning allows for a trusted copy of a certificate or public key to be associated with a server and thus reducing the likelihood of frequently visited sites being subjected to man-in-the-middle attacks. Certificates or public keys can be pinned after a trusted connection has been established or the pinning can be preloaded in an application, which is the preferred method for mobile applications.

Pinning can take the form of certificate pinning or public key pinning.

## Forms of Pinning
* Certificate Pinning
Certificate Pinning (CP) allows for the client to verify the X509 certificate with a preloaded certificate. Typically, this is involves storing a hash of the certificate and using the stored hash for comparison to the hash of the certificate submitted during the SSL handshake.

* Public Key Pinning
Public Key Pinning (PKP) requires the extraction of a public key from server's certificate. The stored public key is compared to the server's presented public key. A public key is expected to rotate less frequently than an X509 certificate and is generally favored over certificate pinning.

An extension of PKP is Subject Public Key Information Pinning (SPKI) includes public key pinning plus additional information for SSL connections. The additional information can include preferred algorithms.

## Considerations

* With pinned certificates whenever a server updates its certificate, the pinned certificates will also need to be updated
* With pinned public keys the extracted key may be subject to key refresh policies but much less frequently
* Servers can become unavailable if pinned objects are set and not updated with the rotated identities. This may require a pinning strategy to be developed.
* The application of this technique within web browser applications has been [deprecated](https://developer.mozilla.org/en-US/docs/Web/HTTP/Public_Key_Pinning) by  popular web browser developers. They now favor certificate analysis via public certificate transparency logs, and the EXPECT-CT HTTP header.""" ;
    :kb-reference :Reference-CertificateAndPublicKeyPinning,
        :Reference-End-to-endCertificatePinning .

:CertificateTrustStore a owl:Class ;
    rdfs:label "Certificate Trust Store" ;
    rdfs:subClassOf :TrustStore,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :Certificate ] ;
    :definition "A certificate truststore is used to store public certificates used to authenticate clients by the server for an SSL connection." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Public_key_certificate>,
        <https://www.educative.io/edpresso/keystore-vs-truststore> .

:ChatroomClient a owl:Class ;
    rdfs:label "Chatroom Client" ;
    skos:altLabel "Chat Room Client" ;
    rdfs:subClassOf :CollaborativeSoftware ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Chat_room> ;
    :definition "Client software used to describe conduct any form of synchronous conferencing, occasionally even asynchronous conferencing. The term can thus mean any technology ranging from real-time online chat and online interaction with strangers (e.g., online forums) to fully immersive graphical social environments." .

:ChildProcess a owl:Class ;
    rdfs:label "Child Process" ;
    rdfs:subClassOf :Process ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Child_process> ;
    :definition "A child process in computing is a process created by another process (the parent process). This technique pertains to multitasking operating systems, and is sometimes called a subprocess or traditionally a subtask. There are two major procedures for creating a child process: the fork system call (preferred in Unix-like systems and the POSIX standard) and the spawn (preferred in the modern (NT) kernel of Microsoft Windows, as well as in some historical operating systems)." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Parent_process> .

:Classification a owl:Class ;
    rdfs:label "Classification" ;
    rdfs:subClassOf :SupervisedLearning ;
    :definition "Classification is a type of machine learning technique where the model is trained on a labeled dataset, with the objective of predicting the category or class of new, unseen data points. It's called 'supervised' because the training process is guided by known labels, and 'classification' refers to the fact that the output space is a set of finite, discrete categories or classes." ;
    :kb-article """## How it works
In supervised learning, specifically in classification, a model is trained using a labeled dataset, i.e., each input instance in the training data comes with a corresponding target output, known as a label, representing a specific class. During the training phase, the model learns to map the inputs to their respective labels. This mapping function can be linear or non-linear, depending on the complexity of the task and the specific algorithm employed.

Once the model is trained, it can be used to predict the class of unseen data points. When new, unlabeled data is fed into the model, it uses the learned function to predict which class the new instance most likely belongs to. Commonly used classification algorithms include decision trees, k-nearest neighbors (k-NN), support vector machines (SVMs), and logistic regression, among others.

## Considerations 

* **Quality of Training Data**: The success of a classification model is highly dependent on the quality of the training data. Data should be cleaned and preprocessed to remove noise and inconsistencies.
* **Class Imbalance**: In some datasets, certain classes can be underrepresented. This can lead to a bias in the model, where it performs poorly on the minority class. Techniques like oversampling, undersampling, or SMOTE can be used to address this issue.
* **Model Complexity**: A more complex model might capture intricate patterns in the data but also runs the risk of overfitting, i.e., performing well on the training data but poorly on unseen data. Regularization techniques and proper model validation can help in controlling overfitting.
* **Feature Selection**: The choice of features used to train the model can significantly impact performance. Irrelevant or redundant features might reduce model accuracy and increase computation time.
  
## References 

1. Bishop, Christopher M. (2006). [Pattern Recognition and Machine Learning](https://www.springer.com/gp/book/9780387310732). Springer. 
2. James, Gareth; Witten, Daniela; Hastie, Trevor; Tibshirani, Robert (2013). [An Introduction to Statistical Learning](https://www.springer.com/gp/book/9781461471370). Springer.
3. Scikit-Learn User Guide: [Supervised learning](https://scikit-learn.org/stable/supervised_learning.html#supervised-learning).
4. Towards Data Science: [Handling Imbalanced Datasets in Deep Learning](https://towardsdatascience.com/handling-imbalanced-datasets-in-deep-learning-f48407a0e758).""" .

:Classifying a owl:Class ;
    rdfs:label "Classifying" ;
    rdfs:subClassOf :AnalyticalPurpose .

:Client-serverPayloadProfiling a :NetworkTrafficAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Client-server Payload Profiling" ;
    rdfs:subClassOf :NetworkTrafficAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :NetworkTraffic ] ;
    :d3fend-id "D3-CSPP" ;
    :definition "Comparing client-server request and response payloads to a baseline profile to identify outliers." ;
    :kb-article """## How it works
Profiling request and response payloads across multiple clients to a single server to develop a baseline of their characteristics. May take into account request/response sizes, entropy, frequency, and rhythm. Finally, identify outliers as they may indicate a malicious payload delivery and subsequent server exploitation.


## Considerations
* Collecting metrics to establish a profile can be challenging since user behavior can change easily.
* Employees may work different hours or inconsistent schedules which will cause false positives.
* Collection of network activity to generate metrics is a computationally intensive process.
* Users may log into different workstations which may cause false positives.""" ;
    :kb-reference :Reference-MethodAndSystemForDetectingMaliciousPayloads_VectraNetworksInc .

:ClientApplication a owl:Class ;
    rdfs:label "Client Application" ;
    rdfs:subClassOf :Application ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Client_(computing)> ;
    :definition "A client application is software that accesses a service made available by a server. The server is often (but not always) on another computer system, in which case the client accesses the service by way of a network. The term applies to the role that programs or devices play in the client-server model" ;
    rdfs:seeAlso "http://attackguidev.mitre.org/techniques/T1554/ \"Compromise Client Software Binary\"" .

:ClientComputer a owl:Class ;
    rdfs:label "Client Computer" ;
    rdfs:subClassOf :Host ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Client_(computing)> ;
    :definition "A client computer is a host that accesses a service made available by a server. The server is often (but not always) on another computer system, in which case the client accesses the service by way of a network." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Host_(network)> .

:Clipboard a owl:Class ;
    rdfs:label "Clipboard" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Clipboard_(computing)> ;
    :definition "The clipboard is a buffer that some operating systems provide for short-term storage and transfer within and between application programs. The clipboard is usually temporary and unnamed, and its contents reside in the computer's RAM. The clipboard is sometimes called the paste buffer. Windows, Linux and macOS support a single clipboard transaction. Each cut or copy overwrites the previous contents. Normally, paste operations copy the contents, leaving the contents available in the clipboard for further pasting." .

:CloudConfiguration a owl:Class ;
    rdfs:label "Cloud Configuration" ;
    skos:altLabel "Cloud Configuration Information" ;
    rdfs:subClassOf :ConfigurationResource ;
    :definition "Information used to configure the services, parameters, and initial settings for a virtual server instance running in a cloud service.." .

:CloudInstanceMetadata a owl:Class ;
    rdfs:label "Cloud Instance Metadata" ;
    rdfs:subClassOf :CloudConfiguration ;
    :definition "Cloud instance metadata is configuration information on the instance and users of the instance.  This includes such information as security groups, public ip addresses, and private addresses, public keys configured, and event rotating security keys. User data can contain initialization scripts, variables, passwords, and more." ;
    rdfs:seeAlso <https://isc.sans.edu/forums/diary/Cloud+Metadata+Urls/22046> .

:CloudServiceAuthentication a owl:Class ;
    rdfs:label "Cloud Service Authentication" ;
    rdfs:subClassOf :WebAuthentication ;
    :definition "A request-response comprising a user credential presentation to a system and a verification response where the verifying party is a cloud service." .

:CloudServiceAuthorization a owl:Class ;
    rdfs:label "Cloud Service Authorization" ;
    rdfs:subClassOf :Authorization ;
    :definition "Cloud authorization is the function of specifying access rights to cloud resources." .

:CloudServiceSensor a owl:Class ;
    rdfs:label "Cloud Service Sensor" ;
    rdfs:subClassOf :Sensor,
        [ a owl:Restriction ;
            owl:onProperty :monitors ;
            owl:someValuesFrom :CloudServiceAuthentication ],
        [ a owl:Restriction ;
            owl:onProperty :monitors ;
            owl:someValuesFrom :CloudServiceAuthorization ] ;
    :definition "Senses data from cloud service platforms. Including data from cloud service  authentications, authorizations, and other activities." .

:CloudStorage a owl:Class ;
    rdfs:label "Cloud Storage" ;
    rdfs:subClassOf :SecondaryStorage ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Cloud_storage> ;
    :definition "Cloud storage is storage held within a computing cloud." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Cloud_computing> .

:CloudUserAccount a owl:Class ;
    rdfs:label "Cloud User Account" ;
    rdfs:subClassOf :UserAccount ;
    :definition "A user account on a given host is a local user account for a given cloud and specified resources within that cloud." .

:ClusterAnalysis a owl:Class ;
    rdfs:label "Cluster Analysis" ;
    rdfs:subClassOf :UnsupervisedLearning ;
    :definition "Cluster Analysis is a statistical technique used in machine learning and data mining that aims to group a set of objects in such a way that objects in the same group (called a cluster) are more similar to each other than to those in other groups. It's an unsupervised learning method that's primarily used for discovering and analyzing patterns, groupings, and structures in complex, unlabeled datasets." ;
    :kb-article """## How it works
Cluster analysis starts with a dataset and a mathematical model for a cluster. The measure of "similarity" or "distance" between data points is defined, and the algorithm tries to group the data points into clusters based on this measure. The most common clustering algorithms are hierarchical clustering, k-means clustering, DBSCAN, and spectral clustering.

For instance, k-means clustering works by selecting k random points as initial cluster centers. Each data point is then assigned to the cluster with the nearest center. The centers are recalculated as the mean of the assigned points, and the process is repeated until the centers no longer move significantly.

Hierarchical clustering, on the other hand, starts by considering each data point as a separate cluster. It then successively merges the closest pair of clusters until only one cluster (or k clusters) remains.

## Considerations 
* Choice of the right algorithm and number of clusters: Not every clustering algorithm is suitable for every type of dataset. The choice of the right algorithm and the appropriate number of clusters can be a challenging task. Methods such as the Elbow Method, Silhouette Method, and Gap Statistic can help determine the optimal number of clusters.

* Data normalization: Data often needs to be normalized or standardized before applying clustering algorithms, especially when dealing with features of different scales.

* High dimensionality: Clustering in high-dimensional spaces can be difficult due to the "curse of dimensionality". Techniques such as dimensionality reduction can help.

* Noise and outliers: Some algorithms are sensitive to noise and outliers, which can lead to less meaningful clusters.

## References 
1. [MacQueen, J. "Some Methods for classification and Analysis of Multivariate Observations."](https://projecteuclid.org/euclid.bsmsp/1200512992)
2. [Ester, M., Kriegel, H.P., Sander, J., Xu, X. "A Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise".](https://www.aaai.org/Papers/KDD/1996/KDD96-037)
3. [Scikit-Learn User Guide on Clustering](https://scikit-learn.org/stable/modules/clustering.html)
4. [Rousseeuw, P.J. "Silhouettes: a graphical aid to the interpretation and validation of cluster analysis"](https://doi.org/10.1016/0377-0427(87)90125-7) 
5. [Tibshirani, R., Walther, G., Hastie, T. "Estimating the number of clusters in a data set via the gap statistic"](https://doi.org/10.1111/1467-9868.00293)""" .

:Clustering a owl:Class ;
    rdfs:label "Clustering" ;
    rdfs:subClassOf :Summarizing .

:CodeAnalyzer a owl:Class ;
    rdfs:label "Code Analyzer" ;
    skos:altLabel "Program Analysis Tool" ;
    rdfs:subClassOf :DeveloperApplication ;
    :definition "Code analyzers automatically analyze the composition or behavior of computer programs regarding a property such as correctness, robustness, security, and safety. Program analysis can be performed without executing the program (static program analysis), during runtime (dynamic program analysis) or in a combination of both." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Program_analysis> ;
    :todo "Damn these wikipedia articles are present, but not that great; riffing and borrowing parts, not exact defs." .

:CodeRepository a owl:Class ;
    rdfs:label "Code Repository" ;
    skos:altLabel "Repository",
        "Version Control Repository" ;
    rdfs:subClassOf :Database,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :SourceCode ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Repository_(version_control)> ;
    :definition "A code repository is a form of database where code, typically source code, is stored and managed.  In revision control systems, a repository is a data structure that stores metadata for a set of files or directory structure. Depending on whether the version control system in use is distributed like (Git or Mercurial) or centralized like (Subversion, CVS, or Perforce), the whole set of information in the repository may be duplicated on every user's system or may be maintained on a single server." .

:CoefficientOfVariation a owl:Class ;
    rdfs:label "Coefficient of Variation" ;
    rdfs:subClassOf :Variability ;
    :synonym "Relative Standard Deviation",
        "RSD" .

:CollaborativeSoftware a owl:Class ;
    rdfs:label "Collaborative Software" ;
    rdfs:subClassOf :UserApplication ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Collaborative_software> ;
    :definition "Collaborative software or groupware is application software designed to help people working on a common task to attain their goals. One of the earliest definitions of groupware is \"intentional group processes plus software to support them\". Collaborative software is a broad concept that overlaps considerably with computer-supported cooperative work (CSCW). According to Carstensen and Schmidt (1999) groupware is part of CSCW. The authors claim that CSCW, and thereby groupware, addresses \"how collaborative activities and their coordination can be supported by means of computer systems.\"" .

:Collection a :OffensiveTactic,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Collection" ;
    rdfs:subClassOf :OffensiveTactic ;
    :display-order 9 .

:CollectionTechnique a owl:Class ;
    rdfs:label "Collection Technique" ;
    rdfs:subClassOf :OffensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Collection ] .

:CollectorAgent a owl:Class ;
    rdfs:label "Network Agent" ;
    rdfs:subClassOf :Software ;
    :definition "A network agent is software installed on a network node or device that transmits information back to a collector agent or management system.  Kinds of network agents include SNMP Agent, IPMI agents, WBEM agents, and many proprietary agents capturing network monitoring and management information." ;
    :synonym "Exporter" .

:Command a owl:Class ;
    rdfs:label "Command" ;
    rdfs:subClassOf :DigitalArtifact,
        :DigitalEvent ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Command_(computing)> ;
    :definition "In computing, a command is a directive to a computer program acting as an interpreter of some kind, in order to perform a specific task. Most commonly a command is either a directive to some kind of command-line interface, such as a shell, or an event in a graphical user interface triggered by the user selecting an option in a menu." .

:CommandAndControl a :OffensiveTactic,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Command And Control" ;
    rdfs:subClassOf :OffensiveTactic ;
    :display-order 10 .

:CommandAndControlTechnique a owl:Class ;
    rdfs:label "Command and Control Technique" ;
    rdfs:subClassOf :OffensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :CommandAndControl ] .

:CommandHistoryLog a owl:Class ;
    rdfs:label "Command History Log" ;
    rdfs:subClassOf :EventLog ;
    :definition "A log of commands run in an operating system shell." ;
    rdfs:seeAlso "d3f:CommandLineInterface",
        <http://dbpedia.org/resource/Command_history> .

:CommandHistoryLogFile a owl:Class ;
    rdfs:label "Command History Log File" ;
    rdfs:subClassOf :LogFile,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :CommandHistoryLog ] ;
    :definition "A command history log file is a file containing a command history, which the history of commands run in an operating system shell." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Command_history> .

:CommandLineInterface a owl:Class ;
    rdfs:label "Command Line Interface" ;
    skos:altLabel "CLI",
        "Command-line Interface",
        "CUI" ;
    rdfs:subClassOf :UserInterface ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Command-line_interface> ;
    :definition "A command-line interface or command language interpreter (CLI), also known as command-line user interface, console user interface, and character user interface (CUI), is a means of interacting with a computer program where the user (or client) issues commands to the program in the form of successive lines of text (command lines). Command-line interfaces to computer operating systems are less widely used by casual computer users, who favor graphical user interfaces. Programs with command-line interfaces are generally easier to automate via scripting." .

:CommonAttackPattern a owl:Class ;
    rdfs:label "Common Attack Pattern" ;
    rdfs:subClassOf :CAPECThing ;
    :definition "A common attack pattern that is in the CAPEC knowledge base." .

:Compiler a owl:Class ;
    rdfs:label "Compiler" ;
    rdfs:subClassOf :BuildTool,
        [ a owl:Restriction ;
            owl:onProperty :reads ;
            owl:someValuesFrom :CompilerConfigurationFile ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Compiler> ;
    :definition "In computing, a compiler is a computer program that translates computer code written in one programming language (the source language) into another language (the target language). The name \"compiler\" is primarily used for programs that translate source code from a high-level programming language to a lower level language (e.g., assembly language, object code, or machine code) to create an executable program." .

:CompilerConfigurationFile a owl:Class ;
    rdfs:label "Compiler Configuration File" ;
    rdfs:subClassOf :ApplicationConfigurationFile ;
    :definition "A file containing Information used to configure the parameters and initial settings for a compiler." .

:CompositeTechnique a owl:Class ;
    rdfs:label "Composite Technique" ;
    rdfs:subClassOf :D3FENDThing ;
    :definition "A commonly applied series of techniques which induce a greater effect than each individual technique. The techniques are applied in a strict sequence." .

:ComputingServer a owl:Class ;
    rdfs:label "Computing Server" ;
    rdfs:subClassOf :Server ;
    rdfs:isDefinedBy <https://www.encyclopedia.com/computing/dictionaries-thesauruses-pictures-and-press-releases/compute-server> ;
    :definition "A compute server is a system specifically designed to undertake large amounts of computation, usually but not necessarily in a client/server environment." .

:ConferencePaper a owl:Class ;
    rdfs:label "Conference Paper" ;
    rdfs:subClassOf :AcademicArticle .

:ConfigurationDatabase a owl:Class ;
    rdfs:label "Configuration Database" ;
    rdfs:subClassOf :ConfigurationResource,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :ConfigurationDatabaseRecord ] .

:ConfigurationDatabaseRecord a owl:Class ;
    rdfs:label "Configuration Database Record" ;
    rdfs:subClassOf :ConfigurationResource,
        :Record ;
    :synonym "Configuration Record" .

:ConfigurationFile a owl:Class ;
    rdfs:label "Configuration File" ;
    skos:altLabel "Settings File" ;
    rdfs:subClassOf :File ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Configuration_file> ;
    :definition "A file containing Information used to configure the parameters and initial settings for some computer programs. They are used for user applications, server processes and operating system settings." .

:ConfigurationInventory a :AssetInventory,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Configuration Inventory" ;
    rdfs:subClassOf :AssetInventory,
        [ a owl:Restriction ;
            owl:onProperty :inventories ;
            owl:someValuesFrom :ConfigurationResource ] ;
    :d3fend-id "D3-CI" ;
    :definition "Configuration inventory identifies and records the configuration of software and hardware and their components throughout the organization." ;
    :kb-article """## How it works

The organization retrieves configuration information through means of SNMP (MIB records), WBEM (CIM records), other protocols, or custom scripts and captures that information in a repository, typically known as a Configuration Management Database (CMDB).\"""" ;
    :kb-reference :Reference-Web-BasedEnterpriseManagement,
        :Reference-Windows-Management-Infrastructure,
        :Reference-Windows-Management-Instrumentation .

:ConfigurationManagementDatabase a owl:Class ;
    rdfs:label "Configuration Management Database" ;
    rdfs:subClassOf :ConfigurationDatabase ;
    rdfs:isDefinedBy "https://web.archive.org/web/20111201040529/http://www.best-management-practice.com/gempdf/itil_glossary_v3_1_24.pdf" ;
    :definition "A database used to store configuration records throughout their lifecycle. The Configuration Management System (CMS) maintains one or more CMDBs, and each CMDB stores attributes of configuration items (CIs), and relationships with other CIs." ;
    rdfs:seeAlso "https://dbpedia.org/resource/Configuration_management_database",
        "https://wiki.en.it-processmaps.com/index.php/ITIL_Glossary/_ITIL_Terms_C#Config_Management_Database_.28CMDB.29",
        "https://www.dmtf.org/standards/cmdbf" .

:ConfigurationResource a owl:Class ;
    rdfs:label "Configuration Resource" ;
    rdfs:subClassOf :Resource ;
    :definition "A resource used to configure a system including software and hardware." .

:ConnectedHoneynet a :DecoyEnvironment,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Connected Honeynet" ;
    rdfs:subClassOf :DecoyEnvironment,
        [ a owl:Restriction ;
            owl:onProperty :spoofs ;
            owl:someValuesFrom :LocalAreaNetwork ] ;
    :d3fend-id "D3-CHN" ;
    :definition "A decoy service, system, or environment, that is connected to the enterprise network, and simulates or emulates certain functionality to the network, without exposing full access to a production system." ;
    :kb-article """## How it works
Decoy honeypots are deployed within the enterprise environment that emulate certain services or portions of an OS to attract attackers.

## Considerations
A connected honeynet provides a tradeoff between emulating certain functionality but not being as sophisticated as an integrated honeynet. The connected honeynet may not provide enough functionality to detect new attack patterns or zero day exploits but could provide enough functionality for specific known vulnerabilities.""" ;
    :kb-reference :Reference-ModificationOfAServerToMimicADeceptionMechanism_AcalvioTechnologiesInc .

:Connection-basedClustering a owl:Class ;
    rdfs:label "Connection-based Clustering" ;
    rdfs:subClassOf :ClusterAnalysis ;
    :definition "Connection-based clustering, also known as graph-based clustering, is a family of machine learning algorithms that use the concept of 'connection' to group similar data points together. In this context, 'connection' often refers to a network or a graph structure where nodes represent data points and edges signify some measure of similarity or distance between them. The aim is to identify densely connected regions, or clusters, within the graph." ;
    :kb-article """## How it works
Connection-based clustering works by first establishing a measure of similarity or distance between each pair of data points in the dataset, which is represented as a graph. The nodes in this graph correspond to individual data points, and the edges represent the connection between them. The weight of each edge usually indicates the level of similarity or the distance between the nodes it connects.

Once the graph is formed, the next step is to identify clusters within it. Clustering algorithms typically work by identifying densely connected sub-graphs, i.e., groups of nodes that have a high degree of connectivity among themselves but are sparsely connected with nodes outside their group. The intuition behind this is that data points in the same cluster are more similar to each other than to data points in different clusters.

There are several algorithms for performing connection-based clustering, including Spectral Clustering and Markov Clustering. These algorithms leverage concepts from graph theory and linear algebra to identify clusters in the graph.

## Considerations 
- Choosing an appropriate measure of similarity or distance is crucial, as it directly affects the structure of the graph and hence the output of the clustering algorithm.
- The complexity of the graph can become high for large datasets, as the number of potential connections grows quadratically with the number of data points.
- Interpretability can be challenging due to the complexity of graph structures. 
- There can be issues with determining the optimal number of clusters, similar to other clustering techniques.
- As the clustering process is based on the connectivity of the data, it may not perform well on data with weak or ambiguous connections.

## References 
1. Luxburg, U. V. (2007). A tutorial on spectral clustering. Statistics and computing, 17(4), 395-416. [Link](https://arxiv.org/abs/0711.0189)
2. Dongen, S. V. (2000). Graph clustering by flow simulation. PhD thesis, University of Utrecht. [Link](http://www.library.uu.nl/digiarchief/dip/diss/1895620/inhoud.htm)
3. Wu, C. H., & Chow, T. W. S. (2004). Graph-based clustering with background knowledge. IEEE Transactions on Knowledge and Data Engineering, 16(1), 57-71. [Link](https://ieeexplore.ieee.org/abstract/document/1262277)
4. Fortunato, S. (2010). Community detection in graphs. Physics Reports, 486(3-5), 75-174. [Link](https://arxiv.org/abs/0906.0612)""" .

:ConnectionAttemptAnalysis a :NetworkTrafficAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Connection Attempt Analysis" ;
    rdfs:subClassOf :NetworkTrafficAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :IntranetNetworkTraffic ] ;
    :d3fend-id "D3-CAA" ;
    :definition "Analyzing failed connections in a network to detect unauthorized activity." ;
    :kb-article """## How it works
Connection Attempt Analysis in multiple ways.

### Monitoring traffic to unallocated IP space
One approach looks for failed connection attempts against unallocated IP space. First, network traffic is captured to map out the network to identify network assets as well as unallocated IP space. The map is then used to determine if connection attempts are being made to the unallocated IP space.

### Monitoring for sequentially transmitted traffic
Another approach passively inspects network traffic with application protocol analyzers observing network activity characteristics such as volume of packets sent/ received, TCP session attributes, and connection information between hosts (start time, source/destination host, services, etc.). Then using pattern matching to identify traffic which appears to be probing for network hosts.

## Considerations

* Implementations that rely on analysis of unallocated IP address space increase in their complexity with network size and decentralized network infrastructure.
* Inventory of unallocated IP space should should be continuously updated to mitigate the risk of false positives.
* IPv6 also introduces challenges including IPv6 traffic bypassing IPv4 specific protection systems (ex. firewalls and IDS) and complexity in managing both IPv6 and IPv4 addresses.""" ;
    :kb-reference :Reference-DetectingNetworkReconnaissanceByTrackingIntranetDark-netCommunications_VECTRANETWORKSInc ;
    :synonym "Network Scan Detection" .

:ConnectSocket a owl:Class ;
    rdfs:label "Connect Socket" ;
    rdfs:subClassOf :SystemCall,
        [ a owl:Restriction ;
            owl:onProperty :connects ;
            owl:someValuesFrom :Pipe ] ;
    :definition "The connect socket system call connects the socket to a target address." ;
    rdfs:seeAlso <https://man7.org/linux/man-pages/man2/connect.2.html> .

:ConsoleOutputFunction a owl:Class ;
    rdfs:label "Console Output Function" ;
    rdfs:subClassOf :Subroutine ;
    :definition "Outputs characters to a computer console." .

:ContainerBuildTool a owl:Class ;
    rdfs:label "Container Build Tool" ;
    rdfs:subClassOf :SoftwarePackagingTool ;
    :definition "A software build tool that creates a container (e.g., Docker container) for deployment." .

:ContainerImage a owl:Class ;
    rdfs:label "Container Image" ;
    rdfs:subClassOf :File,
        :SoftwarePackage ;
    rdfs:isDefinedBy <https://www.docker.com/resources/what-container> ;
    :definition """A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another. A Docker container image is a lightweight, standalone, executable package of software that includes everything needed to run an application: code, runtime, system tools, system libraries and settings.

Container images become containers at runtime and in the case of Docker containers - images become containers when they run on Docker Engine. Available for both Linux and Windows-based applications, containerized software will always run the same, regardless of the infrastructure. Containers isolate software from its environment and ensure that it works uniformly despite differences for instance between development and staging.""" .

:ContainerOrchestrationSoftware a owl:Class ;
    rdfs:label "Container Orchestration Software" ;
    rdfs:subClassOf :ServiceApplication ;
    :definition "A d3f:Software which manages and coordinates running one or more d3f:ContainerProcess." .

:ContainerProcess a owl:Class ;
    rdfs:label "Container Process" ;
    rdfs:subClassOf :ApplicationProcess ;
    :definition "A running instance of a d3f:ContainerImage" .

:ContainerRuntime a owl:Class ;
    rdfs:label "Container Runtime" ;
    rdfs:subClassOf :ServiceApplication,
        [ a owl:Restriction ;
            owl:onProperty :runs ;
            owl:someValuesFrom :ContainerImage ] ;
    :definition "A software layer between d3f:ContainerProcess and d3f:Kernel which often mediates the invocation of d3f:SystemCall" .

:Contribution a owl:Class ;
    rdfs:subClassOf :D3FENDThing,
        [ a owl:Restriction ;
            owl:onProperty :created ;
            owl:someValuesFrom xsd:dateTime ],
        [ a owl:Restriction ;
            owl:onProperty :has-contributor ;
            owl:someValuesFrom :Agent ] .

:ControlCatalog a owl:Class ;
    rdfs:label "Control Catalog" ;
    rdfs:subClassOf :Catalog,
        [ a owl:Restriction ;
            owl:onProperty :has-member ;
            owl:someValuesFrom :ExternalControl ],
        [ a owl:Restriction ;
            owl:onProperty :version ;
            owl:someValuesFrom [ a rdfs:Datatype ;
                    owl:unionOf (
                            xsd:integer
                            xsd:string ) ] ] ;
    :definition "A control catalog is a complete list of protective measures for systems, organizations, or individuals for subject domains (e.g., security and privacy.)" .

:ControlCorrelationIdentifierCatalog a owl:Class ;
    rdfs:label "Control Correlation Identifier Catalog" ;
    rdfs:subClassOf :ControlCatalog,
        [ a owl:Restriction ;
            owl:onProperty :has-member ;
            owl:someValuesFrom :CCIControl ] ;
    :definition "A control correlation identifier (CCI) catalog provides a catalog of CCIs for a given release date." ;
    rdfs:seeAlso "https://public.cyber.mil/stigs/cci/" .

:ConvolutionalNeuralNetwork a owl:Class ;
    rdfs:label "Convolutional Neural Network" ;
    rdfs:subClassOf :DeepNeuralNetClassification ;
    :definition """A Convolutional Neural Network (CNN) is a type of artificial neural network specifically designed for processing structured grid data, such as images. It utilizes layers of convolutional operations to automatically and adaptively learn spatial hierarchies of features from the input data.
 
or

A class of artificial neural network most commonly applied to analyze visual imagery.CNNs use a mathematical operation called convolution in place of general matrix multiplication in at least one of their layers.""" ;
    :kb-article """## How it works
A Convolutional Neural Network (CNN) primarily consists of three types of layers: convolutional, pooling, and fully connected layers. 

1. **Convolutional layers**: In these layers, multiple filters (or kernels) slide across the input data to produce a feature map, which highlights certain characteristics from the input. These characteristics might be edges, colors, or other image features. 

2. **Pooling layers**: They perform a down-sampling operation along the spatial dimensions (width, height), which reduces the computational complexity for subsequent layers and helps in extracting dominant features which are rotational and positional invariant.

3. **Fully connected layers**: The final set of layers in a CNN are typically fully connected layers. They take the high-level filtered images and translate them into a final output class, like a dog or cat. 

The layers are stacked on top of each other to form a multi-depth neural network structure. The strength of CNNs is their ability to automatically learn and improve from the experience, much like the principles of deep learning.

## Considerations
* **Computationally Intensive**: CNNs require significant computational resources, especially for larger models and bigger datasets. Hardware acceleration (like GPUs) may be necessary.
* **Requires Large Datasets**: To be effective and avoid overfitting, CNNs often require large amounts of labeled training data.
* **Architecture Choices**: Designing a CNN involves making several decisions about layer types, sizes, and the number of layers. This process can require a lot of experimentation and fine-tuning.
* **Not Ideal for Non-Grid Data**: CNNs excel in tasks involving grid data like images, but they might not be the best choice for other types of structured data.

## References
1. [A Comprehensive Guide to Convolutional Neural Networks — the ELI5 Way](https://towardsdatascience.com/a-comprehensive-guide-to-convolutional-neural-networks-the-eli5-way-3bd2b1164a53)
2. [Understanding Convolutional Neural Networks for NLP](http://www.wildml.com/2015/11/understanding-convolutional-neural-networks-for-nlp/)
3. [Convolutional Neural Networks (Stanford University CS231n)](http://cs231n.github.io/convolutional-networks/)""" ;
    :todo "Review: Best definition" .

:CopyMemoryFunction a owl:Class ;
    rdfs:label "Copy Memory Function" ;
    rdfs:subClassOf :Subroutine,
        [ a owl:Restriction ;
            owl:onProperty :copies ;
            owl:someValuesFrom :MemoryBlock ] ;
    :definition "Copies a memory block from one location to another." .

:CopyToken a :CopyToken,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Copy Token" ;
    rdfs:subClassOf :SystemCall,
        [ a owl:Restriction ;
            owl:onProperty :copies ;
            owl:someValuesFrom :AccessToken ] .

:Correlation a owl:Class ;
    rdfs:subClassOf :DescriptiveStatistics .

:CorrelationClustering a owl:Class ;
    rdfs:label "Correlation Clustering" ;
    rdfs:subClassOf :High-dimensionClustering ;
    :definition "Correlation Clustering is an unsupervised learning method that assigns objects into clusters based on the similarities and dissimilarities between them. It seeks to minimize the disagreements between the similarity of the input and the output clusters, effectively grouping together objects that are most alike and separating those that differ." ;
    :kb-article """## How it works
Correlation Clustering operates on the premise that, in many real-world scenarios, determining the number of clusters is unknown and complex. The algorithm starts by treating each data point as a separate cluster and then, based on a correlation measure, iteratively merges or splits these clusters. It measures the similarity (positive correlation) or dissimilarity (negative correlation) between objects, striving to maximize intra-cluster correlations and minimize inter-cluster correlations.

Two main objectives guide this process. Firstly, the algorithm aims to minimize the number of disagreements, meaning instances where similar items are in different clusters or dissimilar items are in the same cluster. Secondly, the algorithm maximizes agreements, placing similar items in the same cluster and dissimilar items in different clusters. The clustering process continues until there are no changes in cluster assignments or until a preset threshold or limit is reached.

## Considerations
- Correlation Clustering does not require a predetermined number of clusters, making it particularly useful in scenarios where the optimal number of clusters is unknown.
- This technique can handle both positive and negative correlations, allowing it to be applicable in diverse data scenarios.
- The algorithm is sensitive to the initial configuration and might end up in a local optimum solution. It might need to be rerun with different initial conditions for better results.
- The computational complexity of the correlation clustering problem is NP-hard. This means that the computational time and resources required can increase significantly with the size of the dataset.

## References
1. [Bansal, N., Blum, A., and Chawla, S. (2004). Correlation Clustering. Machine Learning, 56(1-3), 89–113.](https://doi.org/10.1023/B:MACH.0000019813.54413.6f)
2. [Charikar, M., Guruswami, V., and Wirth, A. (2005). Clustering with qualitative information. Journal of Computer and System Sciences, 71(3), 360-383.](https://doi.org/10.1016/j.jcss.2004.10.012)
3. [Correlation Clustering - Wikipedia](https://en.wikipedia.org/wiki/Correlation_clustering)""" .

:CramersV a owl:Class ;
    rdfs:label "Cramer's V" ;
    rdfs:subClassOf :Correlation ;
    :synonym "Cramer's Phi" .

:CreateFile a owl:Class ;
    rdfs:label "Create File" ;
    rdfs:subClassOf :SystemCall,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :File ] ;
    :definition "System call to create a new file on a file system. Some operating systems implement this functionality as part of their d3f:OpenFile system call." ;
    rdfs:seeAlso <https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfile2>,
        <https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea>,
        <https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilew>,
        <https://linux.die.net/man/2/creat> .

:CreateProcess a owl:Class ;
    rdfs:label "Create Process" ;
    skos:altLabel "Process Spawn" ;
    rdfs:subClassOf :SystemCall,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :Process ] ;
    :definition "A process spawn refers to a function that loads and executes a new child process.The current process may wait for the child to terminate or may continue to execute asynchronously. Creating a new subprocess requires enough memory in which both the child process and the current program can execute. There is a family of spawn functions in DOS, inherited by Microsoft Windows. There is also a different family of spawn functions in an optional extension of the POSIX standards.  Fork-exec is another technique combining two Unix system calls, which can effect a process spawn." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Fork%E2%80%93exec>,
        <http://dbpedia.org/resource/Spawn_(computing)>,
        <https://docs.microsoft.com/en-us/windows/win32/procthread/creating-processes> .

:CreateSocket a owl:Class ;
    rdfs:label "Create Socket" ;
    rdfs:subClassOf :SystemCall,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :Pipe ] ;
    :definition "A create socket system call creates an endpoint for communication and returns a file descriptor that refers to that endpoint." ;
    rdfs:seeAlso <https://www.man7.org/linux/man-pages/man2/socket.2.html> .

:CreateThread a owl:Class ;
    rdfs:label "Create Thread" ;
    rdfs:subClassOf :SystemCall,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :Thread ] ;
    :definition "Threads are an execution model that exists independently from a language, as well as a parallel execution model. They enable a program to control multiple different flows of work that overlap in time." ;
    rdfs:seeAlso <http://dbpedia.org/resource/POSIX_Threads>,
        <https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createthread> .

:Credential a owl:Class ;
    rdfs:label "Credential" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :authenticates ;
            owl:someValuesFrom :UserAccount ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Access_control#Credential> ;
    :definition "A credential is a physical/tangible object, a piece of knowledge, or a facet of a person's physical being that enables an individual access to a given physical facility or computer-based information system. Typically, credentials can be something a person knows (such as a number or PIN), something they have (such as an access badge), something they are (such as a biometric feature), something they do (measurable behavioral patterns) or some combination of these items. This is known as multi-factor authentication. The typical credential is an access card or key-fob, and newer software can also turn users' smartphones into access devices." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Access_control> .

:CredentialAccess a :OffensiveTactic,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Credential Access" ;
    rdfs:subClassOf :OffensiveTactic ;
    :display-order 6 .

:CredentialAccessTechnique a owl:Class ;
    rdfs:label "Credential Access Technique" ;
    rdfs:subClassOf :OffensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :Credential ],
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :CredentialAccess ],
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :PasswordFile ],
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :CreateProcess ] .

:CredentialCompromiseScopeAnalysis a owl:Class,
        owl:NamedIndividual,
        :UserBehaviorAnalysis ;
    rdfs:label "Credential Compromise Scope Analysis" ;
    rdfs:subClassOf :UserBehaviorAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :Credential ] ;
    :d3fend-id "D3-CCSA" ;
    :definition "Determining which credentials may have been compromised by analyzing the user logon history of a particular system." ;
    :kb-article """## How it works

#### Memory
Credentials may be stored in memory for a variety of reasons; on Windows, they may be stored in lsass.exe.  Once a credential dumper like mimikatz runs and dumps the memory of lsass.exe, the credentials of every account logged on since boot are potentially compromised.
When such an event occurs, this analytic will give the forensic context to identify compromised users. Those users could potentially be used in later events for additional logons.


#### Hard disk
Operating System may cache a certain number of credentials onto the hard disk to use as a source of truth if it cannot contact the credential server.  In many versions of Microsoft Windows, the 10 most recent are cached by default; this setting can be changed in the Microsoft Management Console's Local Security Policy: ```Computer Configuration -> Windows Settings -> Local Policy -> Security Options -> Interactive Logon: Number of previous logons to cache -> 0```  Here we are not concerned with the alteration of the credentials but the fact that they might be read.  If the attacker has physical access to the machine they are unlikely to be stopped from reading files on the filesystem.
"In the event that the domain controller is unavailable Windows will check the last password hashes that has been cached in order to authenticate the user with the system. These password hashes are cached in the following registry setting:
HKEY_LOCAL_MACHINE\\SECURITY\\Cache
Mimikatz can retrieve these hashes if the following command is executed:
lsadump::cache" [1]

The Registry Hive, HKEY_LOCAL_MACHINE\\SAM, which is stored in the supporting files %systemroot%\\System32\\Config\\{Sam,sam.log,sam.sav}, contains the SAM file.

DC: This is stored in %systemroot%\\ntds\\ntds.dit. (https://www.ultimatewindowssecurity.com/blog/default.aspx?d=10/2017)

Sometimes memory, which contains credentials, could get on the hard disk. Like with hiberfil.sys in Windows.  Equivalent on Linux


In Linux, an attacker could read the /etc/shadow file.

Reading from /proc directory: mimipenguin, many others.

## Considerations
Effective implementation requires identifying any location that could end up containing credentials, and detecting an method of potential access to a source of credential data.

1. https://medium.com/blue-team/preventing-mimikatz-attacks-ed283e7ebdd5""" ;
    :kb-reference :Reference-AllLoginsSinceLastBoot_MITRE,
        :Reference-SystemsAndMethodsForDetectingCredentialTheft_SymantecCorp .

:CredentialEviction a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Credential Eviction" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Evict ] ;
    :d3fend-id "D3-CE" ;
    :definition "Credential Eviction techniques disable or remove compromised credentials from a computer network." ;
    :enables :Evict .

:CredentialHardening a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Credential Hardening" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Harden ] ;
    :d3fend-id "D3-CH" ;
    :definition "Credential Hardening techniques modify system or network properties in order to protect system or network/domain credentials." ;
    :enables :Harden .

:CredentialManagementSystem a owl:Class ;
    rdfs:label "Credential Management System" ;
    rdfs:subClassOf :ServiceApplication ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Credential_Management> ;
    :definition "Credential Management, also referred to as a Credential Management System (CMS), is an established form of software that is used for issuing and managing credentials as part of public key infrastructure (PKI)." .

:CredentialRevoking a :CredentialEviction,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Credential Revoking" ;
    rdfs:subClassOf :CredentialEviction,
        [ a owl:Restriction ;
            owl:onProperty :deletes ;
            owl:someValuesFrom :Credential ] ;
    :d3fend-id "D3-CR" ;
    :definition "Deleting a set of credentials permanently to prevent them from being used to authenticate." ;
    :kb-article """## How it works

Management servers with enterprise policies for account management provide the ability remove permissions, accounts, or credentials. Compromised credentials should be revoked to prevent further malicious activity.""" ;
    :kb-reference :Reference-RevokingaPreviouslyIssuedVerifiableCredential-Microsoft .

:CredentialRotation a :CredentialHardening,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Credential Rotation" ;
    rdfs:subClassOf :CredentialHardening,
        [ a owl:Restriction ;
            owl:onProperty :regenerates ;
            owl:someValuesFrom :Credential ] ;
    :d3fend-id "D3-CRO" ;
    :definition "Expiring an existing set of credentials and reissuing a new valid set" ;
    :kb-article """## How it works

Management servers with enterprise policies for account management provide the ability to change or reset passwords for accounts. Some organizations rotate credentials periodically to limit the risk of stolen credentials.

## Considerations

- When responding to an incident, severity of compromise should be considered to determine what credentials to what accounts should be regenerated
- If proactively rotating credentials periodically, several factors should be considered to determine the frequency. Also introduces some risk including promoting the creation of weak passwords and poor storage practices for employees and presents challenges in proper tracking.""" ;
    :kb-reference <http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-EvictionGuidanceforNetworksAffectedbytheSolarWindsandActiveDirectory/M365Compromise-CISA>,
        :Reference-PasswordandKeyRotation-SSH .

:CredentialTransmissionScoping a :CredentialHardening,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Credential Transmission Scoping" ;
    rdfs:subClassOf :CredentialHardening,
        [ a owl:Restriction ;
            owl:onProperty :restricts ;
            owl:someValuesFrom :Credential ] ;
    :d3fend-id "D3-CTS" ;
    :definition "Limiting the transmission of a credential to a scoped set of relying parties." ;
    :kb-reference :Reference-WebAuthentication_AnAPIForAccessingPublicKeyCredentials%0ALevel2 ;
    rdfs:seeAlso <https://pages.nist.gov/TIG-Stage/sp800-63c.html>,
        <https://www.w3.org/TR/webauthn-2/> ;
    :synonym "Phishing Resistant Authentication" .

:CryptographicKey a owl:Class ;
    rdfs:label "Cryptographic Key" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Public-key_cryptography> ;
    :definition "In cryptography, a key is a piece of information (a parameter) that determines the functional output of a cryptographic algorithm. For encryption algorithms, a key specifies the transformation of plaintext into ciphertext, and vice versa for decryption algorithms. Keys also specify transformations in other cryptographic algorithms, such as digital signature schemes and message authentication codes." .

:CustomArchiveFile a owl:Class ;
    rdfs:label "Custom Archive File" ;
    rdfs:subClassOf :ArchiveFile ;
    :definition "A custom archive file is an archive file conforming to a custom format; that is, an archive file that does not conform to a common standard." .

:CWE-20 a owl:Class ;
    rdfs:label "Improper Input Validation" ;
    rdfs:subClassOf :Weakness,
        [ a owl:Restriction ;
            owl:onProperty :weakness-of ;
            owl:someValuesFrom :UserInputFunction ] ;
    :cwe-id "CWE-20" .

:CWE-22 a owl:Class ;
    rdfs:label "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')" ;
    rdfs:subClassOf :Weakness,
        [ a owl:Restriction ;
            owl:onProperty :weakness-of ;
            owl:someValuesFrom :UserInputFunction ] ;
    :cwe-id "CWE-22" .

:CWE-77 a owl:Class ;
    rdfs:label "Improper Neutralization of Special Elements used in a Command ('Command Injection')" ;
    rdfs:subClassOf :Weakness,
        [ a owl:Restriction ;
            owl:onProperty :weakness-of ;
            owl:someValuesFrom :UserInputFunction ] ;
    :cwe-id "CWE-77" .

:CWE-78 a owl:Class ;
    rdfs:label "Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')" ;
    rdfs:subClassOf :Weakness,
        [ a owl:Restriction ;
            owl:onProperty :may-be-weakness-of ;
            owl:someValuesFrom :EvalFunction ],
        [ a owl:Restriction ;
            owl:onProperty :may-be-weakness-of ;
            owl:someValuesFrom :ProcessStartFunction ],
        [ a owl:Restriction ;
            owl:onProperty :may-be-weakness-of ;
            owl:someValuesFrom :UserInputFunction ] ;
    :cwe-id "CWE-78" .

:CWE-79 a owl:Class ;
    rdfs:label "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')" ;
    rdfs:subClassOf :Weakness,
        [ a owl:Restriction ;
            owl:onProperty :weakness-of ;
            owl:someValuesFrom :UserInputFunction ] ;
    :cwe-id "CWE-79" .

:CWE-89 a owl:Class ;
    rdfs:label "Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')" ;
    rdfs:subClassOf :Weakness,
        [ a owl:Restriction ;
            owl:onProperty :weakness-of ;
            owl:someValuesFrom :UserInputFunction ] ;
    :cwe-id "CWE-89" .

:CWE-94 a owl:Class ;
    rdfs:label "Improper Control of Generation of Code ('Code Injection')" ;
    rdfs:subClassOf :Weakness,
        [ a owl:Restriction ;
            owl:onProperty :may-be-weakness-of ;
            owl:someValuesFrom :EvalFunction ],
        [ a owl:Restriction ;
            owl:onProperty :may-be-weakness-of ;
            owl:someValuesFrom :UserInputFunction ] ;
    :cwe-id "CWE-94" .

:CWE-119 a owl:Class ;
    rdfs:label "Improper Restriction of Operations within the Bounds of a Memory Buffer" ;
    rdfs:subClassOf :Weakness,
        [ a owl:Restriction ;
            owl:onProperty :weakness-of ;
            owl:someValuesFrom :RawMemoryAccessFunction ] ;
    :cwe-id "CWE-119" .

:CWE-125 a owl:Class ;
    rdfs:label "Out-of-bounds Read" ;
    rdfs:subClassOf :Weakness,
        [ a owl:Restriction ;
            owl:onProperty :weakness-of ;
            owl:someValuesFrom :RawMemoryAccessFunction ] ;
    :cwe-id "CWE-125" .

:CWE-190 a owl:Class ;
    rdfs:label "Integer Overflow or Wraparound" ;
    rdfs:subClassOf :Weakness,
        [ a owl:Restriction ;
            owl:onProperty :weakness-of ;
            owl:someValuesFrom :MathematicalFunction ] ;
    :cwe-id "CWE-190" .

:CWE-276 a owl:Class ;
    rdfs:label "Incorrect Default Permissions" ;
    rdfs:subClassOf :Weakness,
        [ a owl:Restriction ;
            owl:onProperty :weakness-of ;
            owl:someValuesFrom :ApplicationInstaller ] ;
    :cwe-id "CWE-276" .

:CWE-287 a owl:Class ;
    rdfs:label "Improper Authentication" ;
    rdfs:subClassOf :Weakness,
        [ a owl:Restriction ;
            owl:onProperty :weakness-of ;
            owl:someValuesFrom :AuthenticationFunction ] ;
    :cwe-id "CWE-287" .

:CWE-306 a owl:Class ;
    rdfs:label "Missing Authentication for Critical Function" ;
    rdfs:subClassOf :Weakness ;
    :comment "Too broad to map to digital artifacts as it could consume any resource." ;
    :cwe-id "CWE-306" .

:CWE-352 a owl:Class ;
    rdfs:label "Cross-Site Request Forgery (CSRF)" ;
    rdfs:subClassOf :Weakness,
        [ a owl:Restriction ;
            owl:onProperty :weakness-of ;
            owl:someValuesFrom :UserInputFunction ] ;
    :cwe-id "CWE-352" .

:CWE-362 a owl:Class ;
    rdfs:label "Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')" ;
    rdfs:subClassOf :Weakness,
        [ a owl:Restriction ;
            owl:onProperty :weakness-of ;
            owl:someValuesFrom :SharedResourceAccessFunction ] ;
    :cwe-id "CWE-362" .

:CWE-400 a owl:Class ;
    rdfs:label "Uncontrolled Resource Consumption" ;
    rdfs:subClassOf :Weakness ;
    :comment "Cannot directly relate to artifacts due to breadth. Resource monitoring and limiting allocation is an approach to counter." ;
    :cwe-id "CWE-400" .

:CWE-416 a owl:Class ;
    rdfs:label "Use After Free" ;
    rdfs:subClassOf :Weakness ;
    :cwe-id "CWE-416" ;
    :todo "Model these memory artifacts." .

:CWE-434 a owl:Class ;
    rdfs:label "Unrestricted Upload of File with Dangerous Type" ;
    rdfs:subClassOf :Weakness,
        [ a owl:Restriction ;
            owl:onProperty :weakness-of ;
            owl:someValuesFrom :UserInputFunction ] ;
    :cwe-id "CWE-434" .

:CWE-476 a owl:Class ;
    rdfs:label "NULL Pointer Dereference" ;
    rdfs:subClassOf :Weakness,
        [ a owl:Restriction ;
            owl:onProperty :weakness-of ;
            owl:someValuesFrom :PointerDereferencingFunction ] ;
    :cwe-id "CWE-476" .

:CWE-502 a owl:Class ;
    rdfs:label "Deserialization of Untrusted Data" ;
    rdfs:subClassOf :Weakness,
        [ a owl:Restriction ;
            owl:onProperty :may-be-weakness-of ;
            owl:someValuesFrom :UserInputFunction ],
        [ a owl:Restriction ;
            owl:onProperty :weakness-of ;
            owl:someValuesFrom :DeserializationFunction ] ;
    :cwe-id "CWE-502" .

:CWE-611 a owl:Class ;
    rdfs:label "Improper Restriction of XML External Entity Reference" ;
    rdfs:subClassOf :Weakness,
        [ a owl:Restriction ;
            owl:onProperty :weakness-of ;
            owl:someValuesFrom :ExternalContentInclusionFunction ] ;
    :cwe-id "CWE-611" .

:CWE-787 a owl:Class ;
    rdfs:label "Out-of-bounds Write" ;
    rdfs:subClassOf :Weakness,
        [ a owl:Restriction ;
            owl:onProperty :weakness-of ;
            owl:someValuesFrom :RawMemoryAccessFunction ] ;
    :cwe-id "CWE-787" .

:CWE-798 a owl:Class ;
    rdfs:label "Use of Hard-coded Credentials" ;
    rdfs:subClassOf :Weakness,
        [ a owl:Restriction ;
            owl:onProperty :weakness-of ;
            owl:someValuesFrom :AuthenticationFunction ] ;
    :cwe-id "CWE-798" .

:CWE-862 a owl:Class ;
    rdfs:label "Missing Authorization" ;
    rdfs:subClassOf :Weakness ;
    rdfs:comment "Broad and could apply to all resource accesses." ;
    :cwe-id "CWE-862" .

:CWE-918 a owl:Class ;
    rdfs:label "Server-Side Request Forgery (SSRF)" ;
    rdfs:subClassOf :Weakness,
        [ a owl:Restriction ;
            owl:onProperty :weakness-of ;
            owl:someValuesFrom :UserInputFunction ] ;
    :cwe-id "CWE-918" .

:CycleGAN a owl:Class ;
    rdfs:label "CycleGAN" ;
    rdfs:subClassOf :Image-to-ImageTranslationGAN .

:D3FENDCatalogThing a owl:Class ;
    rdfs:label "D3FEND Catalog Thing" ;
    skos:altLabel "D3FEND Vendor Registry Thing" ;
    rdfs:subClassOf :D3FENDThing .

:D3FENDThing a owl:Class ;
    rdfs:label "D3FEND Thing" ;
    :definition "D3FEND things are concepts defined in the core D3FEND Framework." .

:D3FENDUseCase a owl:Class ;
    rdfs:label "D3FEND Use Case" ;
    rdfs:subClassOf :D3FENDUseCaseThing,
        [ a owl:Restriction ;
            owl:onProperty :has-audience ;
            owl:someValuesFrom :TargetAudience ],
        [ a owl:Restriction ;
            owl:onProperty :has-goal ;
            owl:someValuesFrom :UseCaseGoal ],
        [ a owl:Restriction ;
            owl:onProperty :has-prerequisite ;
            owl:someValuesFrom :UseCasePrerequisite ],
        [ a owl:Restriction ;
            owl:onProperty :has-procedure ;
            owl:someValuesFrom :UseCaseProcedure ] .

:D3FENDUseCaseThing a owl:Class ;
    rdfs:label "D3FEND Use Case Thing" ;
    rdfs:subClassOf :D3FENDThing .

:DataArtifactServer a owl:Class ;
    rdfs:label "Data Artifact Server" ;
    rdfs:subClassOf :ArtifactServer ;
    :definition "A data artifact server provides access services to content in a content repository.  The content repository or content store is a database of digital content with an associated set of data management, search and access methods allowing application-independent access to the content, rather like a digital library, but with the ability to store and modify content in addition to searching and retrieving. The content repository acts as the storage engine for a larger application such as a content management system or a document management system, which adds a user interface on top of the repository's application programming interface." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Content_repository> .

:Database a owl:Class ;
    rdfs:label "Database" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Database> ;
    :definition "A database is an organized collection of data, generally stored and accessed electronically from a computer system. Where databases are more complex they are often developed using formal design and modeling techniques." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Database> .

:DatabaseFile a owl:Class ;
    rdfs:label "Database File" ;
    rdfs:subClassOf :File .

:DatabaseQuery a owl:Class ;
    rdfs:label "Database Query" ;
    rdfs:subClassOf :Command ;
    :definition "A specific query expressed in SQL, SPARQL, or similar language against a database." .

:DatabaseQueryStringAnalysis a owl:Class,
        owl:NamedIndividual,
        :ProcessAnalysis ;
    rdfs:label "Database Query String Analysis" ;
    rdfs:subClassOf :ProcessAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :DatabaseQuery ] ;
    :d3fend-id "D3-DQSA" ;
    :definition "Analyzing database queries to detect [SQL Injection](https://capec.mitre.org/data/definitions/66.html)." ;
    :kb-article """## How it works

Some implementations use software hooks to intercept function calls related to database query operations. Other implementations might intercept or collect network traffic. The database query string is then extracted and analyzed with various methods, for example:
* Detecting specific administrative SQL commands
* Anomalous sequences of commands when compared to a statistical baseline.
* Anomalous commands for a given user role.

## Considerations

Some capabilities sanitize queries before permitting them to be transmitted to the database. This incurs risks such altering data in an undesired way or breaking application functionality.""" ;
    :kb-reference :Reference-SystemAndMethodForInternetSecurity_CylanceInc .

:DatabaseServer a owl:Class ;
    rdfs:label "Database Server" ;
    skos:altLabel "Network Database Resource" ;
    rdfs:subClassOf :Server,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :Database ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Database_server> ;
    :definition "A database server is a server which uses a database application that provides database services to other computer programs or to computers, as defined by the client-server model. Database management systems (DBMSs) frequently provide database-server functionality, and some database management systems (such as MySQL) rely exclusively on the client-server model for database access (while others e.g. SQLite are meant for using as an embedded database). For clarification, a database server is simply a server that maintains services related to clients via database applications." .

:DataDependency a owl:Class ;
    rdfs:label "Data Dependency" ;
    rdfs:subClassOf :Dependency ;
    :synonym "Transactional Dependency" .

:DataExchangeMapping a owl:Class,
        owl:NamedIndividual,
        :SystemMapping ;
    rdfs:label "Data Exchange Mapping" ;
    rdfs:subClassOf :SystemMapping,
        [ a owl:Restriction ;
            owl:onProperty :maps ;
            owl:someValuesFrom :DataDependency ] ;
    :d3fend-id "D3-DEM" ;
    :definition "Data exchange mapping identifies and models the organization's intended design for the flows of the data types, formats, and volumes between systems at the application layer." ;
    :kb-reference :Reference-CatiaUAFPlugin,
        :Reference-TivoliApplicationDependencyDiscoverManager7_3_0DependenciesBetweenResources,
        :Reference-UnifiedArchitectureFrameworkUAF ;
    :synonym "Data Flow Mapping",
        "Information Exchange Mapping" .

:DataInventory a :AssetInventory,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Data Inventory" ;
    rdfs:subClassOf :AssetInventory,
        [ a owl:Restriction ;
            owl:onProperty :inventories ;
            owl:someValuesFrom :Database ],
        [ a owl:Restriction ;
            owl:onProperty :inventories ;
            owl:someValuesFrom :DocumentFile ],
        [ a owl:Restriction ;
            owl:onProperty :inventories ;
            owl:someValuesFrom :Email ],
        [ a owl:Restriction ;
            owl:onProperty :inventories ;
            owl:someValuesFrom :MultimediaDocumentFile ] ;
    :d3fend-id "D3-DI" ;
    :definition "Data inventorying identifies and records the schemas, formats, volumes, and locations of data stored and used on the organization's architecture." ;
    :kb-reference :Reference-DataProcessingAndScanningSystemsForGeneratingAndPopulatingADataInventory ;
    :synonym "Data Discovery",
        "Data Inventorying" .

:DataLinkLink a owl:Class ;
    rdfs:label "Data Link Link" ;
    rdfs:subClassOf :LogicalLink ;
    :definition "A communication link between two network devices connected directly at the physical layer and on the same network segment; i.e., an OSI Layer 2 link." ;
    rdfs:seeAlso "https://dbpedia.org/resource/Link_layer" ;
    :synonym "Data Link Layer Link",
        "Layer-2 Link",
        "Link Layer Link" .

:Datalog a owl:Class ;
    rdfs:label "Datalog" ;
    rdfs:subClassOf :LogicProgramming ;
    :definition "A declarative logic programming language. While it is syntactically a subset of Prolog, Datalog generally uses a bottom-up rather than top-down evaluation model. This difference yields significantly different behavior and properties from Prolog." ;
    :kb-article """## How it works
_TBD enter text here for how the thing works_

## Considerations 

## References 
- https://en.wikipedia.org/wiki/Datalog""" .

:DBSCAN a owl:Class ;
    rdfs:label "DBSCAN" ;
    rdfs:subClassOf :Density-basedClustering ;
    :definition "DBSCAN (Density-Based Spatial Clustering of Applications with Noise) is a popular unsupervised learning technique in machine learning used for cluster analysis. It groups together points in space that are close to each other based on a distance measure and a minimum number of points. It also identifies points in the dataset that are sparse and labels them as noise." ;
    :kb-article """## How it works
DBSCAN operates by defining a neighborhood around a data point, and if the neighborhood has a sufficient number of points (determined by a user-specified parameter, MinPts), a new cluster is created. The algorithm then iterates through the remaining unvisited points in the dataset, determining whether they are reachable from the initial point. Reachability is determined by another parameter, Eps, which defines the maximum distance for two points to be considered in the same neighborhood.

Once a point is found to be a part of a cluster, its Eps-neighborhood is also part of that cluster, and the process continues until no other point can be added to the cluster. Then a new unvisited point is retrieved and processed, leading to the discovery of a further cluster or noise. This continues until all points are assigned to a cluster or labelled as noise, achieving a complete partitioning of the dataset.

## Considerations
- DBSCAN does not require the user to specify the number of clusters in the data a priori, unlike K-means.
- It can discover clusters of arbitrary shapes, unlike K-means which assumes that clusters are convex and isotropic.
- DBSCAN is sensitive to the choice of Eps and MinPts parameters. Inappropriate choice of these parameters can lead to poor clustering results.
- It may not perform well when dealing with clusters of varying densities.
- Noise points that are not part of any cluster are usually treated as anomalies, so DBSCAN can also be used for anomaly detection.
- DBSCAN is not suitable for high-dimensional data because the 'curse of dimensionality' makes it difficult for points to be close in all dimensions, leading to single-link effects and difficulty identifying meaningful clusters.

## References
1. Ester, M., H. P. Kriegel, J. Sander, and X. Xu, "A Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise". Proceedings of the 2nd International Conference on Knowledge Discovery and Data Mining, Portland, OR, AAAI Press, pp. 226-231. [Link](https://www.aaai.org/Papers/KDD/1996/KDD96-037.pdf)
2. Schubert, E., Sander, J., Ester, M., Kriegel, H. P., & Xu, X. (2017). DBSCAN revisited, revisited: why and how you should (still) use DBSCAN. ACM Transactions on Database Systems (TODS), 42(3), 19. [Link](https://dl.acm.org/doi/10.1145/3068335)
3. DBSCAN — scikit-learn 0.24.2 documentation. (n.d.). Scikit-Learn. Retrieved May 23, 2023, from [Link](https://scikit-learn.org/stable/modules/generated/sklearn.cluster.DBSCAN.html)""" .

:DeadCodeElimination a :ApplicationHardening,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Dead Code Elimination" ;
    rdfs:subClassOf :ApplicationHardening ;
    :d3fend-id "D3-DCE" ;
    :definition "Removing unreachable or \"dead code\" from compiled source code." ;
    :kb-article """## How it works

Dead code is code that is considered unreachable by normal program execution. Dead code can be created by adding code under a condition that never evaluates to true. Dead code should be removed since this type of code can produce unexpected results, if accidentally or maliciously forced to execute.

Dead code identification is typically performed by algorithms that implement program flows analysis looking for unreachable code. The dead code is eliminated by instructing compilers to remove the code through compiler flags, i.e., '-fdce' is used for Dead Code Elimination.

## Considerations

Code can also be deemed unreachable for certain run-time conditions. Different deployed systems and environments may contain some code that is unreachable for the given environment. This technique does not consider run-time conditions for unreachable code.""" ;
    :kb-reference :Reference-DeadCodeElimination .

:Deceive a :DefensiveTactic,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Deceive" ;
    rdfs:subClassOf :DefensiveTactic ;
    :definition "The deceive tactic is used to advertise, entice, and allow potential attackers access to an observed or controlled environment." ;
    :display-order 3 ;
    :display-priority 0 .

:DecisionTree a owl:Class ;
    rdfs:label "Decision Tree" ;
    rdfs:subClassOf :Classification ;
    :definition "A decision tree is a popular machine learning algorithm that provides a framework for decision making based on certain conditions. It uses a tree-like model of decisions and their possible consequences, including chance event outcomes, resource costs, and utility, which makes it a key technique in predictive modeling." ;
    :kb-article """### How it works

The decision tree algorithm uses a binary recursive partitioning process. Starting from a root node representing the entire dataset, it splits the data based on a condition that maximizes the separation of the classes (in classification tasks) or minimizes error (in regression tasks). The data is continually split at each node until a certain stopping criterion is met.

A key attribute of decision trees is their interpretable, hierarchical structure. Each internal node of the tree corresponds to a feature in the dataset, each branch corresponds to a decision rule, and each leaf node corresponds to an outcome. In a typical scenario, traversing from the root to a leaf node involves making a series of decisions (following the branches) based on feature values, ultimately leading to a predicted outcome at the leaf node.

### Considerations

- **Overfitting:** Decision trees can easily become complex and overfit the data if they're allowed to grow too deep, as they can create overly complex trees that do not generalize well from the training data.
  
- **Bias towards dominant classes:** Decision trees are biased towards the dominant classes, so balancing the dataset is a crucial preprocessing step when working with imbalanced data.

- **Non-robustness:** They are not very robust, i.e., a small change in the data can cause a large change in the final estimated tree.
  
- **Assumption of decision boundaries:** Decision trees implicitly assume that the decision boundaries are parallel to the axis, which may not always be the case.

### References

1. [Scikit-learn: Decision Trees](https://scikit-learn.org/stable/modules/tree.html)
2. [Toward Data Science: Understanding Decision Trees for Classification](https://towardsdatascience.com/understanding-decision-trees-for-classification-python-9663d683c952)
3. [Statistics Solutions: What is Decision Tree Analysis?](https://www.statisticssolutions.com/what-is-decision-tree-analysis/)
4. [Medium: Decision Trees in Machine Learning](https://medium.com/greyatom/decision-trees-a-simple-way-to-visualize-a-decision-dc506a403aeb)""" .

:DecisionTreeRegression a owl:Class ;
    rdfs:label "Decision Tree Regression" ;
    rdfs:subClassOf :RegressionAnalysisLearning ;
    :definition "Decision Tree Regression is a type of machine learning algorithm that uses a decision tree model as its underlying structure to perform regression tasks. It splits a dataset into subsets based on feature values and makes predictions based on the average target value of instances in the same leaf nodes" ;
    :kb-article """## How it works
Decision Tree Regression starts with a dataset containing multiple features and a target continuous variable. It selects the best feature to split the data based on a criterion, often the reduction in variance of the target variable. The algorithm keeps splitting the data recursively by the chosen feature, forming a tree-like structure where each node corresponds to a feature and each leaf represents a prediction.

When a new instance needs to be predicted, it traverses the tree from the root to a leaf node based on the values of the features in the instance. The prediction is then made based on the average value of the instances in the leaf node.

## Considerations 
- Overfitting: Decision tree regressors can easily overfit the training data if the depth of the tree is not controlled, capturing noise and losing its generalization capability.
- High Variance: They have a tendency to change significantly with small changes in input data, leading to high variance. Bagging methods or Random Forests can be used to mitigate this issue.
- Feature Importance: Decision tree regression gives importance to features that are closer to the root, which could bias the model if there's an irrelevant but strong feature.
- Non-Linear Relationships: While it can capture complex non-linear relationships, it may not perform well on tasks with simple linear relationships compared to other regression methods.

## References 
- [Decision Trees in Machine Learning](https://towardsdatascience.com/decision-trees-in-machine-learning-641b9c4e8052)
- [Scikit-Learn: Decision Tree Regression](https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeRegressor.html)
- [Understanding Decision Trees for Classification (Python)](https://www.datacamp.com/community/tutorials/decision-tree-classification-python)""" .

:DecoyArtifact a owl:Class ;
    rdfs:label "Decoy Artifact" ;
    skos:altLabel "Decoy",
        "Decoy Object",
        "Lure",
        "Trap" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :DigitalArtifact ] ;
    :definition "A decoy is an imitation digital artifact in any sense of a digital artifact, object, or phenomenon that is intended to deceive a cyber attacker's surveillance devices or mislead their evaluation.  Examples include fake files, accounts, hosts (honeypots), and network segments (honeynets)." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Deception_technology>,
        <https://doi.org/10.1007/978-3-319-25133-2>,
        <https://shield.mitre.org/> .

:DecoyEnvironment a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Decoy Environment" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Deceive ],
        [ a owl:Restriction ;
            owl:onProperty :manages ;
            owl:someValuesFrom :DecoyArtifact ] ;
    :d3fend-id "D3-DE" ;
    :definition "A Decoy Environment comprises hosts and networks for the purposes of deceiving an attacker." ;
    :enables :Deceive ;
    :kb-article """## Technique Overview

Systems in a decoy environment are typically configured so that some detectable means of communication does not have any legitimate business purpose.  Any communication via these means should be logged and analyzed to find potential indicators of compromise for a possible past or future attack against other systems.""" ;
    :synonym "Honeypot" .

:DecoyFile a :DecoyObject,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Decoy File" ;
    rdfs:subClassOf :DecoyObject,
        [ a owl:Restriction ;
            owl:onProperty :spoofs ;
            owl:someValuesFrom :File ] ;
    :d3fend-id "D3-DF" ;
    :definition "A file created for the purposes of deceiving an adversary." ;
    :kb-article """## How it works
The decoy file is made available as a local or network resource. Accesses to the file may be monitored. The files may be configurations, documents, executables, or other file types.


## Considerations
Properties of the file such as cryptographic checksums, file creation date, file modified date, file size, file owner etc may be modified to improve the credibility of the file.

## Example
* A CSV file with decoy user credentials is placed on a system. The system or network is then monitored to detect any accesses to the decoy files.""" ;
    :kb-reference <http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-SupplyChainCyber-deception_Cymmetria,Inc.>,
        :Reference-OpenSourceIntelligenceDeceptions_IllusiveNetworksLtd,
        :Reference-SystemAndAMethodForIdentifyingThePresenceOfMalwareAndRansomwareUsingMini-trapsSetAtNetworkEndpoints_FidelisCybersecuritySolutionsInc,
        :Reference-SystemAndMethodsThereofForPreventingRansomwareFromEncryptingDataElementsStoredInAMemoryOfAComputer-basedSystem_PaloAltoNetworksInc .

:DecoyNetworkResource a :DecoyObject,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Decoy Network Resource" ;
    rdfs:subClassOf :DecoyObject,
        [ a owl:Restriction ;
            owl:onProperty :spoofs ;
            owl:someValuesFrom :NetworkResource ] ;
    :d3fend-id "D3-DNR" ;
    :definition "Deploying a network resource for the purposes of deceiving an adversary." ;
    :kb-article """## How it works
Decoy network resources are deployed to web application servers, network file shares, or other network based sharing services.

A "honeypot" may serve a variety of decoy network resources.

## Considerations

* Developing a deployment and placement strategy for the decoy network resource.
* Personnel responsible for creation of decoy networks should consider the potential for resource exhaustion through denial of service attacks.

## Examples
* Honeypots are typically used to mimic a known system with fake vulnerabilities. This may attract attackers to the honeypot.
* Decoy accounts are also used to scan for attempted logins. The decoy accounts can provide security analysts with the attacker's potential intents and strategies.
* Tarpits are used to monitor unallocated IP space for unauthorized network activity.""" ;
    :kb-reference :Reference-AutomaticallyGeneratingNetworkResourceGroupsAndAssigningCustomizedDecoyPoliciesThereto_IllusiveNetworksLtd,
        :Reference-Deception-BasedResponsesToSecurityAttacks_CrowdstrikeInc,
        :Reference-DynamicSelectionAndGenerationOfAVirtualCloneForDetonationOfSuspiciousContentWithinAHoneyNetwork_PaloAltoNetworksInc,
        :Reference-SystemAndMethodForIdentifyingThePresenceOfMalwareUsingMini-trapsSetAtNetworkEndpoints_FidelisCybersecuritySolutionsInc .

:DecoyObject a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Decoy Object" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Deceive ] ;
    :d3fend-id "D3-DO" ;
    :definition "A Decoy Object is created and deployed for the purposes of deceiving attackers." ;
    :enables :Deceive ;
    :kb-article """## Technique Overview
Decoy objects are typically configured with detectable means of communication but do not have any legitimate business purpose. Any communication via or to these objects should be logged and analyzed to find potential indicators of compromise for a possible past or future attack against other systems.""" ;
    :synonym "Lure" .

:DecoyPersona a :DecoyObject,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Decoy Persona" ;
    rdfs:subClassOf :DecoyObject,
        [ a owl:Restriction ;
            owl:onProperty :spoofs ;
            owl:someValuesFrom :User ] ;
    :d3fend-id "D3-DP" ;
    :definition "Establishing a fake online identity to misdirect, deceive, and or interact with adversaries." ;
    :kb-article """## How it works
A false online identity is created for the purposes of interacting with adversaries in a direct or indirect manner. This includes the associated email addresses, social media accounts, and other online communication profiles.

## Considerations
* Include phone numbers and online social profiles as well as automatically or manually responding to contact made to the persona to improve realism.
* Continuous updating and managing the decoy personas and online activity streams to ensure personas do not become stale and outdated.""" ;
    :kb-reference <http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-DecoyAndDeceptiveDataObjectTechnology_Cymmetria,Inc.>,
        :Reference-DecoyPersonasForSafeguardingOnlineIdentityUsingDeception_ .

:DecoyPublicRelease a :DecoyObject,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Decoy Public Release" ;
    rdfs:subClassOf :DecoyObject ;
    :d3fend-id "D3-DPR" ;
    :definition "Issuing publicly released media to deceive adversaries." ;
    :kb-article """## How it works
Publicly released media includes press release, videos, or other marketing collateral. The media may include URLs, points of contact, or other identifiers to entice interaction from adversaries.

## Considerations
* Information used in decoy public released media must contain enough realism to deceive and provide interaction from adversaries.
* Continuous development, creation, and distribution of media and identifiers are needed to ensure adversary interaction continues over time.
* Decoy public releases could be placed on platforms with different degrees of ownership, including entirely enterprise-owned infrastructure, IaaS, and SaaS (including social applications). Platforms that are not entirely enterprise-owned may be more likely to gather information""" ;
    :kb-reference :Reference-MockAttackCybersecurityTrainingSystemAndMethods_WOMBATSECURITYTECHNOLOGIESInc .

:DecoySessionToken a :DecoyObject,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Decoy Session Token" ;
    rdfs:subClassOf :DecoyObject,
        [ a owl:Restriction ;
            owl:onProperty :spoofs ;
            owl:someValuesFrom :AccessToken ] ;
    :d3fend-id "D3-DST" ;
    :definition "An authentication token created for the purposes of deceiving an adversary." ;
    :kb-article """## How it works
Usage of decoy session tokens may be monitored to track attacker behavior or otherwise control the beliefs of the attacker.

## Considerations
* Interaction and activity with the decoy session token must be constantly monitored and analyzed to detect unauthorized activity.
* Session tokens are typically short-lived and therefore the decoy must be continuously updated to provide the appearance of it being used in the production environment.
* Automated tools can assist with maintenance and updates by automatically adjusting the decoy session token and environment to mimic the production environment.""" ;
    :kb-reference :Reference-DecoyAndDeceptiveDataObjectTechnology_CymmetriaInc .

:DecoyUserCredential a :DecoyObject,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Decoy User Credential" ;
    rdfs:subClassOf :DecoyObject,
        [ a owl:Restriction ;
            owl:onProperty :spoofs ;
            owl:someValuesFrom :Credential ] ;
    :d3fend-id "D3-DUC" ;
    :definition "A Credential created for the purpose of deceiving an adversary." ;
    :kb-article """## How it works
A detection analytic is developed to determine when a user uses decoy credentials. Subsequent actions by that user may be monitored or controlled by the defender.

A credential may be:
 * Domain username and password
 * Local system username and password

## Considerations
* Decoy credentials should be integrated with a larger decoy environment to ensure that when decoy credentials are compromised, the credentials are used to interact with a decoy asset that is being monitored.
* Continuous maintenance and updates are needed to ensure the legitimacy of the larger decoy environment and specifically the assets that utilize the decoy credentials.""" ;
    :kb-reference :Reference-DecoyAndDeceptiveDataObjectTechnology_CymmetriaInc,
        :Reference-DecoyNetwork-BasedServiceForDeceivingAttackers-AmazonTechnologies,
        :Reference-SystemAndMethodForIdentifyingThePresenceOfMalwareUsingMini-trapsSetAtNetworkEndpoints_FidelisCybersecuritySolutionsInc .

:Deep_Convolutional_GAN a owl:Class ;
    rdfs:label "Deep Convolutional GAN" ;
    rdfs:subClassOf :ImageSynthesisGAN ;
    :synonym "DCGAN" .

:DeepNeuralNetClassification a owl:Class ;
    rdfs:label "Deep Neural Network Classification" ;
    rdfs:subClassOf :ArtificialNeuralNetClassification ;
    :definition "Deep Neural Network Classification is a machine learning technique that utilizes multi-layered artificial neural networks to categorize input data into predefined classes. This technique leverages deep learning, which enables the model to learn and make intelligent decisions on its own." ;
    :kb-article """## How it works
Deep Neural Networks (DNNs) work by establishing a "neuron-like" interconnected system where each layer is formed of multiple nodes, and each node represents a mathematical operation. Input data is fed into the network and processed through each layer. The input for each layer is the output from the previous one. 

Layers in a DNN can be grouped into three types: the input layer, hidden layers, and the output layer. The input layer receives raw input data, while the hidden layers perform computations and transformations on this data. These layers use activation functions, such as ReLU or sigmoid, to introduce non-linearity into the model, enabling it to learn from complex patterns. The output layer finally gives the result in the form of classified data. 

During the training process, DNNs use a method called backpropagation and optimization algorithms like gradient descent to adjust the weights and biases of the neurons to minimize the difference between the predicted and actual output (loss). This iterative process continues until the network achieves an acceptable level of accuracy.

## Considerations 
- **Data Requirements**: Deep learning models, including DNNs, often require large volumes of labeled data for effective training.
- **Computational Resources**: Training DNNs can be computationally expensive and may require powerful hardware and considerable time, particularly for large datasets and complex networks.
- **Overfitting**: Without appropriate regularization methods, DNNs can overfit to the training data, performing poorly on unseen data.
- **Interpretability**: DNNs are often considered "black boxes," as their internal workings and decision-making processes can be difficult to interpret.
- **Architecture Selection**: The architecture of the network (e.g., the number and size of the layers) can greatly impact the model's performance. Selecting the most appropriate architecture often involves a good deal of experimentation.

## References 
1. Goodfellow, I., Bengio, Y., & Courville, A. (2016). [Deep Learning](http://www.deeplearningbook.org/). The MIT Press.
2. Chollet, F. (2017). [Deep Learning with Python](https://www.manning.com/books/deep-learning-with-python). Manning Publications.
3. Stanford University. [CS231n: Convolutional Neural Networks for Visual Recognition](http://cs231n.stanford.edu/).
4. LeCun, Y., Bengio, Y., & Hinton, G. (2015). [Deep learning](https://www.nature.com/articles/nature14539). Nature.""" .

:DeepQ-learning a owl:Class ;
    rdfs:label "Deep Q-learning" ;
    rdfs:subClassOf :Q-Learning .

:DefaultUserAccount a owl:Class ;
    rdfs:label "Default User Account" ;
    rdfs:subClassOf :UserAccount ;
    :definition "Default accounts are those that are built-into an OS, such as the Guest or Administrator accounts on Windows systems or default factory/provider set accounts on other types of systems, software, or devices." ;
    rdfs:seeAlso <https://docs.microsoft.com/en-us/windows/security/identity-protection/access-control/local-accounts> .

:DefenseEvasion a :OffensiveTactic,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Defense Evasion" ;
    rdfs:subClassOf :OffensiveTactic ;
    :display-order 5 .

:DefenseEvasionTechnique a owl:Class ;
    rdfs:label "Defense Evasion Technique" ;
    rdfs:subClassOf :OffensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :DefenseEvasion ] .

:DefensiveTactic a owl:Class ;
    rdfs:label "Defensive Tactic" ;
    rdfs:subClassOf :D3FENDThing,
        [ a owl:Restriction ;
            owl:onProperty :enabled-by ;
            owl:someValuesFrom :DefensiveTechnique ] ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/05913746-n> ;
    :definition "a plan for attaining a particular goal" .

:DefensiveTechnique a owl:Class,
        owl:NamedIndividual,
        :Technique ;
    rdfs:label "Defensive Technique" ;
    rdfs:subClassOf :CapabilityFeature,
        :D3FENDThing,
        :Technique,
        [ a owl:Restriction ;
            owl:onProperty :d3fend-id ;
            owl:someValuesFrom xsd:string ],
        [ a owl:Restriction ;
            owl:onProperty :date ;
            owl:someValuesFrom xsd:dateTime ],
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :DefensiveTactic ],
        [ a owl:Restriction ;
            owl:onProperty :kb-reference ;
            owl:someValuesFrom :TechniqueReference ] ;
    :definition "A method which makes a computer system more difficult to attack." ;
    :display-baseurl "/technique/" ;
    rdfs:seeAlso <https://csrc.nist.gov/glossary/term/security_control> ;
    :synonym "Countermeasure Technique",
        "Defensive Capability Feature",
        "Technical Security Control" .

:DefensiveTechniqueAssessment a owl:Class ;
    rdfs:label "Defensive Technique Assessment" ;
    rdfs:subClassOf :FeatureAssessment,
        [ a owl:Restriction ;
            owl:onProperty :assesses ;
            owl:someValuesFrom :DefensiveTechniqueClaim ],
        [ a owl:Restriction ;
            owl:onProperty :confidence ;
            owl:someValuesFrom xsd:integer ],
        [ a owl:Restriction ;
            owl:onProperty :counters ;
            owl:someValuesFrom :OffensiveTechnique ],
        [ a owl:Restriction ;
            owl:onProperty :rating ;
            owl:allValuesFrom [ a rdfs:Datatype ;
                    owl:oneOf (
                            "0"
                            "1"
                            "2"
                            "3" ) ] ],
        [ a owl:Restriction ;
            owl:onProperty :rating ;
            owl:cardinality "1"^^xsd:nonNegativeInteger ],
        [ a owl:Restriction ;
            owl:onProperty :stage ;
            owl:allValuesFrom [ a rdfs:Datatype ;
                    owl:oneOf (
                            "Deceive"
                            "Detect"
                            "Evict"
                            "Harden"
                            "Isolate" ) ] ],
        [ a owl:Restriction ;
            owl:onProperty :stage ;
            owl:onDataRange xsd:string ;
            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ] ;
    :comment "Extend/modify this class with additional properties as necessary. Rating and stage properties demonstrate how to apply restrictions." ;
    :definition "Assessing how well a capability implementation's capability feature functions as a countermeasure." .

:DefensiveTechniqueClaim a owl:Class ;
    rdfs:label "Defensive Technique Claim" ;
    skos:altLabel "Countermeasure Claim" ;
    rdfs:subClassOf :CapabilityFeatureClaim,
        [ a owl:Restriction ;
            owl:onProperty :cites ;
            owl:someValuesFrom :InformationContentEntity ],
        [ a owl:Restriction ;
            owl:onProperty :claims ;
            owl:someValuesFrom :DefensiveTechnique ] .

:Density-basedClustering a owl:Class ;
    rdfs:label "Density-based Clustering" ;
    rdfs:subClassOf :ClusterAnalysis ;
    :definition "Density-Based Clustering is a type of unsupervised machine learning algorithm that groups together data points in a dataset which are close to each other in the feature space and have a high density of nearby neighbors. These clusters are defined by areas of high density separated by areas of low density. Examples of density-based clustering algorithms include DBSCAN (Density-Based Spatial Clustering of Applications with Noise) and OPTICS (Ordering Points To Identify the Clustering Structure)." ;
    :kb-article """## How it works

Density-Based Clustering forms clusters based on the idea that a cluster in a dataset is a contiguous region of high point density, separated from other such clusters by contiguous regions of low point density. 

One common algorithm for Density-Based Clustering is DBSCAN. The algorithm begins with an arbitrary starting data point that has not been visited. The neighborhood of this point is extracted using a distance epsilon (`eps`). If there are a sufficient number of points (according to `minPts`) within this neighborhood then a new cluster is started, otherwise, the point is labeled as noise. The process continues until all points in the cluster are determined, then a new unvisited point is retrieved and processed, leading to the discovery of a further cluster or noise. 

## Considerations 

- Density-based clustering does not require the user to specify the number of clusters, which can be an advantage over partitioning methods like k-means.
- It can discover clusters of arbitrary shape, unlike k-means which tends to discover spherical clusters.
- It's more robust to noise and outliers as they are simply treated as low-density regions in the feature space.
- However, it may have difficulty in datasets where clusters have widely varying densities.
- Choice of `eps` and `minPts` parameters significantly influence the results. Optimal parameter settings often depend on the nature of the dataset.
- It can struggle with high-dimensional data due to the curse of dimensionality.

## References 

1. [A Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise, Ester et al., 1996](https://www.aaai.org/Papers/KDD/1996/KDD96-037.pdf)
2. [Density-Based Clustering in Spatial Databases: The Algorithm GDBSCAN and Its Applications, Sander et al., 1998](https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.121.9220)
3. [Scikit-Learn User Guide: Density-based clustering](https://scikit-learn.org/stable/modules/clustering.html#dbscan)
4. [Understanding the Curse of Dimensionality](https://towardsdatascience.com/understanding-the-curse-of-dimensionality-14425dc41004)""" .

:Density-weightedMethod a owl:Class ;
    rdfs:label "Density-weighted Method" ;
    rdfs:subClassOf :ActiveLearning ;
    :definition "The Density-Weighted method is an active learning technique that selects samples for labeling based on their estimated density in the input space. This strategy prioritizes areas of the feature space with high density, on the assumption that these areas are more informative for the learning process." ;
    :kb-article """## How it works
The Density-Weighted method works by calculating the density of unlabeled data points in the input feature space. Density in this context often refers to how close data points are to each other. The method employs a density estimation technique, such as Kernel Density Estimation or a Gaussian Mixture Model, to estimate the density of each point. Once the densities are estimated, it selects the samples with the highest density for labeling. 

The fundamental assumption is that regions with higher density have more information and will yield more accurate model predictions. By training on these regions first, the model can quickly gain a robust understanding of the most 'populated' areas of the feature space. As more labels are requested, the model's performance improves, thus optimizing the learning process with fewer labels.

## Considerations 
- **Density Estimation Accuracy**: The success of the Density-Weighted method largely depends on the accuracy of the density estimation. An inaccurate estimation may lead to sub-optimal selection of samples for labeling.
- **Computationally Intensive**: Depending on the size of the dataset and the complexity of the density estimation algorithm used, this method can be computationally intensive.
- **Assumption of Informative Regions**: This method operates under the assumption that high-density regions in the feature space are more informative. However, in some domains or applications, this might not be the case, and outliers or less dense regions could carry critical information.
- **High Dimensional Data**: In high dimensional data, the notion of density becomes less intuitive and more challenging to estimate, which might lead to issues when applying this method.

## References 
1. Settles, B. (2009). Active Learning Literature Survey. University of Wisconsin–Madison. [Link](http://burrsettles.com/pub/settles.activelearning.pdf)
2. Dasgupta, S., & Hsu, D. (2008). Hierarchical sampling for active learning. Proceedings of the 25th International Conference on Machine Learning - ICML '08. [Link](https://www.cs.columbia.edu/~djhsu/papers/hsu08hierarchical.pdf)
3. Sugiyama, M. (2015). Introduction to Statistical Machine Learning. Elsevier Science & Technology. [Link](https://www.elsevier.com/books/introduction-to-statistical-machine-learning/sugiyama/978-0-12-802121-7)
4. Cortes, C., Mohri, M., & Rostamizadeh, A. (2012). Algorithms for Learning Regressions Consistent with the Bias-Variance Tradeoff. In A. J. Smola, P. L. Bartlett, B. Schölkopf, & D. Schuurmans (Eds.), Advances in Neural Information Processing Systems 24 (pp. 985-993). Curran Associates, Inc. [Link](https://proceedings.neurips.cc/paper/2011/file/bf300a01510b0fdd20476e1a40e2fe04-Paper.pdf)
- Inovex GmbH. (n.d.). An Introduction to Active Learning. Retrieved from https://www.inovex.de/de/blog/intro-to-active-learning/""" .

:DeonticLogic a owl:Class ;
    rdfs:label "Deontic Logic" ;
    rdfs:subClassOf :ModalLogic .

:Dependency a owl:Class ;
    rdfs:label "Dependency" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :dependent ;
            owl:someValuesFrom :D3FENDThing ],
        [ a owl:Restriction ;
            owl:onProperty :provider ;
            owl:someValuesFrom :D3FENDThing ] ;
    :definition "A dependency is the relationship of relying on or being controlled by someone or something else.  This class reifies dependencies that correspond to the object property depends-on." ;
    rdfs:seeAlso "http://wordnet-rdf.princeton.edu/id/14024833-n",
        "https://www.cisa.gov/what-are-dependencies" .

:DescriptionLogic a owl:Class ;
    rdfs:label "Description Logic" ;
    rdfs:subClassOf :SymbolicReasoning ;
    :definition "Description logics (DL) are a family of formal knowledge representation languages. Many DLs are more expressive than propositional logic but less expressive than first-order logic. In contrast to the latter, the core reasoning problems for DLs are (usually) decidable, and efficient decision procedures have been designed and implemented for these problems." ;
    :kb-article """## How it works
_TBD enter text here for how the thing works_

## Considerations 

## References 
- https://en.wikipedia.org/wiki/Description_logic""" .

:DescriptiveStatistics a owl:Class ;
    rdfs:label "Descriptive Statistics" ;
    rdfs:subClassOf :StatisticalMethod .

:DeserializationFunction a owl:Class ;
    rdfs:label "Deserialization Function" ;
    rdfs:subClassOf :Subroutine ;
    :definition "Function with an input of serialized data which deserializes that data, usually with data parsing methods." .

:DesktopComputer a owl:Class ;
    rdfs:label "Desktop Computer" ;
    rdfs:subClassOf :PersonalComputer ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Desktop_computer> ;
    :definition "A desktop computer is a personal computer designed for regular use at a single location on or near a desk or table due to its size and power requirements. The most common configuration has a case that houses the power supply, motherboard (a printed circuit board with a microprocessor as the central processing unit (CPU), memory, bus, and other electronic components, disk storage (usually one or more hard disk drives, solid state drives, optical disc drives, and in early models a floppy disk drive); a keyboard and mouse for input; and a computer monitor, speakers, and, often, a printer for output. The case may be oriented horizontally or vertically and placed either underneath, beside, or on top of a desk." .

:Detect a :DefensiveTactic,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Detect" ;
    rdfs:subClassOf :DefensiveTactic ;
    :definition "The detect tactic is used to identify adversary access to or unauthorized activity on computer networks." ;
    :display-order 1 ;
    :display-priority 0 .

:DeveloperApplication a owl:Class ;
    rdfs:label "Developer Application" ;
    rdfs:subClassOf :UserApplication ;
    :definition "An application used to develop computer software including applications used for software construction, analysis, testing, packaging, or management." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Application_development>,
        <http://dbpedia.org/resource/Application_software> .

:DHCPNetworkTraffic a owl:Class ;
    rdfs:label "DHCP Network Traffic" ;
    rdfs:subClassOf :NetworkTraffic ;
    :definition "DHCP Network Traffic is network traffic related to the DHCP protocol, used by network nodes to negotiate and configure either IPv4 or IPv6 addresses." .

:DHCPServer a owl:Class ;
    rdfs:label "DHCP Server" ;
    rdfs:subClassOf :Server ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Dynamic_Host_Configuration_Protocol> ;
    :definition "A Dynamic Host Configuration Protocol (DHCP) server is a type of server that assigns IP addresses to computers.  DHCP servers are used to assign IP addresses to computers and other devices automatically.  The DHCP server is responsible for assigning the unique IP address to each device." .

:DialUpModem a owl:Class ;
    rdfs:label "Dial Up Modem" ;
    rdfs:subClassOf :Modem ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Modem#Dial-up> ;
    :definition "A dial-up modem transmits computer data over an ordinary switched telephone line that has not been designed for data use. This contrasts with leased line modems, which also operate over lines provided by a telephone company, but ones which are intended for data use and do not impose the same signaling constraints. The modulated data must fit the frequency constraints of a normal voice audio signal, and the modem must be able to perform the actions needed to connect a call through a telephone exchange, namely: picking up the line, dialing, understanding signals sent back by phone company equipment (dial tone, ringing, busy signal,) and on the far end of the call, the second modem in the connection must be able to recognize the incoming ring signal and answer the line." .

:DigitalArtifact a owl:Class ;
    rdfs:label "Digital Artifact" ;
    rdfs:subClassOf :Artifact,
        :DigitalObject ;
    :definition "An information-bearing artifact (object) that is, or is encoded to be used with, a digital computer system. This concept is broad to include the literal instances of an artifact, or an implicit summarization of changes to or properties of other artifacts." ;
    :display-baseurl "/dao/artifact/" ;
    rdfs:seeAlso "https://www.iso.org/obp/ui/#iso:std:iso-iec:19770:-1:ed-3:v1:en",
        <http://dbpedia.org/resource/Digital_artifactual_value>,
        <http://dbpedia.org/resource/Virtual_artifact> ;
    :synonym "Digital Asset" .

:DigitalEvent a owl:Class ;
    rdfs:label "Digital Event" ;
    rdfs:subClassOf :D3FENDThing .

:DigitalObject a owl:Class ;
    rdfs:label "Digital Object" ;
    rdfs:subClassOf :D3FENDThing ;
    :definition "A digital object is the top-level class for an object that exists in a digital environment. The digital object may be virtual or physical." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Digital_artifactual_value>,
        <http://dbpedia.org/resource/Virtual_artifact> .

:DigitalSystem a owl:Class ;
    rdfs:label "Digital System" ;
    rdfs:subClassOf :DigitalArtifact,
        :System ;
    :definition "A digital system is a group of interacting or interrelated digital artifacts that act according to a set of rules to form a unified whole. A digital system, surrounded and influenced by its environment, is described by its boundaries, structure and purpose and expressed in its functioning. Systems are the subjects of study of systems theory." ;
    rdfs:seeAlso <http://dbpedia.org/resource/System> .

:DimensionReduction a owl:Class ;
    rdfs:label "Dimension Reduction" ;
    rdfs:subClassOf :UnsupervisedLearning ;
    :definition "Dimension Reduction refers to the process of reducing the number of random variables under consideration by obtaining a set of principal variables. It can be divided into feature selection and feature extraction. This technique is paramount in machine learning and data analysis to simplify models, mitigate issues arising from the curse of dimensionality, and to improve interpretability and visualization." ;
    :kb-article """## How it works
Dimension Reduction primarily works through two techniques: feature selection and feature extraction.

Feature selection involves choosing a subset of the original features that are most relevant to the predictive models. Methods include techniques like forward selection, backward elimination, and recursive feature elimination. The goal is to remove irrelevant or redundant features while preserving the ones that contribute most to the information of the dataset.

On the other hand, feature extraction transforms the data in the high-dimensional space to a space of fewer dimensions. The data transformation may be linear, as in Principal Component Analysis (PCA), or nonlinear, as in manifold learning. PCA is one of the most widely used methods in this category. It identifies the axes in the high-dimensional space along which the data varies the most and projects the data into this new space of fewer dimensions. 

## Considerations 
- Dimensionality reduction techniques often involve trade-offs between simplicity and accuracy. Reducing too many dimensions can lead to loss of relevant information and a decrease in the performance of the model.
- The choice of dimensionality reduction method should be based on the dataset at hand. Techniques like PCA assume linear correlations among variables, which might not hold for all datasets.
- Dimension reduction can also unintentionally remove features that are responsible for bias or variance in the model. It's crucial to understand the impact of dimension reduction on the performance and interpretability of the model.

## References 
1. Jolliffe, I.T., 2002. [Principal component analysis](https://www.springer.com/gp/book/9780387954424). Springer.
2. Guyon, I., & Elisseeff, A., 2003. [An Introduction to Variable and Feature Selection](https://jmlr.org/papers/volume3/guyon03a/guyon03a.pdf). Journal of Machine Learning Research.
3. Van Der Maaten, L., Postma, E., & Van den Herik, J., 2009. [Dimensionality Reduction: A Comparative Review](https://www.tilburguniversity.edu/upload/59afb3b8-21a5-4c78-8eb3-6510597382db_TICC%20WP%2009-005.pdf). Tilburg University Technical Report.
4. Bishop, C. M., 2006. [Pattern Recognition and Machine Learning](http://users.isr.ist.utl.pt/~wurmd/Livros/school/Bishop%20-%20Pattern%20Recognition%20And%20Machine%20Learning%20-%20Springer%20%202006.pdf). Springer.""" .

:Directory a owl:Class ;
    rdfs:label "Directory" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :File ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Directory_(computing)> ;
    :definition "In computing, a directory is a file system cataloging structure which contains references to other computer files, and possibly other directories. On many computers, directories are known as folders, or drawers to provide some relevancy to a workbench or the traditional office file cabinet." .

:DirectoryService a owl:Class ;
    rdfs:label "Directory Service" ;
    rdfs:subClassOf :NetworkService ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Directory_service> ;
    :definition "In computing, directory service or name service maps the names of network resources to their respective network addresses. It is a shared information infrastructure for locating, managing, administering and organizing everyday items and network resources, which can include volumes, folders, files, printers, users, groups, devices, telephone numbers and other objects. A directory service is a critical component of a network operating system. A directory server or name server is a server which provides such a service. Each resource on the network is considered an object by the directory server. Information about a particular resource is stored as a collection of attributes associated with that resource or object." .

:Discovery a :OffensiveTactic,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Discovery" ;
    rdfs:subClassOf :OffensiveTactic ;
    :display-order 7 .

:DiscoveryTechnique a owl:Class ;
    rdfs:label "Discovery Technique" ;
    rdfs:subClassOf :OffensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Discovery ] .

:DiscriminantAnalysis a owl:Class ;
    rdfs:label "Discriminant Analysis" ;
    rdfs:subClassOf :MultivariateAnalysis .

:DiskEncryption a owl:Class,
        owl:NamedIndividual,
        :PlatformHardening ;
    rdfs:label "Disk Encryption" ;
    rdfs:subClassOf :PlatformHardening,
        [ a owl:Restriction ;
            owl:onProperty :encrypts ;
            owl:someValuesFrom :Storage ] ;
    :d3fend-id "D3-DENCR" ;
    :definition "Encrypting a hard disk partition to prevent cleartext access to a file system." ;
    :kb-reference :Reference-LUKS1On-DiskFormatSpecificationVersion1.2.3 .

:DisplayAdapter a owl:Class ;
    rdfs:label "Display Adapter" ;
    skos:altLabel "Display Card",
        "Graphics Adapter",
        "Video Card" ;
    rdfs:subClassOf :OutputDevice ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Video_card> ;
    :definition "A graphics card (also called a display card, video card, display adapter, or graphics adapter) is an expansion card which generates a feed of output images to a display device (such as a computer monitor). Frequently, these are advertised as discrete or dedicated graphics cards, emphasizing the distinction between these and integrated graphics. At the core of both is the graphics processing unit (GPU), which is the main part that does the actual computations, but should not be confused with the video card as a whole, although \"GPU\" is often used to refer to video cards." .

:DisplayDeviceDriver a owl:Class ;
    rdfs:label "Display Device Driver" ;
    rdfs:subClassOf :HardwareDriver,
        [ a owl:Restriction ;
            owl:onProperty :drives ;
            owl:someValuesFrom :DisplayAdapter ] ;
    :definition "A device driver for a display adapter." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Device_driver>,
        <http://dbpedia.org/resource/Display_adapter> .

:DisplayServer a owl:Class ;
    rdfs:label "Display Server" ;
    skos:altLabel "Window Server" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Display_server> ;
    :definition "A display server or window server is a program whose primary task is to coordinate the input and output of its clients to and from the rest of the operating system, the hardware, and each other. The display server communicates with its clients over the display server protocol, a communications protocol, which can be network-transparent or simply network-capable. The display server is a key component in any graphical user interface, specifically the windowing system." .

:Distribution-basedClustering a owl:Class ;
    rdfs:label "Distribution-based Clustering" ;
    rdfs:subClassOf :ClusterAnalysis ;
    :definition "Distribution-Based Clustering is a class of techniques used in Machine Learning for data partitioning, where each cluster is mathematically modeled as a statistical distribution. It operates under the assumption that data points in a specific cluster follow a certain statistical distribution such as Gaussian. One of the popular examples of these techniques is the Expectation-Maximization algorithm using Gaussian Mixture Models." ;
    :kb-article """## How it works
Distribution-Based Clustering starts with an assumption about the statistical distribution of the data points in each cluster. Gaussian Mixture Models (GMM) is one of the most commonly used models, which assumes that the data points for each cluster follow a Gaussian distribution. 

To create clusters, an initial set of mean and covariance parameters for the Gaussian distributions is selected. The Expectation-Maximization (EM) algorithm is then used iteratively to update these parameters to better fit the data. During the Expectation step, it computes the probability that each data point belongs to each cluster (based on the current parameters). During the Maximization step, it updates the parameters (means and covariances) of the Gaussian distributions to maximize the likelihood of the observed data. This iterative process continues until a stopping criterion is met, such as a maximum number of iterations or a minimum change in parameters.

## Considerations 
- The initial parameters selection could significantly affect the clustering results. Techniques such as K-means++ or random initialization can be used to select good starting points.
- Distribution-Based Clustering assumes that each cluster follows a specific statistical distribution (e.g., Gaussian), which may not always be the case in real-world data.
- It can be sensitive to the presence of outliers, as they may affect the statistical properties of the clusters.
- The computational complexity can be high for large datasets and/or high dimensional data.

## References 
1. Bishop, C. M. (2006). Pattern Recognition and Machine Learning. Springer.
2. Fraley, C., & Raftery, A. E. (2002). Model-based clustering, discriminant analysis, and density estimation. Journal of the American Statistical Association, 97(458), 611-631.
3. [Scikit-Learn: Gaussian Mixture Models](https://scikit-learn.org/stable/modules/mixture.html)
4. [Stanford University: The EM Algorithm for Gaussian Mixture Models](http://ai.stanford.edu/~chuongdo/papers/em_tutorial.pdf)""" .

:DistributionProperties a owl:Class ;
    rdfs:label "Distribution Properties" ;
    rdfs:subClassOf :DescriptiveStatistics .

:DNN-basedClustering a owl:Class ;
    rdfs:label "DNN-based Clustering" ;
    rdfs:subClassOf :ANN-basedClustering ;
    :definition "DNN Based Clustering refers to a machine learning technique that combines deep neural networks (DNNs) with clustering algorithms. This method leverages the ability of DNNs to learn complex, high-dimensional data representations, and then apply clustering algorithms to these representations, improving accuracy and efficacy in grouping data points." ;
    :kb-article """## How it works
In a DNN based clustering algorithm, the process generally starts by training a deep neural network on a given dataset. This involves feeding the dataset through multiple (deep) layers of the network to learn intricate and often non-linear transformations of the data. Each layer learns more complex representations, with the final layers providing a high-level, abstract representation of the input data.

Once the DNN is trained, these high-level representations or features are extracted from one of the deeper layers of the neural network and then fed into a clustering algorithm such as K-Means or DBSCAN. The idea here is that the DNN can provide a more useful and discriminating representation of the data than the raw data itself, making the job of the clustering algorithm easier and more accurate. The resultant clusters represent data points that share similar features according to the high-level representation learned by the DNN.

## Considerations 
- **Data complexity:** The effectiveness of DNN-based clustering relies on the complexity and quality of the input data. High-dimensional, complex datasets will benefit more from a DNN's ability to learn high-level features.
- **Computational resources:** DNNs require significant computational resources for training, especially for larger datasets. Adequate hardware and time should be anticipated for implementation.
- **Model interpretation:** DNNs are often considered as "black-box" models due to their complex structure, making it challenging to interpret why certain data points are clustered together.
- **Overfitting:** Overfitting can be a potential issue with DNNs if not properly regulated. Techniques like dropout, early stopping, or L1/L2 regularization can be used to mitigate this.
- **Choice of clustering algorithm:** The choice of the clustering algorithm to use post-DNN can significantly affect the results. The choice should depend on the specific requirements of the task at hand.

## References 
1. [Deep Clustering for Unsupervised Learning of Visual Features](https://arxiv.org/abs/1807.05520) - An academic paper discussing the application of DNN based clustering in visual data analysis.
2. [Unsupervised Deep Embedding for Clustering Analysis](https://arxiv.org/abs/1511.06335) - An insightful resource explaining the process and benefits of DNN based clustering.
3. [The Illustrated Transformer](http://jalammar.github.io/illustrated-transformer/) - Provides a deep dive into how deep learning models, like Transformers that can be used in DNN-based clustering, operate.
4. [Deep Learning Book](http://www.deeplearningbook.org/) - Comprehensive textbook on Deep Learning by Ian Goodfellow, Yoshua Bengio, and Aaron Courville. Especially see the chapters on representation learning and deep learning.""" .

:DNSAllowlisting a :NetworkIsolation,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "DNS Allowlisting" ;
    rdfs:subClassOf :NetworkIsolation,
        [ a owl:Restriction ;
            owl:onProperty :blocks ;
            owl:someValuesFrom :OutboundInternetDNSLookupTraffic ] ;
    :d3fend-id "D3-DNSAL" ;
    :definition "Permitting only approved domains and their subdomains to be resolved." ;
    :kb-reference :Reference-DNSWhitelist-DNSWL-EmailAuthenticationMethodExtension ;
    :synonym "DNS Whitelisting" .

:DNSDenylisting a :NetworkIsolation,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "DNS Denylisting" ;
    rdfs:subClassOf :NetworkIsolation,
        [ a owl:Restriction ;
            owl:onProperty :blocks ;
            owl:someValuesFrom :DNSNetworkTraffic ] ;
    :d3fend-id "D3-DNSDL" ;
    :definition "Blocking DNS Network Traffic based on criteria such as IP address, domain name, or DNS query type." ;
    :kb-article """## How it works
Rules are implemented that filter DNS queries using criteria such as:
- Client subnet
- Type of network protocol used in query
- Fully qualified domain name (FQDN) of record in the query
- DNS Server IP address that received the DNS request
- Type of DNS record being queried
- Time of day the query is received
- Size of the response

For example, a DNS policy can be created for blocking DNS queries for FQDNs that have been identified as unauthorized.

## Considerations
- Implementation considerations for DNS filtering policies to avoid over-blocking or under-blocking domains.
- Continuous maintenance of unauthorized domain lists is needed to keep up to date with possible site content changes.
- File sharing or content delivery networks may require other filtering techniques that are more fine-grained (URL blocking).
- Access to malicious websites or other network resources directly by IP instead of by DNS record, or after alteration of local DNS hosts file, may not result in DNS network traffic.""" ;
    :kb-reference :Reference-UseDNSPolicyForApplyingFiltersOnDNSQueries ;
    :synonym "DNS Blacklisting" .

:DNSLookup a owl:Class ;
    rdfs:label "DNS Lookup" ;
    rdfs:subClassOf :DigitalArtifact,
        :DigitalEvent ;
    :definition "A Domain Name System (DNS) lookup is a record returned from a DNS resolver after querying a DNS name server.  Typically considered an A or AAAA record, where a domain name is resolved to an IPv4 or IPv6 address, respectively." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Domain_Name_System>,
        <http://dbpedia.org/resource/List_of_DNS_record_types> .

:DNSNetworkTraffic a owl:Class ;
    rdfs:label "DNS Network Traffic" ;
    rdfs:subClassOf :NetworkTraffic ;
    :definition "RPC network traffic is network traffic related to remote procedure calls between network nodes..This includes only network traffic conforming to a standard RPC protocol; not custom protocols." .

:DNSRecord a owl:Class ;
    rdfs:label "DNS Record" ;
    rdfs:subClassOf :Record ;
    :definition "A Domain Name System (DNS) record is a record of information returned to clients seeking to find computers, services, and other resources connected to the Internet or a private network.  Record information is stored on a domain name server so it can respond to DNS queries from clients.There are a variety of record types, depending on the client's information needs. Common types include Start of Authority, IP addresses, SMTP mail exchangers, name servers, reverse DNS lookup pointers, etc." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Domain_Name_System>,
        <http://dbpedia.org/resource/List_of_DNS_record_types> .

:DNSServer a owl:Class ;
    rdfs:label "DNS Server" ;
    rdfs:subClassOf :Server ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Name_server> ;
    :definition """A Domain Name System (DNS) name server is a kind of name server.  Domain names are one of the two principal namespaces of the Internet. The most important function of DNS servers is the translation (resolution) of human-memorable domain names and hostnames into the corresponding numeric Internet Protocol (IP) addresses, the second principal name space of the Internet which is used to identify and locate computer systems and resources on the Internet. (en).

More generally, a name server is a computer application that implements a network service for providing responses to queries against a directory service. It translates an often humanly meaningful, text-based identifier to a system-internal, often numeric identification or addressing component. This service is performed by the server in response to a service protocol request.""" .

:DNSTrafficAnalysis a :NetworkTrafficAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "DNS Traffic Analysis" ;
    rdfs:subClassOf :NetworkTrafficAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :OutboundInternetDNSLookupTraffic ],
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :DNSLookup ] ;
    :d3fend-id "D3-DNSTA" ;
    :definition "Analysis of domain name metadata, including name and DNS records, to determine whether the domain is likely to resolve to an undesirable host." ;
    :kb-article """## How it works
This technique can be accomplished in a number of ways.

* One example analytic determines whether or not a domain name was generated with an algorithm. Domain generation algorithms (DGAs) are sometimes used to create a domain name automatically  that will resolve to C2 infrastructure, without directly coding the domains in question into the malicious code.
* Another method analyzes information about domains that have been visited, including whether a domain name is longer than a common length,  if a dynamic DNS domain was visited, if a fast-flux domain was visited, and if a recently created domain was visited. These factors are used to develop a score and if that score is over a certain threshold, an alert is generated.
* Collected malware samples can be executed in a virtual environment to identify network domains that are connected to during execution. The network domains are then generated into signatures to identity bad domains for other hosts.

This technique does not check for content hosted at the domain.

## Considerations

* DNS produces a large amount of traffic which can be resource-intensive to analyze in real time.
* If a server is compromised, for example, as part of a watering hole attack, but the DNS information pointing to that server is not altered, this technique would not catch such an incident.""" ;
    :kb-reference :Reference-DomainAgeRegistrationAlert_IncRapid7IncRAPID7Inc,
        :Reference-HeuristicBotnetDetection_PaloAltoNetworksInc,
        :Reference-MethodAndSystemForDetectingAlgorithm-generatedDomains_VECTRANETWORKSInc,
        :Reference-PredictingDomainGenerationAlgorithmsWithLongShort-TermMemoryNetworks_,
        :Reference-SinkholingBadNetworkDomainsByRegisteringTheBadNetworkDomainsOnTheInternet_PaloAltoNetworksInc ;
    :synonym "Domain Name Analysis" .

:Document a owl:Class ;
    rdfs:label "Document" ;
    rdfs:subClassOf :InformationContentEntity ;
    :definition "A document is a written, drawn, presented or recorded representation of thoughts." .

:DocumentFile a owl:Class ;
    rdfs:label "Document File" ;
    rdfs:subClassOf :File,
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :ExecutableScript ] ;
    :definition "A document is a written, drawn, presented or recorded representation of thoughts. An electronic document file is usually used to describe a primarily textual file, along with its structure and design, such as fonts, colors and additional images." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Document> .

:DomainAccountMonitoring a owl:Class,
        owl:NamedIndividual,
        :UserBehaviorAnalysis ;
    rdfs:label "Domain Account Monitoring" ;
    rdfs:subClassOf :UserBehaviorAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :monitors ;
            owl:someValuesFrom :DomainUserAccount ] ;
    :d3fend-id "D3-DAM" ;
    :definition "Monitoring the existence of or changes to Domain User Accounts." ;
    :kb-reference :Reference-AuditUserAccountManagement .

:DomainName a owl:Class ;
    rdfs:label "Domain Name" ;
    rdfs:subClassOf :Identifier,
        [ a owl:Restriction ;
            owl:onProperty :identifies ;
            owl:someValuesFrom :IPAddress ] ;
    :definition "A domain name is an identification string that defines a realm of administrative autonomy, authority or control within the Internet. Domain names are formed by the rules and procedures of the Domain Name System (DNS). Any name registered in the DNS is a domain name.Domain names are used in various networking contexts and application-specific naming and addressing purposes. In general, a domain name represents an Internet Protocol (IP) resource, such as a personal computer used to access the Internet, a server computer hosting a web site, or the web site itself or any other service communicated via the Internet. In 2015, 294 million domain names had been registered." .

:DomainNameReputationAnalysis a :IdentifierReputationAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Domain Name Reputation Analysis" ;
    rdfs:subClassOf :IdentifierReputationAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :DomainName ] ;
    :d3fend-id "D3-DNRA" ;
    :definition "Analyzing the reputation of a domain name." ;
    :kb-reference :Reference-Database_for_receiving_storing_and_compiling_information_about_email_messages,
        :Reference-Finding_phishing_sites .

:DomainRegistration a owl:Class ;
    rdfs:label "Domain Registration" ;
    skos:altLabel "Domain Name Registration Data" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :DomainName ] ;
    :definition "A domain registration, or domain name registration data, is the relevant registration data from Internet resources such as domain names, IP addresses, and autonomous system numbers. Registration data is typically retrieved by means of either the Registration Data Access Protocol (RDAP) or its predecessor, the WHOIS protocol." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Domain_registration>,
        <http://dbpedia.org/resource/WHOIS> .

:DomainTrustPolicy a :CredentialHardening,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Domain Trust Policy" ;
    rdfs:subClassOf :CredentialHardening,
        [ a owl:Restriction ;
            owl:onProperty :restricts ;
            owl:someValuesFrom :DirectoryService ],
        [ a owl:Restriction ;
            owl:onProperty :restricts ;
            owl:someValuesFrom :T1087.002 ] ;
    :d3fend-id "D3-DTP" ;
    :definition "Restricting inter-domain trust by modifying domain configuration." ;
    :kb-reference :Reference-HowTrustRelationshipsWorkForResourceForestsInAzureActiveDirectoryDomainServices .

:DomainUserAccount a owl:Class ;
    rdfs:label "Domain User Account" ;
    rdfs:subClassOf :UserAccount ;
    :definition "A domain user account in Microsoft Windows (2000) defines that user's access to a logical group of network objects (computers, users, devices) that share the same Active Directory databases; that is, a user's access to a domain." ;
    rdfs:seeAlso <https://networkencyclopedia.com/global-user-account> .

:DriverLoadIntegrityChecking a owl:Class,
        owl:NamedIndividual,
        :PlatformHardening ;
    rdfs:label "Driver Load Integrity Checking" ;
    rdfs:subClassOf :PlatformHardening,
        [ a owl:Restriction ;
            owl:onProperty :authenticates ;
            owl:someValuesFrom :HardwareDriver ] ;
    :d3fend-id "D3-DLIC" ;
    :definition "Ensuring the integrity of drivers loaded during initialization of the operating system." ;
    :kb-article """## How it works
This technique can be accomplished in a number of ways:

* A kernel level security agent installed on a host machine ensures that the driver associated with the agent is first in the initialization order. A dependent DLL associated with the driver is configured to be processed before other dependent DLLs and executes a number of operations to ensure the driver associated with the security agent is initialized first.

* Kernel components can be signed by a certificate obtained by a third party to verify the source of the component and whether it has been modified. When signed, the component will include a signature block implemented as a hash value of the component header and can also include a certificate chain. The signature and certificate data are typically added before the kernel component is distributed to the public.


## Considerations

* The private keys to sign certificates as reputable companies have been stolen in the past -- in cases such as where certificates from Adobe, Realtek, and JMicron have been used to sign malicious executables. (Source: https://resources.infosecinstitute.com/cybercrime-exploits-digital-certificates/#gref)

* Trusted Root Certificate Authorities have been compromised, yielding the ability to use the compromised keys to generate certificates with an arbitrary company name.

* It may not be difficult for an attacker to start an organization which can obtain a signed certificate.

* A root certificate authority (CA) whose certificate is trusted in the verification logic could generate incorrect certificates, if they are lax or have ulterior motives.""" ;
    :kb-reference :Reference-IntegrityAssuranceThroughEarlyLoadingInTheBootPhase_CrowdstrikeInc,
        :Reference-ProtectedComputingEnvironment_MicrosoftTechnologyLicensingLLC .

:Dyna-Q a owl:Class ;
    rdfs:label "Dyna-Q" ;
    rdfs:subClassOf :Model-basedReinforcementLearning .

:DynamicAnalysis a :FileAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Dynamic Analysis" ;
    rdfs:subClassOf :FileAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :DocumentFile ],
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :ExecutableFile ] ;
    :d3fend-id "D3-DA" ;
    :definition "Executing or opening a file in a synthetic \"sandbox\" environment to determine if the file is a malicious program or if the file exploits another program such as a document reader." ;
    :kb-article """## How it works
Analyzing the interaction of a piece of code with a system while the code is being executed in a controlled environment such as a sandbox, virtual machine, or simulator. This exposes the natural behavior of the piece of code without requiring the code to be disassembled.

## Considerations
 * Malware often detects a fake environment, then changes its behavior accordingly. For example, it could detect that the system clock is being sped up in an effort to get it to execute commands that it would normally only execute at a later time, or that the hardware manufacturer of the machine is a virtualization provider.
 * Malware can attempt to determine if it is being debugged, and change its behavior accordingly.
 * For maximum fidelity, the simulated and real environments should be as similar as possible because the malware could perform differently in different environments.
 * Sometimes the malware behavior is triggered only under certain conditions (on a specific system date, after a certain time, or after it is sent a specific command) and can't be detected through a short execution in a virtual environment.

## Implementations
* [Cuckoo Sandbox](https://cuckoosandbox.org)""" ;
    :kb-reference :Reference-MalwareAnalysisSystem_PaloAltoNetworksInc,
        :Reference-UseOfAnApplicationControllerToMonitorAndControlSoftwareFileAndApplicationEnvironments_SophosLtd ;
    :synonym "Malware Detonation",
        "Malware Sandbox" .

:DynamicAnalysisTool a owl:Class ;
    rdfs:label "Dynamic Analysis Tool" ;
    rdfs:subClassOf :CodeAnalyzer ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Dynamic_program_analysis> ;
    :definition "Dynamic program analysis is the analysis of computer software that is performed by executing programs on a real or virtual processor." ;
    :todo "Find better full description; wikipedia entry is too narrow in focus after first sentence and misses a lot of the security aspects" .

:Email a owl:Class ;
    rdfs:label "Email" ;
    rdfs:subClassOf :DocumentFile,
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :File ],
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :URL ] ;
    :definition "An email, or email message, is a document that is sent between computer users across computer networks." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Email> .

:EmailAttachment a owl:Class ;
    rdfs:label "Email Attachment" ;
    rdfs:subClassOf :DocumentFile,
        [ a owl:Restriction ;
            owl:onProperty :attached-to ;
            owl:someValuesFrom :Email ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Email_attachment> ;
    :definition "An email attachment is a computer file sent along with an email message. One or more files can be attached to any email message, and be sent along with it to the recipient. This is typically used as a simple method to share documents and images." .

:EmailRemoval a :FileRemoval,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Email Removal" ;
    rdfs:subClassOf :FileRemoval,
        [ a owl:Restriction ;
            owl:onProperty :deletes ;
            owl:someValuesFrom :Email ],
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :MailServer ] ;
    :d3fend-id "D3-ER" ;
    :definition "The email removal technique deletes email files from system storage." ;
    :kb-article """## How it works

Email removal is a technique that can be used to prevent a user from executing malware or responding to phishing attempts. Security software or users themselves may detect malicious or suspicious email in a local or remote mail folder email and then employ this technique.

## Considerations

For email that needs to be removed, an infosec organization may choose to take additional follow-up actions (such as blocking the sources or notifying providers), rather than only relying on email deletion.

For the case where users detect likely suspicious email files, the organization should consider implementing a means for reporting these emails to their infosec organization.

Email files may propagate through many storage systems across the an organization's systems over time, so early detection and blocking helps avoid residual, latent stores of malicous email content in the enterprise.""" ;
    :kb-reference :Reference-SystemAndMethodForScanningRemoteServicesToLocateStoredObjectsWithMalware ;
    :synonym "Email Deletion" .

:EmailRule a owl:Class ;
    rdfs:label "Email Rule" ;
    rdfs:subClassOf :ApplicationRule ;
    :definition "A configuration of an email application which is used to apply logical or data processing functions to data processed by the email  application." .

:EmbeddedComputer a owl:Class ;
    rdfs:label "Embedded Computer" ;
    skos:altLabel "Embedded System" ;
    rdfs:subClassOf :ClientComputer ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Embedded_system> ;
    :definition "An embedded computer is a computer system -- a combination of a computer processor, computer memory, and input/output peripheral devices-that has a dedicated function within a larger mechanical or electrical system. It is embedded as part of a complete device often including electrical or electronic hardware and mechanical parts. Because an embedded system typically controls physical operations of the machine that it is embedded within, it often has real-time computing constraints. Embedded systems control many devices in common use today. Ninety-eight percent of all microprocessors manufactured are used in embedded systems." .

:EmulatedFileAnalysis a :FileAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Emulated File Analysis" ;
    rdfs:subClassOf :FileAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :DocumentFile ],
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :ExecutableFile ] ;
    :d3fend-id "D3-EFA" ;
    :definition "Emulating instructions in a file looking for specific patterns." ;
    :kb-reference :Reference-Network-levelPolymorphicShellcodeDetectionUsingEmulation .

:Enclave a owl:Class ;
    rdfs:label "Enclave" ;
    skos:altLabel "Network Enclave" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :LocalAreaNetwork ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Network_enclave> ;
    :definition "Network enclaves consist of standalone assets that do not interact with other information systems or networks. A major difference between a DMZ or demilitarized zone and a network enclave is a DMZ allows inbound and outbound traffic access, where firewall boundaries are traversed. In an enclave, firewall boundaries are not traversed. Enclave protection tools can be used to provide protection within specific security domains. These mechanisms are installed as part of an Intranet to connect networks that have similar security requirements." .

:EncryptedCredential a owl:Class ;
    rdfs:label "Encrypted Credential" ;
    rdfs:subClassOf :Credential ;
    :definition "A credential that is encrypted." .

:EncryptedPassword a owl:Class ;
    rdfs:label "Encrypted Password" ;
    rdfs:subClassOf :EncryptedCredential,
        :Password .

:EncryptedTunnels a :NetworkIsolation,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Encrypted Tunnels" ;
    rdfs:subClassOf :NetworkIsolation,
        [ a owl:Restriction ;
            owl:onProperty :isolates ;
            owl:someValuesFrom :IntranetNetwork ] ;
    :d3fend-id "D3-ET" ;
    :definition "Encrypted encapsulation of routable network traffic." ;
    :kb-reference :Reference-SecurityArchitectureForTheInternetProtocol .

:EndpointHealthBeacon a :OperatingSystemMonitoring,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Endpoint Health Beacon" ;
    rdfs:subClassOf :OperatingSystemMonitoring ;
    :d3fend-id "D3-EHB" ;
    :definition "Monitoring the security status of an endpoint by sending periodic messages with health status, where absence of a response may indicate that the endpoint has been compromised." ;
    :kb-article """## How it works
Endpoints are configured to periodically generate and transmit a secure heartbeat that is delivered on a configured schedule and provides endpoint status information. Status information can include software details (version, configuration, etc), endpoint identification (MAC, IP address, machine ID) or other hardware/software configuration information. Interruption of the heartbeat can signal that the endpoint has been compromised.

## Considerations
* Security of heartbeat messages to ensure message integrity
* Disappearance of the heartbeat could simply mean that the endpoint is powered off or intentionally disconnected from the network. Therefore other criteria may need to be used to accurately detect endpoint compromise.
* Attacker presence on the machine may leave the heartbeat intact.
* An attacker may determine the format of the heartbeat and continue to send it even after the machine is compromised.""" ;
    :kb-reference :Reference-IntrusionDetectionUsingAHeartbeat_SophosLtd ;
    :synonym "Endpoint Health Telemetry" .

:EndpointSensor a owl:Class ;
    rdfs:label "Endpoint Sensor" ;
    rdfs:subClassOf :Sensor ;
    :definition "A sensor application installed on a endpoint (platform) to collect information on platform components." ;
    rdfs:seeAlso "d3f:Platform" .

:EnsembleLearning a owl:Class ;
    rdfs:label "Ensemble Learning" ;
    rdfs:subClassOf :MachineLearning ;
    :definition "Ensemble learning consists of a collection of baseline classifiers, also known as a classifiers ensemble. These baseline classifiers are trained on input data and produce individual predictions that are combined to generate an aggregate prediction. There are different strategies for creating ensemble classifiers, which can be homogeneous or heterogeneous." ;
    :kb-article """## How it works
Ensemble learning involves four main steps. First, a set of baseline classifiers is trained on the input data using different learning algorithms or variations of the same algorithm. Each classifier learns from a different subset of the training data or with different configurations. Then, these trained classifiers independently make predictions on new, unseen data points. Next, the individual predictions from the baseline classifiers are combined using an aggregation function or fusion method, which can range from simple majority voting to more complex weighting schemes. Finally, the combined predictions form the ensemble prediction, which serves as the final output of the ensemble learning system. By leveraging the diversity and collective knowledge of the baseline classifiers, ensemble learning aims to improve prediction accuracy, generalization, and robustness.

## Considerations 
Ensemble learning offers several advantages. It can improve the predictive accuracy and generalization of the models by reducing bias and variance. It can also enhance the robustness of predictions by considering different perspectives from multiple models. Additionally, ensemble learning is flexible and can be applied to various types of learning algorithms and data domains.

## References 
- https://en.wikipedia.org/wiki/Ensemble_learning
- https://reader.elsevier.com/reader/sd/pii/S1319157823000228?token=9551444F07A4325E0DA864A053606434FA4037B8A1239E86F3D557FD7F5B305A68A2798BF1B57ED232FC309860526F96&originRegion=us-east-1&originCreation=20230512004922""" .

:EpistemicLogic a owl:Class ;
    rdfs:label "Epistemic Logic" ;
    rdfs:subClassOf :ModalLogic ;
    :synonym "Epistemic Modal Logic" .

:EquivalenceMatching a owl:Class ;
    rdfs:label "Equivalence Matching" ;
    rdfs:subClassOf :LogicalRules ;
    :definition "Equivalence Matching, also known as Equivalence Class Partitioning, is a type of symbolic logic technique used in software testing. It divides the input data of a software unit into partitions of equivalent data from which test cases can be derived. Essentially, it's an approach that categorizes input data into classes of equivalent range, on the assumption that the system will handle all cases in each class equivalently." ;
    :kb-article """## How it works
In Equivalence Matching, the input domain of a system is divided into different classes based on the rules defined for the input. Each class represents a set of valid or invalid states for input. The technique assumes that if a system works for a single condition in the equivalent class, it would work for all of them, and vice versa. For instance, if a function is expected to accept input values between 1 and 100, these form an equivalence class.

It is, however, crucial to select at least one test case from each partition. For valid partitions, a test case is selected such that it falls in the middle of the range. For invalid partitions, a test case is chosen from the values just outside the boundaries of the valid partition.

## Considerations 
- It is vital to correctly identify and divide the input domain into valid and invalid partitions, as the success of the technique greatly depends on this.
- It does not handle specific boundary values as it assumes the system behaves the same for all cases in a class, potentially leading to missed edge case bugs.
- Equivalence Matching is not as effective when dealing with complex systems where interactions between data sets may influence outcomes.
- While it is efficient by reducing the number of test cases, it may not cover all the possible scenarios.

## References 
1. [Equivalence Class Partitioning in Software Testing](https://www.guru99.com/equivalence-partitioning-boundary-value-analysis.html)
2. [Understanding Equivalence Partitioning](https://www.softwaretestinghelp.com/equivalence-partitioning-testing/)
3. [Equivalence Partitioning and Boundary Value Analysis](https://www.geeksforgeeks.org/equivalence-class-testing/)""" .

:Estimation a owl:Class ;
    rdfs:subClassOf :InferentialStatistics .

:EvalFunction a owl:Class ;
    rdfs:label "Eval Function" ;
    rdfs:subClassOf :Subroutine,
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :Subroutine ] ;
    :definition "Takes inputs of strings and evaluations them as expressions." .

:EventLog a owl:Class ;
    rdfs:label "Event Log" ;
    rdfs:subClassOf :Log ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Log_file#Event_logs> ;
    :definition "Event logs record events taking place in the execution of a system in order to provide an audit trail that can be used to understand the activity of the system and to diagnose problems. They are essential to understand the activities of complex systems, particularly in the case of applications with little user interaction (such as server applications)." .

:Evict a :DefensiveTactic,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Evict" ;
    rdfs:subClassOf :DefensiveTactic ;
    :definition "The eviction tactic is used to remove an adversary from a computer network." ;
    :display-order 4 ;
    :display-priority 0 .

:EvictionLatency a owl:Class ;
    rdfs:label "Eviction Latency" ;
    rdfs:subClassOf :Latency .

:ExactMatching a owl:Class ;
    rdfs:label "Exact Matching" ;
    rdfs:subClassOf :NumericPatternMatching ;
    owl:disjointWith :RangeMatching .

:ExceptionHandler a owl:Class ;
    rdfs:label "Exception Handler" ;
    rdfs:subClassOf :Subroutine ;
    :definition "An exception handler is a code segment that processes an exception." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Exception_handling> .

:ExceptionHandlerPointerValidation a :ApplicationHardening,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Exception Handler Pointer Validation" ;
    rdfs:subClassOf :ApplicationHardening,
        [ a owl:Restriction ;
            owl:onProperty :validates ;
            owl:someValuesFrom :Pointer ] ;
    :d3fend-id "D3-EHPV" ;
    :definition "Validates that a referenced exception handler pointer is a valid exception handler." ;
    :kb-article """## How It Works
When a process encounters an exception, it calls an exception handler to deal with the exception.  The method by which this exception handler is determined varies by the operating system.  The exception handler is called, even if it is the default exception handler to terminate the program and display a message that the program stopped working.  In the case that no valid exception handler is found, the program would fail to proceed as normal and could be programmed to terminate.

In Windows, the address of the exception registration record is stored at the very start of the the Thread Information Block; the GS register points to this structure.

The exception registration record contains two pointers: a pointer to the next exception registration record should this handler fail to handle the exception, and a pointer to the handler.

A buffer overflow can overwrite the saved return pointer with an invalid location to execute memory; this often triggers the exception handler chain, which could also be corrupted by the buffer overflow.  Although Process Exception Handler Validation does not make sure that the exception handler pointer or the code at the exception handler was unaltered, or that the exception handler code is secure, this technique does ensure that the pointer is at least an exception handler that could be called by the program.

With Process Exception Handler Validation, before the handler is called, it checks the exception handler against a source of valid exception handlers.  If the requested handler is not in this list, other techniques such as those in Process Eviction might be invoked, such as Process Termination to end the current process, or Executable Blacklisting to blacklist the potentially vulnerable or malfunctioning executable.

### Runtime valid exception handler source generation
The source of valid exception handlers could be generated at runtime, with the risk of the information that is used to determine the validity of exception handlers being compromised.

### Compile-time
The source of valid exception handlers could also be generated at compile time or as a binary patch.  Given the source code, it would be rather straightforward to find the exceptions, as they are pointed in the catch statement of a try-catch clause and the compiler must already generate the code to call exceptions from this.

## Considerations
If the program file can be altered by the attacker, then the security could be bypassed by replacing it with any desired program, without even bypassing SEH.

If the attacker was already able to overwrite the code for a valid exception handler via other functionality in the program, this defense would not prevent arbitrary code execution.
If an exception handler recognized as valid is vulnerable, it would be executed anyway.

SafeSEH might be applied only to some executable files or modules, allowing an attacker to call any piece of code as an exception handler in the unprotected modules.""" ;
    :kb-reference :Reference-SAFESEH_ImageHasSafeExceptionHandlers_MicrosoftDocs ;
    :synonym "Exception Handler Validation" .

:ExecutableAllowlisting a owl:Class,
        owl:NamedIndividual,
        :PlatformHardening ;
    rdfs:label "Executable Allowlisting" ;
    rdfs:subClassOf :ExecutionIsolation,
        [ a owl:Restriction ;
            owl:onProperty :blocks ;
            owl:someValuesFrom :ExecutableFile ],
        [ a owl:Restriction ;
            owl:onProperty :restricts ;
            owl:someValuesFrom :CreateProcess ] ;
    :d3fend-id "D3-EAL" ;
    :definition "Using a digital signature to authenticate a file before opening." ;
    :kb-article """## How it works

This technique is generic and there are numerous ways to compute and authenticate digital signatures.
A digital certificate is generated from a private/public key pair issued by a certificate authority (CA). A hash of the file is encrypted using the private key. When the file is downloaded by another user, the user's system uses the public key to decrypt the hash and a new hash is created of the downloaded file. The hash decrypted by the public key is compared to the new hash and if there is a mismatch, further techniques, such as file deletion, file quarantine, or **Executable Blacklisting** may be invoked.

This technique may be invoked when deciding whether to execute a file.

## Considerations

Organizations which download or create high volumes of software make management complex, in particular engineering or scientific organizations.""" ;
    :kb-reference <http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-ComputingApparatusWithAutomaticIntegrityReferenceGenerationAndMaintenance_Tripwire,Inc.>,
        :Reference-EnhancingNetworkSecurityByPreventingUser-InitiatedMalwareExecution_ ;
    :synonym "File Signature Authentication" .

:ExecutableBinary a owl:Class ;
    rdfs:label "Executable Binary" ;
    rdfs:subClassOf :ExecutableFile,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :ImageCodeSegment ],
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :ImageDataSegment ],
        [ a owl:Restriction ;
            owl:onProperty :may-interpret ;
            owl:someValuesFrom :ExecutableScript ] ;
    :definition "An executable binary contains machine code instructions for a physical CPU. D3FEND also considers byte code for a virtual machine to be binary code.  This is in contrast to executable scripts written in a scripting language." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Executable> .

:ExecutableDenylisting a :ExecutionIsolation,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Executable Denylisting" ;
    rdfs:subClassOf :ExecutionIsolation,
        [ a owl:Restriction ;
            owl:onProperty :blocks ;
            owl:someValuesFrom :ExecutableFile ],
        [ a owl:Restriction ;
            owl:onProperty :restricts ;
            owl:someValuesFrom :CreateProcess ] ;
    :d3fend-id "D3-EDL" ;
    :definition "Blocking the execution of files on a host in accordance with defined application policy rules." ;
    :kb-article """## How it works

#### Criteria

A policy-enforcing application can register an application for denylisting based on conditions including the following:

* File attributes
    * file name
    * file path
    * file hash
    * file publisher, as obtained from the digital signature
    * permissions of the file
* File malware scan (eg. Windows SmartScreen)
* User-File combination

This may be done to prevent execution of applications which are:

* an old version with known vulnerabilities
* without a valid license, which could cause legal issues
* in a directory that is accessible to low-privileged users, that could be accessed by a malware dropper
* known trojan horse programs
* too open in their permissions, possibly set to run as a user other than the originator or allowing execution when they should not be
* a match to the hash of other known malware
* are detected as undesirable based on a file scan runtime behavior

System administrators will customize the rules for the given environment.

#### Backend

The policy-enforcing program may work by running in kernel mode, and [intercepting] [system calls which execute a process].

## Considerations

* If denylisting is done by filename, filepath, or hash, these mechanisms may be a worthy first line of defense and detection, but could still be evaded by an attacker.
* Continuous management is needed to keep the denylist up to date, whether it is based on hash, publisher, behavior, or any other digital artifact.
* Although denylists based on attributes such as file path and virus scan could defend against some threats which they have not been explicitly coded to block, denylists may not provide protection from new, unknown, or zero day attacks.


## Examples
On a Windows machine the Windows Defender Application Control (WDAC) policy enforcement is run in the kernel and allows for restricting applications.""" ;
    :kb-reference <http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-ContentExtractorAndAnalysisSystem_Bit9Inc,CarbonBlackInc>,
        :Reference-MethodAndApparatusForIncreasingTheSpeedAtWhichComputerVirusesAreDetected_McAfeeLLC ;
    :synonym "Executable Blacklisting" .

:ExecutableFile a owl:Class ;
    rdfs:label "Executable File" ;
    skos:altLabel "Executable" ;
    rdfs:subClassOf :File,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :Subroutine ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Executable> ;
    :definition "In computing, executable code or an executable file or executable program, sometimes simply an executable, causes a computer \"to perform indicated tasks according to encoded instructions,\" as opposed to a data file that must be parsed by a program to be meaningful. These instructions are traditionally machine code instructions for a physical CPU. However, in a more general sense, a file containing instructions (such as bytecode) for a software interpreter may also be considered executable; even a scripting language source file may therefore be considered executable in this sense. The exact interpretation depends upon the use; while the term often refers only to machine code files, in the context of protection against computer viruses all files which cause potentially hazardous instruction" .

:ExecutableScript a owl:Class ;
    rdfs:label "Executable Script" ;
    rdfs:subClassOf :ExecutableFile ;
    :definition "An executable script is written in a scripting language and interpreted at run time. This is in contrast with an executable binary, which contains machine code instructions for a physical CPU or byte code for a virtual machine." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Executable> .

:Execution a :OffensiveTactic,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Execution" ;
    rdfs:subClassOf :OffensiveTactic ;
    :display-order 2 .

:ExecutionIsolation a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Execution Isolation" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Isolate ] ;
    :d3fend-id "D3-EI" ;
    :definition "Execution Isolation techniques prevent application processes from accessing non-essential system resources, such as memory, devices, or files." ;
    :enables :Isolate .

:ExecutionTechnique a owl:Class ;
    rdfs:label "Execution Technique" ;
    rdfs:subClassOf :OffensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Execution ] .

:Exfiltration a :OffensiveTactic,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Exfiltration" ;
    rdfs:subClassOf :OffensiveTactic ;
    :display-order 11 .

:ExfiltrationTechnique a owl:Class ;
    rdfs:label "Exfiltration Technique" ;
    rdfs:subClassOf :OffensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Exfiltration ] .

:Expectation-maximization_Clustering a owl:Class ;
    rdfs:label "Expectation-maximization Clustering" ;
    rdfs:subClassOf :Distribution-basedClustering ;
    :definition "The Expectation-maximization (EM) Clustering is an iterative machine learning algorithm used for identifying clusters within data. This probabilistic approach estimates the parameters of a statistical model with latent variables or missing data. It primarily operates via two steps: the Expectation (E-step), which creates a function for the expectation of the log-likelihood, and the Maximization (M-step), which computes parameters maximizing this expected log-likelihood." ;
    :kb-article """## How it works

The EM Clustering algorithm starts with an initial guess about the parameters of the model. These parameters typically include the means and covariances for a Gaussian mixture model, which is a common use-case for EM Clustering.

1. **E-step:** The algorithm first computes the expectation, given the current parameters. It assigns each data point to each cluster by computing the probability of the data point belonging to each cluster. These probabilities are calculated based on the current parameter estimates and can be understood as "soft" cluster assignments. 

2. **M-step:** Then, the algorithm maximizes these expectations by adjusting the parameters. The parameters are updated in such a way as to maximize the likelihood of the observed data given these new parameters. The means and covariances of the Gaussian mixture model are updated to match the newly assigned "soft" clusters.

This process iterates between the E-step and M-step until the parameters converge, and no significant change is observed in subsequent iterations. The end result is a set of clusters where data points in the same cluster are more similar to each other than to those in other clusters, based on the probabilistic model used.

## Considerations 

- EM Clustering assumes that data is generated from a mixture of distributions. If this assumption is violated, the performance of the algorithm might not be satisfactory.

- The algorithm is sensitive to the initialization of parameters. Different initial guesses can lead to different clusters. Techniques such as K-means++ initialization or running the algorithm multiple times with different initializations can help alleviate this problem.

- It's an iterative algorithm and can be computationally expensive for large datasets.

- EM can get stuck in local optima. Using techniques such as random restarts can mitigate this issue.

- As with any clustering algorithm, the meaningfulness and usefulness of the resulting clusters can be highly dependent on the chosen feature representation of the data.

## References 

1. [Dempster, A.P., Laird, N.M., Rubin, D.B. (1977). Maximum Likelihood from Incomplete Data via the EM Algorithm. Journal of the Royal Statistical Society. Series B (Methodological), 39(1), 1-38.](https://www.jstor.org/stable/2984875)
2. [Bilmes, J. (1997). A Gentle Tutorial of the EM Algorithm and its Application to Parameter Estimation for Gaussian Mixture and Hidden Markov Models. International Computer Science Institute, 4(510), 126.](https://www.cs.cmu.edu/~tom/10-702/extras/EM_algorithm.pdf)
3. [Bishop, C. M. (2006). Pattern recognition and machine learning. Springer.](https://www.microsoft.com/en-us/research/uploads/prod/2006/01/Bishop-Pattern-Recognition-and-Machine-Learning-2006.pdf)
4. [The Expectation Maximization Algorithm: A short tutorial. Sean Borman. 2004.](http://www.seanborman.com/publications/EM_algorithm.pdf)
5. [Scikit-learn Library Documentation: Gaussian Mixture Models](https://scikit-learn.org/stable/modules/mixture.html#gmm)""" .

:ExpectedErrorReduction a owl:Class ;
    rdfs:label "Expected Error Reduction" ;
    rdfs:subClassOf :ActiveLearning ;
    :definition "Active Learning with Expected Error Reduction is a strategy where the learner, instead of learning from a randomly selected instance in the training set, selectively queries the instances where the learner is uncertain about its prediction. This learning strategy focuses on reducing the expected error of the model on the unlabelled data, thus improving the overall performance of the learning model with less training data." ;
    :kb-article """## How it Works

In the active learning paradigm, especially with the expected error reduction strategy, the learner is interactive, having the ability to choose the data it learns from. In its simplest form, this active learner would start by being trained on a small initial dataset. It then uses this initial model to make predictions on a pool of unlabelled data.

The learner estimates the error for each instance in the unlabelled data by analyzing the expected reduction in the overall error that would occur if the true label for that instance was known. It then selects the instances that would, if their true labels were known, result in the greatest expected reduction in the model's error. These instances are queried for their labels from an oracle (usually a human annotator), and these newly labelled instances are added to the training set. The model is then retrained with this expanded training set and the process is repeated.

This process makes active learning particularly useful in situations where unlabeled data is plentiful but labeling is expensive, as it aims to achieve high accuracy using as few labeled instances as possible. 

## Considerations 

- **Data Annotation:** Remember that the success of this strategy is heavily dependent on the quality of the annotation. Inaccurate labels can lead to an increase in the error of the model rather than a reduction.
- **Query Strategy:** The choice of query strategy is crucial. The expected error reduction strategy might not always be the best fit, especially when the computation of expected error is computationally expensive.
- **Domain Expertise:** In situations where domain expertise is necessary for labeling, ensure that the oracle or annotator is sufficiently knowledgeable.
- **Bias in Selection:** There might be a risk of selection bias since instances with higher uncertainty are more likely to be selected, potentially causing the model to underperform on less ambiguous instances.

## References 

1. Settles, Burr. "Active Learning." Synthesis Lectures on Artificial Intelligence and Machine Learning, Morgan & Claypool Publishers, 2012. [Link](http://www.morganclaypool.com/doi/abs/10.2200/S00429ED1V01Y201207AIM018)
2. Lewis, David D., and Jason Catlett. "Heterogeneous uncertainty sampling for supervised learning." In Proceedings of the eleventh international conference on machine learning, vol. 148, pp. 3-11. 1994. [Link](https://www.aaai.org/Papers/ICML/1994/ICML94-002.pdf)
3. Tong, Simon, and Daphne Koller. "Support vector machine active learning with applications to text classification." Journal of machine learning research 2.Nov (2001): 45-66. [Link](https://www.jmlr.org/papers/volume2/tong01a/tong01a.pdf)""" .

:ExpectedModelChange a owl:Class ;
    rdfs:label "Expected Model Change" ;
    rdfs:subClassOf :ActiveLearning ;
    :definition "Expected Model Change Active Learning is a strategy within the broader Active Learning paradigm. This method selects the most informative samples to query based on how much they are expected to change the current model if they were added to the training set. It aims to maximize learning efficiency by prioritizing the data that will most significantly influence the model's evolution." ;
    :kb-article """## How it Works
In an active learning context, the algorithm has the opportunity to interactively query labels for certain instances in an unlabeled pool of data. The algorithm strives to choose the instances whose labels will be the most beneficial to improve the performance of the model. Expected Model Change active learning operates on the premise that instances that would change the model the most if their labels were known are the ones that should be labeled.

To implement Expected Model Change, the algorithm first trains a model on the current labeled data. It then makes predictions on the unlabeled data and quantifies how much these predictions are expected to change the current model if they were added to the training set. The instances expected to yield the greatest model change are selected for querying. This process is iteratively repeated, enabling the model to improve as it is exposed to more diverse and informative instances over time.

## Considerations
- **Compute Cost:** This method can be computationally expensive since it involves retraining the model for every potential new data point in the unlabeled set to assess its impact.
- **Labeler Interaction:** As with all active learning techniques, consider the availability and workload of the labeler. High frequency querying might lead to labeler fatigue.
- **Diversity Issue:** Expected Model Change might become biased towards uncertain and difficult to label instances. Introducing a diversity preserving mechanism may be necessary to maintain a balanced learning process.

## References
1. [Settles, Burr. "Active Learning Literature Survey." University of Wisconsin–Madison, Computer Sciences Technical Report 1648, 2009.](http://burrsettles.com/pub/settles.activelearning.pdf)
2. [Zhou, Zhi-Hua. "A Brief Introduction to Weakly Supervised Learning." National Science Review, Volume 5, Issue 1, January 2018, Pages 44–53.](https://academic.oup.com/nsr/article/5/1/44/4093910)
3. [Seung, H. S., Opper, M., & Sompolinsky, H. Query by Committee. Proceedings of the Fifth Workshop on Computational Learning Theory - COLT ’92.](https://doi.org/10.1145/130385.130421)""" .

:ExternalContentInclusionFunction a owl:Class ;
    rdfs:label "External Content Inclusion Function" ;
    rdfs:subClassOf :Subroutine ;
    :definition "External content, strings or data, are inserted into a local document (e.g. xml document) as if it were a native part of that document." .

:ExternalControl a owl:Class ;
    rdfs:label "External Control" ;
    rdfs:subClassOf :D3FENDThing,
        [ a owl:Restriction ;
            owl:onProperty :member-of ;
            owl:someValuesFrom :ControlCatalog ],
        [ a owl:Restriction ;
            owl:onProperty :semantic-relation ;
            owl:someValuesFrom :DefensiveTechnique ] .

:ExternalKnowledgeBase a owl:Class ;
    rdfs:label "External Knowledge Base" ;
    rdfs:subClassOf :InformationContentEntity,
        :TechniqueReference ;
    :pref-label "External Knowledge Base" ;
    :todo "Consider working  on alias or new preferred name... meh on \"Knowledge Content Entity\",  not sure \"External\" is helpful in conveying core concept; examples would be DBPedia, ATT&CK, CAPEC, CVE, ..., we included CAR; maybe even STIG or are they better as Guidance?" .

:FastSymbolicLink a owl:Class ;
    rdfs:label "Fast Symbolic Link" ;
    skos:altLabel "Fast Symlink" ;
    rdfs:subClassOf :SymbolicLink,
        :UnixLink ;
    owl:disjointWith :SlowSymbolicLink ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Symbolic_link#Storage_of_symbolic_links> ;
    :definition "Fast symbolic links, allow storage of the target path within the data structures used for storing file information on disk (e.g., within the inodes). This space normally stores a list of disk block addresses allocated to a file. Thus, symlinks with short target paths are accessed quickly. Systems with fast symlinks often fall back to using the original method if the target path exceeds the available inode space." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Symbolic_link#Storage_of_symbolic_links> .

:FeatureAssessment a owl:Class ;
    rdfs:label "Feature Assessment" ;
    rdfs:subClassOf :Assessment .

:File a owl:Class ;
    rdfs:label "File" ;
    rdfs:subClassOf :Resource,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :FileSection ],
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :File ],
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :URL ] ;
    :definition "A file maintained in computer-readable form." ;
    rdfs:seeAlso <http://wordnet-rdf.princeton.edu/id/06521201-n> .

:FileAccessPatternAnalysis a owl:Class,
        owl:NamedIndividual,
        :ProcessAnalysis ;
    rdfs:label "File Access Pattern Analysis" ;
    rdfs:subClassOf :ProcessAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :LocalResourceAccess ] ;
    :d3fend-id "D3-FAPA" ;
    :definition "Analyzing the files accessed by a process to identify unauthorized activity." ;
    :kb-article """## How it works
File modifying malware such as wipers and ransomware are detected by identifying file access patterns that are associated with a malicious process. Examples of file access patterns include accessing a large number of files, accessing multiple file types, files being accessed located in multiple locations in a directory, and copying a file and encrypting the contents of that file into a copy.

## Considerations
Certain file access actions may not be statistically different from authorized activity.""" ;
    :kb-reference :Reference-File-modifyingMalwareDetection_CrowdstrikeInc .

:FileAnalysis a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "File Analysis" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :File ],
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Detect ] ;
    :d3fend-id "D3-FA" ;
    :definition "File Analysis is an analytic process to determine a file's status. For example: virus, trojan, benign, malicious, trusted, unauthorized, sensitive, etc." ;
    :enables :Detect ;
    :kb-article """## Technique Overview
Some techniques use file signatures or file metadata to compare against historical collections of malware. Files may also be compared against a source of ground truth such as cryptographic signatures. Examining files for potential malware using pattern matching against file contents/file behavior. Binary code may be dissembled and analyzed for predictive malware behavior, such as API call signatures. Analysis might occur within a protected environment such as a sandbox or live system.""" .

:FileCarving a :NetworkTrafficAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "File Carving" ;
    rdfs:subClassOf :NetworkTrafficAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :FileTransferNetworkTraffic ] ;
    :d3fend-id "D3-FC" ;
    :definition "Identifying and extracting files from network application protocols through the use of network stream reassembly software." ;
    :kb-article """## How it works
Protocol stream reassembly software recreates a directional byte stream by analyzing captured network packets. Once the stream is reassembled pattern matching is applied to determine if it contains a file of interest. Files of interest range from executable, archive, or document file formats. Once the file is captured, it is then processed with standard File Analysis Techniques. Example network protocols include HTTP, SMTP, FTP, HTTP/2, and TLS/HTTP/Dropbox.

## Considerations
- This is an error prone process due to the intricacies of network protocols and network packet capture.  For example reassembly may be done in real-time or streaming fashion, or packets may be written to disk, then bulk processed.  The packets may arrive out of order, with fragmentation, duplicates, or re-transmissions.  The reassembly software must compensate for the imperfect packet stream in order to recreate the well formed file which was transmitted.
- File type identification can be a difficult process which can be exploited by adversaries.""" ;
    :kb-reference :Reference-ComputerWormDefenseSystemAndMethod_FireEyeInc .

:FileContentRules a :FileAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "File Content Rules" ;
    rdfs:subClassOf :FileAnalysis ;
    :d3fend-id "D3-FCR" ;
    :definition "Employing a pattern matching rule language to analyze files." ;
    :kb-article """## How it works
Rules, often called signatures, are used for both generic and targeted malware detection. The rules are usually expressed in a domain specific language (DSL), then deployed to software that scans files for matches. The rules are developed and broadly distributed by commercial vendors, or they are developed and deployed by enterprise security teams to address highly targeted or custom malware. Conceptually, there are public and private rule sets. Both leverage the same technology, but they are intended to detect different types of cyber adversaries.

## Considerations
* Patterns expressed in the DSLs range in their complexity. Some scanning engines support file parsing and normalization for high fidelity matching, others support only simple regular expression matching against raw file data. Engineers must make a trade-off in terms of:
     * The fidelity of the matching capabilities in order to balance high recall with avoiding false positives,
     * The computational load for scanning, and
     * The resilience of the engine to deal with adversarial content presented in different forms-- content which in some cases is designed to exploit or defeat the scanning engines.
 * Signature libraries can become large over time and impact scanning performance.
 * Some vendors who sell signatures have to delete old signatures over time.
 * Simple signatures against raw content cannot match against encoded, encrypted, or sufficiently obfuscated content.

## Implementations
 * YARA
 * ClamAV""" ;
    :kb-reference :Reference-ComputationalModelingAndClassificationOfDataStreams_CrowdstrikeInc,
        :Reference-DetectingScript-basedMalware_CrowdstrikeInc,
        :Reference-DistributedMeta-informationQueryInANetwork_Bit9Inc,
        :Reference-SystemAndMethodsThereofForLogicalIdentificationOfMaliciousThreatsAcrossAPluralityOfEnd-pointDevicesCommunicativelyConnectedByANetwork_PaloAltoNetworksIncCyberSecdoLtd ;
    :synonym "File Content Signatures",
        "File Signatures" .

:FileCreationAnalysis a owl:Class,
        owl:NamedIndividual,
        :SystemCallAnalysis ;
    rdfs:label "File Creation Analysis" ;
    rdfs:subClassOf :SystemCallAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :CreateFile ] ;
    :d3fend-id "D3-FCA" ;
    :definition "Analyzing the properties of file create system call invocations." ;
    :kb-reference :Reference-CAR-2020-09-001%3AScheduledTask-FileAccess_MITRE,
        :Reference-LsassProcessDumpViaProcdump_MITRE .

:FileEncryption a owl:Class,
        owl:NamedIndividual,
        :PlatformHardening ;
    rdfs:label "File Encryption" ;
    rdfs:subClassOf :PlatformHardening,
        [ a owl:Restriction ;
            owl:onProperty :encrypts ;
            owl:someValuesFrom :File ] ;
    :d3fend-id "D3-FE" ;
    :definition "Encrypting a file using a cryptographic key." ;
    :kb-article """## How it Works
Files are encrypted using either a single key for both encryption and decryption or separate keys. Single key encryption is symmetric encryption and using two key distinct keys is asymmetric encryption.

### Symmetric Cryptography
Symmetric encryption uses the same cryptographic key for both the encryption and decryption a file. Managing keys at scale sometimes uses asymmetric key exchange protocols such as Diffie-Hellman can be used to share the symmetric cryptographic key with the others.

### Asymmetric Cryptography
Asymmetric encryption is typically accomplished using public and private key certificates based on the X.509 standard. Files are encrypted using the public key and decrypted using their private key. Asymmetric encryption is typically slower than symmetric encryption and not widely used for large file encryption, but is popular for key wrapping, key exchanges, and digital signatures.

## Considerations
- Continuous monitoring to ensure private keys are not compromised and the certificate authority (CA) is trusted.
- Secure transfer of private keys between multiple devices.""" ;
    :kb-reference :Reference-MethodForFileEncryption .

:FileEviction a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "File Eviction" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Evict ] ;
    :d3fend-id "D3-FEV" ;
    :definition "File eviction techniques evict files from system storage." .

:FileHash a owl:Class ;
    rdfs:label "File Hash" ;
    rdfs:subClassOf :Identifier,
        [ a owl:Restriction ;
            owl:onProperty :identifies ;
            owl:someValuesFrom :File ] .

:FileHashing a :FileAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "File Hashing" ;
    rdfs:subClassOf :FileAnalysis ;
    :d3fend-id "D3-FH" ;
    :definition "Employing file hash comparisons to detect known malware." ;
    :kb-article """## How it works
This technique requires a list of hashes to compare a file against.

## Considerations
Performance on large files or very large numbers of files.""" ;
    :kb-reference :Reference-Munin .

:FileHashReputationAnalysis a :IdentifierReputationAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "File Hash Reputation Analysis" ;
    rdfs:subClassOf :IdentifierReputationAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :FileHash ] ;
    :d3fend-id "D3-FHRA" ;
    :definition "Analyzing the reputation of a file hash." ;
    :kb-reference :Reference-Reputation_of_an_entity_associated_with_a_content_item .

:FileIntegrityMonitoring a :FileIntegrityMonitoring,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "File Integrity Monitoring" ;
    rdfs:subClassOf :PlatformMonitoring,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :File ] ;
    :d3fend-id "D3-FIM" ;
    :definition "Detecting any suspicious changes to files in a computer system." ;
    :kb-article """## How it Works
There are a number of tools in Windows and Unix that can monitor specific files in a system and generate alerts if any artifacts have been created, modified, or removed. They accomplish this by comparing the current artifacts to a previous snapshot.

Unix – Unix systems have a file integrity checker tool called tripwire. Tripwire first initializes a database that serves as a basis for comparison and can then scan the system to compare the state of the current file system against the initial baseline database. Additionally, users can define policies that specify potential violations.

Windows – In Microsoft Azure, file integrity monitoring can be enabled which can track file and registry key creation, removals, and modifications of specific files.

## Considerations
Files can change constantly due to the non-static nature of a computer system. File Integrity Monitoring works best when pointed at a narrow scope of critical files to limit the number of unneccessary files that may be modified over the course of normal use. The accuracy and precision of defined policies also affect the efficacy of this technique.""" ;
    :kb-reference :Reference-FileIntegrityMonitoringinMicrosoftDefenderforCloud-Microsoft,
        :Reference-Tripwire .

:FilePathOpenFunction a owl:Class ;
    rdfs:label "File Path Open Function" ;
    rdfs:subClassOf :Subroutine,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :File ],
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :OpenFile ] ;
    :definition "Has an input of a file path, and opens a file handle for reading or writing." .

:FileRemoval a :FileEviction,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "File Removal" ;
    rdfs:subClassOf :FileEviction,
        [ a owl:Restriction ;
            owl:onProperty :deletes ;
            owl:someValuesFrom :File ],
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :FileServer ] ;
    :d3fend-id "D3-FR" ;
    :definition "The file removal technique deletes malicious artifacts or programs from a computer system." ;
    :kb-article """## How it works

Adversaries may place files or programs into a computer's file system to perform malicious actions. As part of the eviction process, these files and programs should be removed to prevent further compromise or reinfection. Examples of malicious types of files are malware which is directly harmful and content files with the intent to deceive users (e.g., phishing.)

On Windows systems, antivirus (AV) software should be used to safely and permanently remove malicious files. AV software may first quarantine a suspected malicious file, which is the process of moving a file from its original location to a new location and makes changes so that it cannot be executed. Users can then verify that the file is not benign and then permanently delete it.

## Considerations

When it is determined that a file should be removed for security purposes, the organization--or systems implementing an organization's policies--may determine that the file should not simply be deleted from the enterprise's mission systems, but be quarantined to a secure system by an approved mechanism, so as to allow follow-up investigation by security staff.

On Windows systems, deleting a file in File Explorer does not permanently delete a file – it sends it to the Recycle Bin instead. The Recycle Bin must be emptied, or alternative steps must be performed to remove files completely. Even then, in some cases the data may persist in disk, so data shredder tools may be needed to completely wipe a file. Thus, AV tools are recommended.""" ;
    :kb-reference :Reference-HowDoesAntivirusQuarantineWork-SafetyDetectives ;
    :synonym "File Deletion" .

:FileSection a owl:Class ;
    rdfs:label "File Section" ;
    skos:altLabel "File Part" ;
    rdfs:subClassOf :DigitalArtifact ;
    :definition "A file section is one of the portions of a file in which the file is regarded as divided and where together the file sections constitute the whole file." ;
    rdfs:seeAlso <http://wordnet-rdf.princeton.edu/id/05876035-n> .

:FileServer a owl:Class ;
    rdfs:label "File Server" ;
    rdfs:subClassOf :Server ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/File_server> ;
    :definition "The term server highlights the role of the machine in the traditional client-server scheme, where the clients are the workstations using the storage. A file server does not normally perform computational tasks or run programs on behalf of its client workstations. File servers are commonly found in schools and offices, where users use a local area network to connect their client computers." .

:FileShareService a owl:Class ;
    rdfs:label "File Share Service" ;
    rdfs:subClassOf :NetworkService ;
    :definition "A file sharing service (or file share service) provides the ability to share data across a network." ;
    rdfs:seeAlso <http://dbpedia.org/resource/File_sharing> .

:FileSystem a owl:Class ;
    rdfs:label "File System" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :Directory ],
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :File ],
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :FileSystemLink ],
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :FileSystemMetadata ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/File_system> ;
    :definition "In computing, a file system or filesystem is used to control how data is stored and retrieved. Without a file system, information placed in a storage medium would be one large body of data with no way to tell where one piece of information stops and the next begins. By separating the data into pieces and giving each piece a name, the information is easily isolated and identified. Taking its name from the way paper-based information systems are named, each group of data is called a \"file\". The structure and logic rules used to manage the groups of information and their names is called a \"file system\"." .

:FileSystemLink a owl:Class ;
    rdfs:label "File System Link" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Hard_link> ;
    :definition "A file system link associates a name with a file on a file system.  Most generally, this may be a direct reference (a hard link) or an indirect one (a soft link)." .

:FileSystemMetadata a owl:Class ;
    rdfs:label "File System Metadata" ;
    rdfs:subClassOf :Metadata ;
    :definition "Metadata about the files and directories in a file system.  For example file name, file length, time modified, group and user ids, and other file attributes." ;
    rdfs:seeAlso <http://dbpedia.org/resource/File_system#Metadata> .

:FileSystemSensor a owl:Class ;
    rdfs:label "File System Sensor" ;
    rdfs:subClassOf :EndpointSensor,
        [ a owl:Restriction ;
            owl:onProperty :monitors ;
            owl:someValuesFrom :File ] ;
    :definition "Collects files and file metadata on an endpoint." .

:FileTransferNetworkTraffic a owl:Class ;
    rdfs:label "File Transfer Network Traffic" ;
    rdfs:subClassOf :NetworkTraffic ;
    :definition "File transfer network traffic is network traffic related to file transfers between network nodes..This includes only network traffic conforming to standard file transfer protocols, not custom transfer protocols." .

:FingerPrintScannerInputDevice a owl:Class ;
    rdfs:label "Finger Print Scanner Input Device" ;
    skos:altLabel "Fingerprint Sensor" ;
    rdfs:subClassOf :ImageScannerInputDevice ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Fingerprint#Fingerprint_sensors> ;
    :definition "A fingerprint sensor is an electronic device used to capture a digital image of the fingerprint pattern. The captured image is called a live scan. This live scan is digitally processed to create a biometric template (a collection of extracted features) which is stored and used for matching. Many technologies have been used including optical, capacitive, RF, thermal, piezoresistive, ultrasonic, piezoelectric, and MEMS." .

:Firewall a owl:Class ;
    rdfs:label "Firewall" ;
    skos:altLabel "Network Firewall" ;
    rdfs:subClassOf :NetworkNode ;
    :definition "In computing, a firewall is a network security system that monitors and controls incoming and outgoing network traffic based on predetermined security rules. A firewall typically establishes a barrier between a trusted internal network and untrusted external network, such as the Internet. Firewalls are often categorized as either network firewalls or host-based firewalls. Network firewalls filter traffic between two or more networks and run on network hardware. Host-based firewalls run on host computers and control network traffic in and out of those machines. This definition refers to network firewalls." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Firewall_(computing)> .

:Firmware a owl:Class ;
    rdfs:label "Firmware" ;
    rdfs:subClassOf :Software ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Firmware> ;
    :definition "In electronic systems and computing, firmware is a type of software that provides control, monitoring and data manipulation of engineered products and systems. Typical examples of devices containing firmware are embedded systems (such as traffic lights, consumer appliances, remote controls and digital watches), computers, computer peripherals, mobile phones, and digital cameras. The firmware contained in these devices provides the low-level control program for the device." .

:FirmwareBehaviorAnalysis a owl:Class,
        owl:NamedIndividual,
        :PlatformMonitoring ;
    rdfs:label "Firmware Behavior Analysis" ;
    rdfs:subClassOf :PlatformMonitoring,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :Firmware ] ;
    :d3fend-id "D3-FBA" ;
    :definition "Analyzing the behavior of embedded code in firmware and looking for anomalous behavior and suspicious activity." ;
    :kb-article """## How it works
Firmware behavior analysis provides protections by ensuring that installed firmware has not been tampered with or modified. Firmware analysis applies to mutable firmware and immutable read-only memory (ROMs).

Firmware in deployed network devices is typically not analyzed and monitored for vulnerabilities and thus is subject to potential attacks. This technique makes use of known and measured behavioral attributes, including timing attributes, of analyzed firmware on deployed devices.

A behavioral method that employs known timing measurements may use the timing results from a challenge and response protocol to detect the presence of malware in embedded firmware. Firmware device timing measurements are made, specific to the installed device, and are used in the verifying function.

The original firmware image is modified by injecting a monitoring software component into the embedded firmware code. The injected software components will allow for a software root of trust, the challenge and response protocol, to be implement in the firmware.

A challenge-response is issued and includes a nonce so that replays are not allowed. The firmware will calculate a checksum over all of memory, including the nonce, and return the result. The verification system will compare the computed checksum and the time it took for the computation of the checksum to determine if the firmware has been modified.

## Considerations
* The firmware code will need to be modified to include the behavioral monitoring functionality.
* This technique is sensitive to the device the embedded firmware is hosted on and it is expected that the devices and firmware will need to be profiled and analyzed to determine timing estimation.
* This technique is not expected to be one hundred percent correct as you would expect in a hardware root of trust solution and may require some tuning.""" ;
    :kb-reference :Reference-FirmwareBehaviorAnalysisConFirm,
        :Reference-FirmwareBehaviorAnalysisVIPER ;
    :synonym "Firmware Timing Analysis" .

:FirmwareEmbeddedMonitoringCode a owl:Class,
        owl:NamedIndividual,
        :PlatformMonitoring ;
    rdfs:label "Firmware Embedded Monitoring Code" ;
    rdfs:subClassOf :PlatformMonitoring,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :Firmware ] ;
    :d3fend-id "D3-FEMC" ;
    :definition "Monitoring code is injected into firmware for integrity monitoring of firmware and firmware data." ;
    :kb-article """## How it works
Firmware in deployed network devices is typically not monitored for malicious changes. This technique provides a method to embed a software security component into the deployed firmware which provides a near real-time monitoring hook. The exception handling code, in the firmware, is typically used to expose any detected vulnerabilities.

The injected software components provide a feature similar to intrusion detection systems for the firmware by detecting unauthorized modifications of the embedded firmware. The integrity of static code and firmware data are monitored continuously in the hosted devices. Comparisons are made to monitored elements like firmware memory addresses and data segments. Memory pages are scanned and if a modification is detected the software component may lock the page. This will protect subsequent attempted modifications to the firmware. The software component may utilize the exception handling code and thus be able to disclose the exact address of the modified memory.

The injected software components are inserted during the firmware imaging process. The injected software is assumed to have knowledge of both the embedded code and the current execution state of the host program. The injected software will monitor and alert, in near real-time, on potential suspicious activity. The injected code is run alongside of the embedded code in the host. The injected software operates as an independent entity and is not dependent on the host software.

Finally, this technique may implement other countermeasure techniques as part of their analytical processes. These should be identified by referencing other countermeasure techniques directly as necessary.

## Considerations
* The firmware code will need to be modified and re-hosted on the device.
* Exposing monitoring hooks to the injected code may introduce additional risk.""" ;
    :kb-reference :Reference-FirmwareEmbeddedMonitoringCodeRedBalloon,
        :Reference-FirmwareEmbeddedMonitoringCodeSymbiotes .

:FirmwareSensor a owl:Class ;
    rdfs:label "Firmware Sensor" ;
    rdfs:subClassOf :EndpointSensor,
        [ a owl:Restriction ;
            owl:onProperty :monitors ;
            owl:someValuesFrom :Firmware ] ;
    :definition "Collects information on firmware installed on an Endpoint." .

:FirmwareVerification a owl:Class,
        owl:NamedIndividual,
        :PlatformMonitoring ;
    rdfs:label "Firmware Verification" ;
    rdfs:subClassOf :PlatformMonitoring,
        [ a owl:Restriction ;
            owl:onProperty :verifies ;
            owl:someValuesFrom :Firmware ] ;
    :d3fend-id "D3-FV" ;
    :definition "Cryptographically verifying firmware integrity." ;
    :kb-article """## How it works
Cryptographic hash values are computed for system and peripheral firmware. The hash values are compared against precomputed hash values for the identified firmware. A hash value mismatch may indicate that the firmware may have been tampered with or updated with a non-current release indicating a misconfiguration for the system.

## Considerations
* Requires cryptographically computed hash values of firmware
* Requires storage of precomputed firmware hash values""" ;
    :kb-reference :Reference-FirmwareVerificationEclypsium,
        :Reference-FirmwareVerificationTrapezoid,
        :Reference-PlatformFirmwareResiliencyGuidelines_NIST .

:First-orderLogic a owl:Class ;
    rdfs:label "First-order Logic" ;
    rdfs:subClassOf :PredicateLogic ;
    :definition "See Predicate Logic" ;
    :kb-article """## How it works
_TBD enter text here for how the thing works_

## Considerations 

## References 
_TBD See Predicate Logic_""" .

:First-stageBootLoader a owl:Class ;
    rdfs:label "First-stage Boot Loader" ;
    rdfs:subClassOf :BootLoader ;
    :definition "The very first routine run in order to load the operating system." .

:FlashMemory a owl:Class ;
    rdfs:label "Flash Memory" ;
    rdfs:subClassOf :SecondaryStorage ;
    rdfs:isDefinedBy "https://dbpedia.org/page/Flash_memory" ;
    :definition "Flash memory is an electronic non-volatile computer memory storage medium that can be electrically erased and reprogrammed." .

:Forecasting a owl:Class ;
    rdfs:label "Forecasting" ;
    rdfs:subClassOf :AnalyticalPurpose .

:ForwardProxyServer a owl:Class ;
    rdfs:label "Forward Proxy Server" ;
    rdfs:subClassOf :ProxyServer ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Open_proxy> ;
    :definition "An forward (or open) proxy is a proxy server that is accessible by any Internet user. Generally, a proxy server only allows users within a network group (i.e. a closed proxy) to store and forward Internet services such as DNS or web pages to reduce and control the bandwidth used by the group. With an open proxy, however, any user on the Internet is able to use this forwarding service." .

:ForwardResolutionDomainDenylisting a :DNSDenylisting,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Forward Resolution Domain Denylisting" ;
    rdfs:subClassOf :DNSDenylisting,
        [ a owl:Restriction ;
            owl:onProperty :blocks ;
            owl:someValuesFrom :OutboundInternetDNSLookupTraffic ] ;
    :d3fend-id "D3-FRDDL" ;
    :definition "Blocking a lookup based on the query's domain name value." ;
    :kb-article """## How it works

Policies are created that filter DNS queries using fully qualified domain name (FQDN) of record in the query. A DNS policy can be created for blocking DNS queries from FQDNs that have been identified as unauthorized.

## Considerations

Continuous maintenance of unauthorized domain lists is needed to keep up to date as updates occur.""" ;
    :kb-reference :Reference-UseDNSPolicyForApplyingFiltersOnDNSQueries ;
    :synonym "Forward Resolution Domain Blacklisting" .

:ForwardResolutionIPDenylisting a :DNSDenylisting,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Forward Resolution IP Denylisting" ;
    rdfs:subClassOf :DNSDenylisting,
        [ a owl:Restriction ;
            owl:onProperty :blocks ;
            owl:someValuesFrom :InboundInternetDNSResponseTraffic ] ;
    :d3fend-id "D3-FRIDL" ;
    :definition "Blocking a DNS lookup's answer's IP address value." ;
    :kb-article """## How it works

This technique prevents a client from learning IP addresses deemed to be potentially malicious, which would have been delivered via forward resolution responses.

Responses to forward resolution requests (that is, requests where a domain is sent and IP(s) are returned) are collected, and the IP address(es) included as a response are examined. If the IP address(es) are in a range included in the blacklist, then the response is dropped and not forwarded to the client.

The DNS lookup can be blocked by either dropping the network traffic with an inline device, or modifying the value of the response sent by the DNS server. To transparently prevent client applications from hanging on a request, it is common practice to replace malicious values with addresses in the range 127.0.0.0/8 or the address of a honeypot maintained by the network administrators.

## Considerations

* This technique does not prevent the client from contacting the blacklisted IP, only from learning about this IP address via a nameserver lookup request.
* DNS Response traffic can be transmitted over many different protocols, which presents a challenge to implementing methods to extract all DNS answer IP address value(s).
  * DNS has historically used UDP port 53, with TCP port 53 instead used for responses over 512 bytes or after a lack of response over UDP.
  * Usage of new protocols to provide confidentiality for DNS traffic, such as DoH (DNS over HTTPS) and DoT (DNS over TLS), complicates collection of the IP address(es) in DNS responses. These protocols have often been enabled in browser settings transparently after a browser update, with DNS requests proxied over one of these cryptographic protocols through a specified host.
* This technique must be implemented logically between the application that receives the response and the server which sent the response.
  * DNS responses sent in an encrypted manner, such as those using DoH or DoT, will require interception of the TLS connections in order to determine the IP address(es) in the response.
* Replacing the response is not effective in the case that the nameserver uses a technique to provide integrity of its responses, such as DNSSEC for DNS responses.""" ;
    :kb-reference :Reference-UseDNSPolicyForApplyingFiltersOnDNSQueries ;
    :synonym "Forward Resolution IP Blacklisting" .

:FreeMemory a owl:Class ;
    rdfs:label "Free Memory" ;
    rdfs:subClassOf :SystemCall,
        [ a owl:Restriction ;
            owl:onProperty :deletes ;
            owl:someValuesFrom :MemoryBlock ] .

:FuzzyLogic a owl:Class ;
    rdfs:label "Fuzzy Logic" ;
    rdfs:subClassOf :SymbolicReasoning .

:GatedRecurrentUnit a owl:Class ;
    rdfs:label "Gated Recurrent Unit" ;
    rdfs:subClassOf :RecurrentNeuralNetwork ;
    :definition "A Gated Recurrent Unit (GRU) is a variant of a Recurrent Neural Network (RNN), designed to combat the vanishing gradient problem commonly encountered in traditional RNNs. GRUs use gating units to control and manage the information flow in the hidden state, thus enabling the network to retain long-term dependencies more effectively." ;
    :kb-article """## How it works
The GRU operates through gating mechanisms known as the update gate and reset gate. These gates regulate the flow of information between the cells of the network.

The update gate determines how much of the past information (from previous time steps) needs to be passed onto the future, controlling the extent of information to be forgotten. The reset gate, on the other hand, decides how much of the past information should be discarded.

At each time step, the GRU takes in an input and the previous hidden state, then calculates the values of the reset and update gates using sigmoid functions. The candidate hidden state is computed using a hyperbolic tangent function, with the reset gate value affecting the extent to which the previous hidden state impacts this computation. Finally, the new hidden state is derived as a combination of the past hidden state and the candidate hidden state, with the proportion determined by the update gate.

## Considerations 

- Training GRUs, like other RNNs, can be computationally intensive due to their sequential nature which can't be parallelized.
- The architecture of GRUs may sometimes lead to overfitting on smaller datasets, requiring careful regularization or data augmentation strategies.
- While GRUs mitigate the vanishing gradient problem better than traditional RNNs, they can still suffer from it when dealing with very long sequences.
- Deciding between GRUs and other RNN variants like LSTM depends on the specific use case, dataset, and computational resources.

## References 

1. Cho, K., Van Merriënboer, B., Gulcehre, C., Bahdanau, D., Bougares, F., Schwenk, H., & Bengio, Y. (2014). Learning Phrase Representations using RNN Encoder-Decoder for Statistical Machine Translation. ArXiv:1406.1078 [Cs, Stat]. http://arxiv.org/abs/1406.1078
2. [Understanding GRU Networks](https://towardsdatascience.com/understanding-gru-networks-2ef37df6c9be)
3. Goodfellow, I., Bengio, Y., & Courville, A. (2016). Deep Learning. MIT Press. http://www.deeplearningbook.org/
4. [A Gentle Introduction to Gated Recurrent Unit (GRU)](https://www.analyticsvidhya.com/blog/2020/06/gated-recurrent-unit-gru/)""" .

:Generation a owl:Class ;
    rdfs:label "Media Generation" ;
    rdfs:subClassOf :AnalyticalPurpose .

:GenerativeAdversarialNetwork a owl:Class ;
    rdfs:label "Generative Adversarial Network" ;
    rdfs:subClassOf :UnsupervisedLearning ;
    :synonym "GAN" .

:GeneticAlgorithm a owl:Class ;
    rdfs:label "Genetic Algorithm" ;
    rdfs:subClassOf :Nature-inspiredOptimizationAlgorithm .

:GeometricMean a owl:Class ;
    rdfs:label "Geometric Mean" ;
    rdfs:subClassOf :CentralTendency .

:GetOpenSockets a owl:Class ;
    rdfs:label "Get Open Sockets" ;
    rdfs:subClassOf :SystemCall,
        [ a owl:Restriction ;
            owl:onProperty :enumerates ;
            owl:someValuesFrom :Pipe ] .

:GetOpenWindows a owl:Class ;
    rdfs:label "Get Open Windows" ;
    rdfs:subClassOf :SystemCall .

:GetRunningProcesses a owl:Class ;
    rdfs:label "Get Running Processes" ;
    rdfs:subClassOf :SystemCall .

:GetScreenCapture a owl:Class ;
    rdfs:label "Get Screen Capture" ;
    rdfs:subClassOf :SystemCall .

:GetSystemConfigValue a owl:Class ;
    rdfs:label "Get System Config Value" ;
    rdfs:subClassOf :SystemConfigSystemCall,
        [ a owl:Restriction ;
            owl:onProperty :reads ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ] ;
    rdfs:seeAlso "https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regopenkeyexa" .

:GetSystemNetworkConfigValue a owl:Class ;
    rdfs:label "Get System Network Config Value" ;
    rdfs:subClassOf :GetSystemConfigValue .

:GetSystemTime a owl:Class ;
    rdfs:label "Get System Time" ;
    rdfs:subClassOf :SystemCall ;
    :definition "A system call that gets the system time.  For POSIX.1 systems, time() invokes a call to get the system time." ;
    rdfs:seeAlso <https://man7.org/linux/man-pages/man2/time.2.html> .

:GlobalUserAccount a owl:Class ;
    rdfs:label "Global User Account" ;
    rdfs:subClassOf :DomainUserAccount ;
    :definition "A type of user account in Microsoft Windows (NT) that has a domain-wide scope.defines that user's access to a logical group of network objects (computers, users, devices) that share the same Active Directory databases; that is, a user's access to the domain." ;
    rdfs:seeAlso <https://networkencyclopedia.com/global-user-account> .

:GoodmanAndKruskalsGamma a owl:Class ;
    rdfs:label "Goodman and Kruskal's Gamma" ;
    rdfs:subClassOf :RankCorrelationCoefficient .

:GPT a owl:Class ;
    rdfs:label "GPT" ;
    rdfs:subClassOf :Transformer-basedLearning ;
    :synonym "Generative Pre-trained Transformer" .

:Graph-basedClustering a owl:Class ;
    rdfs:label "Graph-based Clustering" ;
    rdfs:subClassOf :ClusterAnalysis ;
    :definition "Graph-based clustering is a method in machine learning where data is structured as a graph or network to identify clusters. The data points are represented as nodes and the relationships between nodes, such as similarities or distances, are represented as edges. This technique aims to group similar nodes into clusters based on the network's topology." ;
    :kb-article """## How it works
Graph-based clustering starts by modeling the data as a graph where each node represents an individual data point and edges represent the relationships between these points. The relationships can be based on different criteria such as similarity or distance metrics (Euclidean, cosine, etc.), and different structures can be used, like k-nearest neighbor graphs or fully connected graphs. 

Once the graph is built, various algorithms like spectral clustering, modularity-based clustering, or community detection methods can be applied. For instance, spectral clustering uses the properties of the Laplacian matrix derived from the graph to identify clusters. It focuses on the eigenvectors associated with the smallest non-zero eigenvalues (often the second smallest, leading to "cutting" the graph into two clusters). This process can be repeated recursively to identify further clusters. Modularity-based clustering or community detection algorithms like Louvain and Girvan-Newman focus on optimizing a modularity score which measures the density of edges inside clusters to edges outside clusters.

## Considerations
- Graph-based clustering techniques are highly dependent on how the graph is constructed. An inappropriate choice of similarity measure or graph structure may lead to poor clustering results.
- The complexity of the algorithm can increase significantly with the size of the data set, making it challenging to scale to very large data sets.
- Graph-based clustering often doesn't require the number of clusters to be specified in advance, which can be an advantage over other methods, but it also means the optimal number of clusters must be determined in some other way, which can be challenging.
- As these techniques rely on the topology of the graph, they may struggle to find clusters if the data doesn't have a clear or coherent shape or structure.

## References
1. Luxburg, U. (2007). A tutorial on spectral clustering. Statistics and computing, 17(4), 395-416. [Link](https://arxiv.org/abs/0711.0189)
2. Blondel, V. D., Guillaume, J. L., Lambiotte, R., & Lefebvre, E. (2008). Fast unfolding of communities in large networks. Journal of statistical mechanics: theory and experiment, 2008(10), P10008. [Link](https://arxiv.org/abs/0803.0476)
3. Newman, M. E., & Girvan, M. (2004). Finding and evaluating community structure in networks. Physical review E, 69(2), 026113. [Link](https://journals.aps.org/pre/abstract/10.1103/PhysRevE.69.026113)""" .

:Graph-basedSemi-supervisedLearning a owl:Class ;
    rdfs:label "Graph-based Semi-supervised Learning" ;
    rdfs:subClassOf :Semi-supervisedTransductiveLearning ;
    :definition """## Definition
Graph-Based Semi-Supervised Learning is a Machine Learning (ML) method that combines both labeled and unlabeled data during the training process to build predictive models. Using the structure implicit in the data, it forms a graph representation where nodes represent samples and edges denote similarity or relationship between samples. This method leverages the principle that similar instances are likely to share the same class label.""" ;
    :kb-article """## How it works
In Graph-Based Semi-Supervised Learning, a graph is built where each data point, whether labeled or unlabeled, is represented as a node. Edges between these nodes are formed based on the similarity or relationship between the data points. This relationship could be based on a similarity metric such as Euclidean distance, cosine similarity, or a kernel function.

The primary assumption is that similar data points are likely to have the same labels, which is often referred to as the "smoothness assumption". Thus, the labeled data is used to propagate labels across the graph to the unlabeled data. This process can be iterative where new labels are refined based on the labels of neighboring nodes. Several techniques, such as label propagation, label spreading, or spectral methods, can be used to implement this learning process. 

In essence, the technique leverages the structure and relationship inherent in the data to gain better performance than a purely supervised method, especially when labeled data is scarce but there's a lot of unlabeled data available.

## Considerations 
* Data Representation: How the data is represented and the choice of similarity metric can significantly impact the performance. It requires careful consideration.
* Graph Construction: The process of graph construction and deciding the neighborhood size are crucial steps and may need tuning for optimal results.
* Computational Complexity: Depending on the size of the dataset and graph, these methods can be computationally intensive.
* Density of Labeled Data: While the technique can handle scenarios with limited labeled data, a very low density of labeled data may lead to poor model performance.
* Assumption of Similarity: The method works under the assumption that similar instances likely share the same class label, but this might not always be the case in real-world datasets.

## References
1. Zhu, X., & Ghahramani, Z. (2002). Learning from labeled and unlabeled data with label propagation. [Link](http://mlg.eng.cam.ac.uk/zoubin/papers/CMU-CALD-02-107.pdf)
2. Bengio, Y., Delalleau, O., & Roux, N. L. (2006). Label propagation and quadratic criterion. In Semi-supervised learning. [Link](http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.75.2078&rep=rep1&type=pdf)
3. Scikit-Learn: Semi-Supervised Learning. [Link](https://scikit-learn.org/stable/modules/label_propagation.html)
- https://www.sciencedirect.com/science/article/pii/S0031320321002132#:~:text=Graph%2Dbased%20Semi%2DSupervised%20Learning%20(GSSL)%20methods%20aim,class%20imbalance%20in%20given%20datasets.""" .

:GraphicalUserInterface a owl:Class ;
    rdfs:label "Graphical User Interface" ;
    skos:altLabel "GUI" ;
    rdfs:subClassOf :UserInterface ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Graphical_user_interface> ;
    :definition "A graphical user interface (GUI)  is a type of user interface that allows users to interact with electronic devices through graphical icons and visual indicators such as secondary notation, instead of text-based user interfaces, typed command labels or text navigation. GUIs were introduced in reaction to the perceived steep learning curve of command-line interfaces (CLIs), which require commands to be typed on a computer keyboard." .

:GraphicsCardFirmware a owl:Class ;
    rdfs:label "Graphics Card Firmware" ;
    skos:altLabel "Video Card Firmware" ;
    rdfs:subClassOf :PeripheralFirmware ;
    :definition "Firmware that is installed on computer graphics card." ;
    rdfs:seeAlso "d3f:Firmware" .

:GraphicsProcessingUnit a owl:Class ;
    rdfs:label "Graphics Processing Unit" ;
    rdfs:subClassOf :Processor ;
    :synonym "GPU" .

:Grid-basedClustering a owl:Class ;
    rdfs:label "Grid-based Clustering" ;
    rdfs:subClassOf :High-dimensionClustering ;
    :definition "Grid-Based Clustering is a type of clustering method that divides the data space into a finite number of cells forming a grid structure, and then performs clustering on the grid cells rather than the data points directly. This method can be highly efficient due to its minimal computation which depends on the number of cells in the grid but not the number of data objects." ;
    :kb-article """## How it works
In Grid-Based Clustering, the entire data space is divided into a grid structure. Each grid cell represents a unit of the data space, the size of which is defined by the user. The density of each cell is calculated based on the number of data points it contains. The clustering process then takes place based on these cell densities. 

The grid cells with a density above a certain threshold are considered as dense cells, while those below the threshold are deemed sparse. Grid cells with high densities are connected based on some connectivity rules, such as cells sharing a common border or edge, to form clusters. The result is a set of clusters that represent areas of the data space where the data points are densely packed.

## Considerations 
- The quality of clustering is highly dependent on the granularity of the grid, i.e., the size of the grid cells. If the grid cells are too large, smaller clusters might be missed; if they're too small, the clustering process may become computationally expensive.
- Defining the appropriate density threshold can be challenging as it greatly impacts the resulting clusters. A high threshold may result in fewer, larger clusters, while a low threshold may create many smaller clusters.
- Grid-based methods are sensitive to the shape and layout of the data space. They perform well with rectangular or cubic clusters but might struggle with clusters of complex or arbitrary shapes.
- Grid-based methods are not well-suited for high-dimensional data due to the "curse of dimensionality". As the number of dimensions increases, the number of grid cells grows exponentially, which could lead to a high computational cost and sparse distribution of the data.

## References
1. [A Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise](https://www.aaai.org/Papers/KDD/1996/KDD96-037.pdf)
2. [Spatial Clustering Methods in Data Mining: A Survey](http://www.cs.uregina.ca/~jtyao/Papers/spatial_survey.pdf)
3. [Data Clustering: Algorithms and Applications](https://www.amazon.com/Data-Clustering-Algorithms-Applications-Knowledge/dp/1466558210)
4. [Grid-Based Clustering](http://www.sthda.com/english/wiki/grid-based-clustering-essentials-of-cluster-analysis-in-r) 
5. [Clustering in Machine Learning](https://towardsdatascience.com/clustering-in-machine-learning-98bea5ebd1f1)""" .

:Grid-CNN a owl:Class ;
    rdfs:label "Grid-CNN" ;
    rdfs:subClassOf :ConvolutionalNeuralNetwork ;
    :definition "Grid Convolutional Neural Networks (Grid-CNN) is a variant of Convolutional Neural Networks (CNN) that is designed to handle multidimensional data effectively. This approach involves creating a multi-dimensional grid-based structure and leveraging convolutions in multiple directions to capture intricate patterns across dimensions, making it especially suitable for high-dimensional datasets." ;
    :kb-article """## How it works
Grid-CNN operates by constructing a multi-dimensional grid, where each node represents an aspect of the input data. Convolutional layers are then applied in various directions across this grid, thus creating multiple channels of data processing. These convolutions consider multiple dimensions at once, thereby capturing the relationships across different aspects of the data more effectively than standard CNNs. 

In a standard CNN, the convolution is typically performed only across the width and height of an input image. However, in a Grid-CNN, these convolutions extend to the depth, time, and other dimensions as well, effectively making the network multi-directional. Each convolution results in a feature map, and all the feature maps are concatenated together to provide a comprehensive representation of the multidimensional input data. This allows Grid-CNN to capture the complex and intricate patterns that exist across multiple dimensions of the data.

## Considerations
- **Data requirements**: Grid-CNNs perform best with high-dimensional data. For lower-dimensional data, traditional CNNs or other architectures might be more suitable and computationally efficient.
- **Computational resources**: Given the multidirectional nature of Grid-CNN, it requires significant computational resources, particularly in memory and processing power.
- **Training complexity**: Grid-CNNs can be more complex to train due to the additional dimensions being considered. Adequate tuning and potentially longer training times should be expected.
- **Model interpretability**: Despite their effectiveness, Grid-CNNs, like most deep learning models, suffer from a lack of interpretability. Understanding the decision-making process within these models can be challenging.

## References
- Zilei Wang, Miao Zhang, Yang Yang, and Tim Oates. 2018. GridCNN: A Flexible Learning Framework For Arbitrary-Order And Multi-Dimensional Input. In Proceedings of the 24th ACM SIGKDD International Conference on Knowledge Discovery & Data Mining (KDD '18). [https://dl.acm.org/doi/10.1145/3219819.3220087](https://dl.acm.org/doi/10.1145/3219819.3220087)
- Goodfellow, I., Bengio, Y., & Courville, A. (2016). Deep Learning. MIT Press. [http://www.deeplearningbook.org](http://www.deeplearningbook.org)
 
- https://towardsdatascience.com/convolutional-neural-networks-explained-9cc5188c4939""" .

:Grouping a owl:Class ;
    rdfs:label "Grouping" ;
    rdfs:subClassOf :Summarizing .

:GroupPolicy a owl:Class ;
    rdfs:label "Group Policy" ;
    rdfs:subClassOf :AccessControlConfiguration ;
    :definition "Group Policy is a feature of the Microsoft Windows NT family of operating systems that controls the working environment of user accounts and computer accounts. Group Policy provides the centralized management and configuration of operating systems, applications, and users' settings in an Active Directory environment. A version of Group Policy called Local Group Policy (\"LGPO\" or \"LocalGPO\") also allows Group Policy Object management on standalone and non-domain computers." .

:Guidance a owl:Class ;
    rdfs:label "Guidance" ;
    rdfs:subClassOf :Policy .

:GuidelineReference a owl:Class ;
    rdfs:label "Guideline Reference" ;
    rdfs:subClassOf :PolicyReference ;
    :pref-label "Guideline" .

:HardDiskFirmware a owl:Class ;
    rdfs:label "Hard Disk Firmware" ;
    skos:altLabel "Hard Drive Firmware" ;
    rdfs:subClassOf :PeripheralFirmware ;
    :definition "Firmware that is installed on a hard disk device." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Hard_disk_drive> .

:Harden a :DefensiveTactic,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Harden" ;
    rdfs:subClassOf :DefensiveTactic ;
    :definition "The harden tactic is used to increase the opportunity cost of computer network exploitation. Hardening differs from Detection in that it generally is conducted before a system is online and operational." ;
    :display-order 0 ;
    :display-priority 0 .

:HardLink a owl:Class ;
    rdfs:label "Hard Link" ;
    rdfs:subClassOf :FileSystemLink ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Hard_link> ;
    :definition "In computing, a hard link is a directory entry that associates a name with a file on a file system. All directory-based file systems must have at least one hard link giving the original name for each file. The term \"hard link\" is usually only used in file systems that allow more than one hard link for the same file. Multiple hard links -- that is, multiple directory entries to the same file -- are supported by POSIX-compliant and partially POSIX-compliant operating systems, such as Linux, Android, macOS, and also Windows NT4 and later Windows NT operating systems." .

:Hardware-basedProcessIsolation a :ExecutionIsolation,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Hardware-based Process Isolation" ;
    rdfs:subClassOf :ExecutionIsolation,
        [ a owl:Restriction ;
            owl:onProperty :isolates ;
            owl:someValuesFrom :Process ],
        [ a owl:Restriction ;
            owl:onProperty :restricts ;
            owl:someValuesFrom :CreateProcess ] ;
    :d3fend-id "D3-HBPI" ;
    :definition "Preventing one process from writing to the memory space of another process through hardware based address manager implementations." ;
    :kb-article """## How it works
Process isolation, in this context, is address space separation controlled by a security function that limits the communication between processes so that one process cannot directly modify the executing code of another process. For example with virtual address space:

* Process A address space is different from process B address space, which prevents process A from writing to process B

Hardware process isolation is commonly implemented through Direct Memory Access (DMA) which collaborates with a Memory Management Unit (MMU), or Input-Output Memory Management Unit (IOMMU). These hardware controls are deployed directly on processors to aid hosts or enclaves in process isolation.

* DMA - Direct memory access allows memory access to occur independently of the program currently run by the microprocessor. DMA allows for I/O devices to directly read from and write to memory, or it can be used to efficiently copy blocks of memory. During DMA transfers, the microprocessor can execute an unrelated program.
* MMU - A memory management unit acts as an access control and is responsible for performing the translation of virtual memory addresses to physical memory addresses. The MMU allocates each process its own virtual memory space.
* IOMMU - An input-output memory management unit is used to allocate each I/O device its own virtual address space to the underlying physical addresses. IOMMU allows devices that do not support long memory addresses to address the entire memory space.

## Considerations
* Private hosts may be vulnerable to DMA attack if they have a PCI or PCI Express port that connects attached devices directly to physical address space.

## Implementations:
 * Intel Virtualization Technology for Directed I/O (Intel VT-d)
 * Firecracker""" ;
    :kb-reference <http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-ApproachesForSecuringAnInternetEndpointUsingFine-grainedOperatingSystemVirtualization_Bromium,Inc.>,
        <http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-IsolationOfApplicationsWithinAVirtualMachine_Bromium,Inc.>,
        :Reference-VirtualizedProcessIsolation_AdvancedMicroDevicesInc ;
    :synonym "Virtualization" .

:HardwareComponentInventory a :AssetInventory,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Hardware Component Inventory" ;
    rdfs:subClassOf :AssetInventory,
        [ a owl:Restriction ;
            owl:onProperty :inventories ;
            owl:someValuesFrom :HardwareDevice ] ;
    :d3fend-id "D3-HCI" ;
    :definition "Hardware component inventorying identifies and records the hardware items in the organization's architecture." ;
    :kb-article """## How it works
Administrators collect information on hardware devices such as peripherals, NICs, processors, and memory devices that are components of the computers in their architecture using a variety of administrative and management tools that query for this information.  In some cases, where such queries are not supported or provide specific information of interest, an administrator may also collect this information through remote adminstration tools and system commands, either manually or using scripts.

## Considerations
* Scanning and probing techniques using mapping tools can result in side effects to information technology (IT) and operational technology (OT) systems.
* An adversary conducting network enumeration may engage in activities that parallel normal hardware inventorying activities, but would require escalating to admin privileges for most of the operations requiting administrative tools

## Examples
* Bus discovery
   * Admin-scripted PCI Bus inventory using ssh and pciutils
* Application-layer discovery
   * Simple Network Management Protocol (SNMP) collects MIB information
   * Web-based Enterprise Management (WBEM) collects CIM information
      * Windows Management Instrumentation (WMI)
      * Windows Management Infrastructure (MI)""" ;
    :kb-reference :Reference-AdvancedDeviceMatchingSystem ;
    :synonym "Hardware Component Discovery",
        "Hardware Component Inventorying" .

:HardwareDevice a owl:Class ;
    rdfs:label "Hardware Device" ;
    rdfs:subClassOf :DigitalArtifact,
        :PhysicalArtifact ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Computer_hardware> ;
    :definition "Hardware devices are the physical artifacts that constitute a network or computer system. Hardware devices are the physical parts or components of a computer, such as the monitor, keyboard, computer data storage, hard disk drive (HDD), graphic cards, sound cards, memory (RAM), motherboard, and so on, all of which are tangible physical objects. By contrast, software is instructions that can be stored and run by hardware. Hardware is directed by the software to execute any command or instruction. A combination of hardware and software forms a usable computing system." .

:HardwareDriver a owl:Class ;
    rdfs:label "Hardware Driver" ;
    skos:altLabel "Device Driver" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :drives ;
            owl:someValuesFrom :HardwareDevice ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Device_driver> ;
    :definition "In computing, a device driver (commonly referred to simply as a driver) is a computer program that operates or controls a particular type of device that is attached to a computer. A driver provides a software interface to hardware devices, enabling operating systems and other computer programs to access hardware functions without needing to know precise details of the hardware being used. A driver communicates with the device through the computer bus or communications subsystem to which the hardware connects. When a calling program invokes a routine in the driver, the driver issues commands to the device. Once the device sends data back to the driver, the driver may invoke routines in the original calling program. Drivers are hardware dependent and operating-system-specific. They usually provide the interrupt handling required for any necessary asynchronous time-dependent hardware interface." .

:HarmonicMean a owl:Class ;
    rdfs:label "Harmonic Mean" ;
    rdfs:subClassOf :CentralTendency .

:HeapSegment a owl:Class ;
    rdfs:label "Heap Segment" ;
    rdfs:subClassOf :ProcessSegment ;
    :definition "The heap segment (or free store) is a large pool of memory from which dynamic memory requests of a process are allocated and satisfied." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Memory_management#HEAP> .

:HeterogeneousAsymmetricFeature-basedTransferLearning a owl:Class ;
    rdfs:label "Heterogeneous Asymmetric Feature-based Transfer Learning" ;
    rdfs:subClassOf :HeterogeneousTransferLearning ;
    :definition "Heterogeneous Asymmetric Feature-based Transfer Learning is a subset of machine learning that is designed to improve learning in a target domain by leveraging knowledge from a different, yet related, source domain, even if they are represented in different feature spaces. It operates under the assumption that these domains are not symmetrically similar and aims to bridge the gap between these asymmetrically similar domains." ;
    :kb-article """## How it works
Heterogeneous Asymmetric Feature-based Transfer Learning uses the knowledge gleaned from a source domain to inform the learning process in a target domain. This type of transfer learning is particularly useful in scenarios where the source and target domains have different feature spaces and the relationships between the source and target are asymmetric. 

The process starts by identifying commonalities and differences between the source and target domains. This often involves complex data transformations and feature extractions. Machine learning models are then trained on the source domain, using these identified commonalities and differences, and then applied to the target domain. 

Next, a process of aligning or mapping the feature spaces between the two domains is performed, typically via methods such as correlation alignment or manifold alignment. These alignment methods help in reducing the domain shift, making it easier for the model trained on the source domain to generalize to the target domain.

## Considerations 

- It is crucial to identify a related source domain with ample data for training to leverage transfer learning effectively.
- The choice of alignment methods for bridging the feature spaces can significantly impact the success of the learning process.
- Given the complexity of this technique, a significant investment in computational resources may be required.
- Evaluating the model performance and tuning it for the target domain might be challenging due to potential overfitting on the source domain.
- It is important to ensure that the transfer of learning doesn't violate any privacy or ethical considerations, especially when dealing with sensitive data.

## References 
1. [Pan, Sinno Jialin, and Qiang Yang. "A survey on transfer learning." IEEE Transactions on knowledge and data engineering 22.10 (2009)](https://ieeexplore.ieee.org/abstract/document/5288526)
2. [Wang, Shiqi, and Qiang Yang. "Heterogeneous Domain Adaptation using Manifold Alignment." (2011)](https://www.ijcai.org/Proceedings/11/Papers/267.pdf)
3. [Zhang, Jie, et al. "Feature space independent semi-supervised domain adaptation via kernel matching." IEEE Transactions on Pattern Analysis and Machine Intelligence 41.2 (2018)](https://ieeexplore.ieee.org/abstract/document/8263743)
4. [Long, Mingsheng, et al. "Transfer feature learning with joint distribution adaptation." Proceedings of the IEEE international conference on computer vision. 2013.](https://openaccess.thecvf.com/content_iccv_2013/html/Long_Transfer_Feature_Learning_ICCV_2013_paper.html)""" .

:HeterogeneousFeature-basedTransferLearning a owl:Class ;
    rdfs:label "Heterogeneous Feature-based Transfer Learning" ;
    rdfs:subClassOf :HeterogeneousTransferLearning ;
    :definition "Heterogeneous Feature-based Transfer Learning is a specialized form of transfer learning where knowledge is shared across domains with different feature spaces. The goal is to improve the performance of a learning task in a target domain, by leveraging relevant information from a source domain, despite the difference in feature representations." ;
    :kb-article """## How it works
In the context of machine learning, features are the measurable properties or characteristics of the data. Heterogeneous feature-based transfer learning, thus, operates when these features differ across the source and target domains. To perform transfer learning in such a case, a common feature space must first be established. This is typically achieved by aligning the two disparate feature spaces based on some form of correspondence or similarity between them. 

After establishing a common feature space, the model trained on the source domain can be applied to the target domain. This can be achieved in a few different ways, including instance re-weighting, feature selection, and feature transformation. Instance re-weighting involves adjusting the importance of each instance in the source domain to better suit the target domain. Feature selection involves choosing a subset of features from the source and target domains that are most useful for the learning task. Feature transformation, on the other hand, involves creating new features from the existing ones to better align the source and target domains. 

## Considerations
- The success of heterogeneous feature-based transfer learning relies on the assumption that there's some sort of correspondence or similarity between the source and target feature spaces. If the domains are too different, the technique may not yield improved results.
- The process of aligning the feature spaces can be computationally expensive and time-consuming, particularly for large datasets or complex feature spaces.
- Deciding on the best strategy (instance re-weighting, feature selection, or feature transformation) requires a good understanding of the data and the problem at hand.

## References
1. Pan, Sinno Jialin, et al. "Transfer learning in heterogeneous feature spaces via spectral transformation." IJCAI Proceedings-International Joint Conference on Artificial Intelligence. Vol. 22. No. 1. 2011. [Link](https://www.ijcai.org/Proceedings/11/Papers/267.pdf)
2. Wei, Yao, et al. "Learning under feature drifts in textual streams." Proceedings of the 2010 conference on ECAI 2010: 19th European Conference on Artificial Intelligence. IOS Press, 2010. [Link](https://dl.acm.org/doi/10.3233/978-1-60750-606-5-991)
3. "A Survey on Transfer Learning," S. J. Pan and Q. Yang, in IEEE Transactions on Knowledge and Data Engineering, vol. 22, no. 10, pp. 1345-1359, Oct. 2010, doi: 10.1109/TKDE.2009.191. [Link](https://ieeexplore.ieee.org/document/5288526)""" .

:HeterogeneousTransferLearning a owl:Class ;
    rdfs:label "Heterogeneous Transfer Learning" ;
    rdfs:subClassOf :TransferLearning ;
    :definition "Heterogeneous Transfer Learning is a machine learning technique that applies knowledge acquired from one domain, known as the source domain, to a different but related domain, referred to as the target domain, where the source and target domains have different feature spaces or distributions. The key objective is to leverage the learnings from the source domain to improve learning performance in the target domain." ;
    :kb-article "",
        """## How it works
In heterogeneous transfer learning, the learning model utilizes knowledge from a source domain, where sufficient labeled data is available, to enhance the learning process in a target domain that lacks a large amount of labeled data. However, unlike traditional transfer learning, the source and target domains in heterogeneous transfer learning do not share the same feature space or data distribution. 

To overcome this challenge, various methods are applied to find a common space or build relations between the two distinct spaces. These methods may include feature selection and transformation, instance reweighting, and building shared latent spaces. Once a common space or relationship is established, models are trained using the source domain data and then applied to the target domain. The goal is to improve the model's performance on the target domain by leveraging patterns and knowledge gained from the source domain.

## Considerations 

* **Domain Relevance:** Ensure that the source and target domains are related. Transfer learning may not be beneficial if the source and target domains are fundamentally different, despite their differing feature spaces.
  
* **Negative Transfer Risk:** Be aware of the risk of negative transfer, where the application of knowledge from the source domain negatively impacts performance in the target domain. This is particularly relevant when the source and target domains are not sufficiently similar.

* **Data Quality:** The quality of data in the source domain plays a crucial role in the success of heterogeneous transfer learning. If the source domain data is of poor quality, it may impair the model's performance on the target domain.

* **Computational Requirements:** Depending on the method used to align the source and target domains, computational requirements may be higher than standard machine learning approaches. 

## References 

1. Yang, Qiang and Yuqiang Chen et al. "Heterogeneous Transfer Learning for Image Clustering via the SocialWeb." Proceedings of the 47th Annual Meeting of the Association for Computational Linguistics. [Link](https://www.aclweb.org/anthology/P09-1033.pdf)

2. Pan, Sinno Jialin, et al. "A survey on transfer learning." IEEE Transactions on knowledge and data engineering 22.10 (2009): 1345-1359. [Link](https://ieeexplore.ieee.org/abstract/document/5288526)

3. Dai, Wenyuan, et al. "Self-taught clustering." Proceedings of the 25th international conference on Machine learning. 2008. [Link](https://dl.acm.org/doi/10.1145/1390156.1390200)""" .

:HierarchicalClustering a owl:Class ;
    rdfs:label "Hierarchical Clustering" ;
    rdfs:subClassOf :ClusterAnalysis .

:HierarchicalDomainDenylisting a :ForwardResolutionDomainDenylisting,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Hierarchical Domain Denylisting" ;
    rdfs:subClassOf :ForwardResolutionDomainDenylisting ;
    :d3fend-id "D3-HDDL" ;
    :definition "Blocking the resolution of any subdomain of a specified domain name." ;
    :kb-article """## How it works
This technique is used to block DNS queries from related domains and subdomains that are unauthorized.

Hierarchical domain blacklisting considers the blacklisting of second level domains and additional sub-domains and specific hosts for a given query value. A denylist is maintained that contains DNS names and corresponding subdomains, including wildcards, that should be blocked for a given lookup.

## Considerations
* The denylist of domain names will have to be maintained and will need to be kept up to date
* Other domains that resolve to the domain of interest for blocking (CNAME, etc).
* Denylists should have identified maintenance cycles to ensure lists are not stale.""" ;
    :kb-reference :Reference-UseDNSPolicyForApplyingFiltersOnDNSQueries ;
    :synonym "Hierarchical Domain Blacklisting" .

:High-dimensionClustering a owl:Class ;
    rdfs:label "High-dimension Clustering" ;
    rdfs:subClassOf :ClusterAnalysis ;
    :definition "High-Dimension Clustering is a machine learning technique that is used to group similar instances in multi-dimensional spaces. This technique can handle datasets that have numerous features or dimensions, a common occurrence in fields like bioinformatics, text analysis, and image processing." ;
    :kb-article """## How it works
In High-Dimension Clustering, we employ algorithms that can effectively deal with the high-dimensionality of the data. These algorithms function on the principle of similarity or distance metrics to identify clusters, such as Euclidean or Manhattan distance. However, traditional distance measures can become less informative as the number of dimensions grows due to the "curse of dimensionality," where the data points in high-dimensional space appear equidistant from one another.

To overcome this, advanced techniques like subspace clustering or correlation clustering are used. Subspace clustering works by identifying clusters in different subspaces within the high-dimensional dataset. For instance, if we have a 1000-dimensional dataset, some clusters might be visible only in a 10-dimensional subspace. On the other hand, correlation clustering focuses on finding clusters of objects that share a high degree of correlation, rather than just proximity.

## Considerations 

- **Curse of dimensionality:** As the number of dimensions increases, the distance between samples becomes less distinctive, making it challenging to form effective clusters.
- **Preprocessing:** Data might need preprocessing to deal with noise and outliers, as they can significantly influence the clustering results.
- **Selection of algorithm:** Not all clustering algorithms perform well in high-dimensional spaces. Therefore, the choice of algorithm is crucial.
- **Computational resources:** High-Dimension Clustering often requires substantial computational resources due to the complexity of calculations in multi-dimensional spaces.
- **Interpretability:** Understanding and visualizing the results from high-dimensional clustering can be challenging due to the inherent complexity of high-dimensional spaces.

## References 

1. Aggarwal, C. C., & Reddy, C. K. (2013). Data clustering: algorithms and applications. CRC Press. [Link](https://www.crcpress.com/Data-Clustering-Algorithms-and-Applications/Aggarwal-Reddy/p/book/9781466558212)
2. Parsons, L., Haque, E., & Liu, H. (2004). Subspace clustering for high dimensional data: a review. ACM SIGKDD Explorations Newsletter, 6(1), 90-105. [Link](https://dl.acm.org/doi/10.1145/1007730.1007731)
3. Zimek, A., Schubert, E., & Kriegel, H. P. (2012). A survey on unsupervised outlier detection in high-dimensional numerical data. Statistical analysis and data mining: The ASA Data Science Journal, 5(5), 363-387. [Link](https://onlinelibrary.wiley.com/doi/abs/10.1002/sam.11161)""" .

:Higher-orderLogic a owl:Class ;
    rdfs:label "Higher-order Logic" ;
    rdfs:subClassOf :PredicateLogic ;
    :definition "Higher-order logic is a form of predicate logic that is distinguished from first-order logic by additional quantifiers and, sometimes, stronger semantics. Higher-order logics with their standard semantics are more expressive, but their model-theoretic properties are less well-behaved than those of first-order logic." ;
    :kb-article """## How it works
_TBD enter text here for how the thing works_

## Considerations 

## References 
- https://en.wikipedia.org/wiki/Higher-order_logic""" .

:Histogramming a owl:Class ;
    rdfs:label "Histogramming" ;
    rdfs:subClassOf :Summarizing .

:HomogenousTransferLearning a owl:Class ;
    rdfs:label "Homogenous Transfer Learning" ;
    rdfs:subClassOf :TransferLearning ;
    :definition "Homogeneous Transfer Learning is a subdomain of Machine Learning where the source and target tasks are similar in nature. It leverages knowledge gained while solving one problem and applies it to a related problem. This technique is particularly effective when there's scarcity of labeled data for the target task." ;
    :kb-article """## How it works
In Homogeneous Transfer Learning, the model is first trained on a source task for which abundant data is available. The trained model, which has theoretically learned certain general patterns, representations, and principles from the source task, is then applied to a related target task with less available data. 

The underlying assumption is that the source and target tasks share some commonalities, allowing the knowledge transfer to occur. For instance, if the source task is to identify objects in a general set of images and the target task is to identify specific objects like cars, the model could leverage its learned ability to recognize shapes, edges, and colors from the source task to better perform on the target task.

## Considerations 
- Source and target tasks should share some degree of similarity. If the tasks are too different, the transfer of knowledge may not be effective, leading to poor performance.
- Fine-tuning might be necessary when applying the source model to the target task to account for differences between tasks.
- Data scarcity in the target task should be critically evaluated. While Homogeneous Transfer Learning helps in such scenarios, extremely limited data could still impact performance negatively.
- Beware of negative transfer where the knowledge from the source task hinders rather than helps the performance on the target task.

## References 
1. ["A Survey on Transfer Learning"](https://ieeexplore.ieee.org/document/5288526) by Sinno Jialin Pan and Qiang Yang. IEEE Transactions on knowledge and data engineering, 2009.
2. ["Deep Learning-Based Classification Methods for Remote Sensing Images Using Homogeneous and Heterogeneous Transfer Learning"](https://www.mdpi.com/2072-4292/13/10/1925), MDPI, Remote Sensing, 2021.
3. ["Transfer Learning"](http://ruder.io/transfer-learning/), by Sebastian Ruder. An Overview of the field, its various forms and the challenges faced.
4. ["Deep Learning"](https://www.deeplearningbook.org/), by Ian Goodfellow, Yoshua Bengio, and Aaron Courville. This book covers a wide range of machine learning topics including Transfer Learning. 
5. ["How transferable are features in deep neural networks?"](https://papers.nips.cc/paper/5347-how-transferable-are-features-in-deep-neural-networks.pdf) by Jason Yosinski, Jeff Clune, Yoshua Bengio, and Hod Lipson. NIPS Proceedings, 2014.""" .

:HomoglyphDenylisting a :ForwardResolutionDomainDenylisting,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Homoglyph Denylisting" ;
    rdfs:subClassOf :ForwardResolutionDomainDenylisting ;
    :d3fend-id "D3-HDL" ;
    :definition "Blocking DNS queries that are deceptively similar to legitimate domain names." ;
    :kb-article """## How it works

Homoglyph domain blacklisting considers the domain and subdomain structure of a lookup and compares the named components to blacklisted named components. The blacklisted named components are typically crafted modifications of known good domains, e.g., gooogle.com versus google.com. The blacklisted domains typically resemble trusted domains, but have been altered slightly to deceive users.

The blacklisted named components also include consideration for fonts or Unicode characters that can make certain characters appear very similar (zero vs capital O and the letter l vs the number one). The blacklisted domains under certain fonts will appear to be a trusted domain.

## Considerations
* Maintaining the currency of the list can be a challenge especially with newly registered domain entries.
* Blacklists should have identified maintenance cycles to ensure lists are not stale.""" ;
    :kb-reference :Reference-DetectionOfMaliciousIDNHomoglyphDomains ;
    :synonym "Homoglyph Blacklisting" .

:HomoglyphDetection a :IdentifierAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Homoglyph Detection" ;
    rdfs:subClassOf :IdentifierAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :Email ],
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :URL ] ;
    :d3fend-id "D3-HD" ;
    :definition "Comparing strings using a variety of techniques to determine if a deceptive or malicious string is being presented to a user." ;
    :kb-article """## How it works
A homoglyph, in this context, is a deceptive string or word which looks like a trusted word, but is composed of different characters, for example: goooogle.com versus google.com. This is commonly found in phishing and typo squatting attacks where a human exploiting through a social engineering campaign.

## Considerations
* In very large environments processing DNS queries can be computationally expensive due to the amount of traffic that is generated
* Legitimate companies and products use non-dictionary words in their names that could result in many false positives""" ;
    :kb-reference :Reference-Computer-implementedMethodsAndSystemsForIdentifyingVisuallySimilarTextCharacterStrings_GreathornInc,
        :Reference-SystemAndMethodForDetectingHomoglyphAttacksWithASiameseConvolutionalNeuralNetwork_EndgameInc .

:Host a owl:Class ;
    rdfs:label "Host" ;
    skos:altLabel "Network Host" ;
    rdfs:subClassOf :NetworkNode,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :Application ],
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :OperatingSystem ],
        [ a owl:Restriction ;
            owl:onProperty :runs ;
            owl:someValuesFrom :OperatingSystem ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Host_(network)> ;
    :definition "A host is a computer or other device, typically connected to a computer network. A network host may offer information resources, services, and applications to users or other nodes on the network. A network host is a network node that is assigned a network layer host address. Network hosts that participate in applications that use the client-server model of computing, are classified as server or client systems. Network hosts may also function as nodes in peer-to-peer applications, in which all nodes share and consume resources in an equipotent manner." .

:Host-basedFirewall a owl:Class ;
    rdfs:label "Host-based Firewall" ;
    rdfs:subClassOf :SystemSoftware ;
    :definition "A software firewall which controls network inbound and outbound network traffic to the host computer." .

:HostConfigurationSensor a owl:Class ;
    rdfs:label "Host Configuration Sensor" ;
    rdfs:subClassOf :EndpointSensor,
        [ a owl:Restriction ;
            owl:onProperty :monitors ;
            owl:someValuesFrom :ApplicationConfiguration ],
        [ a owl:Restriction ;
            owl:onProperty :monitors ;
            owl:someValuesFrom :OperatingSystemConfiguration ] ;
    :definition "Collects the configuration data on an endpoint." .

:Hostname a :DomainName,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Hostname" ;
    skos:altLabel "Nodename" ;
    rdfs:subClassOf :Identifier,
        [ a owl:Restriction ;
            owl:onProperty :identifies ;
            owl:someValuesFrom :Host ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Hostname> ;
    :definition "In computer networking, a hostname (archaically nodename) is a label that is assigned to a device connected to a computer network and that is used to identify the device in various forms of electronic communication, such as the World Wide Web. Hostnames may be simple names consisting of a single word or phrase, or they may be structured." .

:HTMLFile a owl:Class ;
    rdfs:label "HTML File" ;
    skos:altLabel "HTML File" ;
    rdfs:subClassOf :DocumentFile ;
    :definition "A document file encoded in HTML.The HyperText Markup Language, or HTML is the standard markup language for documents designed to be displayed in a web browser. It can be assisted by technologies such as Cascading Style Sheets (CSS) and scripting languages such as JavaScript. Web browsers receive HTML documents from a web server or from local storage and render the documents into multimedia web pages. HTML describes the structure of a web page semantically and originally included cues for the appearance of the document." ;
    rdfs:seeAlso <http://dbpedia.org/resource/HTML> .

<http://d3fend.mitre.org/ontologies/d3fend.owl#AsymmetricFeature‐basedTransferLearning> a owl:Class ;
    rdfs:label "Asymmetric Feature‐based Transfer Learning" ;
    rdfs:subClassOf :HomogenousTransferLearning ;
    :definition "Homogeneous Asymmetric Feature-Based Transfer Learning is a type of transfer learning in machine learning that deals with situations where the source and target domains share the same feature space but differ in their feature distributions. It aims to effectively leverage the knowledge from the source domain to enhance the learning process in the target domain, despite the differences in feature distributions." ;
    :kb-article """## How it works
In Homogeneous Asymmetric Feature-Based Transfer Learning, the core principle is to identify and extract useful knowledge from the source domain that can be applied to the target domain, considering the same feature space but different feature distributions. This is usually achieved through various strategies, such as instance reweighting, feature selection, or feature transformation.

For instance, in the case of instance reweighting, the model assesses the importance or relevance of each data instance in the source domain to the target task, assigning weights accordingly. On the other hand, feature selection aims to identify the subset of features that are relevant and transferable between the two domains. Lastly, feature transformation approaches construct a shared feature representation that reduces the distribution difference between the source and target domains.

## Considerations
- Homogeneous Asymmetric Feature-Based Transfer Learning might not be suitable if the source and target domains do not share the same feature space.
- It's crucial to handle the distribution differences between the source and target domains appropriately to avoid negative transfer, where the source domain's knowledge hinders rather than helps the target task's learning.
- The choice of strategy (instance reweighting, feature selection, feature transformation) depends on the specific characteristics of the source and target domains and the nature of the task.
- The availability and quality of labeled data in both the source and target domains can significantly impact the performance of the transfer learning process.

## References
1. Pan, S.J., Yang, Q. (2010). A Survey on Transfer Learning. IEEE Transactions on Knowledge and Data Engineering, 22(10), 1345-1359. [Link](https://doi.org/10.1109/TKDE.2009.191)
2. Weiss, K., Khoshgoftaar, T. M., & Wang, D. (2016). A survey of transfer learning. Journal of Big data, 3(1), 1-40. [Link](https://doi.org/10.1186/s40537-016-0043-6)
3. Zhuang, F., Qi, Z., Duan, K., Xi, D., Zhu, Y., Zhu, H., ... & He, Q. (2019). A Comprehensive Survey on Transfer Learning. Proceedings of the IEEE, 1-1. [Link](https://arxiv.org/abs/1911.02685)""" .

<http://d3fend.mitre.org/ontologies/d3fend.owl#SymmetricFeature‐basedTransferLearning> a owl:Class ;
    rdfs:label "Symmetric Feature‐based Transfer Learning" ;
    rdfs:subClassOf :HomogenousTransferLearning ;
    :definition "Symmetric Feature-Based Transfer Learning is a machine learning technique that facilitates the transfer of knowledge from a source domain to a target domain by aligning the features from these two domains. This process promotes learning in the target domain by leveraging relevant features extracted from the source domain, which can contribute to improved performance in situations where labeled data is scarce in the target domain but plentiful in the source domain." ;
    :kb-article """## How it Works
Symmetric Feature-Based Transfer Learning works by using shared latent features between the source and target domains to enhance the learning process in the target domain. The method starts by identifying features from the source and target domains that can be represented in a common latent space. These features are often extracted using algorithms like Principal Component Analysis (PCA) or Deep Neural Networks (DNN).

After mapping the features into this common space, a transformation is applied to align the features from the source and target domains. The alignment process can include techniques such as canonical correlation analysis (CCA) or maximum mean discrepancy (MMD) to reduce the distribution difference between the source and target features.

Once the features are aligned, a model can be trained on the source domain features and applied to the target domain. As the shared latent space mitigates the domain shift, the model can perform well on the target domain even though it was trained on the source domain.

## Considerations
- Symmetric Feature-Based Transfer Learning works best when the source and target domains have some degree of similarity. It may not perform well if the domains are vastly different.
- The performance of the method is dependent on the quality of feature extraction and alignment. If these steps are not handled properly, the method may not lead to significant improvement.
- The method requires a fair amount of computational resources, especially if deep neural networks are used for feature extraction.
- The selection of an appropriate alignment technique (like CCA or MMD) is crucial for the success of the method.

## References
1. Pan, S. J., & Yang, Q. (2010). A Survey on Transfer Learning. IEEE Transactions on Knowledge and Data Engineering, 22(10), 1345–1359. [Link](https://ieeexplore.ieee.org/document/5288526)
2. Wang, M., & Deng, W. (2018). Deep Visual Domain Adaptation: A Survey. Neurocomputing, 312, 135–153. [Link](https://www.sciencedirect.com/science/article/pii/S0925231218310140)
3. Zhang, J., Li, W., & Ogunbona, P. (2016). Joint Geometrical and Statistical Alignment for Visual Domain Adaptation. Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, 1859-1867. [Link](https://ieeexplore.ieee.org/document/7780572)""" .

:HumanInputDeviceFirmware a owl:Class ;
    rdfs:label "Human Input Device Firmware" ;
    rdfs:subClassOf :PeripheralFirmware ;
    :definition "Firmware that is installed on an HCI device such as a mouse or keyboard." ;
    rdfs:seeAlso :Firmware,
        <http://dbpedia.org/resource/Human_interface_device> .

:Hybrid-basedTransferLearning a owl:Class ;
    rdfs:label "Hybrid-based Transfer Learning" ;
    rdfs:subClassOf :HomogenousTransferLearning ;
    :definition "Hybrid-Based Transfer Learning is an advanced approach in Machine Learning that leverages the knowledge gained from one task (source task) to improve the learning performance of a related but different task (target task). This hybrid method combines aspects of both traditional Transfer Learning and some other specific Machine Learning algorithm to create a more robust model that can perform efficiently on diverse data domains." ;
    :kb-article """## How it works

Hybrid-Based Transfer Learning involves two main components: the base learning algorithm and the transfer learning mechanism. The base learning algorithm can be any established Machine Learning model like Neural Networks, Support Vector Machines, Decision Trees, etc. The aim of this base learning model is to extract useful patterns and features from the given dataset.

The Transfer Learning aspect involves adapting the model trained on the source task to the target task. This usually involves retaining the learned parameters (like weights in a neural network) and fine-tuning them on the target task. The model may also selectively transfer knowledge, depending on the similarity between the source and target tasks.

The hybrid model brings together these two aspects - learning from the specific data and transferring learned knowledge from relevant tasks - creating a system that is more robust and adaptable to new tasks or domains. It has the ability to generalize better and is more data-efficient since it utilizes knowledge from previously learned tasks.

## Considerations 

* **Data Similarity:** The effectiveness of Hybrid-Based Transfer Learning highly depends on the similarity between the source and target tasks. It might not perform well if the tasks are too different.

* **Negative Transfer:** Care should be taken to avoid 'negative transfer', where transferring knowledge from the source task harms the performance on the target task.

* **Computational Resources:** Depending on the complexity of the base learning model, Hybrid-Based Transfer Learning can be resource-intensive, especially for large neural networks.

* **Fine-tuning Parameters:** The process of fine-tuning the transferred parameters on the target task can be challenging and requires careful consideration to avoid overfitting or underfitting.

## References 

1. "A Survey on Transfer Learning", Sinno Jialin Pan and Qiang Yang, IEEE Transactions on Knowledge and Data Engineering. [Link](https://ieeexplore.ieee.org/document/5288526)

2. "Transfer Learning - Machine Learning's Next Frontier", Sebastian Ruder. [Link](https://ruder.io/transfer-learning/)

3. "Deep Learning Based Transfer Learning", Jason Brownlee. [Link](https://machinelearningmastery.com/transfer-learning-for-deep-learning/)

4. "Hybrid transfer learning method with deep learning for spatial-temporal data", Hanchao Ma et al., Neural Networks. [Link](https://www.sciencedirect.com/science/article/pii/S0893608019301501)""" .

:HypothesisTesting a owl:Class ;
    rdfs:label "Hypothesis Testing" ;
    rdfs:subClassOf :InferentialStatistics .

:ID3 a owl:Class ;
    rdfs:label "ID3" ;
    rdfs:subClassOf :DecisionTree ;
    :definition """ID3, or Iterative Dichotomiser 3, is a classification algorithm in machine learning and data mining that uses a top-down, greedy search through the space of possible branches with no backtracking. The algorithm creates a multiway tree, finds the categorical feature that yields the maximum information gain for categorical targets, and splits the dataset along the values of the feature that maximizes this criterion.

REVIEW 
Iterative Dichotomiser 3 is a decision tree algorithm that is based on a dataset and is the most popular decision tree algorithm currently used. ID3 goes through the dataset and assigns a value to each part of the set. It then iterates through the set and outputs a subset. ID3 then recurses through the subset until the stopping conditions are met.""" ;
    :kb-article """_TBD continue considerations write-up from above notional intro; do not have language in here that it is esp. good for NLP as it was circa mid 80s and things have come a ways since then.  Paraphrasing Wikipedia here might mislead novices or annoy experts_


## How it works
The ID3 algorithm begins with the original set as the root node. On each iteration of the algorithm, it iterates over every unused attribute of the set and calculates the entropy (or data impurity) and information gain if the set were split along the attribute. It then selects the attribute with the highest information gain as the attribute at which to branch the tree.

Each branch of the tree then corresponds to one of the possible values of the selected attribute. Instances are sorted down the tree and removed from the set under consideration. This process is iteratively done for each branch, recursively creating new decision nodes or leaves. A node becomes a leaf when all its instances belong to the same class or when it has no remaining attributes to compute the entropy upon.

## Considerations 

- ID3 doesn't handle numerical data or missing values very well. One would need to discretize numerical data beforehand, and handle missing values appropriately.
- ID3 has a bias towards attributes with many outcomes. It tends to select the attribute with the most outcomes as the root.
- The algorithm tends to overfit the training data, so careful pruning is often necessary to improve the generalization.
- ID3 does not handle continuous attributes. Only categorical attributes are dealt with.
- ID3 is the earliest of Quinlan's popular decision tree model-building algorithms; later developed into C4.5, J48, and C5.0.  

## References 

- Quinlan, J. R. (1986). Induction of Decision Trees. Machine Learning, 1(1), 81–106. [doi:10.1023/A:1022643204877](https://doi.org/10.1023/A:1022643204877).
- Mitchell, T. M. (1997). Machine Learning. McGraw Hill. ISBN 0-07-042807-7.""" ;
    :todo "Review: TBD Comment in kb-article and the definition it references." .

:Identifier a owl:Class ;
    rdfs:label "Identifier" ;
    skos:altLabel "ID" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Identifier> ;
    :definition "An identifier is a name that identifies (that is, labels the identity of) either a unique object or a unique class of objects, where the \"object\" or class may be an idea, physical [countable] object (or class thereof), or physical [noncountable] substance (or class thereof). The abbreviation ID often refers to identity, identification (the process of identifying), or an identifier (that is, an instance of identification). An identifier may be a word, number, letter, symbol, or any combination of those." .

:IdentifierActivityAnalysis a :IdentifierAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Identifier Activity Analysis" ;
    rdfs:subClassOf :IdentifierAnalysis ;
    :d3fend-id "D3-IAA" ;
    :definition "Taking known malicious identifiers and determining if they are present in a system." ;
    :kb-article """## How it works

Identifier activity analysis is the process of taking identifiers--typically known malicious identifiers--and determining the artifacts that have interacted with those identifiers.

There are many open and closed source repositories of identifiers that represent indicators of compromise. For example, VirusTotal contains hash signatures of malware and IP Addresses used by threat actors. Defenders can search for these indicators of compromise their own systems to gain context on activity around an identifier.

## Considerations

Indicator activity analysis is a good way to gain high precision analysis, but adversaries can modify their own signatures such as hashes quickly to evade detection. This is related to David Bianco’s Pyramid of Pain – Indicators on the lower level (hash values, IP addresses domain names) are easy for adversaries to change.

Identifier activity data of interest for analysis with the identifier might include, but is not limited to:

* network traffic activity where the identifier was used to identify communicating entities or referred to in the communication
* process activity referencing the identifier, especially for resource access
* file activity referencing the identifier
* registry settings referencing the identifier""" ;
    :kb-reference :Reference-ThePyramidOfPain-DavidBianco .

:IdentifierAnalysis a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Identifier Analysis" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :Identifier ],
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Detect ] ;
    :d3fend-id "D3-ID" ;
    :definition "Analyzing identifier artifacts such as IP address, domain names, or URL(I)s." ;
    :enables :Detect .

:IdentifierReputationAnalysis a :IdentifierAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Identifier Reputation Analysis" ;
    rdfs:subClassOf :IdentifierAnalysis ;
    :d3fend-id "D3-IRA" ;
    :definition "Analyzing the reputation of an identifier." ;
    :kb-reference :Reference-Finding_phishing_sites .

:Image-to-ImageTranslationGAN a owl:Class ;
    rdfs:label "Image-to-Image Translation GAN" ;
    rdfs:subClassOf :GenerativeAdversarialNetwork .

:ImageCodeSegment a owl:Class ;
    rdfs:label "Image Code Segment" ;
    rdfs:subClassOf :ImageSegment,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :Subroutine ] ;
    :definition "An image code segment, also known as a text segment or simply as text, is a portion of an object file that contains executable instructions. The term \"segment\" comes from the memory segment, which is a historical approach to memory management that has been succeeded by paging. When a program is stored in an object file, the code segment is a part of this file; when the loader places a program into memory so that it may be executed, various memory regions are allocated (in particular, as pages), corresponding to both the segments in the object files and to segments only needed at run time. For example, the code segment of an object file is loaded into a corresponding code segment in memory." ;
    rdfs:seeAlso "Process Code Segment",
        <http://dbpedia.org/resource/Code_segment> .

:ImageDataSegment a owl:Class ;
    rdfs:label "Image Data Segment" ;
    rdfs:subClassOf :ImageSegment ;
    :definition "An image data segment (often denoted .data) is a portion of an object file that contains initialized static variables, that is, global variables and static local variables. The size of this segment is determined by the size of the values in the program's source code, and does not change at run time. This segmenting of the memory space into discrete blocks with specific tasks carried over into the programming languages of the day and the concept is still widely in use within modern programming languages." ;
    rdfs:seeAlso "Process Data Segment",
        <http://dbpedia.org/resource/Data_segment> .

:ImageScannerInputDevice a owl:Class ;
    rdfs:label "Image Scanner Input Device" ;
    skos:altLabel "Scanner" ;
    rdfs:subClassOf :VideoInputDevice ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Image_scanner> ;
    :definition "An image scanner -- often abbreviated to just scanner, is a device that optically scans images, printed text, handwriting or an object and converts it to a digital image. Commonly used in offices are variations of the desktop flatbed scanner where the document is placed on a glass window for scanning. Hand-held scanners, where the device is moved by hand, have evolved from text scanning \"wands\" to 3D scanners used for industrial design, reverse engineering, test and measurement, orthotics, gaming and other applications. Mechanically driven scanners that move the document are typically used for large-format documents, where a flatbed design would be impractical." .

:ImageSegment a owl:Class ;
    rdfs:label "Image Segment" ;
    rdfs:subClassOf :BinarySegment,
        :FileSection ;
    :definition "Image segments are distinct partitions of an object file.  Both data and code segments are examples of image segments." ;
    rdfs:seeAlso "Object File",
        <http://dbpedia.org/resource/Object_file> .

:ImageSynthesisGAN a owl:Class ;
    rdfs:label "Image Synthesis GAN" ;
    rdfs:subClassOf :GenerativeAdversarialNetwork .

:Impact a :OffensiveTactic,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Impact" ;
    rdfs:subClassOf :OffensiveTactic ;
    :display-order 12 .

:ImpactTechnique a owl:Class ;
    rdfs:label "Impact Technique" ;
    rdfs:subClassOf :OffensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Impact ] .

:ImpersonateUser a :ImpersonateUser,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Impersonate User" ;
    rdfs:subClassOf :SystemCall,
        [ a owl:Restriction ;
            owl:onProperty :forges ;
            owl:someValuesFrom :UserAccount ] .

:ImportLibraryFunction a owl:Class ;
    rdfs:label "Import Library Function" ;
    rdfs:subClassOf :Subroutine,
        [ a owl:Restriction ;
            owl:onProperty :loads ;
            owl:someValuesFrom :SharedLibraryFile ] ;
    :definition "Loads an external software library to enable the invocations of its methods." .

:In-memoryPasswordStore a owl:Class ;
    rdfs:label "In-memory Password Store" ;
    rdfs:subClassOf :PasswordStore ;
    :definition "A password store held in memory." .

:InboundInternetDNSResponseTraffic a owl:Class ;
    rdfs:label "Inbound Internet DNS Response Traffic" ;
    rdfs:subClassOf :InboundInternetNetworkTraffic ;
    :definition "Inbound internet DNS response traffic is DNS response traffic from a host outside a given network initiated on an incoming connection to a host inside that network." .

:InboundInternetMailTraffic a owl:Class ;
    rdfs:label "Inbound Internet Mail Traffic" ;
    rdfs:subClassOf :InboundInternetNetworkTraffic,
        :InboundNetworkTraffic,
        :MailNetworkTraffic ;
    :definition "Inbound internet mail traffic is network traffic that is: (a) coming from a host outside a given network via an incoming connection to a host inside that same network, and (b) using a standard protocol for email." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Internetworking> .

:InboundInternetNetworkTraffic a owl:Class ;
    rdfs:label "Inbound Internet Network Traffic" ;
    rdfs:subClassOf :InboundNetworkTraffic,
        :InternetNetworkTraffic,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :NetworkTraffic ] ;
    :definition "Inbound internet traffic is network traffic from a host outside a given network initiated on an incoming connection to a host inside that network." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Internetworking> .

:InboundNetworkTraffic a owl:Class ;
    rdfs:label "Inbound Network Traffic" ;
    rdfs:subClassOf :NetworkTraffic ;
    :definition "Inbound traffic is network traffic originating from another host (client), to the host of interest (server)." .

:InboundSessionVolumeAnalysis a :NetworkTrafficAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Inbound Session Volume Analysis" ;
    rdfs:subClassOf :NetworkTrafficAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :InboundInternetNetworkTraffic ] ;
    :d3fend-id "D3-ISVA" ;
    :definition "Analyzing inbound network session or connection attempt volume." ;
    :kb-article """## How it works
Network appliances are configured to alert on certain packets that typically are involved in DoS attacks. Typical packets include ICMP packets and SYN requests that are commonly used to flood networks. A sampling period is used to define a time window in which collected counts of the identified packets can be measured. If the collected number of packets exceeds a predefined limit then an alert is generated.

## Considerations
Scalability as volume of attacks increase; single servers may not have the memory and storage resources to handle high volumes of network traffic.""" ;
    :kb-reference :Reference-DetectingDDoSAttackUsingSnort,
        <http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-IdentifyingADenial-of-serviceAttackInACloud-basedProxyService-CloudfareInc.>,
        :Reference-MethodAndSystemForUDPFloodAttackDetection-RioreyLLC,
        <http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-ProtectingAgainstDistributedDenialOfServiceAttacks-CiscoTechnologyInc.>,
        <http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-ProtectingAgainstDistributedNetworkFloodAttacks-JuniperNetworksInc.> .

:InboundTrafficFiltering a :NetworkTrafficFiltering,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Inbound Traffic Filtering" ;
    rdfs:subClassOf :NetworkTrafficFiltering,
        [ a owl:Restriction ;
            owl:onProperty :filters ;
            owl:someValuesFrom :InboundNetworkTraffic ] ;
    :d3fend-id "D3-ITF" ;
    :definition "Restricting network traffic originating from untrusted networks destined towards a private host or enclave." ;
    :kb-article """## How it works
Inbound Traffic, in this context, is network traffic originating from an untrusted network towards a private host or enclave.
For example:

* An untrusted network host connecting to a internal commercial portal, shopping.example.com
* An external mail server connecting to an internal mail server, mail.example.com

Filtering policies are developed by administrators to meet business requirements and limit connectivity. These policies are implemented on edge devices such as firewalls, routers, and intrusion prevention systems. Examples of filters:

* Blocking incoming traffic from spoofed internally facing IP addresses
* Blocking specific ports and services from establishing connections
* Limiting specific IP ranges from connecting to the network
* Dynamic inbound filtering (Hole punching, STUN, NAT-T)

## Considerations
* Business requirements typically drive the development of filtering rulesets
* Protocols using non-standard ports may circumvent filtering technology, which does not detect application protocol based on traffic content

## Implementations
* OpenWRT (Embedded)
* Netfilter (Linux)
* Windows Firewall
* pf(BSD)""" ;
    :kb-reference :Reference-ActiveFirewallSystemAndMethodology_McAfeeLLC,
        :Reference-AutomaticallyGeneratingRulesForConnectionSecurity_Microsoft,
        :Reference-FirewallForInterentAccess_SecureComputingLLC,
        :Reference-FirewallForProcessingAConnectionlessNetworkPacket_NationalSecurityAgency,
        :Reference-FirewallForProcessingConnection-orientedAndConnectionlessDatagramsOverAConnection-orientedNetwork_NationalSecurityAgency,
        :Reference-FirewallsThatFilterBasedUponProtocolCommands_IntelCorp,
        :Reference-FWTK-FirewallToolkit_,
        :Reference-MethodForControllingComputerNetworkSecurity_CheckpointSoftwareTechnologiesLtd,
        :Reference-NetworkFirewallWithProxy_SecureComputingLLC .

:IndirectBranchCallAnalysis a owl:Class,
        owl:NamedIndividual,
        :ProcessAnalysis ;
    rdfs:label "Indirect Branch Call Analysis" ;
    rdfs:subClassOf :ProcessAnalysis ;
    :d3fend-id "D3-IBCA" ;
    :definition "Analyzing vendor specific branch call recording in order to detect ROP style attacks." ;
    :kb-article """## How it works

This technique is used to detect an attacker attempting to exploit and execute code on a target system's call stack using return-oriented programming (ROP). Modern processors that have the ability to maintain a list of the branching calls, e.g., Intel's Last Branch Recording (LBR), can be used to track and analyze indirect branching calls that are indicative of malicious activity.

In order to reduce the number of indirect branch calls to analyze to a manageable set it is assumed that malicious ROP activity will involve the use of system calls.  The technique observes indirect branch calls that are part of paths that lead to system calls, all others are ignored. Branching calls chained together is often referred to as gadgets and gadgets are often used in ROP attacks. Indirect branch calls that involve a transfer from user-space to kernel-space are of interest for this technique.

Identification of potential ROP exploit execution includes:

- Inspecting the LBR when a system function call is made

  - The LBR is configured to return only instruction of interest (ret, indirect jmp, indirect calls)


- Behavior is analyzed for
  - Ret instructions that appear to target areas not preceded by the call sites
  - Sequences of small code fragments that appear to be chained through the indirect branching calls (gadgets)


- Of interest are returns that appear to not render control back after calls
  - Typical ret-call are paired
  - gadgets will appear to have ret followed by instruction of next instruction of the following gadget


## Considerations

* May be operating system dependent since specific system calls are used to scope branching behavoir
* Processors need to support access to a Last Branch Recording list feature
* The size of the LBR stack can limit the expected size of the analyzed execution stack
* If processor does not support LBR then overhead costs for the analysis can be significant""" ;
    :kb-reference :Reference-IndirectBranchingCalls .

:InferentialStatistics a owl:Class ;
    rdfs:label "Inferential Statistics" ;
    rdfs:subClassOf :StatisticalMethod .

:InformationContentEntity a owl:Class ;
    rdfs:label "Information Content Entity" ;
    rdfs:subClassOf :D3FENDCatalogThing,
        [ a owl:Restriction ;
            owl:onProperty :archived-at ;
            owl:someValuesFrom xsd:anyURI ] ;
    rdfs:isDefinedBy "BFO, Cyc equiv, SUMO equiv, [Ontology Works] equiv" .

:InitialAccess a :OffensiveTactic,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Initial Access" ;
    rdfs:subClassOf :OffensiveTactic ;
    :display-order 1 .

:InitialAccessTechnique a owl:Class ;
    rdfs:label "Initial Access Technique" ;
    rdfs:subClassOf :OffensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :InitialAccess ] .

:InitScript a owl:Class ;
    rdfs:label "Init Script" ;
    skos:altLabel "Initialization Script" ;
    rdfs:subClassOf :ExecutableScript ;
    :definition "An init script (or initialization script) is an executable script that initializes the an application, a process, or a service's state.  Examples include scripts run at boot by Unix or Windows, or those run to initialize a shell." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Init>,
        <https://blog.opstree.com/2020/02/11/shell-initialization-files/> .

:InputDevice a owl:Class ;
    rdfs:label "Input Device" ;
    rdfs:subClassOf :HardwareDevice,
        :LocalResource ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Input_device> ;
    :definition "In computing, an input device is a piece of equipment used to provide data and control signals to an information processing system such as a computer or information appliance. Examples of input devices include keyboards, mouse, scanners, digital cameras, joysticks, and microphones. Input devices can be categorized based on:" .

:InputDeviceAnalysis a :OperatingSystemMonitoring,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Input Device Analysis" ;
    rdfs:subClassOf :OperatingSystemMonitoring,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :InputDevice ] ;
    :d3fend-id "D3-IDA" ;
    :definition "Operating system level mechanisms to prevent abusive input device exploitation." ;
    :kb-article """## How it works

Input Device Hardening techniques filter certain commands, or disable related operating system functionality.

### Analytics

All of these values can be analyzed and compared to a baseline:

* Amount of input
* Duration of a single input
* Durations between inputs
* Value of input

Context can also include:

* User which is logged in, to include attributes such as physical location of the user
* Date and time
* System which is processing the input
* Source device of input, to include its properties (eg. manufacturer), configuration (eg. keyboard layout) and behavioral attributes of this device (eg. first use)
* Source system of input (local or remote system)
* Other hardware devices attached to the system


### Actions

Actions can include:

* Disabling the source device
* Sending an alert
* Locking the current session (eg. system screen lock, or returning to an authentication screen in a web app) and requiring one or more methods of authentication to continue
* Administratively disabling credentials for the account or the entire account -- the technique *Account Locking*


### Examples
A malicious input device sends many keystrokes with approximately the same delay between each.  This does not match the normal cadence of input, and the device is disabled.

Input to type the session user's name takes abnormally longer for each keystroke.  The system is locked to the password prompt screen.

A system receives key press events from two different devices -- one device sends keystrokes after the other has been idle for a long time.

A system receives physical input in a user session, while that user has sent input from a device located out of the country in the past hour.

Network traffic is suddenly routed through a new external device, and nearly the same volume of network traffic is subsequently sent out the previously existing interface.  The new external device is disabled, and an alert is raised to investigate the network configuration for a potential compromise.


## Considerations

Given some example of legitimate behavioral input patterns, attackers could mimic those input patterns, a technique which has been used in popular culture in the creation of Deepfake videos and [This Person Does Not Exist](https://thispersondoesnotexist.com).""" ;
    :kb-reference <http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-ContinuousAuthenticationByAnalysisOfKeyboardTypingCharacteristics_BradfordUniv.,UK>,
        :Reference-www.biometric-solutions.com_keystroke-dynamics .

:InputFunction a owl:Class ;
    rdfs:label "Input Function" ;
    rdfs:subClassOf :Subroutine ;
    :definition "Generic function that receives input from an untrusted source." .

:Instance-basedTransferLearning a owl:Class ;
    rdfs:label "Instance-based Transfer Learning" ;
    rdfs:subClassOf :HomogenousTransferLearning ;
    :definition "Instance-Based Transfer Learning is a subset of transfer learning in machine learning where instances or examples from the source domain are used to improve the learning performance in the target domain. In this approach, important instances from the source model are utilized to either augment the training dataset for the target task or to adapt the source model for the new task." ;
    :kb-article """## How it works
Instance-Based Transfer Learning operates by identifying and leveraging informative instances from a pre-existing model or source domain that can be beneficial in learning a new task in the target domain. It essentially bridges the gap between the source and target domains by transferring knowledge at the instance level, rather than at the model or feature level.

The process typically involves steps like instance selection, where relevant instances are chosen based on certain criteria like similarity or relevance to the target task. Then, these selected instances are utilized to retrain the model or to create an augmented dataset for the target task. The actual implementation can vary significantly depending on the specific task or the kind of data available. 

It's important to note that Instance-Based Transfer Learning generally works best when the source and target domains share some degree of similarity. If the domains are too distinct, the transferred instances may not provide much benefit and could potentially even impair the model's performance on the new task.

## Considerations
- **Domain Similarity:** The effectiveness of instance-based transfer learning greatly depends on the similarity between the source and target domains. If the domains are too distinct, the instances transferred may not contribute to the learning process of the new task.
- **Instance Selection:** A proper instance selection strategy is crucial as it directly impacts the quality of knowledge transfer. This process should consider the relevance, diversity, and representativeness of instances.
- **Computational Resources:** Depending on the size and complexity of the domains, instance-based transfer learning can be computationally expensive. Efficient algorithms and sufficient hardware resources are important for practical application.
- **Negative Transfer:** Care should be taken to avoid negative transfer, where the transfer of instances from the source domain may actually worsen the performance on the target task.

## References 
1. [Pan, S. J., & Yang, Q. (2010). A Survey on Transfer Learning. IEEE Transactions on Knowledge and Data Engineering, 22(10), 1345–1359.](https://ieeexplore.ieee.org/document/5288526)
2. [Weiss, K., Khoshgoftaar, T. M., & Wang, D. (2016). A survey of transfer learning. Journal of Big Data, 3(1).](https://journalofbigdata.springeropen.com/articles/10.1186/s40537-016-0043-6)
3. [Wilson, A. B., & Cook, D. J. (2020). A survey of unsupervised transfer learning for time series. In Proceedings of the ACM SIGKDD International Conference on Knowledge Discovery and Data Mining.](https://dl.acm.org/doi/10.1145/3394486.3403270)""" .

:InstantMessagingClient a owl:Class ;
    rdfs:label "Instant Messaging Client" ;
    rdfs:subClassOf :CollaborativeSoftware ;
    rdfs:isDefinedBy <https://dbpedia.org/wiki/Instant_messaging> ;
    :definition "Client software used to engage in Instant Messaging, a type of online chat that offers real-time text transmission over the Internet. A LAN messenger operates in a similar way over a local area network. Short messages are typically transmitted between two parties, when each user chooses to complete a thought and select \"send\". Some IM applications can use push technology to provide real-time text, which transmits messages character by character, as they are composed. More advanced instant messaging can add file transfer, clickable hyperlinks, Voice over IP, or video chat." .

:InstrinsicallySemi-supervisedLearning a owl:Class ;
    rdfs:label "Instrinsically Semi-supervised Learning" ;
    rdfs:subClassOf :Semi-SupervisedLearning ;
    :definition "Intrinsically Semi-Supervised Learning is a machine learning approach that inherently makes use of both labeled and unlabeled data for training, aiming to optimize model performance and generalization. This approach enhances the learning algorithm's ability to understand the underlying structure of the data, capitalizing on the labeled instances for precise predictions, while leveraging the unlabeled instances to gain insights about the data distribution." ;
    :kb-article """## How it works

Intrinsically Semi-Supervised Learning operates by integrating the principles of both supervised and unsupervised learning. For the supervised part, the labeled data is used to train the model and perform predictions. The model attempts to minimize the error between its predictions and the actual labels, thus learning the specific task.

On the other hand, the unlabeled data plays a significant role in the model's learning process as well. The model makes use of the unlabeled data to understand the overall data distribution and structure, which can often help identify patterns and relationships that are not immediately evident from the labeled data alone. This is akin to the principles of unsupervised learning, where the goal is to learn the inherent structure of the data.

A common technique in intrinsically semi-supervised learning is self-training. Here, the model is initially trained with the labeled data and then used to predict labels for the unlabeled data. These newly predicted labels, although possibly less reliable, provide additional training examples which can help the model better understand the full data distribution.

## Considerations

- **Data Quality**: Even though this method can leverage unlabeled data, the quality of the labeled data is still paramount. Poorly labeled data can mislead the model's learning process.
- **Model Complexity**: Depending on the complexity of the model and the size of the dataset, semi-supervised learning can be computationally intensive.
- **Noise Handling**: Unlabeled data may contain noise or outliers that could impact the model performance if not handled correctly.
- **Labeling Bias**: In the self-training process, the model's own predictions are used as new labels. This can lead to bias if the model's initial predictions are not accurate.
- **Model Selection**: Not all machine learning models are suitable for semi-supervised learning. It's important to choose a model that can effectively leverage both labeled and unlabeled data.

## References

1. [Zhu, X. (2005). Semi-Supervised Learning Literature Survey](https://www.cs.cmu.edu/~zhuxj/pub/ssl_survey.pdf)
2. [Chapelle, O., Schölkopf, B., & Zien, A. (Eds.). (2006). Semi-Supervised Learning](http://www.acad.bg/ebook/ml/MITPress%20--%20Semi-Supervised%20Learning.pdf)
3. [Deng, J., Dong, W., Socher, R., Li, L., & Li, K. (2009). ImageNet: A Large-Scale Hierarchical Image Database](https://ieeexplore.ieee.org/abstract/document/5206848) - An example of a large-scale application of semi-supervised learning.""" .

:IntegratedHoneynet a :DecoyEnvironment,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Integrated Honeynet" ;
    rdfs:subClassOf :DecoyEnvironment,
        [ a owl:Restriction ;
            owl:onProperty :spoofs ;
            owl:someValuesFrom :IntranetNetwork ] ;
    :d3fend-id "D3-IHN" ;
    :definition "The practice of setting decoys in a production environment to entice interaction from attackers." ;
    :kb-article """## How it works
Integrated honeynets use full production environments connected to the enterprise network, that utilize computing resources or software that attract attackers, and allow full interaction and access that provides a complete view of an attack.

## Considerations
An attacker with control of a system on an Integrated Honeynet could:
* try to attack other connected hosts on the network, its IP range of internal hosts not properly configured to react to connections from machines on the integrated honeynet, or position behind the firewall.
* exploit its position by eavesdropping on network traffic
If an attacker manages to stop the processes used to log an attack without setting off any alarms. [1]

1. Honeypots for Windows, Roger Grimes, 2005""" ;
    :kb-reference :Reference-SynchronizingAHoneyNetworkConfigurationToReflectATargetNetworkEnvironment_PaloAltoNetworksInc .

:IntegrationTestExecutionTool a owl:Class ;
    rdfs:label "Integration Test Execution Tool" ;
    rdfs:subClassOf :TestExecutionTool ;
    :definition "An integration test execution tool automatically performs integration testing.  Integration testing (sometimes called integration and testing, abbreviated I&T) is the phase in software testing in which individual software modules are combined and tested as a group." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Integration_testing> .

:InternetArticle a owl:Class,
        owl:NamedIndividual,
        :ReferenceType ;
    rdfs:label "Internet Article" ;
    rdfs:subClassOf :NewsArticle .

:InternetArticleReference a owl:Class ;
    rdfs:label "Internet Article Reference" ;
    skos:altLabel "Internet Blog Reference" ;
    rdfs:subClassOf :TechniqueReference ;
    :pref-label "Internet Article" .

:InternetDNSLookup a owl:Class ;
    rdfs:label "Internet DNS Lookup" ;
    rdfs:subClassOf :DNSLookup ;
    :definition "An internet Domain Name System (DNS) lookup is a DNS lookup made from a host on a network that is resolved after querying a DNS name server hosted on a different network." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Internetworking> .

:InternetFileTransferTraffic a owl:Class ;
    rdfs:label "Internet File Transfer Traffic" ;
    rdfs:subClassOf :FileTransferNetworkTraffic,
        :InternetNetworkTraffic ;
    :definition "Internet file transfer network traffic is network traffic related to file transfers between network nodes that crosses a boundary between networks. This includes only network traffic conforming to standard file transfer protocols, not custom transfer protocols." .

:InternetNetwork a owl:Class ;
    rdfs:label "Internet Network" ;
    skos:altLabel "Interconnected Network",
        "Internet",
        "Internetwork" ;
    rdfs:subClassOf :Network ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Internetworking> ;
    :definition "A network of multiple, connected networks. Internetworking is the practice of connecting a computer network with other networks through the use of gateways that provide a common method of routing information packets between the networks. The resulting system of interconnected networks are called an internetwork, or simply an internet. Internetworking is a combination of the words inter (\"between\") and networking; not internet-working or international-network." .

:InternetNetworkTraffic a owl:Class ;
    rdfs:label "Internet Network Traffic" ;
    rdfs:subClassOf :NetworkTraffic ;
    :definition "Internet network traffic is network traffic that crosses a boundary between networks. [This is the general sense of inter-networking; It may or may not cross to or from the Internet]" ;
    rdfs:seeAlso <http://dbpedia.org/resource/Internetworking> .

:InterprocessCommunication a owl:Class ;
    rdfs:label "Interprocess Communication" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Inter-process_communication> ;
    :definition "In computer science, inter-process communication or inter-process communication (IPC) refers specifically to the mechanisms an operating system provides to allow processes it manages to share data. Typically, applications can use IPC categorized as clients and servers, where the client requests data and the server responds to client requests. Many applications are both clients and servers, as commonly seen in distributed computing. Methods for achieving IPC are divided into categories which vary based on software requirements, such as performance and modularity requirements, and system circumstances, such as network bandwidth and latency." .

:InterquartileRange a owl:Class ;
    rdfs:label "Interquartile Range" ;
    rdfs:subClassOf :Variability .

:IntervalEstimation a owl:Class ;
    rdfs:label "Interval Estimation" ;
    rdfs:subClassOf :Estimation .

:IntranetAdministrativeNetworkTraffic a owl:Class ;
    rdfs:label "Intranet Administrative Network Traffic" ;
    rdfs:subClassOf :AdministrativeNetworkTraffic,
        :IntranetNetworkTraffic ;
    :definition "Intranet administrative network traffic is administrative network traffic that does not cross a given network's boundaries and uses a standard administrative protocol." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Intranet> .

:IntranetDNSLookup a owl:Class ;
    rdfs:label "Intranet DNS Lookup" ;
    rdfs:subClassOf :DNSLookup ;
    :definition "An Intranet Domain Name System (DNS) lookup is a DNS lookup made from a host on a network that is resolved after querying a DNS name server hosted on a that same network." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Intranet> .

:IntranetFileTransferTraffic a owl:Class ;
    rdfs:label "Intranet File Transfer Traffic" ;
    rdfs:subClassOf :FileTransferNetworkTraffic,
        :IntranetNetworkTraffic ;
    :definition "Intranet file transfer traffic is file transfer traffic that does not cross a given network's boundaries and uses a standard file transfer protocol." ;
    rdfs:seeAlso <http://dbpedia.org/resource/File_transfer>,
        <http://dbpedia.org/resource/Intranet> .

:IntranetIPCNetworkTraffic a owl:Class ;
    rdfs:label "Intranet IPC Network Traffic" ;
    rdfs:subClassOf :IntranetNetworkTraffic,
        :IPCNetworkTraffic,
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :File ] ;
    :definition "Intranet IPC network traffic is network traffic that does not cross a given network's boundaries and uses a standard inter-process communication (IPC) networking protocol." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Inter-process_communication>,
        <http://dbpedia.org/resource/Intranet> .

:IntranetMulticastNetworkTraffic a owl:Class ;
    rdfs:label "Intranet Multicast Network Traffic" ;
    rdfs:subClassOf :IntranetNetworkTraffic ;
    :definition "Intranet IPC network traffic is multicast network traffic that does not cross a given network's boundaries." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Multicast> ;
    :todo "Add Multicast Network Traffic class under Network Traffic and subclass this to that added class." .

:IntranetNetwork a owl:Class ;
    rdfs:label "Intranet Network" ;
    rdfs:subClassOf :Network ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Intranet> ;
    :definition "An intranet is a private network accessible only to an organization's staff or delegates. Generally a wide range of information and services from the organization's internal IT systems are available that would not be available to the public from the Internet. A company-wide intranet can constitute an important focal point of internal communication and collaboration, and provide a single starting point to access internal and external resources. In its simplest form an intranet is established with the technologies for local area networks (LANs) and wide area networks (WANs)." .

:IntranetNetworkTraffic a owl:Class ;
    rdfs:label "Intranet Network Traffic" ;
    rdfs:subClassOf :NetworkTraffic ;
    :definition "Intranet network traffic is network traffic traversing that does not traverse a given network's boundaries." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Intranet> .

:IntranetRPCNetworkTraffic a owl:Class ;
    rdfs:label "Intranet RPC Network Traffic" ;
    rdfs:subClassOf :IntranetNetworkTraffic,
        :RPCNetworkTraffic ;
    :definition "Intranet RPC network traffic is network traffic that does not cross a given network's boundaries and uses a standard remote procedure call (e.g., RFC 1050) protocol." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Intranet>,
        <http://dbpedia.org/resource/Remote_procedure_call> .

:IntranetWebNetworkTraffic a owl:Class ;
    rdfs:label "Intranet Web Network Traffic" ;
    rdfs:subClassOf :IntranetNetworkTraffic,
        :WebNetworkTraffic,
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :File ] ;
    :definition "Intranet web network traffic is network traffic that does not cross a given network's boundaries and uses a standard web protocol." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Intranet> .

:IntrusionDetectionSystem a owl:Class ;
    rdfs:label "Intrusion Detection System" ;
    skos:altLabel "IDS" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Intrusion_detection_system> ;
    :definition "An intrusion detection system (IDS) is a device or software application that monitors a network or systems for malicious activity or policy violations. Any intrusion activity or violation is typically reported either to an administrator or collected centrally using a security information and event management (SIEM) system. A SIEM system combines outputs from multiple sources and uses alarm filtering techniques to distinguish malicious activity from false alarms." .

:IntrusionPreventionSystem a owl:Class ;
    rdfs:label "Intrusion Prevention System" ;
    skos:altLabel "IDPS",
        "Intrusion Detection and Prevention System",
        "IPS" ;
    rdfs:subClassOf :IntrusionDetectionSystem ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Intrusion_detection_system#Intrusion_prevention> ;
    :definition """Intrusion prevention systems (IPS), also known as intrusion detection and prevention systems (IDPS), are network security appliances that monitor network or system activities for malicious activity. The main functions of intrusion prevention systems are to identify malicious activity, log information about this activity, report it and attempt to block or stop it.

Intrusion prevention systems are considered extensions of intrusion detection systems because they both monitor network traffic and/or system activities for malicious activity. The main differences are, unlike intrusion detection systems, intrusion prevention systems are placed in-line and are able to actively prevent or block intrusions that are detected. IPS can take such actions as sending an alarm, dropping detected malicious packets, resetting a connection or blocking traffic from the offending IP address. An IPS also can correct cyclic redundancy check (CRC) errors, defragment packet streams, mitigate TCP sequencing issues, and clean up unwanted transport and network layer options.""" ;
    rdfs:seeAlso <http://dbpedia.org/resource/Intrusion_detection_system> .

:IOPortRestriction a :ExecutionIsolation,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "IO Port Restriction" ;
    rdfs:subClassOf :ExecutionIsolation,
        [ a owl:Restriction ;
            owl:onProperty :filters ;
            owl:someValuesFrom :InputDevice ],
        [ a owl:Restriction ;
            owl:onProperty :filters ;
            owl:someValuesFrom :RemovableMediaDevice ] ;
    :d3fend-id "D3-IOPR" ;
    :definition "Limiting access to computer input/output (IO) ports to restrict unauthorized devices." ;
    :kb-article """## How It works

Software-based restriction uses agent software installed on a computer system. The agent software monitors all IO port system traffic. The agent software is configurable to limit the use of certain devices connected to IO ports. The restriction software can also be configured to limit the access to files and applications on external storage devices connected to IO ports.

Hardware-based restriction can also be employed to limit access to IO ports. For example, a hardware USB filter device that is placed between the host system and the external devices can filter IO port connections based on configurable rules. When new devices are connected to the USB filter the type of device is determined. Using an allow list a connection determination is made for the device.

Some implementations detect when a device is connected in order to authorize the connection against a list of approved devices, in some cases by device type. For example, if the device is determined to be a storage device, then the contained files and executables are examined to more accurately identify the device type.

Types of restrictions that may be applied:
- Device connection
- Device command filtering
- Device file system read or write restrictions

## Considerations
 * Agent software will need to be installed on host systems
 * Configurations for allow/deny for devices and files will need to be maintained""" ;
    :kb-reference :Reference-ComputerMotherboardHavingPeripheralSecurityFunctions,
        :Reference-MethodAndSystemForControllingCommunicationPorts,
        :Reference-USBFilterForHubMaliciousCodePreventionSystem .

:IPAddress a owl:Class ;
    rdfs:label "IP Address" ;
    rdfs:subClassOf :Identifier,
        [ a owl:Restriction ;
            owl:onProperty :identifies ;
            owl:someValuesFrom :NetworkNode ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/IP_address> ;
    :definition "An Internet Protocol address (IP address) is a numerical label assigned to each device connected to a computer network that uses the Internet Protocol for communication.An IP address serves two main functions: host or network interface identification and location addressing. Internet Protocol version 4 (IPv4) defines an IP address as a 32-bit number. However, because of the growth of the Internet and the depletion of available IPv4 addresses, a new version of IP (IPv6), using 128 bits for the IP address, was standardized in 1998. IPv6 deployment has been ongoing since the mid-2000s." .

:IPCNetworkTraffic a owl:Class ;
    rdfs:label "IPC Network Traffic" ;
    rdfs:subClassOf :NetworkTraffic ;
    :definition "IPC network traffic is network traffic related to inter-process communication (IPC) between network nodes..This includes only network traffic conforming to a standard IPC protocol; not custom protocols." .

:IPCTrafficAnalysis a :NetworkTrafficAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "IPC Traffic Analysis" ;
    rdfs:subClassOf :NetworkTrafficAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :IntranetIPCNetworkTraffic ] ;
    :d3fend-id "D3-IPCTA" ;
    :definition "Analyzing standard inter process communication (IPC) protocols to detect deviations from normal protocol activity." ;
    :kb-article """## How it works
Inter process communication enables applications or threads to share data. This can involve one or more computers. Monitoring IPC in your environment can reveal abnormal or malicious activity.
IPC can occur within a single computer or between multiple computers remotely through network protocols. Thus there are multiple ways to collect and monitor these exchanges between processes. A network protocol analyzer may monitor and parse SMB network traffic to record system activity. A host based monitoring agent may monitor IPC activity contained within a single host to look for deviations from standard usages.

### Examples
 * SMB
 * Zeromq
 * Java RMI API

## Considerations
* IPC can generate substantial amounts of data, and it may not be feasible to collect all of it.
* IPC may occur over loopback interfaces or direct memory access granted by the operating system.""" ;
    :kb-reference :Reference-CAR-2015-04-001%3ARemotelyScheduledTasksViaAT_MITRE,
        :Reference-SecuritySystemWithMethodologyForInterprocessCommunicationControl_CheckPointSoftwareTechInc,
        :Reference-SMBCopyAndExecution_MITRE,
        :Reference-SMBEventsMonitoring_MITRE,
        :Reference-SMBSessionSetups_MITRE,
        :Reference-SMBWriteRequest-NamedPipes_MITRE,
        :Reference-SMBWriteRequest_MITRE ;
    :synonym "IPC Analysis" ;
    :todo "Rec'd delete analyzes itself (same class).  Intent was probably to capture target DAOs for IPC.  Some IPC is between processes on same machine, and not just process analysis.  System Calls/Streams/Pipes/Mesg Queues covered?" .

:IPPhone a owl:Class ;
    rdfs:label "IP Phone" ;
    skos:altLabel "VoIP Phone" ;
    rdfs:subClassOf :PersonalComputer ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/VoIP_phone> ;
    :definition "A VoIP phone or IP phone uses voice over IP technologies for placing and transmitting telephone calls over an IP network, such as the Internet, instead of the traditional public switched telephone network (PSTN). Digital IP-based telephone service uses control protocols such as the Session Initiation Protocol (SIP), Skinny Client Control Protocol (SCCP) or various other proprietary protocols." ;
    :todo "Rename and merge to URI with \"VoIP Phone\" as label VoipPhone as IRI" .

:IPReputationAnalysis a :IdentifierReputationAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "IP Reputation Analysis" ;
    rdfs:subClassOf :IdentifierReputationAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :IPAddress ] ;
    :d3fend-id "D3-IPRA" ;
    :definition "Analyzing the reputation of an IP address." ;
    :kb-reference :Reference-Database_for_receiving_storing_and_compiling_information_about_email_messages,
        :Reference-Finding_phishing_sites .

:Isolate a :DefensiveTactic,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Isolate" ;
    rdfs:subClassOf :DefensiveTactic ;
    :definition "The isolate tactic creates logical or physical barriers in a system which reduces opportunities for adversaries to create further accesses." ;
    :display-order 2 ;
    :display-priority 0 .

:JavaArchive a owl:Class ;
    rdfs:label "Java Archive" ;
    rdfs:subClassOf :ArchiveFile,
        :SoftwarePackage ;
    :definition "A JAR (Java ARchive) is a package file format typically used to aggregate many Java class files and associated metadata and resources (text, images, etc.) into one file for distribution." ;
    rdfs:seeAlso <https://dbpedia.org/page/JAR_(file_format)> .

:JavaScriptBlob a owl:Class ;
    rdfs:label "JavaScript Blob" ;
    rdfs:subClassOf :BinaryLargeObject ;
    :definition "A JavaScript Blob is a Blob that was created by a JavaScript Blob() constructor call or equivalent function." .

:JobFunctionAccessPatternAnalysis a owl:Class,
        owl:NamedIndividual,
        :UserBehaviorAnalysis ;
    rdfs:label "Job Function Access Pattern Analysis" ;
    rdfs:subClassOf :UserBehaviorAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :Authorization ] ;
    :d3fend-id "D3-JFAPA" ;
    :definition "Detecting anomalies in user access patterns by comparing user access activity to behavioral profiles that categorize users by role such as job title, function, department." ;
    :kb-article """## How it works
Peer group analysis identifies functionally similar groups of actors (users or resources) based on categorizations such as job title, organizational hierarchy, or other attribute that indicates similarity of job function. Current user access activity is then compared to the appropriate peer group behavior profile to identify anomalies.

## Considerations
Potential for false positives from anomalies that are not associated with malicious activity.""" ;
    :kb-reference :Reference-AnomalyDetectionUsingAdaptiveBehavioralProfiles_SecuronixInc .

:JournalArticle a owl:Class ;
    rdfs:label "Journal Article" ;
    rdfs:subClassOf :AcademicArticle .

:K-FoldCross-Validation a owl:Class ;
    rdfs:label "K-Fold Cross-Validation" ;
    rdfs:subClassOf :ResamplingEnsemble ;
    :definition "K-Fold Cross-Validation is a resampling technique used in machine learning to estimate the skill of a model on unseen data. It operates by dividing the original sample into 'K' groups or folds. The model is then trained on 'K-1' folds while the remaining fold is used for testing, this process is repeated 'K' times, ensuring each fold serves as the test set once." ;
    :kb-article """## How it works
K-Fold Cross-Validation involves partitioning the input data into 'K' contiguous subsets or 'folds'. The procedure then trains the machine learning model K times, each time using a different fold as the test set (the data the model is evaluated on) and the remaining K-1 folds combined as the training set. 

After all rounds are completed, the performance measure (such as error rate or accuracy) is averaged over the different rounds to give the overall performance of the model. By doing this, K-Fold Cross-Validation reduces the likelihood of overfitting (model works well on training data but poorly on unseen data) and provides a more accurate estimate of model performance on unseen data.

## Considerations 

- **Choosing K**: The choice of 'K' can impact model performance. A smaller 'K' might result in a higher bias as each training subset is smaller. A larger 'K' could lead to lower bias but higher variance in the model, along with increased computational cost. A common choice is K=10.
- **Balance in the data**: If your dataset is imbalanced, stratified K-Fold Cross-Validation might be a better choice to ensure representation of all classes in each fold.
- **Computational cost**: K-Fold Cross-Validation can be computationally expensive as it involves training and testing the model K times.
- **Data leakage**: Be careful to avoid data leakage when preparing your folds, as this can lead to overly optimistic estimates of the model's performance.

## References 

1. Kohavi, Ron. "A study of cross-validation and bootstrap for accuracy estimation and model selection." *IJCAI* (1995). [Link](http://robotics.stanford.edu/~ronnyk/accEst.pdf)
2. Arlot, Sylvain, and Alain Celisse. "A survey of cross-validation procedures for model selection." *Statistics surveys* 4 (2010): 40-79. [Link](https://projecteuclid.org/journals/statistics-surveys/volume-4/issue-none/A-survey-of-cross-validation-procedures-for-model-selection/10.1214/09-SS054.full)
3. "Cross-validation: evaluating estimator performance" - Scikit-learn documentation. [Link](https://scikit-learn.org/stable/modules/cross_validation.html)""" .

:K-meansClustering a owl:Class ;
    rdfs:label "K-means Clustering" ;
    rdfs:subClassOf :Centroid-basedClustering ;
    :definition "K-Means Clustering is a type of unsupervised machine learning algorithm used to categorize unlabeled data into distinct clusters based on the data's underlying patterns or similarities. The \"K\" refers to the number of clusters specified before running the algorithm, and the algorithm optimizes for intra-cluster homogeneity and inter-cluster heterogeneity." ;
    :kb-article """## How it works

The K-Means Clustering algorithm starts with the random initialization of "K" cluster centroids. Each point in the dataset is then assigned to the nearest centroid, creating "K" groups or clusters. Once all points are assigned, the position of the centroids is recalculated as the mean of all points within the respective cluster. These two steps (assignment of points and recalculation of centroids) repeat iteratively until the centroids no longer change significantly or a predefined number of iterations is reached. 

It's important to note that the outcome of K-Means can significantly vary based on the initial placement of centroids, making the algorithm sensitive to the initialization step. To mitigate this, multiple runs with different centroid initializations are typically performed, and the clustering result with the best performance (lowest total intra-cluster variance) is chosen.

## Considerations 

- Choosing the correct number of clusters "K" is critical but can be challenging. Methods like the Elbow Method or Silhouette Analysis can help determine an appropriate "K".
- K-Means assumes that clusters are spherical and evenly sized, which might not always be the case in real-world data. The algorithm may not perform well with complex geometric data distributions.
- The algorithm is sensitive to outliers, which can skew the cluster centroids and overall results.
- As a distance-based algorithm, K-Means requires all variables to be on the same scale for optimal performance. Feature scaling (like normalization or standardization) should be performed before applying K-Means.
- It's a non-deterministic algorithm due to its random initialization, leading to potential differences in results for multiple runs.

## References

1. ["The Elements of Statistical Learning: Data Mining, Inference, and Prediction" by Hastie, Tibshirani, and Friedman](https://web.stanford.edu/~hastie/ElemStatLearn/)
2. [Scikit-Learn Documentation - KMeans](https://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html)
3. [Medium Article: Understanding K-Means Clustering in Machine Learning](https://towardsdatascience.com/understanding-k-means-clustering-in-machine-learning-6a6e67336aa1)
4. [K-Means Clustering: Introduction to Machine Learning Algorithms](https://www.analyticsvidhya.com/blog/2019/08/comprehensive-guide-k-means-clustering/)
5. [Andrew Ng's Machine Learning Course - KMeans](https://www.coursera.org/learn/machine-learning)""" .

:K-NearestNeighbors a owl:Class ;
    rdfs:label "K-Nearest Neighbors" ;
    rdfs:subClassOf :Classification ;
    :definition "K-Nearest Neighbors (KNN) is a type of instance-based learning algorithm used in supervised machine learning. The algorithm functions by classifying an object based on a majority vote of its neighbors, with the object being assigned to the class most common among its 'k' nearest neighbors." ;
    :kb-article """## How it works

KNN operates in a fairly straightforward manner. When a prediction is needed for an unseen data point, the algorithm first calculates the distance from this point to all other points in the training dataset using a selected distance measure, such as Euclidean or Manhattan distance. Then, it selects the 'k' closest instances (the 'k' nearest neighbors) to this unseen point. 

The next step is classification or regression, depending on the task. For a classification task, the unseen point is classified according to the most common class among its 'k' nearest neighbors. For regression, the algorithm predicts a value based on the average (or median) of the values of its 'k' nearest neighbors. The number of neighbors, 'k', is a user-defined parameter and selecting an optimal value for 'k' can greatly influence the algorithm's performance.

## Considerations 

- **Choice of 'k':** Choosing the right value of 'k' is crucial. A smaller 'k' value can make the model sensitive to noise, while a larger 'k' can make it computationally expensive and result in a model that generalizes too much.

- **Feature Scaling:** All features should be normalized or standardized, as KNN is sensitive to the scale of the data.

- **Dimensionality:** KNN can struggle in high-dimensional spaces because the distance between nearest neighbors can be significantly high, leading to less meaningful nearest-neighbor calculations. This is often referred to as the "curse of dimensionality".

- **Missing Data:** KNN does not handle missing data well. Hence, appropriate missing data handling techniques need to be applied.

- **Computational Efficiency:** KNN can be computationally expensive and slow, as it stores all training data and computes distances to all points in the training dataset for each prediction.

## References 

1. Kevin P. Murphy (2012). "Machine Learning: A Probabilistic Perspective". MIT Press. [Link](https://mitpress.mit.edu/books/machine-learning-0)

2. Trevor Hastie, Robert Tibshirani, Jerome Friedman (2009). "The Elements of Statistical Learning: Data Mining, Inference, and Prediction". Springer. [Link](https://web.stanford.edu/~hastie/ElemStatLearn/)

3. Scikit-learn Documentation: Nearest Neighbors. [Link](https://scikit-learn.org/stable/modules/neighbors.html)""" .

:KendallsRankCorrelationCoefficient a owl:Class ;
    rdfs:label "Kendall's Rank Correlation Coefficient" ;
    rdfs:subClassOf :RankCorrelationCoefficient ;
    :synonym "Kendall's Tau Coefficient" .

:KerberosTicket a owl:Class ;
    rdfs:label "Kerberos Ticket" ;
    rdfs:subClassOf :AccessToken ;
    :definition "An access ticket/token issued by a Kerberos system." .

:KerberosTicketGrantingServiceTicket a owl:Class ;
    rdfs:label "Kerberos Ticket Granting Service Ticket" ;
    skos:altLabel "TGS Ticket" ;
    rdfs:subClassOf :KerberosTicket ;
    :definition "A Kerberos ticket-granting service (TGS) ticket is given in response to requesting a Kerberos TGS request." .

:KerberosTicketGrantingTicket a owl:Class ;
    rdfs:label "Kerberos Ticket Granting Ticket" ;
    rdfs:subClassOf :KerberosTicket,
        :TicketGrantingTicket ;
    :definition "A ticket granting ticket issued by a Kerberos system; that is, a ticket that grants a user domain admin access." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Ticket_Granting_Ticket> .

:Kernel a owl:Class ;
    rdfs:label "Kernel" ;
    rdfs:subClassOf :SystemSoftware,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :KernelProcessTable ],
        [ a owl:Restriction ;
            owl:onProperty :loads ;
            owl:someValuesFrom :Application ],
        [ a owl:Restriction ;
            owl:onProperty :manages ;
            owl:someValuesFrom :OperatingSystemProcess ],
        [ a owl:Restriction ;
            owl:onProperty :manages ;
            owl:someValuesFrom :UserProcess ],
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :HardwareDriver ],
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :KernelModule ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Kernel_(operating_system)> ;
    :definition "The kernel is a computer program that constitutes the central core of a computer's operating system. It has complete control over everything that occurs in the system. As such, it is the first program loaded on startup, and then manages the remainder of the startup, as well as input/output requests from software, translating them into data processing instructions for the central processing unit. It is also responsible for managing memory, and for managing and communicating with computing peripherals, like printers, speakers, etc. The kernel is a fundamental part of a modern computer's operating system." .

:Kernel-basedProcessIsolation a :ExecutionIsolation,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Kernel-based Process Isolation" ;
    rdfs:subClassOf :ExecutionIsolation ;
    :d3fend-id "D3-KBPI" ;
    :definition "Using kernel-level capabilities to isolate processes." ;
    :kb-reference :Reference-OverviewOfTheSeccompSandbox .

:KernelAPISensor a owl:Class ;
    rdfs:label "Kernel API Sensor" ;
    rdfs:subClassOf :EndpointSensor,
        [ a owl:Restriction ;
            owl:onProperty :monitors ;
            owl:someValuesFrom :SystemCall ] ;
    :definition "Monitors system calls (operating system api functions)." .

:KernelModule a owl:Class ;
    rdfs:label "Kernel Module" ;
    skos:altLabel "LKM",
        "Loadable Kernel Module" ;
    rdfs:subClassOf :ObjectFile ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Loadable_kernel_module> ;
    :definition """A loadable kernel module (LKM) is an object file that contains code to extend the running kernel, or so-called base kernel, of an operating system. LKMs are typically used to add support for new hardware (as device drivers) and/or filesystems, or for adding system calls. When the functionality provided by a LKM is no longer required, it can be unloaded in order to free memory and other resources.

Most current Unix-like systems and Microsoft Windows support loadable kernel modules, although they might use a different name for them, such as kernel loadable module (kld) in FreeBSD, kernel extension (kext) in macOS,[1] kernel extension module in AIX, kernel-mode driver in Windows NT[2] and downloadable kernel module (DKM) in VxWorks. They are also known as kernel loadable modules (or KLM), and simply as kernel modules (KMOD).""" .

:KernelProcessTable a owl:Class ;
    rdfs:label "Kernel Process Table" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <https://encyclopedia2.thefreedictionary.com/process+table> ;
    :definition "A data structure in the kernel which is a table containing all of the information that must be saved when the CPU switches from running one process to another in a multitasking system. It allows the operating system to track all the process's execution status, and contains the For every process managed by the kernel, there is a process control block (PCB) in the process table." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Process_(computing)>,
        <https://www.geeksforgeeks.org/process-table-and-process-control-block-pcb/> .

:KeyboardInputDevice a owl:Class ;
    rdfs:label "Keyboard Input Device" ;
    skos:altLabel "Computer Keyboard",
        "Keyboard" ;
    rdfs:subClassOf :InputDevice ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Computer_keyboard> ;
    :definition "A computer keyboard is a typewriter-style device which uses an arrangement of buttons or keys to act as mechanical levers or electronic switches. Following the decline of punch cards and paper tape, interaction via teleprinter-style keyboards became the main input method for computers. A keyboard is also used to give commands to the operating system of a computer, such as Windows' Control-Alt-Delete combination. Although on Pre-Windows 95 Microsoft operating systems this forced a re-boot, now it brings up a system security options screen." .

:KioskComputer a owl:Class ;
    rdfs:label "Kiosk Computer" ;
    skos:altLabel "Interactive Kiosk" ;
    rdfs:subClassOf :SharedComputer ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Interactive_kiosk> ;
    :definition "An interactive kiosk is a computer terminal featuring specialized hardware and software that provides access to information and applications for communication, commerce, entertainment, or education. Early interactive kiosks sometimes resembled telephone booths, but have been embraced by retail, food service and hospitality to improve customer service and streamline operations. Interactive kiosks are typically placed in high foot traffic settings such as shops, hotel lobbies or airports." .

:Kurtosis a owl:Class ;
    rdfs:subClassOf :DistributionProperties .

:LaptopComputer a owl:Class ;
    rdfs:label "Laptop Computer" ;
    skos:altLabel "Laptop",
        "Notebook" ;
    rdfs:subClassOf :PersonalComputer ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Laptop> ;
    :definition "A laptop computer (also laptop), is a small, portable personal computer (PC) with a \"clamshell\" form factor, typically having a thin LCD or LED computer screen mounted on the inside of the upper lid of the clamshell and an alphanumeric keyboard on the inside of the lower lid. The clamshell is opened up to use the computer. Laptops are folded shut for transportation, and thus are suitable for mobile use. Its name comes from lap, as it was deemed to be placed on a person's lap when being used. Although originally there was a distinction between laptops and notebooks (the former being bigger and heavier than the latter), as of 2014, there is often no longer any difference. Today, laptops are commonly used in a variety of settings, such as at work, in education, for playing games, web browsing" .

:Latency a owl:Class ;
    rdfs:label "Latency" ;
    rdfs:subClassOf :D3FENDThing ;
    :todo "Review for inclusion in d3fend.owl" .

:LateralMovement a :OffensiveTactic,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Lateral Movement" ;
    rdfs:subClassOf :OffensiveTactic ;
    :display-order 8 .

:LateralMovementTechnique a owl:Class ;
    rdfs:label "Lateral Movement Technique" ;
    rdfs:subClassOf :OffensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :LateralMovement ] .

:LegacySystem a owl:Class ;
    rdfs:label "Legacy System" ;
    rdfs:subClassOf :DigitalSystem ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Legacy_system> ;
    :definition "In computing, a legacy system is an old method, technology, computer system, or application program, \"of, relating to, or being a previous or outdated computer system,\" yet still in use. Often referencing a system as \"legacy\" means that it paved the way for the standards that would follow it. This can also imply that the system is out of date or in need of replacement." ;
    :synonym "Legacy Digital System" .

:LevenshteinMatching a owl:Class ;
    rdfs:label "Levenschtein Matching" ;
    rdfs:subClassOf :PartialMatching ;
    :definition "The Levenshtein distance (LD) is a metric for measuring the differences between two sequences — or strings. Informally, the LD is the number of individual edits one would have to make to turn one sequence into another." ;
    :kb-article """## How it works
_TBD enter text here for how the thing works_

## Considerations 

## References 
- https://towardsdatascience.com/fuzzy-string-matching-how-to-match-strings-that-arent-identical-a686d2d59eac""" .

:License a owl:Class ;
    rdfs:label "License" ;
    rdfs:subClassOf :InformationContentEntity ;
    rdfs:seeAlso "http://dbpedia.org/resource/Software_license" .

:LinearClassifier a owl:Class ;
    rdfs:label "Linear Classifier" ;
    rdfs:subClassOf :Classification ;
    :definition "A Linear Classifier is a machine learning model that makes predictions based on a linear predictor function combining a set of weights with the feature vector. The technique separates two classes by a linear boundary (hyperplane) in the feature space." ;
    :kb-article """## How it works

Linear classifiers work by calculating a linear combination of the input features and then predicting the output class based on this calculated value. Given a feature vector `x`, the classifier predicts the target variable `y` using a weighted sum of the feature vector and a bias term. The weights and bias are parameters of the model that are learned from the training data. The weighted sum is then passed through a decision function, such as a sign function, to decide the class label.

The learning process often involves an optimization technique like gradient descent, where the objective is to minimize a loss function (like the mean squared error or the hinge loss) that quantifies the difference between the classifier's predictions and the actual class labels. This allows the model to iteratively adjust its weights and bias to improve the predictions on the training data. When a good set of weights has been learned, the model can predict the class labels of new instances based on their feature vectors.

## Considerations

* **Feature Scaling:** Linear classifiers are sensitive to the scale of the input features. Features need to be on a similar scale for the classifier to work well, which often requires preprocessing steps like normalization or standardization.
* **Linear Separability:** These models assume that the classes can be separated by a linear boundary. This may not hold true for many real-world datasets, which may require more complex models or feature engineering techniques.
* **Overfitting and Regularization:** Like other machine learning models, linear classifiers can overfit to the training data, particularly if there are many features. Regularization techniques, like L1 or L2 regularization, can be used to mitigate overfitting.
* **Multiclass Classification:** By default, linear classifiers are binary classifiers. Techniques like One-vs-Rest or One-vs-One need to be employed for multiclass classification problems.

## References

1. Bishop, C. M. (2006). Pattern Recognition and Machine Learning. Springer. [Link](https://www.springer.com/gp/book/9780387310732)
2. Hastie, T., Tibshirani, R., & Friedman, J. (2009). The Elements of Statistical Learning: Data Mining, Inference, and Prediction. Springer. [Link](https://www.springer.com/gp/book/9780387848570)
3. scikit-learn Documentation: [Link](https://scikit-learn.org/stable/modules/linear_model.html)""" .

:LinearLogicProgramming a owl:Class ;
    rdfs:label "Linear Logic Programming" ;
    rdfs:subClassOf :LogicProgramming .

:LinearRegression a owl:Class ;
    rdfs:label "Linear Regression" ;
    rdfs:subClassOf :RegressionAnalysis ;
    :definition "Statistical regression method used for predictive analysis by modeling the linear relationship between independent and dependent variables." ;
    :kb-article """## How it works
Takes independent variables (i.e. covariate, features, predictors, input variables) and dependent variables (i.e. response, output, “thing to be estimated”) and produces the coefficient(s) and intercept for a linear equation (e.g. (β1, β0) for y = β1x + β0) which predicts the relationship between the independent and independent variables by minimizing a cost function, Mean Squared Error, either directly in the case of univariate linear regression or by gradient descent* in the case of multivariate linear regression. 

## Considerations
 - There are four principal assumptions required for good results using linear regression (the first letters of the four principal assumptions form the "LINE" menmonic):
   - Linearity and Additivity
   - Independent Residuals
   - Normal Residual Distributions
   - Equal Variances (i.e. homoscedasticity)
 - Linear regression is a low variance/high bias model.
 - Optimizers like Adam, Batch, and Mini-Batch and others are available for certain applications and data sets
 - If the learning ratio or training coefficient is too large, there may be divergent behavior of the model, whereas too small a value can lead to long run times and inefficiency. 

### How to test and evaluate
 - Models are often evaluated by examining one or more of the metrics of R2, Root Mean Squared Error (RMSE), Mean Absolute Error (MAE), and Mean Absolute Percentage Error (MAPE).
   - While there is no generally accepted single best performance metric as a criterion, users of linear regression should consider the suitability of one or more of these metrics for assessing the performance of their model.
 - Use well known data sets to verify model execution.

### How to break
 - Violating the principal assumptions of linear regression results in poor or misleading results.
 - Data manipulation _TBD incomplete bullet; what kind of data manipulation? in mind that would make LR results wrong/broken_

## References 
- Gawali, Suvarna. “Linear Regression Algorithm to Make Predictions Easily.” Analytics Vidhya, 22 July 2022, https://www.analyticsvidhya.com/blog/2021/06/linear-regression-in-machine-learning/. 
- Nau, Robert. “Statistical Forecasting: Notes On Regression and Time Series Analysis.” Introduction to Linear Regression Analysis, Duke University Fuqua School of Business, 18 Aug. 2020, https://people.duke.edu/~rnau/regintro.htm. 
- Ng, Ritchie. “Evaluating a Linear Regression Model.” Ritchieng.github.io, 8 Jan. 2023, https://www.ritchieng.com/machine-learning-evaluate-linear-regression-model/.
- Bochkarev, Alexei. "A New Typology Design of Performance Metrics to Measure Errors in Machine Learning Regression Algorithms", 2019, https://www.researchgate.net/publication/330661543_A_New_Typology_Design_of_Performance_Metrics_to_Measure_Errors_in_Machine_Learning_Regression_Algorithms.""" .

:LinearRegressionLearning a owl:Class ;
    rdfs:label "Linear Regression Learning" ;
    rdfs:subClassOf :RegressionAnalysisLearning .

:Link a owl:Class ;
    rdfs:label "Link" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:seeAlso "https://dbpedia.org/resource/Link" .

:LocalAccountMonitoring a owl:Class,
        owl:NamedIndividual,
        :UserBehaviorAnalysis ;
    rdfs:label "Local Account Monitoring" ;
    rdfs:subClassOf :UserBehaviorAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :LocalUserAccount ] ;
    :d3fend-id "D3-LAM" ;
    :definition "Analyzing local user accounts to detect unauthorized activity." ;
    :kb-reference :Reference-AuditUserAccountManagement,
        :Reference-CAR-2016-04-004_SuccessfulLocalAccountLogin,
        :Reference-OSQueryWindowsUserCollectionCode .

:LocalAreaNetwork a owl:Class ;
    rdfs:label "Local Area Network" ;
    skos:altLabel "LAN" ;
    rdfs:subClassOf :Network,
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :Host ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Local_area_network> ;
    :definition "A local area network (LAN) is a computer network that interconnects computers within a limited area such as a residence, school, laboratory, university campus or office building and has its network equipment and interconnects locally managed. Ethernet and Wi-Fi are the two most common transmission technologies in use for local area networks. Historical technologies include ARCNET, Token ring, and AppleTalk." .

:LocalAreaNetworkTraffic a owl:Class ;
    rdfs:label "Local Area Network Traffic" ;
    rdfs:subClassOf :IntranetNetworkTraffic ;
    :definition "Intranet local area network (LAN) traffic is network traffic that does not cross a given network's boundaries; where that network is defined as a LAN." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Intranet> .

:LocalAuthenticationService a owl:Class ;
    rdfs:label "Local Authentication Service" ;
    rdfs:subClassOf :AuthenticationService,
        :SystemServiceSoftware ;
    :definition "A local authentication service running on a host can authenticate a user logged into just that local host computer." .

:LocalAuthorizationService a owl:Class ;
    rdfs:label "Local Authorization Service" ;
    rdfs:subClassOf :AuthorizationService,
        :SystemServiceSoftware ;
    :definition "A local authorization service running on a host can authorize a user logged into just that local host computer." .

:LocalFilePermissions a owl:Class,
        owl:NamedIndividual,
        :PlatformHardening ;
    rdfs:label "Local File Permissions" ;
    rdfs:subClassOf :PlatformHardening,
        [ a owl:Restriction ;
            owl:onProperty :restricts ;
            owl:someValuesFrom :Directory ],
        [ a owl:Restriction ;
            owl:onProperty :restricts ;
            owl:someValuesFrom :File ] ;
    :d3fend-id "D3-LFP" ;
    :definition "Restricting access to a local file by configuring operating system functionality." ;
    :kb-reference :Reference-FileAndFolderPermissions .

:LocalResource a owl:Class ;
    rdfs:label "Local Resource" ;
    skos:altLabel "System Resource" ;
    rdfs:subClassOf :Resource ;
    :definition "In computing, a system resource, or simply resource, is any physical or virtual component of limited availability within a computer system. Every device connected to a computer system is a resource. Every internal system component is a resource. Virtual system resources include files (concretely file handles), network connections (concretely network sockets), and memory areas. Managing resources is referred to as resource management, and includes both preventing resource leaks (releasing a resource when a process has finished using it) and dealing with resource contention (when multiple processes wish to access a limited resource)." ;
    rdfs:seeAlso <http://dbpedia.org/resource/System_resource> .

:LocalResourceAccess a owl:Class ;
    rdfs:label "Local Resource Access" ;
    skos:altLabel "Endpoint Resource Access" ;
    rdfs:subClassOf :ResourceAccess,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :LocalResource ] ;
    :definition "Ephemeral digital artifact comprising a request of a local resource and any response from that resource." .

:LocalUserAccount a owl:Class ;
    rdfs:label "Local User Account" ;
    rdfs:subClassOf :UserAccount ;
    :definition "A user account on a given host is a local user account for that specific host." .

:Log a owl:Class ;
    rdfs:label "Log" ;
    skos:altLabel "Chronology" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/06515215-n> ;
    :definition "A record of events in the order of their occurrence." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Chronology> .

:LogFile a owl:Class ;
    rdfs:label "Log File" ;
    rdfs:subClassOf :File,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :Log ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Log_file> ;
    :definition """A log file is a file that records either events that occur in an operating system or other software runs, or messages between different users of a communication software. Logging is the act of keeping a log. In the simplest case, messages are written to a single log file.

A transaction log is a file (i.e., log) of the communications between a system and the users of that system, or a data collection method that automatically captures the type, content, or time of transactions made by a person from a terminal with that system. For Web searching, a transaction log is an electronic record of interactions that have occurred during a searching episode between a Web search engine and users searching for information on that Web search engine.

Many operating systems, software frameworks and programs include a logging system. A widely used logging standard is syslog, defined in Internet Engineering Task Force (IETF) RFC 5424). The syslog standard enables a dedicated, standardized subsystem to generate, filter, record, and analyze log messages. This relieves software developers of having to design and code their own ad hoc logging systems.""" ;
    rdfs:seeAlso <http://wordnet-rdf.princeton.edu/id/06515875-n> .

:LogicalLink a owl:Class ;
    rdfs:label "Logical Link" ;
    rdfs:subClassOf :Link .

:LogicalLinkMapping a :NetworkMapping,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Logical Link Mapping" ;
    rdfs:subClassOf :NetworkMapping,
        [ a owl:Restriction ;
            owl:onProperty :maps ;
            owl:someValuesFrom :LogicalLink ],
        [ a owl:Restriction ;
            owl:onProperty :maps ;
            owl:someValuesFrom :Network ],
        [ a owl:Restriction ;
            owl:onProperty :maps ;
            owl:someValuesFrom :NetworkNode ] ;
    :d3fend-id "D3-LLM" ;
    :definition "Logical link mapping creates a model of existing or previous node-to-node connections using network-layer data or metadata." ;
    :kb-reference :Reference-LibreNMSDocsNetworkMapExtension .

:LogicalRules a owl:Class ;
    rdfs:label "Logical Rules" ;
    rdfs:subClassOf :SymbolicLogic ;
    :definition "Logical Rules, in the context of Symbolic Logic and Machine Learning, are sets of predefined conditions or patterns that guide the decision-making process within a system. They are based on the principles of logic, often using Boolean logic (AND, OR, NOT), and can be used to infer outcomes or make predictions based on a given set of inputs. These rules are commonly employed in rule-based systems and expert systems." ;
    :kb-article """## How it works

Logical Rules operate by linking conditions (antecedents) to conclusions (consequents) in a structured, logical format such as "IF-THEN" statements. For instance, a rule could be "IF temperature is high AND humidity is low, THEN the risk of fire is high". These rules can be chained together to form a decision tree, where each rule directs the flow to the next step, eventually leading to a final decision or prediction.

In a machine learning context, the logical rules can be either pre-defined by human experts, a process known as knowledge engineering, or they can be learned from data by rule learning algorithms. Rule learning is a part of symbolic machine learning, where the goal is to extract human-readable rules from data. Examples of rule learning algorithms include decision tree algorithms like ID3, C4.5, and association rule learning algorithms like Apriori.

## Considerations 
- **Simplicity vs. Complexity**: While logical rules are powerful, they are most effective when kept simple and understandable. Overly complex rules with many conditions can become hard to manage and can lead to less predictable outcomes.
- **Coverage**: The rules need to be comprehensive enough to cover all potential scenarios or inputs. If there are gaps, the system may fail to make a decision or prediction in those cases.
- **Consistency**: The rules should not contradict each other. If they do, the system may become unpredictable and unreliable.
- **Data Quality**: If logical rules are learned from data, the quality of the data will have a direct impact on the quality of the rules. Bad data can lead to bad rules.

## References 
1. Mitchell, T. M. (1997). Machine Learning. McGraw Hill. [Link](https://www.amazon.com/Machine-Learning-Tom-M-Mitchell/dp/0070428077)
2. Russell, S., & Norvig, P. (2016). Artificial Intelligence: A Modern Approach. Pearson. [Link](https://www.amazon.com/Artificial-Intelligence-Modern-Approach-3rd/dp/0136042597)
3. Witten, I. H., Frank, E., Hall, M. A., & Pal, C. J. (2016). Data Mining: Practical Machine Learning Tools and Techniques. Morgan Kaufmann. [Link](https://www.amazon.com/Data-Mining-Practical-Techniques-Management/dp/0123748569)
4. Quinlan, J. R. (1986). Induction of Decision Trees. Machine Learning, 1(1), 81-106. [Link](https://link.springer.com/article/10.1007/BF00116251)
5. Agrawal, R., & Srikant, R. (1994). Fast Algorithms for Mining Association Rules. Proceedings of the 20th International Conference on Very Large Data Bases. [Link](https://www.vldb.org/conf/1994/P487.PDF)""" .

:LogicProgramming a owl:Class ;
    rdfs:label "Logic Programming" ;
    rdfs:subClassOf :SymbolicReasoning ;
    :definition "Logic programming is a programming paradigm which is largely based on formal logic. Any program written in a logic programming language is a set of sentences in logical form, expressing facts and rules about some problem domain." ;
    :kb-article """## How it works
_TBD enter text here for how the thing works_

## Considerations 

## References 
- https://en.wikipedia.org/wiki/Logic_programming""" .

:LoginSession a owl:Class ;
    rdfs:label "Login Session" ;
    rdfs:subClassOf :Session ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Login_session> ;
    :definition "In computing, a login session is the period of activity between a user logging in and logging out of a (multi-user) system. On Unix and Unix-like operating systems, a login session takes one of two main forms: (a) When a textual user interface is used, a login session is represented as a kernel session -- a collection of process groups with the logout action managed by a session leader, and (b) Where an X display manager is employed, a login session is considered to be the lifetime of a designated user process that the display manager invokes." .

:LogisticRegression a owl:Class ;
    rdfs:label "Logistic Regression" ;
    rdfs:subClassOf :RegressionAnalysis .

:LogististicRegressionLearning a owl:Class ;
    rdfs:label "Logistic Regression Learning" ;
    rdfs:subClassOf :RegressionAnalysisLearning .

:LogMessageFunction a owl:Class ;
    rdfs:label "Log Message Function" ;
    rdfs:subClassOf :Subroutine ;
    :definition "Produces an entry in a log." .

:LogonUser a owl:Class ;
    rdfs:label "Logon User" ;
    rdfs:subClassOf :SystemCall,
        [ a owl:Restriction ;
            owl:onProperty :authenticates ;
            owl:someValuesFrom :UserAccount ] .

:LongShort-termMemory a owl:Class ;
    rdfs:label "Long Short-term Memory" ;
    rdfs:subClassOf :RecurrentNeuralNetwork ;
    :definition "Long Short-Term Memory (LSTM) is a type of Recurrent Neural Network (RNN) designed to remember past information in sequence prediction tasks. It solves the vanishing gradient problem encountered by traditional RNNs by introducing a memory cell, which is capable of maintaining information for an extended period of time." ;
    :kb-article """## How it works
LSTMs work by retaining long-term dependencies in sequence data, which other simpler models might forget. They consist of a cell state and three gates (input, forget, and output gates) to control the flow of information. The input gate determines the degree to which a new value gets stored in the cell state. The forget gate decides what portion of the previous state should be discarded, and the output gate identifies the degree to which the value in the cell is used to compute the output activation of the LSTM unit.

The cell state acts as a 'conveyor belt' running throughout all LSTM units, with minor linear interactions. The gates, each made up of a sigmoid neural net layer and a pointwise multiplication operation, interact with the cell state and allow LSTM to remove or add information to the cell state, thereby providing a way to influence what gets remembered and what gets discarded.

## Considerations 
- **Data Dependencies**: LSTM models are great for data where past information is a strong indicator for future predictions. If this is not the case, simpler models might work better.
- **Complexity**: LSTM models are more complex and computationally expensive than other models, which could lead to longer training times. It's important to have appropriate computational resources.
- **Overfitting**: Due to their complexity, LSTM models are susceptible to overfitting. Regularization techniques might be necessary.
- **Tuning**: LSTMs require careful tuning of parameters (number of layers, number of units per layer, learning rate, etc.) for optimal performance.

## References 
1. Hochreiter, S., & Schmidhuber, J. (1997). Long short-term memory. Neural computation, 9(8), 1735-1780. [Link](http://www.bioinf.jku.at/publications/older/2604.pdf)
2. Olah, C. (2015). Understanding LSTM Networks. [Blog Post]. [Link](https://colah.github.io/posts/2015-08-Understanding-LSTMs/)
3. Brownlee, J. (2018). How to Develop LSTM Models for Time Series Forecasting. Machine Learning Mastery. [Link](https://machinelearningmastery.com/how-to-develop-lstm-models-for-time-series-forecasting/)""" .

:MachineLearning a owl:Class ;
    rdfs:label "Machine Learning" ;
    rdfs:subClassOf :AnalyticTechnique ;
    :definition "Machine Learning (ML) is a subset of artificial intelligence that allows systems to automatically learn and improve from experience without being explicitly programmed. It is based on the idea that systems can identify patterns, learn from data, and make decisions with minimal human intervention." ;
    :kb-article """## How it works
Machine learning involves feeding large amounts of data to an algorithm (a mathematical model), which uses it to make predictions or decisions without explicit programming to perform the task. These algorithms can identify patterns and trends within the data and learn from it, thus improving their performance over time.

There are several types of machine learning algorithms, broadly categorized into Supervised Learning, Unsupervised Learning, Reinforcement Learning, and Semi-supervised Learning. In Supervised Learning, the system learns from labeled training data, and makes predictions based on that data. Unsupervised Learning involves learning from no labels at all, or data that has not been classified or categorized, and instead finding structure by clustering or associating the input data. Reinforcement Learning is a type of machine learning algorithm that learns to perform an action from experience. Semi-supervised Learning lies between supervised and unsupervised learning where the system learns from both labeled and unlabeled data.

## Considerations
- **Data Quality:** High quality, relevant data is crucial for training the model. Inaccurate or poor-quality data can lead to misleading results.
- **Overfitting and Underfitting:** These are common problems in machine learning where the model performs well on the training data but poorly on new, unseen data (overfitting), or where the model is too simple to capture underlying patterns (underfitting).
- **Algorithm Selection:** Different problems require different ML algorithms, so the selection of the right algorithm is important. No one-size-fits-all solution exists.
- **Compute Resources:** Machine learning, especially deep learning, can be computationally expensive and might require substantial hardware resources.
- **Ethics and Bias:** Machine learning models can inadvertently amplify societal biases present in the training data. It's crucial to consider ethical implications and strive for fairness, accountability, and transparency in your ML models.

## References
1. [The Discipline of Machine Learning by Tom M. Mitchell](https://www.cs.cmu.edu/~tom/pubs/MachineLearning.pdf)
2. [Understanding Machine Learning: From Theory to Algorithms by Shai Shalev-Shwartz and Shai Ben-David](http://www.cs.huji.ac.il/~shais/UnderstandingMachineLearning/index.html)
3. [Machine Learning: The Art and Science of Algorithms that Make Sense of Data by Peter Flach](https://www.cambridge.org/core/books/machine-learning/577E1B8814A7F5F6C4492BA3A5A6B8AB)
4. [Ethics of Artificial Intelligence and Robotics (Stanford Encyclopedia of Philosophy)](https://plato.stanford.edu/entries/ethics-ai/)
5. [Bias and Fairness in Machine Learning (Google AI Education)](https://developers.google.com/machine-learning/fairness-overview/)""" .

:MacOSKeychain a owl:Class ;
    rdfs:label "MacOS Keychain" ;
    skos:altLabel "Keychain" ;
    rdfs:subClassOf :PasswordStore ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Keychain_(software)> ;
    :definition "Keychain is the password management system in macOS, developed by Apple. It was introduced with Mac OS 8.6, and has been included in all subsequent versions of the operating system, now known as macOS. A Keychain can contain various types of data: passwords (for websites, FTP servers, SSH accounts, network shares, wireless networks, groupware applications, encrypted disk images), private keys, certificates, and secure notes." .

:MailNetworkTraffic a owl:Class ;
    rdfs:label "Mail Network Traffic" ;
    rdfs:subClassOf :NetworkTraffic,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :Email ] ;
    :definition "Mail traffic is network traffic that uses a standard mail transfer protocol." .

:MailServer a owl:Class ;
    rdfs:label "Mail Server" ;
    skos:altLabel "Email Server Resource",
        "Mail Exchanger",
        "Mail transfer agent",
        "Message transfer agent",
        "MTA",
        "MX Host" ;
    rdfs:subClassOf :Server,
        [ a owl:Restriction ;
            owl:onProperty :runs ;
            owl:someValuesFrom :MessageTransferAgent ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Message_transfer_agent> ;
    :definition "Within the Internet email system, a message transfer agent or mail transfer agent (MTA) or mail relay is software that transfers electronic mail messages from one computer to another using SMTP. The terms mail server, mail exchanger, and MX host are also used in some contexts. Messages exchanged across networks are passed between mail servers, including any attached data files (such as images, multimedia or documents). These servers also often keep mailboxes for email. Access to this email by end users is typically either via webmail or an email client." .

:MailService a owl:Class ;
    rdfs:label "Mail Service" ;
    skos:altLabel "Email Service" ;
    rdfs:subClassOf :NetworkService ;
    :definition "A mail service provides the ability to send and receive mail across a computer network.  The mail service runs on message transfer agents (i.e., mail servers) and is accessed by users through an email client." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Email>,
        <http://dbpedia.org/resource/Message_transfer_agent> .

:MandatoryAccessControl a :Kernel-basedProcessIsolation,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Mandatory Access Control" ;
    rdfs:subClassOf :Kernel-basedProcessIsolation,
        [ a owl:Restriction ;
            owl:onProperty :isolates ;
            owl:someValuesFrom :Process ],
        [ a owl:Restriction ;
            owl:onProperty :restricts ;
            owl:someValuesFrom :CreateProcess ] ;
    :d3fend-id "D3-MAC" ;
    :definition "Controlling access to local computer system resources with kernel-level capabilities." ;
    :kb-article """## How it works
Mandatory access control is a non-discretionary access control system because the rules and polices that determine access is determined by a security control authority and not distributed to local users. Access determinations are based on designed access control polices and are not based on local resource owner determinations.

Access is typically granted by defining sets of subjects and sets of objects. Subjects are the entities requesting access and objects are the resources that subjects are trying to access. Rules and policies are defined that associate subjects and object permissions and access controls.

### Common MAC implementations
#### Security label access control
A fine-grained form of mandatory access control is to apply security labels to individual resources, including processes, and the access control decisions are against a particular resource and a given user attempting to gain access. This type of MAC requires that the file system has built-in support for security labels.

Access controls are typically implemented through the use of label identifiers for every file system object. Identifier labels are applied to resources and users are assigned a similar access identifier. Users attempting to access a resource will result in the operating system performing an access control check. The access control check will compare the assigned user's credentials to that of the resource or object they are attempting to access.

A security context is associated with resources and is used to determine assess. Typical basic access control elements include users, roles and types and together they form a security context which is the basis for the security labels.

This type of access control is what is employed in SELinux [2]. This form of MAC is considered the most flexible implementation, but it also is the most complex to deploy across the enterprise. Where multiple virtual machines (VM) are run together this type of access control is typically employed to ensure true isolation of processes and VMs.

#### File path level controls
A less fine-grained form of mandatory access control is to apply security labels that allow for access control at the file path level.  Access control is filesystem agnostic and no relabeling of resources is required. Pathname access control usually seems more natural for implementation and corresponding access audits.

This type of MAC is what is employed in AppArmor [3]. AppArmor was developed to provide a simpler alternative MAC method with much less management overhead. A simple access policy is maintained that defines path resource access rules. Access control attributes are typically associated with programs instead of users.


## Considerations
Some implementations of security label mandatory access control contain complex rules set that are hard to verify and complex to maintain over time.

Initial planning of access model and continuous monitoring of the available users, resources and object is necessary.

## Implementations

 * Linux C-Groups, and policy engines like SELinux and AppArmor
 * Windows Mandatory Integrity Control introduced in Windows Vista


### Citations
1. [Implementation of Mandatory Access Control in Distributed Systems](https://link.springer.com/article/10.3103/S0146411618080357)
2. [SELinux](https://selinuxproject.org/)
3. [AppArmor](https://www.apparmor.net/)""" ;
    :kb-reference :Reference-AnalysisOfTheWindowsVistaSecurityModel_SymantecCorporation,
        :Reference-ArchitectureOfTransparentNetworkSecurityForApplicationContainers_NeuvectorInc .

:Matching a owl:Class ;
    rdfs:label "Matching" ;
    rdfs:subClassOf :AnalyticalPurpose .

:MathematicalFunction a owl:Class ;
    rdfs:label "Mathematical Function" ;
    rdfs:subClassOf :Subroutine ;
    :definition "Computes mathematical expressions." .

:Maximum-marginLearning a owl:Class ;
    rdfs:label "Maximum-margin Learning" ;
    rdfs:subClassOf :InstrinsicallySemi-supervisedLearning ;
    :definition "Maximum-Margin Learning is a general concept of learning from data which aims to make predictions not only based on the correctness but also on the confidence of the prediction. The best-known realization of maximum-margin learning is the Support Vector Machine (SVM), where the learning algorithm tries to find a hyperplane that not only separates the classes but also maximizes the margin between the closest points (support vectors) and the separating hyperplane." ;
    :kb-article """## How it works
The principle behind Maximum-Margin Learning lies in the idea of a "margin" - the distance between the separating hyperplane (or decision boundary) and the nearest data points from different classes. The wider this margin, the more confident the model is in its predictions. The learning process focuses on maximizing this margin, thus giving the method its name.

In the case of linearly separable data, the maximum-margin learning strategy will find the hyperplane that has the greatest distance to the nearest training-data points of any class, which are called "support vectors". The dimensionality of the hyperplane depends on the feature space; in a two-dimensional space, it would be a line, while in a three-dimensional space, it would be a plane, and so on.

However, in cases where data is not linearly separable, maximum-margin methods often use a technique called the "kernel trick". This involves transforming the input data into a higher-dimensional space where it becomes linearly separable. The model then finds the maximum margin hyperplane in this transformed space.

## Considerations
- **Linear separability**: If the data is not linearly separable, a kernel function must be chosen to transform the data into a space where it is. The choice of kernel function can significantly influence the performance of the model.

- **Outliers**: Maximum-Margin Learning methods can be sensitive to outliers. A single outlier can significantly shift the decision boundary, potentially leading to poorer generalization performance.

- **Scaling**: It is important to scale features before applying Maximum-Margin Learning as it is sensitive to the range of the input features.

- **Model complexity**: While Maximum-Margin Learning methods can handle high-dimensional data, the computational complexity can increase significantly with the number of dimensions. Regularization techniques might be needed to control the complexity of the model and avoid overfitting.

## References
1. Vapnik, V. (1999). An overview of statistical learning theory. IEEE transactions on neural networks, 10(5), 988-999. [Link](http://www.mit.edu/~6.454/www_spring_2001/emin/slt.pdf)

2. Bishop, C. M. (2006). Pattern Recognition and Machine Learning. Springer. [Link](https://www.microsoft.com/en-us/research/uploads/prod/2006/01/Bishop-Pattern-Recognition-and-Machine-Learning-2006.pdf)

3. Scholkopf, B., & Smola, A. J. (2001). Learning with Kernels: Support Vector Machines, Regularization, Optimization, and Beyond. MIT Press. [Link](https://mitpress.mit.edu/books/learning-kernels)""" .

:Mean a owl:Class ;
    rdfs:subClassOf :CentralTendency .

:MeanAbsoluteDeviation a owl:Class ;
    rdfs:label "Mean Absolute Deviation" ;
    rdfs:subClassOf :AverageAbsoluteDeviation .

:MediaGeneration a owl:Class ;
    rdfs:label "Media Generation" ;
    rdfs:subClassOf :Generation ;
    owl:disjointWith :Simulation .

:Median a owl:Class ;
    rdfs:subClassOf :CentralTendency .

:MedianAbsoluteDeviation a owl:Class ;
    rdfs:label "Median Absolute Deviation" ;
    rdfs:subClassOf :AverageAbsoluteDeviation .

:MediaServer a owl:Class ;
    rdfs:label "Media Server" ;
    rdfs:subClassOf :Server ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Media_server> ;
    :definition "A media server is a computer appliance or an application software that stores digital media (video, audio or images) and makes it available over a network. Media servers range from servers that provide video on demand to smaller personal computers or NAS (Network Attached Storage) for the home." .

:MemoryAddress a owl:Class ;
    rdfs:label "Memory Address" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :addresses ;
            owl:someValuesFrom :MemoryWord ] ;
    rdfs:isDefinedBy "https://dbpedia.org/page/Memory_address" ;
    :definition "In computing, a memory address is a reference to a specific memory location used at various levels by software and hardware." .

:MemoryAddressSpace a owl:Class ;
    rdfs:label "Memory Address Space" ;
    rdfs:subClassOf :AddressSpace,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :MemoryAddress ] ;
    :definition "A memory address space is a space containing memory addresses." .

:MemoryAllocationFunction a owl:Class ;
    rdfs:label "Memory Allocation Function" ;
    rdfs:subClassOf :Subroutine,
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :AllocateMemory ] ;
    :definition "Reserves memory for a running process to use." .

:MemoryBlock a owl:Class ;
    rdfs:label "Memory Block" ;
    rdfs:subClassOf :MemoryExtent,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :MemoryWord ],
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :Record ] ;
    rdfs:isDefinedBy "https://dbpedia.org/page/Block_(data_storage)" ;
    :definition "In computing (specifically data transmission and data storage), a block, sometimes called a physical record, is a sequence of bytes or bits, usually containing some whole number of records, having a maximum length; a block size. Data thus structured are said to be blocked. The process of putting data into blocks is called blocking, while deblocking is the process of extracting data from blocks. Blocked data is normally stored in a data buffer and read or written a whole block at a time." .

:MemoryBoundaryTracking a :OperatingSystemMonitoring,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Memory Boundary Tracking" ;
    rdfs:subClassOf :OperatingSystemMonitoring,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :ProcessCodeSegment ] ;
    :d3fend-id "D3-MBT" ;
    :definition "Analyzing a call stack for return addresses which point to unexpected  memory locations." ;
    :kb-article """## How it works
This technique monitors for indicators of whether a return address is outside memory previously allocated for an object (i.e. function, module, process, or thread). If so, code that the return address points to is treated as malicious code.

## Considerations
Kernel malware can manipulate memory contents, for example modifying pointers to hide processes, and thereby impact the accuracy of memory allocation information used to perform the analysis.""" ;
    :kb-reference :Reference-InferentialExploitAttemptDetection_CrowdstrikeInc .

:MemoryExtent a owl:Class ;
    rdfs:label "Memory Extent" ;
    rdfs:subClassOf :DigitalArtifact .

:MemoryFreeFunction a owl:Class ;
    rdfs:label "Memory Free Function" ;
    rdfs:subClassOf :Subroutine,
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :FreeMemory ] ;
    :definition "Releases previously reserved memory associated with a process." .

:MemoryManagementUnit a owl:Class ;
    rdfs:label "Memory Management Unit" ;
    rdfs:subClassOf :ProcessorComponent,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :TranslationLookasideBuffer ],
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :VirtualAddress ],
        [ a owl:Restriction ;
            owl:onProperty :manages ;
            owl:someValuesFrom :PageTable ],
        [ a owl:Restriction ;
            owl:onProperty :manages ;
            owl:someValuesFrom :Storage ] ;
    rdfs:isDefinedBy "https://www.techopedia.com/definition/4768/memory-management-unit-mmu" ;
    :definition "A computer’s memory management unit (MMU) is the physical hardware that handles its virtual memory and caching operations. The MMU is usually located within the computer’s central processing unit (CPU), but sometimes operates in a separate integrated chip (IC)." ;
    rdfs:seeAlso "https://dbpedia.org/page/Memory_management_unit" .

:MemoryManagementUnitComponent a owl:Class ;
    rdfs:label "Memory Management Unit Component" ;
    rdfs:subClassOf :HardwareDevice .

:MemoryPool a owl:Class ;
    rdfs:label "Memory Pool" ;
    rdfs:subClassOf :MemoryExtent,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :MemoryBlock ] ;
    rdfs:isDefinedBy "https://dbpedia.org/page/Memory_pool" ;
    :definition "Memory pools, also called fixed-size blocks allocation, is the use of pools for memory management… preallocating a number of memory blocks with the same size called the memory pool. The application can allocate, access, and free blocks represented by handles at run time." .

:MemoryProtectionUnit a owl:Class ;
    rdfs:label "Memory Protection Unit" ;
    rdfs:subClassOf :ProcessorComponent .

:MemoryWord a owl:Class ;
    rdfs:label "Memory Word" ;
    rdfs:subClassOf :MemoryExtent ;
    rdfs:isDefinedBy "https://dbpedia.org/page/Word_(computer_architecture)" ;
    :definition "A memory word is the natural unit of data used by a particular computer processor design; a fixed-size piece of data handled as a unit by the instruction set or the hardware of the processor." .

:MessageAnalysis a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Message Analysis" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Detect ] ;
    :d3fend-id "D3-MA" ;
    :definition "Analyzing email or instant message content to detect unauthorized activity." ;
    :enables :Detect ;
    :kb-article """## Technique Overview

Email and messaging are frequently used to deliver malicious content to targets. These enterprise capabilities are used to deliver software exploits or social engineering tricks. If the recipient of a message trusts the sender, attackers can avoid escalating suspicion.

Emails and messages are also complex data structures. They contain files and links, and complex data encodings which vary region to region. Thus the defensive techniques used to analyze emails and messages are highly varied ranging from deep content analysis and execution to social network graph-style analytics to analyze trust or risk.""" ;
    :synonym "Electronic Message Analysis",
        "Email Or Messaging Analysis" .

:MessageAuthentication a :MessageHardening,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Message Authentication" ;
    rdfs:subClassOf :MessageHardening,
        [ a owl:Restriction ;
            owl:onProperty :authenticates ;
            owl:someValuesFrom :UserToUserMessage ] ;
    :d3fend-id "D3-MAN" ;
    :definition "Authenticating the sender of a message and ensuring message integrity." ;
    :kb-article """## How it works

### Digital Signature
Digital signatures are used to verifying a message is from the expected sender. In email, Secure/Multipurpose Internet Mail Extensions (S/MIME) protocol is typically used to digitally sign messages. A hash value of the sender's message is created and encrypted with the sender's private key to create a digital signature. The message and the digital signature are sent to the recipient where the sender's public key is used to decrypt the digital signature and compute the hash of the message. The computed hash is compared with the hash from the received message, and any difference in the hash values signify the message did not originate from the sender and has been alerted in transit.

### Message Authentication Code (MAC)
MAC is a fixed size string that is appended to a message to provide message authentication and integrity. The sender MAC signing algorithm takes as input a secret symmetric key shared between sender and recipient and the message to calculate a short tag that is appended to the message. The recipient receives the message with the appended tag, and a MAC verification algorithm is run using the symmetric key to verify the message came from the stated sender and ensure the message has not been tampered with.

## Considerations
- Public keys associated with digital signatures should be verified by a Certification Authority (CA) to prevent impersonation. The CA verifies the owner of a public key and puts the sender's identity and public key into a certificate that is signed by the CA.
- Digital signatures provide non-repudiation where a third party can verify the authenticity of the message using the sender's digital certificate signed by the CA.
- Symmetric keys must be exchanged securely via a private channel and management of new symmetric keys are needed for each pair of participants wishing to exchange messages.""" ;
    :kb-reference :Reference-DomainKeysIdentifiedMail-Signatures-IETF,
        :Reference-SecureMultipurposeInternetMailExtensionsMIME-Version3.1 .

:MessageEncryption a :MessageHardening,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Message Encryption" ;
    rdfs:subClassOf :MessageHardening,
        [ a owl:Restriction ;
            owl:onProperty :encrypts ;
            owl:someValuesFrom :UserToUserMessage ] ;
    :d3fend-id "D3-MENCR" ;
    :definition "Encrypting a message body using a cryptographic key." ;
    :kb-article """## How it works

### Asymmetric Cryptography
Asymmetric encryption is typically accomplished using public and private key certificates based on the X.509 standard. The sender encrypts messages using the recipient's public key and the receipt decrypts the message using their private key. Standards that can be used to implement message encryption include S/MIME (Secure/Multipurpose Internet Mail Extensions) and PGP.
### Symmetric Cryptography
Symmetric encryption uses the same cryptographic key by both the sender and receiver to encrypt and decrypt a message. Asymmetric key exchange protocols such as Diffie-Hellman can be used to share the cryptographic key with the recipient.

## Considerations
- Separate configuration settings to enable message encryption are often needed for each messenger client (e.g. webmail, desktop client, mobile).
- Continuous monitoring to ensure private keys are not compromised and the certificate authority (CA) is trusted.
- Secure transfer of private keys between multiple devices.""" ;
    :kb-reference :Reference-SecureMultipurposeInternetMailExtensionsMIME-Version3.1 .

:MessageHardening a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Message Hardening" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Harden ] ;
    :d3fend-id "D3-MH" ;
    :definition "Email or Messaging Hardening includes measures taken to ensure the confidentiality and integrity of user to user computer messages." ;
    :enables :Harden ;
    :synonym "Email Or Messaging Hardening" .

:MessageTransferAgent a owl:Class ;
    rdfs:label "Message Transfer Agent" ;
    skos:altLabel "Mail Transfer Agent",
        "MTA" ;
    rdfs:subClassOf :MailService ;
    :definition "A message transfer agent or mail transfer agent (MTA) or mail relay is software that transfers electronic mail messages from one computer to another using a client-server application architecture. An MTA implements both the client (sending) and server (receiving) portions of the Simple Mail Transfer Protocol." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Message_transfer_agent> .

:Metadata a owl:Class ;
    rdfs:label "Metadata" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Metadata> ;
    :definition "Metadata is \"data [information] that provides information about other data\". Three distinct types of metadata exist: structural metadata, descriptive metadata, and administrative metadata. Structural metadata is data about the containers of data. For instance a \"book\" contains data, and data about the book is metadata about that container of data. Descriptive metadata uses individual instances of application data or the data content." .

:MetaheuristicAlgorithm a owl:Class ;
    rdfs:label "Metaheuristic Algorithm" ;
    rdfs:subClassOf :AnalyticTechnique .

:Microcode a owl:Class ;
    rdfs:label "Microcode" ;
    rdfs:subClassOf :Firmware ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Microcode> ;
    :definition "Microcode is a computer hardware technique that interposes a layer of organization between the CPU hardware and the programmer-visible instruction set architecture of the computer. As such, the microcode is a layer of hardware-level instructions that implement higher-level machine code instructions or internal state machine sequencing in many digital processing elements." .

:MobilePhone a owl:Class ;
    rdfs:label "Mobile Phone" ;
    skos:altLabel "Cellphone",
        "Cellular Phone" ;
    rdfs:subClassOf :PersonalComputer ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Mobile_phone> ;
    :definition "A mobile phone, cellular phone, cell phone, cellphone or hand phone, sometimes shortened to simply mobile, cell or just phone, is a portable telephone that can make and receive calls over a radio frequency link while the user is moving within a telephone service area. The radio frequency link establishes a connection to the switching systems of a mobile phone operator, which provides access to the public switched telephone network (PSTN). Modern mobile telephone services use a cellular network architecture and, therefore, mobile telephones are called cellular telephones or cell phones in North America. In addition to telephony, digital mobile phones (2G) support a variety of other services, such as text messaging, MMS, email, Internet access, short-range wireless communications (infrared," .

:ModalLogic a owl:Class ;
    rdfs:label "Modal Logic" ;
    rdfs:subClassOf :SymbolicReasoning ;
    :definition "A collection of formal systems developed to represent statements about necessity and possibility. It plays a major role in philosophy of language, epistemology, metaphysics, and natural language semantics." ;
    :kb-article """## How it works
_TBD enter text here for how the thing works_

## Considerations 

## References 
- https://en.wikipedia.org/wiki/Modal_logic""" .

:Mode a owl:Class ;
    rdfs:subClassOf :CentralTendency .

:Model a :DefensiveTactic,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Model" ;
    rdfs:subClassOf :DefensiveTactic ;
    :definition "The model tactic is used to apply security engineering, vulnerability, threat, and risk analyses to digital systems. This is accomplished by creating and maintaining a common understanding of the systems being defended, the operations on those systems, actors using the systems, and the relationships and interactions between these elements." ;
    :display-order -1 ;
    :display-priority 1 .

:Model-basedPolicyOptimization a owl:Class ;
    rdfs:label "Model-based Policy Optimization" ;
    rdfs:subClassOf :Model-basedReinforcementLearning ;
    :definition "Model-Based Policy Optimization (MBPO) is an advanced technique in reinforcement learning that leverages a model of the environment to guide the policy improvement. It works by combining model-based reinforcement learning and model-free methods to optimize a policy with significantly fewer environment interactions, thereby improving sample efficiency." ;
    :kb-article """## How it works
MBPO uses two critical components: a model of the environment and a policy optimization algorithm. Firstly, it uses a dynamics model, typically a neural network, that learns to predict the next state given the current state and action. The model is trained by interacting with the environment and is updated continuously as new data is collected. This model is used to create hypothetical future scenarios or "imagined trajectories" that can help optimize the policy without the need for actual environment interaction.

The second part of MBPO is the policy optimization algorithm, often a model-free method such as Proximal Policy Optimization (PPO). This algorithm uses the imagined trajectories generated by the dynamics model to optimize the policy. By using these hypothetical future scenarios, the policy can be improved with significantly fewer interactions with the environment, thus making MBPO more sample-efficient than model-free methods.

## Considerations
- **Sample efficiency**: One of the main advantages of MBPO is its sample efficiency, making it particularly valuable in scenarios where environment interactions are expensive or limited.
- **Model accuracy**: The accuracy of the dynamics model is crucial as it guides the policy optimization. A model that poorly represents the actual environment may lead to sub-optimal policies.
- **Computational expense**: Although MBPO reduces the need for environmental interactions, it often requires significant computational resources due to the complexity of learning and simulating the dynamics model.
- **Balancing model bias**: Careful tuning is needed to balance the reliance on the model and real data. Too much reliance on the model may introduce bias, while too much real data may reduce the sample efficiency gains.
  
## References
- Janner, M., Fu, J., Zhang, M., & Levine, S. (2019). When to Trust Your Model: Model-Based Policy Optimization. In _Advances in Neural Information Processing Systems_. [Link](https://arxiv.org/abs/1906.08253)
- Sutton, R. S., & Barto, A. G. (2018). _Reinforcement learning: An introduction_. MIT press.""" .

:Model-basedReinforcementLearning a owl:Class ;
    rdfs:label "Model-based Reinforcement Learning" ;
    rdfs:subClassOf :ReinforcementLearning ;
    :definition """Model-based Reinforcement Learning refers to learning optimal behavior indirectly by learning a model of the environment by taking actions and observing the outcomes that include the next state and the immediate reward. The models predict the outcomes of actions and are used in lieu of or in addition to interaction with the environment to learn optimal policies.

or 


Model-Based Reinforcement Learning (MBRL) is an approach where a model of the environment is learned and leveraged to make decisions. The learning algorithm iteratively updates a predictive model of the environment's dynamics and uses it to optimize the policy, making it more sample-efficient than model-free counterparts.""" ;
    :kb-article """## How it works
In model-based reinforcement learning, the agent interacts with the environment to collect data about the states, actions, and rewards. This collected data is used to build a predictive model of the environment, which serves as a "simulation" of the real world for the agent. The primary goal of the agent is to learn the optimal policy, i.e., a series of actions that maximizes the cumulative reward.

The learning process happens in two key steps: model learning and policy optimization. In model learning, the agent uses the data gathered from the environment to update its predictive model. Common approaches for model learning include linear regression for linear environments, Gaussian processes for non-linear environments, and more recently, neural networks for complex environments. In policy optimization, the agent uses the learned model to improve its policy. It does so by simulating trajectories in the model, estimating rewards, and updating the policy to favor actions leading to higher rewards.

## Considerations 
- **Sample efficiency**: Model-based reinforcement learning is generally more sample-efficient than model-free methods, as it uses data more effectively by leveraging it to build a model of the environment.
- **Computational Complexity**: The improved sample efficiency of MBRL comes with increased computational complexity due to model learning and repeated policy optimization.
- **Model accuracy**: The performance of MBRL heavily depends on the accuracy of the learned model. If the model is not an accurate representation of the environment, the agent's policy may perform poorly.
- **Planning horizon**: The choice of planning horizon is critical in MBRL. Short-term planning can lead to myopic policies, while long-term planning can be computationally intensive and sensitive to model errors.

## References 
1. Deisenroth, M. P., & Rasmussen, C. E. (2011). PILCO: A model-based and data-efficient approach to policy search. In Proceedings of the 28th International Conference on Machine Learning (ICML-11) (pp. 465-472).
2. Chua, K., Calandra, R., McAllister, R., & Levine, S. (2018). Deep reinforcement learning in a handful of trials using probabilistic dynamics models. In Advances in Neural Information Processing Systems (pp. 4754-4765).
3. Sutton, R. S., & Barto, A. G. (2018). Reinforcement learning: An introduction. MIT press.
4. https://link.springer.com/referenceworkentry/10.1007/978-0-387-30164-8_556#:~:text=Model%2Dbased%20Reinforcement%20Learning%20refers,state%20and%20the%20immediate%20reward.""" ;
    :todo "Review: Which definition to use" .

:Model-basedValueIteration a owl:Class ;
    rdfs:label "Model-based Value Iteration" ;
    rdfs:subClassOf :Model-basedReinforcementLearning ;
    :synonym "MBVI" .

:Model-freeReinforcementLearning a owl:Class ;
    rdfs:label "Model-free Reinforcement Learning" ;
    rdfs:subClassOf :ReinforcementLearning ;
    :definition "Model-Free Reinforcement Learning is a subset of reinforcement learning methods where the agent, while interacting with its environment, does not build a model of the environment's dynamics. Instead, it learns optimal behavior directly from its experiences, typically by estimating value functions or deriving policies." ;
    :kb-article """## How it works
In Model-Free Reinforcement Learning, an agent interacts with an environment by executing actions and receiving observations and rewards. The agent's objective is to learn a policy, which is a mapping from states to actions, that maximizes the sum of future rewards. Two primary methods exist for this: Monte Carlo methods and Temporal Difference Learning methods.

Monte Carlo methods involve learning from complete episodes, meaning the agent only updates its value estimates or policy once an episode terminates. The agent uses the total sum of received rewards from an episode to update its value estimates.

Temporal Difference Learning, on the other hand, allows learning from incomplete episodes. The agent makes updates at each time step based on the current reward and the difference between value estimates of subsequent states. This leads to faster convergence, as the agent doesn't have to wait for the termination of episodes.

Both methods aim to find optimal policies by directly learning from trial-and-error interactions with the environment.

## Considerations 
- Model-Free Reinforcement Learning requires a significant amount of experience (data) to learn effectively, which can be a limitation in environments where data collection is expensive or risky.
- The choice between Monte Carlo and Temporal Difference methods is dependent on the specific problem at hand. Monte Carlo methods may perform better for episodic tasks where termination is certain, while Temporal Difference methods can be more efficient in continuous, non-terminating environments.
- Reward shaping, which involves modifying the reward function to guide the learning process, can greatly impact the performance of a model-free reinforcement learning agent. It requires careful design to avoid unintended behavior.
- Exploration vs. exploitation is a critical trade-off in reinforcement learning. Too much exploration can be inefficient, while too much exploitation can lead to suboptimal policies.

## References 
- Richard S. Sutton and Andrew G. Barto (2018). "Reinforcement Learning: An Introduction". MIT Press.
- Volodymyr Mnih, et al. (2015). "Human-level control through deep reinforcement learning". Nature.
- Pieter Abbeel and Andrew Y. Ng (2004). "Apprenticeship Learning via Inverse Reinforcement Learning". Proceedings of the twenty-first international conference on Machine learning.
- L. P. Kaelbling, M. L. Littman, and A. W. Moore (1996). "Reinforcement Learning: A Survey". Journal of Artificial Intelligence Research.""" .

:Modem a owl:Class ;
    rdfs:label "Modem" ;
    rdfs:subClassOf :NetworkNode ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Modem> ;
    :definition "A modem -- a portmanteau of \"modulator-demodulator\" -- is a hardware device that converts data into a format suitable for a transmission medium so that it can be transmitted from one computer to another (historically along telephone wires). A modem modulates one or more carrier wave signals to encode digital information for transmission and demodulates signals to decode the transmitted information. The goal is to produce a signal that can be transmitted easily and decoded reliably to reproduce the original digital data. Modems can be used with almost any means of transmitting analog signals from light-emitting diodes to radio. A common type of modem is one that turns the digital data of a computer into modulated electrical signal for transmission over telephone lines and demodulated by another modem at the receiver side to recover the digital data." .

:Moments a owl:Class ;
    rdfs:subClassOf :DistributionProperties .

:Monitoring a owl:Class ;
    rdfs:label "Monitoring" ;
    rdfs:subClassOf :D3FENDThing ;
    rdfs:isDefinedBy <http://wordnet-rdf.princeton.edu/id/00881724-n> ;
    :definition "the act of observing something (and sometimes keeping a record of it)" .

:MouseInputDevice a owl:Class ;
    rdfs:label "Mouse Input Device" ;
    skos:altLabel "Computer Mouse" ;
    rdfs:subClassOf :InputDevice ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Computer_mouse> ;
    :definition "A computer mouse (plural mice or mouses) is a hand-held pointing device that detects two-dimensional motion relative to a surface. This motion is typically translated into the motion of a pointer on a display, which allows a smooth control of the graphical user interface of a computer. In addition to moving a cursor, computer mice have one or more buttons to allow operations such as selection of a menu item on a display. Mice often also feature other elements, such as touch surfaces and scroll wheels, which enable additional control and dimensional input." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Pointing_device> .

:MoveFile a owl:Class ;
    rdfs:label "Move File" ;
    skos:altLabel "Rename File" ;
    rdfs:subClassOf :SystemCall,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :FileSystemMetadata ] ;
    :definition "A system call to rename or move a file.  Linux's rename() is an example of this kind of system call." ;
    rdfs:seeAlso <https://man7.org/linux/man-pages/man2/rename.2.html> .

:MovingAverageModel a owl:Class ;
    rdfs:label "Moving Average Model" ;
    rdfs:subClassOf :TimeSeriesAnalysis ;
    :synonym "MA Model" .

:Multi-factorAuthentication a :CredentialHardening,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Multi-factor Authentication" ;
    rdfs:subClassOf :CredentialHardening,
        [ a owl:Restriction ;
            owl:onProperty :authenticates ;
            owl:someValuesFrom :UserAccount ] ;
    :d3fend-id "D3-MFA" ;
    :definition "Requiring proof of two or more pieces of evidence in order to authenticate a user." ;
    :kb-article """## How it works
When logging into an account users present two or more credentials that fall into different categories: something you know (password or PIN), something you have (smart card or phone), or something you are (fingerprint).

## Considerations
MFA configuration steps may vary across accounts and in some cases left up to users to activate and implement.""" ;
    :kb-reference <http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-MethodAndApparatusForUtilizingATokenForResourceAccess_RsaSecurityInc.> .

:MulticlassClassification a owl:Class ;
    rdfs:label "Multiclass Classification" ;
    rdfs:subClassOf :Classifying .

:MultilayerPerceptronClassification a owl:Class ;
    rdfs:label "Multilayer Perceptron Classification" ;
    rdfs:subClassOf :ArtificialNeuralNetClassification ;
    :definition "A Multilayer Perceptron (MLP) Classification is a type of Artificial Neural Network (ANN) architecture, used for solving classification problems. It is composed of one or more layers of neurons (nodes) connected in a feed-forward way, with each layer fully connected to the next one. MLPs are capable of learning and modeling non-linear and complex relationships, which is an essential characteristic when dealing with complex data classification tasks." ;
    :kb-article """## How it works

Multilayer Perceptron (MLP) works by accepting inputs, processing them through multiple layers of artificial neurons (also known as nodes), and outputting a prediction for the given inputs. These layers are classified into three categories: an input layer to receive the signal, an output layer that makes a decision or prediction about the input, and in between those two, an arbitrary number of hidden layers that are the true computational engine of the MLP.

Each neuron in a layer is connected to all neurons in the previous and next layer. These connections, also called synapses, are associated with a weight, which is adjusted during the learning process. Each neuron processes the weighted sum of its inputs through a nonlinear activation function and passes the result to the neurons in the next layer.

The learning process in MLPs is carried out using a method called backpropagation, which is a type of supervised learning algorithm. During training, the MLP is provided with inputs and desired outputs. The weights of the MLP are then adjusted iteratively to minimize the difference between the desired and actual outputs, usually by gradient descent.

## Considerations

- **Data Scaling**: It's important to scale your data before feeding it into an MLP, as it is sensitive to feature scaling.

- **Architecture Design**: The choice of the number of layers and the number of neurons in each layer (network architecture) can greatly affect the performance of an MLP. There's no universal rule to determine the optimal architecture and it often requires trial and error, guided by cross-validation.

- **Overfitting**: MLPs with many layers and neurons can model complex relationships, but also have a tendency to overfit the training data and fail to generalize well to unseen data. Techniques like regularization, dropout, and early stopping can be used to mitigate overfitting.

- **Non-Convexity**: The loss landscape of MLPs is non-convex, which means that the optimization process can get stuck in suboptimal local minima. Different initializations and optimization algorithms can result in different final models.

## References

- [Scikit-Learn's Multilayer Perceptron](https://scikit-learn.org/stable/modules/neural_networks_supervised.html)

- [Neural Networks and Deep Learning, Michael Nielsen](http://neuralnetworksanddeeplearning.com/)

- [Deep Learning Book, Ian Goodfellow and Yoshua Bengio and Aaron Courville](https://www.deeplearningbook.org/)""" .

:MultimediaDocumentFile a owl:Class ;
    rdfs:label "Multimedia Document File" ;
    rdfs:subClassOf :DocumentFile ;
    :definition "Digital video files which often contain audio." ;
    rdfs:seeAlso "https://dbpedia.org/page/Multimedia" .

:MultipleRegression a owl:Class ;
    rdfs:label "Multiple Regression" ;
    rdfs:subClassOf :RegressionAnalysis ;
    :synonym "Multiple Linear Regression" .

:MultipleRegressionLearning a owl:Class ;
    rdfs:label "Multiple Regression Learning" ;
    rdfs:subClassOf :RegressionAnalysisLearning .

:MultivariateAnalysis a owl:Class ;
    rdfs:label "Multivariate Analysis" ;
    rdfs:subClassOf :StatisticalMethod .

:NaiveBayesClassifier a owl:Class ;
    rdfs:label "Naive Bayes Classifier" ;
    rdfs:subClassOf :Classification ;
    :definition "A Naive Bayes Classifier is a probabilistic machine learning model based on Bayes' Theorem, used for classification tasks. It is \"naive\" because it assumes that the presence or absence of a feature is independent of the presence or absence of any other feature, given the class variable." ;
    :kb-article """## How it Works
Naive Bayes classifiers function by calculating the conditional probability of each attribute or feature given the class, then applying Bayes' theorem to predict the class given the attributes. Essentially, it assumes that each feature independently contributes to the probability of the class, hence the term "naive". For example, if the task is to classify an email as spam or not-spam, the classifier will consider each word in the email independently, calculate its probability of being in a spam email, and then combine these probabilities to classify the email.

Despite its simplicity and the seemingly strong assumptions it makes, the Naive Bayes classifier can often perform surprisingly well. It is especially suitable for high-dimensional datasets, as it avoids the curse of dimensionality problem due to its feature independence assumption.

## Considerations 
- **Independence assumption**: While the naive assumption of feature independence can make Naive Bayes efficient and easy to implement, it can also be a limitation if this assumption is violated. In practice, features often are not completely independent.
- **Zero Frequency**: If a given class and feature value does not occur together in the training data, the frequency-based probability estimate will be zero. This can be handled using smoothing techniques like Laplace estimation.
- **Continuous Data**: While Naive Bayes is easier to implement with categorical data, it can be less intuitive with continuous data. Techniques like binning or using a Gaussian Naive Bayes can help in such cases.
- **Outliers**: Naive Bayes can be sensitive to outliers, as they may affect the calculated probabilities significantly.

## References 
- Rish, I. (2001). An empirical study of the naive Bayes classifier. IJCAI 2001 workshop on empirical methods in artificial intelligence, 3(22), 41-46. [Link](http://www.cs.columbia.edu/~rishabh/pub/ijcai-empirical.pdf)
- "Naive Bayes classifiers", Wikipedia, The Free Encyclopedia, [Link](https://en.wikipedia.org/wiki/Naive_Bayes_classifier) 
- "Naive Bayes and Text Classification", Stanford University, [Link](https://web.stanford.edu/~jurafsky/slp3/4.pdf) 
- "Understanding Naive Bayes", Towards Data Science, [Link](https://towardsdatascience.com/understanding-naive-bayes-49f27331aef0)""" .

:Nature-inspiredOptimizationAlgorithm a owl:Class ;
    rdfs:label "Nature-inspired Optimization Algorithm" ;
    rdfs:subClassOf :MetaheuristicAlgorithm .

:Network a owl:Class ;
    rdfs:label "Network" ;
    skos:altLabel "Computer Network" ;
    rdfs:subClassOf :DigitalArtifact ;
    :definition "A network is a group of computers that use a set of common communication protocols over digital interconnections for the purpose of sharing resources located on or provided by the network nodes. The interconnections between nodes are formed from a broad spectrum of telecommunication network technologies, based on physically wired, optical, and wireless radio-frequency methods that may be arranged in a variety of network topologies." ;
    rdfs:seeAlso <http://wordnet-rdf.princeton.edu/id/03826490-n> .

:NetworkCardFirmware a owl:Class ;
    rdfs:label "Network Card Firmware" ;
    skos:altLabel "Network Controller Firmware" ;
    rdfs:subClassOf :PeripheralFirmware ;
    :definition "Firmware that is installed on a network card (network interface controller)." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Network_interface_controller> .

:NetworkDirectoryResource a owl:Class ;
    rdfs:label "Network Directory Resource" ;
    rdfs:subClassOf :NetworkFileShareResource,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :Directory ] ;
    :definition "A directory resource made available from one host to other hosts on a computer network." .

:NetworkFileResource a owl:Class ;
    rdfs:label "Network File Resource" ;
    rdfs:subClassOf :NetworkFileShareResource,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :File ] ;
    :definition "A computer file resource made available from one host to other hosts on a computer network." .

:NetworkFileShareResource a owl:Class ;
    rdfs:label "Network File Share Resource" ;
    rdfs:subClassOf :NetworkResource ;
    :definition "A shared file resource, or network file share, is a computer file made available from one host to other hosts on a computer network. Network sharing is made possible by inter-process communication over the network. It includes both files and directories." .

:NetworkFlow a owl:Class ;
    rdfs:label "Network Flow" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :summarizes ;
            owl:someValuesFrom :NetworkTraffic ] ;
    :definition "A summarization of network transactions between a client and server. It often summarizes bytes sent, bytes received, and protocol flags." .

:NetworkFlowSensor a owl:Class ;
    rdfs:label "Network Flow Sensor" ;
    rdfs:subClassOf :NetworkSensor,
        [ a owl:Restriction ;
            owl:onProperty :monitors ;
            owl:someValuesFrom :NetworkFlow ] ;
    :definition "Monitors network traffic and produces summaries of data flows traversing the network." .

:NetworkInitScriptFileResource a owl:Class ;
    rdfs:label "Network Init Script File Resource" ;
    rdfs:subClassOf :InitScript,
        :NetworkFileResource ;
    :definition "A computer file resource made available from one host to other hosts on a computer network that is also an initialization script." .

:NetworkIsolation a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Network Isolation" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Isolate ] ;
    :d3fend-id "D3-NI" ;
    :definition "Network Isolation techniques prevent network hosts from accessing non-essential system network resources." ;
    :enables :Isolate .

:NetworkLink a owl:Class ;
    rdfs:label "Network Link" ;
    rdfs:subClassOf :LogicalLink ;
    :definition "A network link is a link within the network layer, which is responsible for packet forwarding including routing through intermediate routers." ;
    rdfs:seeAlso "https://dbpedia.org/resource/Network_layer",
        "https://www.techtarget.com/searchnetworking/definition/Network-layer" ;
    :synonym "Layer-3 Link",
        "Network Layer Link" .

:NetworkMapping a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Network Mapping" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Model ] ;
    :d3fend-id "D3-NM" ;
    :definition "Network mapping encompasses the techniques to identify and model the physical layer, network layer, and data exchange layers of the organization's network and their physical location, and determine allowed pathways through that network." ;
    :display-order 3 .

:NetworkNode a owl:Class ;
    rdfs:label "Network Node" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :runs ;
            owl:someValuesFrom :OperatingSystem ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Node_(networking)> ;
    :definition "In telecommunications networks, a node (Latin nodus, 'knot') is either a redistribution point or a communication endpoint. The definition of a node depends on the network and protocol layer referred to. A physical network node is an electronic device that is attached to a network, and is capable of creating, receiving, or transmitting information over a communications channel. A passive distribution point such as a distribution frame or patch panel is consequently not a node." .

:NetworkNodeInventory a :AssetInventory,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Network Node Inventory" ;
    rdfs:subClassOf :AssetInventory,
        [ a owl:Restriction ;
            owl:onProperty :inventories ;
            owl:someValuesFrom :NetworkNode ] ;
    :d3fend-id "D3-NNI" ;
    :definition "Network node inventorying identifies and records all the network nodes (hosts, routers, switches, firewalls, etc.) in the organization's architecture." ;
    :kb-article """## How it works
Administrators collect information on network nodes in their architecture using a variety of administrative and management tools that query network devices and nodes for information.  In some cases, where such queries are not supported or provide specific information of interest, an administrator may also collect this information through network enumeration methods to include host discovery and scanning for active ports and services.

## Considerations
* Scanning and probing techniques using mapping tools can result in side effects to information technology (IT) and operational technology (OT) systems.
* An adversary conducting network enumeration may engage in activities that parallel normal hardware inventorying activities, but would require escalating to admin privileges for most of the operations requiting administrative tools

## Examples
* Link-layer discovery
   * Link-layer Discovery Protocol (LLDP)
   * Cisco Discovery Protocol (CDP)
* Application-layer discovery
   * Simple Network Management Protocol (SNMP) collects MIB information
   * Web-based Enterprise Management (WBEM) collects CIM information
      * Windows Management Instrumentation (WMI)
      * Windows Management Infrastructure (MI)""" ;
    :kb-reference :Reference-IEEE-802_1AB-2016,
        :Reference-QualysNetworkPassiveSensorGettingStartedGuide,
        :Reference-RFC3411-AnArchitectureForDescribingSimpleNetworkManagementProtocolSNMPManagementFrameworks,
        :Reference-Web-BasedEnterpriseManagement,
        :Reference-Windows-Management-Infrastructure,
        :Reference-Windows-Management-Instrumentation ;
    :synonym "System Discovery",
        "System Inventorying" .

:NetworkPackets a owl:Class ;
    rdfs:label "Network Packet" ;
    rdfs:subClassOf :NetworkTraffic ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Network_packet> ;
    :definition "A network packet is a formatted unit of data carried by a packet-switched network. Computer communications links that do not support packets, such as traditional point-to-point telecommunications links, simply transmit data as a bit stream. When data is formatted into packets, packet switching is possible and the bandwidth of the communication medium can be better shared among users than with circuit switching." .

:NetworkPrinter a owl:Class ;
    rdfs:label "Network Printer" ;
    rdfs:subClassOf :SharedComputer ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Printer_(computing)> ;
    :definition "In computing, a network printer is a device that can be accessed over a network which makes a persistent representation of graphics or text, usually on paper. While most output is human-readable, bar code printers are an example of an expanded use for printers. The different types of printers include 3D printer, inkjet printer, laser printer, thermal printer, etc.  Note that not all printers are networked and the digital information to be printed must be passed either by removable media or as directly connecting the printer to a computer (e.g., by USB.)" ;
    :todo "Need printer superclass (to encompass standalone/pc-connected printing devices)?" .

:NetworkProtocolAnalyzer a owl:Class ;
    rdfs:label "Network Protocol Analyzer" ;
    rdfs:subClassOf :NetworkSensor,
        [ a owl:Restriction ;
            owl:onProperty :monitors ;
            owl:someValuesFrom :NetworkTraffic ] ;
    :definition "Monitors and parses network protocols to extract values from various network protocol layers." .

:NetworkResource a owl:Class ;
    rdfs:label "Network Resource" ;
    skos:altLabel "Shared Resource" ;
    rdfs:subClassOf :RemoteResource ;
    :definition "In computing, a shared resource, or network share, is a computer resource made available from one host to other hosts on a computer network. It is a device or piece of information on a computer that can be remotely accessed from another computer, typically via a local area network or an enterprise intranet, transparently as if it were a resource in the local machine.Network sharing is made possible by inter-process communication over the network." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Shared_resource> .

:NetworkResourceAccess a owl:Class ;
    rdfs:label "Network Resource Access" ;
    rdfs:subClassOf :ResourceAccess,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :NetworkResource ],
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :Resource ] ;
    :definition "Ephemeral digital artifact comprising a request of a network resource and any response from that network resource." .

:NetworkSensor a owl:Class ;
    rdfs:label "Network Sensor" ;
    rdfs:subClassOf :Sensor .

:NetworkService a owl:Class ;
    rdfs:label "Network Service" ;
    rdfs:subClassOf :ServiceApplicationProcess ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Network_service> ;
    :definition "In computer networking, a network service is an application running at the network application layer and above, that provides data storage, manipulation, presentation, communication or other capability which is often implemented using a client-server or peer-to-peer architecture based on application layer network protocols. Clients and servers will often have a user interface, and sometimes other hardware associated with it." .

:NetworkSession a owl:Class ;
    rdfs:label "Network Session" ;
    rdfs:subClassOf :NetworkTraffic,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :NetworkPackets ] ;
    :definition "A network session is a temporary and interactive information interchange between two or more devices communicating over a network. A session is established at a certain point in time, and then 'torn down' - brought to an end - at some later point. An established communication session may involve more than one message in each direction. A session is typically stateful, meaning that at least one of the communicating parties needs to hold current state information and save information about the session history in order to be able to communicate, as opposed to stateless communication, where the communication consists of independent requests with responses. Network sessions may be established and implemented as part of protocols and services at the application, session, or transport layers of the OSI model." ;
    rdfs:seeAlso <http://dbpedia.org/resource/OSI_model>,
        <http://dbpedia.org/resource/Session_(computer_science)> .

:NetworkTraffic a owl:Class ;
    rdfs:label "Network Traffic" ;
    skos:altLabel "Data Traffic" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :DomainName ],
        [ a owl:Restriction ;
            owl:onProperty :originates-from ;
            owl:someValuesFrom :PhysicalLocation ] ;
    :definition "Network traffic or data traffic is the data, or alternatively the amount of data, moving across a network at a given point of time.  Network data in computer networks is mostly encapsulated in network packets, which provide the load in the network." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Network_traffic> .

:NetworkTrafficAnalysis a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Network Traffic Analysis" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Detect ] ;
    :d3fend-id "D3-NTA" ;
    :definition "Analyzing intercepted or summarized computer network traffic to detect unauthorized activity." ;
    :enables :Detect .

:NetworkTrafficAnalysisSoftware a :DigitalArtifact,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Network Traffic Analysis Software" ;
    skos:altLabel "Network Sniffer" ;
    rdfs:subClassOf :DeveloperApplication ;
    rdfs:isDefinedBy <https://dbpedia.org/page/Packet_analyzer> ;
    :definition "A packet analyzer, also known as packet sniffer, protocol analyzer, or network analyzer, is a computer program or computer hardware such as a packet capture appliance, that can intercept and log traffic that passes over a computer network or part of a network." ;
    rdfs:seeAlso <https://dbpedia.org/resource/Category:Network_analyzers> .

:NetworkTrafficCommunityDeviation a :NetworkTrafficAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Network Traffic Community Deviation" ;
    rdfs:subClassOf :NetworkTrafficAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :NetworkTraffic ] ;
    :d3fend-id "D3-NTCD" ;
    :definition "Establishing baseline communities of network hosts and identifying statistically divergent inter-community communication." ;
    :kb-article """## How it works
Hosts/users within a computer network are analyzed to identify communities of hosts which frequently communicate. Future communications between communities that don't usually communicate can then be detected.  For example, if a community of hosts that communicate in support of a company's finance division suddenly starts to access the code server usually accessed only by engineers, this may indicate unauthorized activity.

## Considerations
* Potential for false positives in very dynamic network environments.
* Attackers that move low and slow may not differentiate their behavior enough to trigger an alert.""" ;
    :kb-reference :Reference-SystemForImplementingThreatDetectionUsingDailyNetworkTrafficCommunityOutliers_VECTRANETWORKSInc .

:NetworkTrafficFiltering a :NetworkIsolation,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Network Traffic Filtering" ;
    rdfs:subClassOf :NetworkIsolation,
        [ a owl:Restriction ;
            owl:onProperty :filters ;
            owl:someValuesFrom :NetworkTraffic ] ;
    :d3fend-id "D3-NTF" ;
    :definition "Restricting network traffic originating from any location." ;
    :kb-reference :Reference-ActiveFirewallSystemAndMethodology_McAfeeLLC,
        :Reference-AutomaticallyGeneratingRulesForConnectionSecurity_Microsoft,
        :Reference-FirewallForInterentAccess_SecureComputingLLC,
        :Reference-FirewallForProcessingAConnectionlessNetworkPacket_NationalSecurityAgency,
        :Reference-FirewallForProcessingConnection-orientedAndConnectionlessDatagramsOverAConnection-orientedNetwork_NationalSecurityAgency,
        :Reference-FirewallsThatFilterBasedUponProtocolCommands_IntelCorp,
        :Reference-FWTK-FirewallToolkit_,
        :Reference-MethodForControllingComputerNetworkSecurity_CheckpointSoftwareTechnologiesLtd,
        :Reference-NetworkFirewallWithProxy_SecureComputingLLC .

:NetworkTrafficPolicyMapping a :NetworkMapping,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Network Traffic Policy Mapping" ;
    rdfs:subClassOf :NetworkMapping,
        [ a owl:Restriction ;
            owl:onProperty :maps ;
            owl:someValuesFrom :AccessControlConfiguration ],
        [ a owl:Restriction ;
            owl:onProperty :queries ;
            owl:someValuesFrom :CollectorAgent ] ;
    :d3fend-id "D3-NTPM" ;
    :definition "Network traffic policy mapping identifies and models the allowed pathways of data at the network, tranport, and/or application levels." ;
    :kb-reference :Reference-CiscoASR9000AccessListCommands ;
    :synonym "DLP Policy Mapping",
        "Firewall Mapping",
        "IPS Policy Mapping",
        "Web Security Gateway Policy Mapping" .

:NetworkVulnerabilityAssessment a :NetworkMapping,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Network Vulnerability Assessment" ;
    rdfs:subClassOf :NetworkMapping,
        [ a owl:Restriction ;
            owl:onProperty :evaluates ;
            owl:someValuesFrom :Network ],
        [ a owl:Restriction ;
            owl:onProperty :identifies ;
            owl:someValuesFrom :Vulnerability ] ;
    :d3fend-id "D3-NVA" ;
    :definition "Network vulnerability assessment relates all the vulnerabilities of a network's components in the context of their configuration and interdependencies and can also include assessing risk emerging from the network's design as a whole, not just the sum of individual network node or network segment vulnerabilities." .

:NewsArticle a owl:Class ;
    rdfs:label "News Article" ;
    rdfs:subClassOf :Article .

:NISTControl a owl:Class ;
    rdfs:label "NIST Control" ;
    rdfs:subClassOf :ExternalControl,
        [ a owl:Restriction ;
            owl:onProperty :member-of ;
            owl:someValuesFrom :NISTSP800-53ControlCatalog ] .

:NISTSP800-53ControlCatalog a owl:Class ;
    rdfs:label "NIST SP 800-53 Control Catalog" ;
    rdfs:subClassOf :ControlCatalog,
        [ a owl:Restriction ;
            owl:onProperty :has-member ;
            owl:someValuesFrom :NISTControl ] ;
    :definition "A NIST SP 800-53 control catalog provides the entire set of security and privacy controls for a version of NIST SP 800-53." ;
    rdfs:seeAlso "https://doi.org/10.6028/NIST.SP.800-53r5" .

:Non-monotonicLogic a owl:Class ;
    rdfs:label "Non-monotonic Logic" ;
    rdfs:subClassOf :SymbolicReasoning ;
    :definition "A formal logic whose conclusion relation is not monotonic. In other words, non-monotonic logics are devised to capture and represent defeasible inferences (cf. defeasible reasoning), i.e., a kind of inference in which reasoners draw tentative conclusions, enabling reasoners to retract their conclusion(s) based on further evidence." ;
    :kb-article """## Definition 
## How it works
_TBD enter text here for how the thing works_

## Considerations 

## References 
- https://en.wikipedia.org/wiki/Non-monotonic_logic""" .

:Non-ParametricTests a owl:Class ;
    rdfs:label "Non-Parametric Tests" ;
    rdfs:subClassOf :HypothesisTesting .

:NonlinearRegression a owl:Class ;
    rdfs:label "Nonlinear Regression" ;
    rdfs:subClassOf :RegressionAnalysis ;
    :definition "Nonlinear Regression is a form of predictive statistical analysis where the relationship between the independent variable(s) and the dependent variable is modeled as a nonlinear function. Unlike linear regression, nonlinear regression can model scenarios where the change in the dependent variable for unit changes in the predictors is not a constant, allowing it to capture more complex relationships in the data." ;
    :kb-article """## How it works
Nonlinear regression begins with a set of observations and a hypothesized model that represents a nonlinear relationship between variables. The model contains parameters, often unknown, which need to be estimated from the data. Using iterative techniques, the parameters of the model are adjusted to minimize the sum of the squared deviations between the observed and predicted values, a measure of the model's error. Common techniques for this iterative process include the Levenberg-Marquardt and Gauss-Newton algorithms.

The model's adequacy is evaluated based on criteria such as the residual sum of squares, the Akaike Information Criterion, or the Bayesian Information Criterion. After the model's parameters have been optimized and the model's adequacy validated, it can be used for prediction, analysis of variable effects, or experimental design.

## Considerations 
* Choice of Model: The model's form must be chosen carefully, as an incorrect model can lead to poor predictions and incorrect conclusions.
* Starting Values: Nonlinear regression requires initial starting values for its parameters. The choice of these values can influence the convergence of the algorithm.
* Convergence: Unlike linear regression, there is no guarantee that the nonlinear regression algorithm will converge to the globally optimal solution. It may get stuck in a local minimum.
* Overfitting: Nonlinear regression models, due to their complexity, are more prone to overfitting. Care must be taken to ensure the model generalizes well to unseen data.

## References 
1. Seber, G.A.F., & Wild, C.J. (1989). Nonlinear regression. Wiley.
   [Wiley Online Library](https://onlinelibrary.wiley.com/doi/book/10.1002/9780471724882)
2. Draper, N., & Smith, H. (1998). Applied regression analysis. Wiley.
   [Wiley Online Library](https://onlinelibrary.wiley.com/doi/book/10.1002/9781118625590)
3. Nonlinear regression analysis and its applications. Bates, D.M., & Watts, D.G. (1988). Wiley.
   [Wiley Online Library](https://onlinelibrary.wiley.com/doi/book/10.1002/9780470316757)
4. "Nonlinear Regression" from PennState's STAT 501 course.
   [Online Course Material](https://online.stat.psu.edu/stat501/lesson/1/1.1)""" .

:NonlinearRegressionLearning a owl:Class ;
    rdfs:label "Nonlinear Regression Learning" ;
    rdfs:subClassOf :RegressionAnalysisLearning .

:NTFSHardLink a owl:Class ;
    rdfs:label "NTFS Hard Link" ;
    rdfs:subClassOf :HardLink,
        :NTFSLink ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/NTFS_links> ;
    :definition "An NTFS hard link points to another file, and files share the same MFT entry (inode), in the same filesystem." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Hard_link> .

:NTFSJunctionPoint a owl:Class ;
    rdfs:label "NTFS Junction Point" ;
    skos:altLabel "Junction Point" ;
    rdfs:subClassOf :NTFSLink,
        :SymbolicLink ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/NTFS_links> ;
    :definition "NTFS junction points are are similar to NTFS symlinks but are defined only for directories. Only accepts local absolute paths." .

:NTFSLink a owl:Class ;
    rdfs:label "NTFS Link" ;
    rdfs:subClassOf :File,
        :FileSystemLink ;
    :definition "The NTFS filesystem defines various ways to link files, i.e. to make a file point to another file or its contents. The object being pointed to is called the target. There are three classes of NTFS links: (a) Hard links, which have files share the same MFT entry (inode), in the same filesystem; (b) Symbolic links, which record the path of another file that the links contents should show and can accept relative paths; and (c) Junction points, which are similar to symlinks but defined only for directories and only accepts local absolute paths" .

:NTFSSymbolicLink a owl:Class ;
    rdfs:label "NTFS Symbolic Link" ;
    skos:altLabel "NTFS Symlink" ;
    rdfs:subClassOf :NTFSLink,
        :SymbolicLink ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/NTFS_links> ;
    :definition "An NTFS symbolic link records the path of another file that the links contents should show. Can accept relative paths. SMB networking (UNC path) and directory support added in NTFS 3.1." .

:NumericPatternMatching a owl:Class ;
    rdfs:label "Numeric Pattern Matching" ;
    rdfs:subClassOf :PatternMatching .

:ObjectFile a owl:Class ;
    rdfs:label "Object File" ;
    rdfs:subClassOf :File ;
    :comment "This is the most general category of files that contain 'objects' for execution, but they themselves are not generally the primary target for execution, an d3f:ExecutableBinaryFile usually references these files to load and execute their objects." ;
    :definition "An object file is a file that contains relocatable machine code." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Object_file> ;
    :todo "Fix IRI to fix 'i' in \"File\" substring of IRI" .

:OffensiveTactic a owl:Class ;
    rdfs:label "Offensive Tactic" ;
    rdfs:subClassOf :ATTACKThing,
        [ a owl:Restriction ;
            owl:onProperty :enabled-by ;
            owl:someValuesFrom :OffensiveTechnique ] ;
    rdfs:isDefinedBy <https://attack.mitre.org/docs/ATTACK_Design_and_Philosophy_March_2020.pdf> ;
    :definition "Per ATT&CK, these are defined as Tactical Goals, not Tactics per se. Many children also fit definition of tactics.  Some are neither tactics or tactical goals really (e.g., Execution, which is a useful grouping, but an action, not really a tactic or technique." .

:OffensiveTechnique a owl:Class ;
    rdfs:label "Offensive Technique" ;
    rdfs:subClassOf :ATTACKThing,
        :Technique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :OffensiveTactic ] ;
    rdfs:isDefinedBy <https://attack.mitre.org/docs/ATTACK_Design_and_Philosophy_March_2020.pdf> ;
    :display-baseurl "/offensive-technique/attack/" .

:OfficeApplication a owl:Class ;
    rdfs:label "Office Application" ;
    rdfs:subClassOf :UserApplication ;
    :definition "An office application is one that is part of an application suite (e.g., Microsoft Office, Open Office)." .

:OfficeApplicationFile a owl:Class ;
    rdfs:label "Office Application File" ;
    rdfs:subClassOf :DocumentFile ;
    :definition "A document file in a format associated with an d3f:OfficeApplication." ;
    rdfs:seeAlso "d3f:OfficeApplication" .

:One-timePassword a :CredentialHardening,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "One-time Password" ;
    rdfs:subClassOf :CredentialHardening,
        [ a owl:Restriction ;
            owl:onProperty :authenticates ;
            owl:someValuesFrom :UserAccount ],
        [ a owl:Restriction ;
            owl:onProperty :use-limits ;
            owl:someValuesFrom :Password ] ;
    :d3fend-id "D3-OTP" ;
    :definition "A one-time password is valid for only one user authentication." ;
    :kb-article """## How it works

When a user initiates authentication, they are asked for a one-time password, often in addition to other credentials such as a traditional password or smart card. The one-time password may be from a list provided in advance, sent via a channel such as SMS or HTTPS to an app, or a generated token.

In the case of a physical token which generates one-time passwords incrementally based on time elapsed, that token device need not be connected to the internet. In different implementations, an administrator of the system, or a user with additional verification, can adjust for clock skew between the token and the verification system as needed.

## Considerations

### Compromise of delivery channel
- SIM Swapping
- Secure token visual compromise
- Insecure delivery channel

### Compromise of delivery device
Physical loss of One-time Password device.

### Compromise of long-term backup codes
These are often provided in the form of a downloadable document with a regular name, which can be searched for in the case that the user forgets where they put them.  This digital file or printed document could be stolen.
Additionally, after the code file is printed, it could be recovered from the system printer spool unless the spooler cache is cleared.""" ;
    :kb-reference :Reference-RFC2289-AOne-TimePasswordSystem ;
    rdfs:seeAlso <http://dbpedia.org/resource/One-time_password> ;
    :synonym "OTP" .

:Open-sourceDeveloper a owl:Class ;
    rdfs:label "Open-source Developer" ;
    rdfs:subClassOf :ProductDeveloper .

:OpenFile a owl:Class ;
    rdfs:label "Open File" ;
    rdfs:subClassOf :SystemCall,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :File ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Open_(system_call)> ;
    :definition "For most file systems, a program initializes access to a file in a file system using the open system call. This allocates resources associated to the file (the file descriptor), and returns a handle that the process will use to refer to that file. In some cases the open is performed by the first access. During the open, the filesystem may allocate memory for buffers, or it may wait until the first operation. Various other errors which may occur during the open include directory update failures, un-permitted multiple connections, media failures, communication link failures and device failures." .

:OpenSourceLicense a owl:Class ;
    rdfs:label "Open Source License" ;
    rdfs:subClassOf :License ;
    :todo "May want to further distinguish free beer/free speech [free use/true open source].  This is also maddeningly true of some nice services which provide APIs but not the platform behind the APIs.  Maybe not critical for sponsors as no free beer would be considered?  But not all users are sponsors." .

:OperatingSystem a owl:Class ;
    rdfs:label "Operating System" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :Kernel ],
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :SystemServiceSoftware ],
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :OperatingSystemConfigurationComponent ] ;
    :definition "An operating system (OS) is system software that manages computer hardware and software resources and provides common services for computer programs. All computer programs, excluding firmware, require an operating system to function. Time-sharing operating systems schedule tasks for efficient use of the system and may also include accounting software for cost allocation of processor time, mass storage, printing, and other resources." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Operating_system> .

:OperatingSystemConfiguration a owl:Class ;
    rdfs:label "Operating System Configuration" ;
    rdfs:subClassOf :ConfigurationResource ;
    :definition "Information used to configure the services, parameters, and initial settings for an operating system." .

:OperatingSystemConfigurationComponent a owl:Class ;
    rdfs:label "Operating System Configuration Component" ;
    skos:altLabel "Operating System Configuration Information",
        "System Configuration" ;
    rdfs:subClassOf :OperatingSystemConfiguration ;
    :definition "An component of the overall information necessary for the configuration of an operating system." ;
    rdfs:seeAlso <http://wordnet-rdf.princeton.edu/id/03085025-n> .

:OperatingSystemConfigurationFile a owl:Class ;
    rdfs:label "Operating System Configuration File" ;
    skos:altLabel "System Configuration File" ;
    rdfs:subClassOf :ConfigurationFile,
        :OperatingSystemFile ;
    :comment "System configuration files configure system-wide software and services, as well as the operating system which supports scheduling and executing this software, as well as the configuration of peripherals." ;
    :definition "An operating system configuration file is a file used to configure the operating system." ;
    rdfs:seeAlso "Configuration File",
        "Operating System",
        <http://dbpedia.org/resource/Configuration_file> .

:OperatingSystemExecutableFile a owl:Class ;
    rdfs:label "Operating System Executable File" ;
    rdfs:subClassOf :OperatingSystemFile ;
    :definition "An operating system executable is a critical executable that is part of the operating system, and without which, the operating system may not operate correctly." .

:OperatingSystemFile a owl:Class ;
    rdfs:label "Operating System File" ;
    rdfs:subClassOf :File ;
    :definition "An operating system file is a file that is part of, or used to store information about, the operating system itself." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Operating_system>,
        <http://dbpedia.org/resource/System_file> .

:OperatingSystemLogFile a owl:Class ;
    rdfs:label "Operating System Log File" ;
    rdfs:subClassOf :LogFile,
        :OperatingSystemFile ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Log_file> ;
    :definition "An operating system log file records events that occur in an operating system" ;
    rdfs:seeAlso "Log File" .

:OperatingSystemMonitoring a owl:Class,
        owl:NamedIndividual,
        :PlatformMonitoring ;
    rdfs:label "Operating System Monitoring" ;
    rdfs:subClassOf :PlatformMonitoring ;
    :d3fend-id "D3-OSM" ;
    :definition "The operating system software, for D3FEND's purposes, includes the kernel and its process management functions, hardware drivers, initialization or boot logic. It also includes and other key system daemons and their configuration. The monitoring or analysis of these components for unauthorized activity constitute **Operating System Monitoring**." ;
    :enables :Detect ;
    :kb-article """## Technique Overview

"An operating system (OS) is system software that manages computer hardware and software resources and provides common services for computer programs." [1]

Operating System Monitoring Techniques have varied implementations including built-in kernel modules, third-party privileged system daemons, or even standard systems administration tools included with an operating system.

1. http://dbpedia.org/resource/Operating_system""" ;
    :kb-reference :Reference-HostIntrusionPreventionSystemUsingSoftwareAndUserBehaviorAnalysis_SophosLtd,
        :Reference-UserActivityFromClearingEventLogs_MITRE .

:OperatingSystemPackagingTool a owl:Class ;
    rdfs:label "Operating System Packaging Tool" ;
    rdfs:subClassOf :SoftwarePackagingTool ;
    :definition "A software packaging tool oriented on building a software package for a particular operating system (e.g. rpmbuild.)" .

:OperatingSystemProcess a owl:Class ;
    rdfs:label "Operating System Process" ;
    skos:altLabel "System Process" ;
    rdfs:subClassOf :Process ;
    :definition "An operating system process, or system process, is a process running to perform operating system functions." ;
    rdfs:seeAlso <http://people.scs.carleton.ca/~maheshwa/courses/300/l4/node7.html> .

:OperatingSystemSharedLibraryFile a owl:Class ;
    rdfs:label "Operating System Shared Library File" ;
    rdfs:subClassOf :OperatingSystemFile,
        :SharedLibraryFile ;
    :definition "An operating system shared library file is a shared library file that is part of the operating system and that incorporates common operating system code for use by any application or to provide operating system services." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Library_(computing)#Shared_libraries> .

:OperationalActivityMapping a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Operational Activity Mapping" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Model ] ;
    :d3fend-id "D3-OAM" ;
    :definition "Identifying staff and organizational structure is part of operational activity mapping.  One inventories assets; people are *not* assets, but are resources.  Grasping operations and activities (missions) and mapping them to people is (notionally) last phase of modeling architecture.",
        "Operational activity mapping identifies activities of the organization and the organization's suborganizations, groups, roles, and individuals that carry out the activities and then establishes the dependencies of the activities on the systems and people that perform those activities." ;
    :kb-reference :Reference-CatiaUAFPlugin ;
    :synonym "Mission Mapping" .

:OperationalDependencyMapping a :OperationalActivityMapping,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Operational Dependency Mapping" ;
    rdfs:subClassOf :OperationalActivityMapping,
        [ a owl:Restriction ;
            owl:onProperty :maps ;
            owl:someValuesFrom :Dependency ],
        [ a owl:Restriction ;
            owl:onProperty :maps ;
            owl:someValuesFrom :OrganizationalActivity ] ;
    :d3fend-id "D3-ODM" ;
    :definition "Operational dependency mapping identifies and models the dependencies of the organization's activities on each other and on the organization's performers (people, systems, and services.)  This may include modeling the higher- and lower-level activities of an organization forming a hierarchy, or layering, of the dependencies in an organization's activities." ;
    :kb-reference :Reference-CatiaUAFPlugin,
        :Reference-CyberCommandSystemCYCS,
        :Reference-DaggerFactSheet,
        :Reference-DaggerModelingAndVisualizationForMissionImpactSituationalAwareness,
        :Reference-MissionDependencyModelingForCyberSituationalAwareness,
        :Reference-UnifiedArchitectureFrameworkUAF .

:OperationalRiskAssessment a :OperationalActivityMapping,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Operational Risk Assessment" ;
    rdfs:subClassOf :OperationalActivityMapping,
        [ a owl:Restriction ;
            owl:onProperty :evaluates ;
            owl:someValuesFrom :Organization ],
        [ a owl:Restriction ;
            owl:onProperty :identifies ;
            owl:someValuesFrom :Vulnerability ] ;
    :d3fend-id "D3-ORA" ;
    :definition "Operational risk assessment identifies and models the vulnerabilities of, and risks to, an organization's activities individually and as a whole." ;
    :kb-reference :Reference-MGT516ManagingSecurityVulnerabilitiesEnterpriseAndCloud,
        :Reference-NIST-RMF-Quick-Start-Guide-Assess-Step-FAQ,
        :Reference-NIST-Special-Publication-800-37-Revision-2,
        :Reference-NIST-Special-Publication-800-53A-Revision-5,
        :Reference-NIST-Special-Publication-800-160-Volume-1,
        :Reference-NISTIR-8011-Volume-1 ;
    :synonym "Mission Risk Assessment" .

:OperationsCenterComputer a owl:Class ;
    rdfs:label "Operations Center Computer" ;
    skos:altLabel "Mainframe" ;
    rdfs:subClassOf :SharedComputer ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Mainframe_computer> ;
    :definition "Mainframe computers or mainframes (colloquially referred to as \"big iron\") are computers used primarily by large organizations for critical applications; bulk data processing, such as census, industry and consumer statistics, and enterprise resource planning; and transaction processing. They are larger and have more processing power than some other classes of computers: minicomputers, servers, workstations, and personal computers." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Time-sharing> .

:OpticalModem a owl:Class ;
    rdfs:label "Optical Modem" ;
    rdfs:subClassOf :Modem ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Modem#Optical_modem> ;
    :definition "A modem that connects to a fiber optic network is known as an optical network terminal (ONT) or optical network unit (ONU). These are commonly used in fiber to the home installations, installed inside or outside a house to convert the optical medium to a copper Ethernet interface, after which a router or gateway is often installed to perform authentication, routing, NAT, and other typical consumer internet functions, in addition to \"triple play\" features such as telephony and television service." .

:OrchestrationController a owl:Class ;
    rdfs:label "Orchestration Controller" ;
    rdfs:subClassOf :OrchestrationServer,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :ContainerOrchestrationSoftware ] ;
    :definition "An orchestration server provides orchestration services that automate the configuration, coordination, and management of computer systems and software." .

:OrchestrationServer a owl:Class ;
    rdfs:label "Orchestration Server" ;
    rdfs:subClassOf :Server ;
    :definition "A d3f:Server which is involved with the orchestration of workloads or the execution of orchestrated workloads." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Orchestration_(computing)> .

:OrchestrationWorker a owl:Class ;
    rdfs:label "Orchestration Worker" ;
    rdfs:subClassOf :OrchestrationServer ;
    :definition "A d3f:Server which receives commands from a d3f:OrchestrationController to execute workloads." ;
    rdfs:seeAlso "d3f:OrchestrationController" .

:Organization a owl:Class ;
    rdfs:label "Organization" ;
    rdfs:subClassOf :Agent,
        [ a owl:Restriction ;
            owl:onProperty :has-member ;
            owl:someValuesFrom :Person ] .

:OrganizationalActivity a owl:Class ;
    rdfs:label "Organizational Activity" ;
    rdfs:subClassOf :Activity .

:OrganizationMapping a :OperationalActivityMapping,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Organization Mapping" ;
    rdfs:subClassOf :OperationalActivityMapping,
        [ a owl:Restriction ;
            owl:onProperty :maps ;
            owl:someValuesFrom :Dependency ],
        [ a owl:Restriction ;
            owl:onProperty :maps ;
            owl:someValuesFrom :Organization ],
        [ a owl:Restriction ;
            owl:onProperty :maps ;
            owl:someValuesFrom :Person ],
        [ a owl:Restriction ;
            owl:onProperty :may-map ;
            owl:someValuesFrom :OrganizationalActivity ] ;
    :d3fend-id "D3-OM" ;
    :definition "Organization mapping identifies and models the people, roles, and groups with an organization and the relations between them." ;
    :display-order 4 ;
    :kb-reference :Reference-CatiaUAFPlugin,
        :Reference-OrganizationalManagementInSAPERPHCM,
        :Reference-UnifiedArchitectureFrameworkUAF .

:OutboundInternetDNSLookupTraffic a owl:Class ;
    rdfs:label "Outbound Internet DNS Lookup Traffic" ;
    rdfs:subClassOf :DNSNetworkTraffic,
        :OutboundInternetNetworkTraffic,
        :OutboundNetworkTraffic,
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :DNSLookup ] ;
    :definition "Outbound internet DNS lookup traffic is network traffic using the DNS protocol on an outgoing connection initiated from a host within a network to a host outside the network." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Internetworking> .

:OutboundInternetEncryptedRemoteTerminalTraffic a owl:Class ;
    rdfs:label "Outbound Internet Encrypted Remote Terminal Traffic" ;
    skos:altLabel "Outbound Internet Encrypted RDP Traffic",
        "Outbound Internet Encrypted SSH Traffic" ;
    rdfs:subClassOf :OutboundInternetEncryptedTraffic ;
    :definition "Outbound internet encrypted remote terminal traffic is encrypted network traffic for a standard remote terminal protocol on an outgoing connection initiated from a host within a network to a host outside the network." .

:OutboundInternetEncryptedTraffic a owl:Class ;
    rdfs:label "Outbound Internet Encrypted Traffic" ;
    rdfs:subClassOf :OutboundInternetNetworkTraffic ;
    :definition "Outbound internet encrypted traffic is encrypted network traffic on an outgoing connection initiated from a host within a network to a host outside the network." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Internetworking> .

:OutboundInternetEncryptedWebTraffic a owl:Class ;
    rdfs:label "Outbound Internet Encrypted Web Traffic" ;
    rdfs:subClassOf :OutboundInternetEncryptedTraffic,
        :OutboundInternetWebTraffic ;
    :definition "Outbound internet encrypted web traffic is network traffic using a standard web protocol on an outgoing connection initiated from a host within a network to a host outside the network." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Internetworking> .

:OutboundInternetFileTransferTraffic a owl:Class ;
    rdfs:label "Outbound Internet File Transfer Traffic" ;
    rdfs:subClassOf :FileTransferNetworkTraffic,
        :OutboundInternetNetworkTraffic,
        :OutboundNetworkTraffic,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :File ] ;
    :definition "Outbound internet file transfer traffic is file transfer traffic that is: (a) on an outgoing connection initiated from a host within a network to a host outside the network, and (b) using a standard file transfer protocol." ;
    rdfs:seeAlso <http://dbpedia.org/resource/File_transfer>,
        <http://dbpedia.org/resource/Internetworking> .

:OutboundInternetMailTraffic a owl:Class ;
    rdfs:label "Outbound Internet Mail Traffic" ;
    skos:altLabel "Outbound Internet Email Traffic" ;
    rdfs:subClassOf :OutboundInternetNetworkTraffic ;
    :definition "Outbound internet DNS lookup traffic is network traffic using a standard email protocol on an outgoing connection initiated from a host within a network to a host outside the network." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Internetworking> .

:OutboundInternetNetworkTraffic a owl:Class ;
    rdfs:label "Outbound Internet Network Traffic" ;
    rdfs:subClassOf :InternetNetworkTraffic,
        :OutboundNetworkTraffic ;
    :definition "Outbound internet network traffic is network traffic on an outgoing connection initiated from a host within a network to a host outside the network." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Internetworking> .

:OutboundInternetRPCTraffic a owl:Class ;
    rdfs:label "Outbound Internet RPC Traffic" ;
    rdfs:subClassOf :OutboundInternetNetworkTraffic,
        :OutboundNetworkTraffic,
        :RPCNetworkTraffic ;
    :definition "Outbound internet RPC traffic is RPC traffic that is: (a) on an outgoing connection initiated from a host within a network to a host outside the network, and (b) using a standard RPC protocol." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Internetworking>,
        <http://dbpedia.org/resource/Remote_procedure_call> .

:OutboundInternetWebTraffic a owl:Class ;
    rdfs:label "Outbound Internet Web Traffic" ;
    rdfs:subClassOf :OutboundInternetNetworkTraffic,
        :WebNetworkTraffic,
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :URL ] ;
    :definition "Outbound internet web traffic is network traffic that is: (a) on an outgoing connection initiated from a host within a network to a host outside the network, and (b) using a standard web protocol." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Internetworking> .

:OutboundNetworkTraffic a owl:Class ;
    rdfs:label "Outbound Network Traffic" ;
    rdfs:subClassOf :NetworkTraffic ;
    :definition "Outbound traffic is network traffic originating from a host of interest (client), to another host (server)." .

:OutboundTrafficFiltering a :NetworkTrafficFiltering,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Outbound Traffic Filtering" ;
    rdfs:subClassOf :NetworkTrafficFiltering,
        [ a owl:Restriction ;
            owl:onProperty :filters ;
            owl:someValuesFrom :OutboundNetworkTraffic ] ;
    :d3fend-id "D3-OTF" ;
    :definition "Restricting network traffic originating from a private host or enclave destined towards untrusted networks." ;
    :kb-article """## How it works

Outbound traffic, in this context, is network traffic originating from a private host or enclave destined towards untrusted networks.
For example:

* An enterprise desktop intranet user connecting to www.example.com
* An internal mail server connecting to an external mail server, mail.example.com

Filtering is commonly implemented as firewall rulesets to limit outbound traffic permitted to egress a host or network. Firewalls are deployed either directly on hosts through kernel level software implementations or installed in-line directly on network links. There are benefits and disadvantages to each approach.

There are various strategies for developing filtering rulesets:

* Block everything by default
* Limit destination hosts
* Limit destination transport or application protocols
* Restrict content outbound (Ex. strings formatted as social security numbers, or proprietary data)

## Considerations
* Dynamic IP assignment creates challenges for Outbound Traffic Filtering because users are not necessarily associated with the same IP address. This can be addressed by linking IP address management information with the filtering logic.
* Connections using non-standard transport layer ports may circumvent outbound traffic filtering technology which does not detect application protocol based on traffic content.
* Business requirements typically drive the development of filtering rule sets.

## Implementations
- iptables (Linux)
- Windows Firewall
- pf (BSD)""" ;
    :kb-reference :Reference-AutomaticallyGeneratingRulesForConnectionSecurity_Microsoft .

:OutputDevice a owl:Class ;
    rdfs:label "Output Device" ;
    rdfs:subClassOf :HardwareDevice ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Output_device> ;
    :definition "An output device is any piece of computer hardware equipment which converts information into human-readable form. It can be text, graphics, tactile, audio, and video. Some of the output devices are Visual Display Units (VDU) i.e. a Monitor, Printer, Graphic Output devices, Plotters, Speakers etc. A new type of Output device is been developed these days, known as Speech synthesizer, a mechanism attached to the computer which produces verbal output sounding almost like human speeches." .

:OWL a owl:Class ;
    rdfs:label "OWL" ;
    rdfs:subClassOf :DescriptionLogic ;
    :definition "A family of knowledge representation languages for authoring ontologies. Ontologies are a formal way to describe taxonomies and classification networks, essentially defining the structure of knowledge for various domains: the nouns representing classes of objects and the verbs representing relations between the objects." ;
    :kb-article """## How it works
_TBD enter text here for how the thing works_

## Considerations 

## References 
- https://en.wikipedia.org/wiki/Web_Ontology_Language""" .

:PacketLog a owl:Class ;
    rdfs:label "Packet Log" ;
    rdfs:subClassOf :Log,
        [ a owl:Restriction ;
            owl:onProperty :records ;
            owl:someValuesFrom :NetworkSession ] ;
    :definition "A log of all the network packet data captured from a network by a network sensor (i.e., packet analyzer)," ;
    rdfs:seeAlso <http://dbpedia.org/resource/Packet_analyzer> .

:Page a owl:Class ;
    rdfs:label "Page" ;
    rdfs:subClassOf :MemoryBlock ;
    rdfs:isDefinedBy "https://dbpedia.org/page/Page_(computer_memory)" ;
    :definition "A page, memory page, logical page, or virtual page is a fixed-length contiguous block of virtual memory, described by a single entry in the page table. It is the smallest unit of data for memory management in a virtual memory operating system." .

:PageFrame a owl:Class ;
    rdfs:label "Page Frame" ;
    rdfs:subClassOf :MemoryBlock,
        [ a owl:Restriction ;
            owl:onProperty :contained-by ;
            owl:someValuesFrom :PrimaryStorage ] ;
    rdfs:isDefinedBy "https://dbpedia.org/page/Page_(computer_memory)" ;
    :definition "A page frame is the smallest fixed-length contiguous block of physical memory into which memory pages are mapped by the operating system." .

:PageTable a owl:Class ;
    rdfs:label "Page Table" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :PhysicalAddress ],
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :VirtualAddress ] ;
    rdfs:isDefinedBy "Page table – Wikipedia" ;
    :definition "A page table  is the data structure used by the MMU in a virtual memory computer system  to store the mapping between virtual addresses (virtual pages) and physical addresses (page frames)." .

:Parameter-basedTransferLearning a owl:Class ;
    rdfs:label "Parameter-based Transfer Learning" ;
    rdfs:subClassOf :HomogenousTransferLearning ;
    :definition "Parameter-Based Transfer Learning is a machine learning technique wherein a pre-trained model, optimized on a large, diverse dataset, is adapted for a specific task by modifying its parameters. It leverages the learned representations from the source task to enhance the performance on the target task, even when the amount of data for the latter is limited. This form of transfer learning allows us to utilize the knowledge gained from one domain to improve learning in another." ;
    :kb-article """## How it Works
In Parameter-Based Transfer Learning, the initial layers of a pre-trained model, often trained on a large-scale dataset, are used as the starting point for a new model. These layers have already learned to identify general features, such as edges and shapes in the case of image data, which are common across various tasks. 

The process involves two main steps - pre-training and fine-tuning. In the pre-training step, the model is trained on a large source dataset, often with millions of samples. The objective here is to learn generic features and representations that can be applicable across different tasks. In the fine-tuning step, the model is further trained on a smaller, task-specific target dataset. Here, the weights from the pre-training phase serve as the initial parameters, and then are adjusted via backpropagation and gradient descent based on the target task. The depth of layers adjusted during fine-tuning can vary based on the similarity between the source and target tasks, and the amount of target task data available.

## Considerations
- **Data similarity**: The source and target tasks need to be somewhat related, i.e., the knowledge learned from the source task should be applicable to the target task.
- **Size of the target dataset**: If the target task dataset is small, fine-tuning should involve fewer layers to prevent overfitting.
- **Computational resources**: Transfer learning can save computational resources by reusing pre-trained models, but fine-tuning them still requires considerable computational power and time.
- **Task complexity**: The effectiveness of transfer learning is determined by the complexity of the task. For highly complex tasks, a model trained from scratch may be more effective.

## References
1. [A Comprehensive Hands-on Guide to Transfer Learning with Real-World Applications in Deep Learning](https://towardsdatascience.com/a-comprehensive-hands-on-guide-to-transfer-learning-with-real-world-applications-in-deep-learning-212bf3b2f27a)
2. [Transfer Learning - Machine Learning's Next Frontier](http://ruder.io/transfer-learning/)
3. [How transferable are features in deep neural networks?](https://arxiv.org/abs/1411.1792)
4. [Learning Transferable Features with Deep Adaptation Networks](https://arxiv.org/abs/1502.02791)""" .

:ParametricTests a owl:Class ;
    rdfs:label "Parametric Tests" ;
    rdfs:subClassOf :HypothesisTesting .

:ParentProcess a owl:Class ;
    rdfs:label "Parent Process" ;
    rdfs:subClassOf :Process ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Parent_process> ;
    :definition "In computing, a parent process is a process that has created one or more child processes." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Child_process> .

:PartialMatching a owl:Class ;
    rdfs:label "Partial Matching" ;
    rdfs:subClassOf :StringPatternMatching ;
    owl:disjointWith :StringEquivalenceMatching ;
    :definition "Partial String Pattern Matching is a subfield of pattern matching where one seeks to find a smaller string (pattern) within a larger string (text). It allows for the detection of patterns that occur as substrings or partial segments within the full string, rather than requiring an exact match across the entire string." ;
    :kb-article """## How it works
Partial String Pattern Matching functions by sliding a window of the smaller string's length along the larger string, comparing the characters at each position. When the smaller string's characters match those in the 'window' of the larger string, a match is declared. This technique could be as simple as checking character by character or could involve more complex algorithms like KMP (Knuth-Morris-Pratt) or Boyer-Moore, which offer more efficient searching by leveraging information about the pattern to skip sections of the text.

For instance, consider the larger string as 'Hello World' and smaller string as 'World'. The process begins from the first character of the larger string and moves window of length 'World' along it. It stops when it finds a substring in the larger string that matches the smaller string.

## Considerations 
- **Efficiency:** Different pattern matching algorithms offer different efficiencies, measured in terms of time complexity. More straightforward methods may be fine for smaller datasets, but for larger strings, it would be advisable to use algorithms like KMP or Boyer-Moore.
- **Partial match criteria:** It's important to define what constitutes a 'partial match'. Is a single character enough, or does a certain percentage of the smaller string need to match?
- **Case sensitivity:** Depending on the specific use case, one might want to consider whether the pattern matching should be case sensitive or not.
- **Special Characters and Whitespace:** These can affect matches, particularly in more complex patterns. Clear rules should be set for how they are to be handled.

## References 
1. Navarro, Gonzalo. "A guided tour to approximate string matching." ACM computing surveys (CSUR) 33.1 (2001): 31-88. [Link](https://dl.acm.org/doi/10.1145/375360.375365)
2. Hume, A., Sunday, D. "Fast string searching." Software: Practice and Experience 21.11 (1991): 1221-1248. [Link](https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.4380211105)
3. "Pattern Matching" - Stanford University. [Link](https://web.stanford.edu/class/archive/cs/cs106b/cs106b.1134/materials/cppdoc/PatternMatching-functions.html)""" .

:ParticleSwarmOptimization a owl:Class ;
    rdfs:label "Particle Swarm Optimization" ;
    rdfs:subClassOf :Nature-inspiredOptimizationAlgorithm .

:Partition a owl:Class ;
    rdfs:label "Partition" ;
    skos:altLabel "Disk Partition",
        "Disk Slice" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Disk_partitioning> ;
    :definition "A partition is a region on secondary storage device created so that the region can be managed by itself; separate from any other regions (partitions) on that secondary storage device. Creating partitions is typically the first step of preparing a newly installed storage device, before any file system is created. The device stores the information about the partitions' locations and sizes in an area known as the partition table that the operating system reads before any other part of the disk. Each partition then appears to the operating system as a distinct \"logical\" storage device that uses part of the actual device. System administrators use a program called a partition editor to create, resize, delete, and manipulate the partitions. Partitioning allows the use of different filesystems to be installed for different kinds of files. Separating user data from system data can prevent the system partition from becoming full and rendering the system unusable. Partitioning can also make backing up easier. [Definition adapted as generalization from definition of disk partitioning and distinct from in-memory partitions.]" ;
    rdfs:seeAlso <http://dbpedia.org/resource/Memory_management_(operating_systems)>,
        <http://dbpedia.org/resource/Partition_table> .

:PartitionTable a owl:Class ;
    rdfs:label "Partition Table" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :addresses ;
            owl:someValuesFrom :Partition ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Partition_table> ;
    :definition "A partition is a fixed-size subset of a storage device which is treated as a unit by the operating system. A partition table is a table maintained on the storage device by the operating system describing the partitions on that device. The terms partition table and partition map are most commonly associated with the MBR partition table of a Master Boot Record (MBR) in IBM PC compatibles, but it may be used generically to refer to other \"formats\" that divide a disk drive into partitions, such as: GUID Partition Table (GPT), Apple partition map (APM), or BSD disklabel." .

:PassiveCertificateAnalysis a :CertificateAnalysis,
        owl:Class,
        owl:NamedIndividual,
        :PassiveCertificateAnalysis ;
    rdfs:label "Passive Certificate Analysis" ;
    rdfs:subClassOf :CertificateAnalysis ;
    :d3fend-id "D3-PCA" ;
    :definition "Collecting host certificates from network traffic or other passive sources like a certificate transparency log and analyzing them for unauthorized activity.",
        "Passively collecting certificates and analyzing them." ;
    :kb-article """## How it works
Certificates are analyzed outside of a TLS server connection using third-party secure update logs, domain name analysis and analytics.

### Secure update certificate logs
* Certificate Logs
The key enabling feature is a secure service that maintains record logs of certificate activities. The logs allow users to only append certificates and never to delete or modify the log entries. The logs use Merkle Tree Hashes to ensure they have not been tampered with. The logging service also allows for public auditing by any user.

The logging service, upon receipt of a certificate to log, will respond with a signed certificate timestamp (SCT). The SCT guarantees the certificate will be added to the log within the time specified. The SCT must be present with the certificate during a TLS handshake.

* Certificate Monitoring
Certificate monitoring, of the logs, is typically done by the CA and they watch for suspicious certificate logging and unusual certificates or extensions or permissions. Monitors are also responsible for verifying the logs are accurate and public.

* Certificate Auditors
Log integrity is verified by log auditors. Auditors make use of log proofs are used to validate the cryptographic hashes (Merkle Trees) that the log employs are consistent. In order to ensure consistency throughout multiple monitors and auditors, sharing a common logging service, gossip protocol is employed.

### Phishing domain name analysis
* A curated corpus of known benign domains and phishing domain names is used as training text for machine learning. Through the use of feature set extraction, vectors labels are created with scoring to indicated if they are considered benign or phishing domains.

* A stream of new or updated SSL certificates with fully qualified domain names (FQDN) is analyzed against the feature vectors and a predictive model determines a score for the domains. The scoring considers distance measures such as Levenshtein distance to help in determining the final label score. Supervised learning is also employed using the curated domains of benign and phishing domains.

* Subdomain phishing analysis, prepending a trusted domain to a phishing domain, and regular expression comparisons  are also used in the label scoring model. A tunable measure is used to determine the threshold for alerting. This measure helps to balance between precision and recall measures.

## Considerations
* Some entity will need to run the logging service and a trusted entity is preferred.
* Certificate Authorities will likely need to monitor the logging service for consistency.
* Certificate revocation is unchanged and remains outside of Certificate Transparency, but certificates needing to be revoked are visible.
* Technique dependent of reliable feed of new and updated certificates
* Some certificate authorities allow for certificates to be registered with wildcards in the FQDN and thus will fail some of the subdomain scoring
* Phishing HTTP domains will not be discovered""" ;
    :kb-reference :Reference-CertificateTransparency,
        :Reference-StreamingPhish .

:PassiveLogicalLinkMapping a :LogicalLinkMapping,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Passive Logical Link Mapping" ;
    rdfs:subClassOf :LogicalLinkMapping ;
    :d3fend-id "D3-PLLM" ;
    :definition "Passive logical link mapping only listens to network traffic as a means to map the the whole data link layer, where the links represent logical data flows rather than physical connections." ;
    :kb-reference :Reference-TenablePassiveNetworkMonitoring ;
    :synonym "Passive Logical Layer Mapping" .

:PassivePhysicalLinkMapping a owl:Class,
        owl:NamedIndividual,
        :PhysicalLinkMapping ;
    rdfs:label "Passive Physical Link Mapping" ;
    rdfs:subClassOf :PhysicalLinkMapping ;
    :d3fend-id "D3-PPLM" ;
    :definition "Passive physical link mapping only listens to network traffic as a means to map the physical layer." ;
    :synonym "Passive Physical Layer Mapping" .

:Password a owl:Class ;
    rdfs:label "Password" ;
    skos:altLabel "Passcode" ;
    rdfs:subClassOf :Credential ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Password> ;
    :definition "A password, sometimes called a passcode, is a memorized secret, typically a string of characters, usually used to confirm the identity of a user. Using the terminology of the NIST Digital Identity Guidelines, the secret is memorized by a party called the claimant while the party verifying the identity of the claimant is called the verifier. When the claimant successfully demonstrates knowledge of the password to the verifier through an established authentication protocol, the verifier is able to infer the claimant's identity." .

:PasswordDatabase a owl:Class ;
    rdfs:label "Password Database" ;
    rdfs:subClassOf :Database ;
    :definition "A password database is a database that holds passwords for user accounts and is usually encrypted (i.e.., the passwords are hashed). Password databases are found supporting system services (such as SAM) or part of user applications such as password managers." .

:PasswordFile a owl:Class ;
    rdfs:label "Password File" ;
    rdfs:subClassOf :File,
        :PasswordDatabase ;
    :definition "Simple form of password database held in a single file (e.g., /etc/password)" .

:PasswordManager a owl:Class ;
    rdfs:label "Password Manager" ;
    rdfs:subClassOf :Application ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Password_manager> ;
    :definition "A password manager is a software application or hardware that helps a user store and organize passwords. Password managers usually store passwords encrypted, requiring the user to create a master password: a single, ideally very strong password which grants the user access to their entire password database. Some password managers store passwords on the user's computer (called offline password managers), whereas others store data in the provider's cloud (often called online password managers). However offline password managers also offer data storage in the user's own cloud accounts rather than the provider's cloud. While the core functionality of a password manager is to securely store large collections of passwords, many provide additional features such as form filling and password generation." .

:PasswordStore a owl:Class ;
    rdfs:label "Password Store" ;
    rdfs:subClassOf :PasswordDatabase ;
    :definition "A user repository of account passwords, often accessed via a password manager." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Password_manager> .

:Patent a owl:Class,
        owl:NamedIndividual,
        :ReferenceType ;
    rdfs:label "Patent" ;
    rdfs:subClassOf :Document .

:PatentReference a owl:Class ;
    rdfs:label "Patent Reference" ;
    rdfs:subClassOf :TechniqueReference ;
    :pref-label "Patent" .

:PatternMatching a owl:Class ;
    rdfs:label "Pattern Matching" ;
    rdfs:subClassOf :LogicalRules .

:PearsonsCorrelationCoefficient a owl:Class ;
    rdfs:label "Pearson's Correlation Coefficient" ;
    rdfs:subClassOf :Correlation .

:PerHostDownload-UploadRatioAnalysis a :NetworkTrafficAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Per Host Download-Upload Ratio Analysis" ;
    rdfs:subClassOf :NetworkTrafficAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :NetworkTraffic ] ;
    :d3fend-id "D3-PHDURA" ;
    :definition "Detecting anomalies that indicate malicious activity by comparing the amount of data downloaded versus data uploaded by a host." ;
    :kb-article """## How it works
Aggregate pull vs. push ratios from metadata are used to develop a baseline for a given host over a specific time period, e.g., over a three-hour period, one day, one week, etc. Anomalies identified over a threshold produce an alert.

## Considerations
Collection and analysis of large network packet captures requires large storage and intensive computing power. The time windows used to calculate the ratio may vary in implementations, this consideration should take into account a threat model and likely effects (impacts) delivered by an adversary.""" ;
    :kb-reference :Reference-SystemForDetectingThreatsUsingScenario-basedTrackingOfInternalAndExternalNetworkTraffic_VECTRANETWORKSInc .

:PeripheralFirmware a owl:Class ;
    rdfs:label "Peripheral Firmware" ;
    rdfs:subClassOf :Firmware ;
    :definition "Firmware that is installed on computer peripheral devices." ;
    rdfs:seeAlso :Firmware,
        <http://dbpedia.org/resource/Peripheral> .

:PeripheralFirmwareVerification a :FirmwareVerification,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Peripheral Firmware Verification" ;
    rdfs:subClassOf :FirmwareVerification,
        [ a owl:Restriction ;
            owl:onProperty :verifies ;
            owl:someValuesFrom :PeripheralFirmware ] ;
    :d3fend-id "D3-PFV" ;
    :definition "Cryptographically verifying peripheral firmware integrity." ;
    :kb-article """# How it works
Peripherial firmware is collected and  analyzed on a host either periodically or on demand. This information may be collected for future comparisons.

Changes in firmware hash values may indicate that the firmware has been tampered with or that firmware images are not maintained to current baselined versions, or even known vulnerable versions are deployed.

## Considerations
* Trust baselines will need to be generated for specific devices
* Changes to trusted configurations will need to be managed across the enterprise""" ;
    :kb-reference :Reference-FirmwareVerificationEclypsium,
        :Reference-FirmwareVerificationTrapezoid .

:PeripheralHubFirmware a owl:Class ;
    rdfs:label "Peripheral Hub Firmware" ;
    skos:altLabel "USB Hub Firmware" ;
    rdfs:subClassOf :PeripheralFirmware ;
    :definition "Firmware that is installed on peripheral hub device such as a USB or Firewire hub." ;
    rdfs:seeAlso <http://dbpedia.org/resource/USB_hub> .

:Persistence a :OffensiveTactic,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Persistence" ;
    rdfs:subClassOf :OffensiveTactic ;
    :display-order 3 .

:PersistenceTechnique a owl:Class ;
    rdfs:label "Persistence Technique" ;
    rdfs:subClassOf :OffensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Persistence ] .

:Person a owl:Class ;
    rdfs:label "Person" ;
    rdfs:subClassOf :Agent,
        [ a owl:Restriction ;
            owl:onProperty :name ;
            owl:someValuesFrom xsd:string ] .

:PersonalComputer a owl:Class ;
    rdfs:label "Personal Computer" ;
    rdfs:subClassOf :ClientComputer ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Personal_computer> ;
    :definition "A personal computer (PC) is a multi-purpose computer whose size, capabilities, and price make it feasible for individual use. Personal computers are intended to be operated directly by an end user, rather than by a computer expert or technician. Unlike large, costly minicomputers and mainframes, time-sharing by many people at the same time is not used with personal computers. PCs have in practice become powerful enough that they may be shared by multiple users at any given time, though this is not common practice nor the primary purpose of a PC." .

:Perturbation-basedLearning a owl:Class ;
    rdfs:label "Perturbation-based Learning" ;
    rdfs:subClassOf :InstrinsicallySemi-supervisedLearning ;
    :definition "Perturbation-Based Learning is a machine learning approach that operates on the principle of introducing small disturbances or 'perturbations' to inputs of a model and observing how these changes impact the output. By analyzing these effects, the algorithm can learn the underlying relationships and dependencies in the data, allowing it to make accurate predictions for unseen data." ;
    :kb-article """## How it works
In perturbation-based learning, the process starts by introducing small, random variations or 'perturbations' into the input variables of a model. The algorithm then monitors how these changes affect the output. The key idea is to learn from the discrepancies between the predicted and actual output resulting from these perturbations, which reflect the model's sensitivity to changes in input data. 

This process iteratively proceeds, adjusting the model parameters to minimize the discrepancy between predicted and actual outputs, thereby enhancing model performance. The perturbations provide a way to explore the model's response surface in various directions and identify the optimal settings. This approach is particularly useful in deep learning, where it serves as the foundation for backpropagation, the primary method for training neural networks. 

## Considerations 
- **Data Quality:** The effectiveness of perturbation-based learning highly depends on the quality of the data. If the data is noisy or contains errors, the introduced perturbations might misguide the learning process.
- **Parameter Tuning:** Deciding on the right amount of perturbation can be tricky. Too much perturbation can lead to unstable learning, while too little may not provide enough information for learning.
- **Computational Cost:** As each perturbation requires a new prediction, the computational cost can be high, especially for large datasets or complex models.
- **Model Type:** This technique is more suited to models with differentiable parameters like neural networks, and may not be as effective with non-differentiable models.

## References 
1. [Understanding the difficulty of training deep feedforward neural networks](http://proceedings.mlr.press/v9/glorot10a/glorot10a.pdf)
2. [Perturbative Neural Networks](https://arxiv.org/abs/1806.01817)
3. [The Elements of Statistical Learning: Data Mining, Inference, and Prediction](https://web.stanford.edu/~hastie/ElemStatLearn/)
4. [Deep Learning](http://www.deeplearningbook.org/) by Ian Goodfellow, Yoshua Bengio, and Aaron Courville""" .

:PhiCoefficient a owl:Class ;
    rdfs:label "Phi Coefficient" ;
    rdfs:subClassOf :Correlation ;
    :synonym "Matthews Correlation Coefficient",
        "MCC" .

:PhysicalAddress a owl:Class ;
    rdfs:label "Physical Address" ;
    rdfs:subClassOf :MemoryAddress ;
    rdfs:isDefinedBy "https://dbpedia.org/page/Physical_address" ;
    :definition "In a computer supporting virtual memory, the term physical address is used mostly to differentiate from a virtual address. In particular, in computers utilizing a memory management unit(MMU) to translate memory addresses, the virtual and physical addresses refer to an address before and after translation performed by the MMU, respectively." .

:PhysicalArtifact a owl:Class ;
    rdfs:label "Physical Artifact" ;
    rdfs:subClassOf :Artifact,
        :PhysicalObject .

:PhysicalLink a owl:Class ;
    rdfs:label "Physical Link" ;
    rdfs:subClassOf :Link ;
    :definition """A physical link is a dedicated connection for communication that uses some physical media (electrical, electromagnetic, optical, to include clear spaces or vacuums.)  A physical link represents only a single hop (link) in any larger communcations path, circuit, or network.

NOTE: not synonymous with data link as a data link can be over a telecommunications circuit, which may be a virtual circuit composed of multiple phyical links.""" ;
    rdfs:seeAlso "https://dbpedia.org/resource/Physical_layer" ;
    :synonym "Layer-1 Link" .

:PhysicalLinkMapping a :NetworkMapping,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Physical Link Mapping" ;
    rdfs:subClassOf :NetworkMapping,
        [ a owl:Restriction ;
            owl:onProperty :maps ;
            owl:someValuesFrom :NetworkNode ],
        [ a owl:Restriction ;
            owl:onProperty :maps ;
            owl:someValuesFrom :PhysicalLink ] ;
    :d3fend-id "D3-PLM" ;
    :definition "Physical link mapping identifies and models the link connectivity of the network devices within a physical network." ;
    :kb-reference :Reference-LibreNMSDocsNetworkMapExtension ;
    :synonym "Layer 1 Mapping" .

:PhysicalLocation a owl:Class ;
    rdfs:label "Physical Location" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Location_(geography)> ;
    :definition "The terms location  [here, a physical location] and place in geography are used to identify a point or an area on the Earth's surface or elsewhere. The term location generally implies a higher degree of certainty than place, which often indicates an entity with an ambiguous boundary, relying more on human or social attributes of place identity and sense of place than on geometry. The distinction between space and place is considered a central concern of geography, and has been addressed by scholars such as Yi-Fu Tuan and John Agnew." .

:PhysicalObject a owl:Class ;
    rdfs:label "Physical Object" ;
    rdfs:subClassOf :D3FENDThing,
        [ a owl:Restriction ;
            owl:onProperty :has-location ;
            owl:someValuesFrom :PhysicalLocation ] .

:Pipe a owl:Class ;
    rdfs:label "Pipe" ;
    skos:altLabel "Pipeline" ;
    rdfs:subClassOf :InterprocessCommunication ;
    rdfs:isDefinedBy <http://www.linfo.org/pipe.html> ;
    :definition "In Unix-like computer operating systems, a pipeline is a mechanism for inter-process communication using message passing.  In the strictest sense, a pipe is a single segment of a pipeline, allowing one process to pass information forward to another.  Network pipes allow processes on different hosts to interact." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Pipeline_(Unix)> .

:Pix2Pix a owl:Class ;
    rdfs:label "Pix2Pix" ;
    rdfs:subClassOf :Image-to-ImageTranslationGAN .

:Planning a owl:Class ;
    rdfs:label "Planning" ;
    rdfs:subClassOf :AnalyticalPurpose .

:Platform a owl:Class ;
    rdfs:label "Platform" ;
    skos:altLabel "Computer Platform" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :Firmware ],
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :HardwareDevice ],
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :OperatingSystem ] ;
    :definition "Platform includes the hardware and OS. The term computing platform can refer to different abstraction levels, including a certain hardware architecture, an operating system (OS), and runtime libraries. In total it can be said to be the stage on which computer programs can run." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Computing_platform> ;
    :todo "Future work might identify an application platform like Chrome, however Chrome OS would be considered a platform with respect to cybersecurity architects." .

:PlatformHardening a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Platform Hardening" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Harden ] ;
    :d3fend-id "D3-PH" ;
    :definition """Hardening components of a Platform with the intention of making them more difficult to exploit.

Platforms includes components such as:
* BIOS UEFI Subsystems
* Hardware security devices such as Trusted Platform Modules
* Boot process logic or code
* Kernel software components""" ;
    :enables :Harden ;
    :synonym "Endpoint Hardening",
        "System Hardening" .

:PlatformMonitoring a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Platform Monitoring" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Detect ] ;
    :d3fend-id "D3-PM" ;
    :definition "Monitoring platform components such as operating systems software, hardware devices, or firmware." ;
    :kb-article """Platform monitoring consists of the analysis and monitoring of system level devices and low-level components, including hardware devices, to detect unauthorized modifications or suspicious activity.

Monitored platform components includes system files and embedded devices such as:

 * Kernel software modules
 * Boot process code and load logic
 * Operating system components and device files
 * System libraries and dynamically loaded files
 * Hardware device drivers
 * Embedded firmware devices""" .

:Point-biserialCorrelationCoefficient a owl:Class ;
    rdfs:label "Point-biserial Correlation Coefficient" ;
    rdfs:subClassOf :Correlation .

:Pointer a owl:Class ;
    rdfs:label "Pointer" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Pointer_(computer_programming)> ;
    :definition "In computer science, a pointer is a programming language object, whose value refers to (or \"points to\") another value stored elsewhere in the computer memory using its memory address. A pointer references a location in memory, and obtaining the value stored at that location is known as dereferencing the pointer. As an analogy, a page number in a book's index could be considered a pointer to the corresponding page; dereferencing such a pointer would be done by flipping to the page with the given page number." .

:PointerAuthentication a :ApplicationHardening,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Pointer Authentication" ;
    rdfs:subClassOf :ApplicationHardening,
        [ a owl:Restriction ;
            owl:onProperty :authenticates ;
            owl:someValuesFrom :Pointer ] ;
    :d3fend-id "D3-PAN" ;
    :definition "Comparing the cryptographic hash or derivative of a pointer's value to an expected value." ;
    :kb-article """## How It Works

Pointer Authentication (frequently referred to as PAC, although the technique is properly Pointer Authentication) is a security feature to provide protection against attackers with memory read/write access.  A Pointer Authentication Code (PAC) is a cryptographic hash or derivative computed on the value of a pointer and some additional context information which can then provide a cryptographically strong guarantee about the likelihood that a pointer has been tampered with by an attacker.

Although pointers are 64 bits, most systems have a substantially smaller virtual address space, leaving unused bits in pointers that can store the value of the PAC, this can be done to reduce memory space requirements. One implementation is in ARMv8.3-A.  A PAC is computed over the 64-bit pointer value and a 64-bit context value.  Instructions are introduced to deal with pointers: one category to compute and insert the PAC into a pointer, another category to verify the pointer and invalidate the pointer if the PAC does not check, and a third category to remove the pointer and restore the original value without verifying.

The ARM standard specifies a cryptographic algorithm called QARMA-64 (designed by Qualcomm) to compute the signature, although this algorithm is not required.  The architecture provides for five secret 128-bit Pointer Authentication keys: two for instruction pointers, two for data pointers, and a general key for signing larger blocks of data.

## Considerations

In the ARM implementation, the mechanisms above for manipulating PACS are provided, but it is up to the code developer to manage the keys for the cryptographic algorithm.


A known potential limitation of PACs concerns signing gadgets. Under certain circumstances PACs can be bypassed by forcing the system to run a signing gadget which will allow the signing of arbitrary pointers to occur.""" ;
    :kb-reference :Reference-PointerAuthenticationOnARMv8.3,
        :Reference-PointerAuthenticationProjectZero .

:PointerDereferencingFunction a owl:Class ;
    rdfs:label "Pointer Dereferencing Function" ;
    rdfs:subClassOf :Subroutine,
        [ a owl:Restriction ;
            owl:onProperty :addresses ;
            owl:someValuesFrom :MemoryBlock ],
        [ a owl:Restriction ;
            owl:onProperty :addresses ;
            owl:someValuesFrom :Pointer ] ;
    rdfs:comment "Note, this is not the actual code which performs the dereferencing operation internal to an application runtime." ;
    :definition "A function which has an operation which dereferences a pointer." .

:PointEstimation a owl:Class ;
    rdfs:label "Point Estimation" ;
    rdfs:subClassOf :Estimation .

:Policy a owl:Class ;
    rdfs:label "Policy" ;
    rdfs:subClassOf :Document .

:PolicyGradient a owl:Class ;
    rdfs:label "Policy Gradient" ;
    rdfs:subClassOf :Model-freeReinforcementLearning .

:PolicyReference a owl:Class ;
    rdfs:label "Policy Reference" ;
    rdfs:subClassOf :TechniqueReference ;
    :pref-label "Policy" .

:PortfolioAssessment a owl:Class ;
    rdfs:label "Portfolio Assessment" ;
    rdfs:subClassOf :Assessment,
        [ a owl:Restriction ;
            owl:onProperty :has-evidence ;
            owl:someValuesFrom :CapabilityAssessment ] .

:POSIXSymbolicLink a owl:Class ;
    rdfs:label "POSIX Symbolic Link" ;
    rdfs:subClassOf :SymbolicLink,
        :UnixLink ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Symbolic_link> ;
    :definition "A POSIX-compliant symbolic link.  These are often fast symbolic links, but need not be." .

:PowerShellProfileScript a owl:Class ;
    rdfs:label "PowerShell Profile Script" ;
    rdfs:subClassOf :UserInitScript ;
    :definition "A PowerShell profile script is a script that runs when PowerShell starts and can be used as a logon script to customize user environments." ;
    rdfs:seeAlso <https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-7.1> .

:PredicateLogic a owl:Class ;
    rdfs:label "Predicate Logic" ;
    rdfs:subClassOf :SymbolicReasoning ;
    :definition "A collection of formal systems used in mathematics, philosophy, linguistics, and computer science. First-order logic uses quantified variables over non-logical objects, and allows the use of sentences that contain variables." ;
    :kb-article """## How it works
_TBD enter text here for how the thing works_

## Considerations 

## References 
- https://en.wikipedia.org/wiki/First-order_logic""" .

:PrimaryStorage a owl:Class ;
    rdfs:label "Primary Storage" ;
    rdfs:subClassOf :HardwareDevice,
        :Storage,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :PageFrame ],
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :ProcessSegment ] ;
    rdfs:isDefinedBy "https://www.memorymanagement.org/glossary/m.html#term-main-memory" ;
    :definition "Primary memory of a computer is memory that is wired directly to the processor, consisting of RAM and possibly ROM.  These terms are used in contrast to mass storage devices and cache memory (although we may note that when a program accesses main memory, it is often actually interacting with a cache)." ;
    rdfs:seeAlso "https://en.wikipedia.org/wiki/Computer_data_storage#Primary_storage" .

:PrincipalComponentAnalysis a owl:Class ;
    rdfs:label "Principal Component Analysis" ;
    rdfs:subClassOf :MultivariateAnalysis ;
    :synonym "PCA" .

:PrincipalComponentsAnalysis a owl:Class ;
    rdfs:label "Principal Components Analysis" ;
    rdfs:subClassOf :DimensionReduction ;
    :definition "Principal Components Analysis (PCA) is a statistical procedure that employs an orthogonal transformation to convert a set of observations of possibly correlated variables into a set of values of linearly uncorrelated variables called principal components. The purpose of PCA is to reduce the dimensionality of the dataset, while retaining as much of the variation in the data as possible. This technique is commonly used in exploratory data analysis and for making predictive models." ;
    :kb-article """## How it works
PCA starts by calculating the covariance matrix of the original dataset. The covariance matrix describes how each variable in the dataset relates to every other variable. 

Next, PCA involves computing the eigenvectors and eigenvalues of the covariance matrix. The eigenvectors represent the directions or components for the reduced subspace of the dataset, whereas the eigenvalues represent the magnitude or explained variance for each of these directions. Essentially, the eigenvectors form the axes of the new feature subspace, and the eigenvalues determine their magnitude. 

These new axes (or principal components) are orthogonal (uncorrelated), and they capture the most variance of the original dataset. The first principal component captures the highest variance, the second captures the second-highest, and so on.

## Considerations 

* PCA assumes that the principal components are a linear combination of the original features. If this isn't the case, PCA may not give you meaningful results.
* The data should be standardized before applying PCA, as PCA is sensitive to the variances of the initial variables. If the scales of the variables are significantly different, PCA might produce misleading results.
* PCA is a data-driven method, which means that the structure found can be very specific to the data and may not generalize well to new datasets.
* The interpretation of the principal components might not be intuitive or easy in the context of the original variables.
* If the data is noisy, PCA can increase the noise in the transformed data, especially in the later principal components.

## References 
1. Jolliffe, I.T. (2002). Principal Component Analysis. In: International Encyclopedia of the Social & Behavioral Sciences. Elsevier. [Link](https://doi.org/10.1016/B0-08-043076-7/04068-7)
2. "Principal Component Analysis 4 Dummies: Eigenvectors, Eigenvalues and Dimension Reduction". [Link](https://georgemdallas.wordpress.com/2013/10/30/principal-component-analysis-4-dummies-eigenvectors-eigenvalues-and-dimension-reduction/)
3. Wold, S., Esbensen, K. and Geladi, P. (1987). Principal Component Analysis. Chemometrics and Intelligent Laboratory Systems, 2(1-3), pp.37-52. [Link](https://doi.org/10.1016/0169-7439(87)80084-9)
4. "PCA in Python" – Towards Data Science. [Link](https://towardsdatascience.com/pca-using-python-scikit-learn-e653f8989e60)
5. Bishop, C. (2006). Pattern Recognition and Machine Learning. Springer. [Link](https://www.springer.com/gp/book/9780387310732)""" .

:PrintServer a owl:Class ;
    rdfs:label "Print Server" ;
    rdfs:subClassOf :Server ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Print_server> ;
    :definition "A print server, or printer server, is a device that connects printers to client computers over a network. It accepts print jobs from the computers and sends the jobs to the appropriate printers, queuing the jobs locally to accommodate the fact that work may arrive more quickly than the printer can actually handle." .

:PrivateKey a owl:Class ;
    rdfs:label "Private Key" ;
    rdfs:subClassOf :AsymmetricKey ;
    :definition "A private key can be used to decrypt messages encrypted using the corresponding public key, or used to sign a message that can be authenticated with the corresponding public key." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Public-key_cryptography> .

:PrivilegedUserAccount a owl:Class ;
    rdfs:label "Privileged User Account" ;
    rdfs:subClassOf :UserAccount ;
    rdfs:isDefinedBy <https://www.ssh.com/iam/user/privileged-account> ;
    :definition "A privileged account is a user account that has more privileges than ordinary users. Privileged accounts might, for example, be able to install or remove software, upgrade the operating system, or modify system or application configurations. They might also have access to files that are not normally accessible to standard users. Typical examples are root and administrator accounts. But there also service accounts, system accounts, etc. Privileged accounts are especially powerful, and should be monitored especially closely." ;
    rdfs:seeAlso <https://www.cyberark.com/resources/blog/7-types-of-privileged-accounts-service-accounts-and-more> .

:PrivilegeEscalation a :OffensiveTactic,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Privilege Escalation" ;
    rdfs:subClassOf :OffensiveTactic ;
    :display-order 4 .

:PrivilegeEscalationTechnique a owl:Class ;
    rdfs:label "Privilege Escalation Technique" ;
    rdfs:subClassOf :OffensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :PrivilegeEscalation ] .

:ProbabilisticLogic a owl:Class ;
    rdfs:label "Probabilistic Logic" ;
    rdfs:subClassOf :SymbolicReasoning ;
    :definition "Probabilistic logic extends traditional logic truth tables with probabilistic expressions." ;
    :kb-article """## How it works
_TBD enter text here for how the thing works_

## Considerations 

## References 
- https://en.wikipedia.org/wiki/Probabilistic_logic""" .

:Procedure a owl:Class ;
    rdfs:subClassOf :D3FENDThing,
        [ a owl:Restriction ;
            owl:onProperty :implements ;
            owl:someValuesFrom :Technique ],
        [ a owl:Restriction ;
            owl:onProperty :start ;
            owl:someValuesFrom :Step ] .

:Process a owl:Class ;
    rdfs:label "Process" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :ProcessImage ],
        [ a owl:Restriction ;
            owl:onProperty :instructed-by ;
            owl:someValuesFrom :Software ],
        [ a owl:Restriction ;
            owl:onProperty :may-execute ;
            owl:someValuesFrom :Thread ],
        [ a owl:Restriction ;
            owl:onProperty :process-command-line-arguments ;
            owl:someValuesFrom xsd:string ],
        [ a owl:Restriction ;
            owl:onProperty :process-environmental-variables ;
            owl:someValuesFrom xsd:string ],
        [ a owl:Restriction ;
            owl:onProperty :process-identifier ;
            owl:someValuesFrom xsd:integer ],
        [ a owl:Restriction ;
            owl:onProperty :process-image-path ;
            owl:someValuesFrom :ExecutableBinary ],
        [ a owl:Restriction ;
            owl:onProperty :process-security-context ;
            owl:someValuesFrom xsd:string ],
        [ a owl:Restriction ;
            owl:onProperty :process-user ;
            owl:someValuesFrom :UserAccount ],
        [ a owl:Restriction ;
            owl:onProperty :uses ;
            owl:someValuesFrom :Resource ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Process_(computing)> ;
    :definition "A process is an instance of a computer program that is being executed. It contains the program code and its current activity. Depending on the operating system (OS), a process may be made up of multiple threads of execution that execute instructions concurrently. A computer program is a passive collection of instructions, while a process is the actual execution of those instructions. Several processes may be associated with the same program; for example, opening up several instances of the same program often means more than one process is being executed." .

:ProcessAnalysis a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Process Analysis" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Detect ] ;
    :d3fend-id "D3-PA" ;
    :definition "Process Analysis consists of observing a running application process and analyzing it to watch for certain behaviors or conditions which may indicate adversary activity. Analysis can occur inside of the process or through a third-party monitoring application. Examples include monitoring system and privileged calls, monitoring process initiation chains, and memory boundary allocations." ;
    :enables :Detect .

:ProcessCodeSegment a owl:Class ;
    rdfs:label "Process Code Segment" ;
    skos:altLabel "Process Text Segment" ;
    rdfs:subClassOf :ProcessSegment,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :Subroutine ],
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :ProcessSegment ] ;
    :definition "A process code segment, also known as a text segment or simply as text, is a portion of the program's virtual address space that contains executable instructions and corresponds to the loaded image code segment. Includes additional sections such as an import table." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Code_segment>,
        :ImageCodeSegment .

:ProcessCodeSegmentVerification a owl:Class,
        owl:NamedIndividual,
        :ProcessAnalysis ;
    rdfs:label "Process Code Segment Verification" ;
    rdfs:subClassOf :ProcessAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :verifies ;
            owl:someValuesFrom :ProcessCodeSegment ] ;
    :d3fend-id "D3-PCSV" ;
    :definition "Comparing the \"text\" or \"code\" memory segments to a source of truth." ;
    :kb-article """## How it works
A process code segment is an executable portion of computer memory allocated to a particular process. Process Code Segment Verification implements verification to compare a process code segment to some expected value.

### Verification logic
Verification can occur during application startup, or continuously during execution. The logic which verifies the process code may be separate in a third-party process, embedded in the application itself at compile time, or dynamically linked at runtime.

### System of record
Examples of systems of record:

 * On-disk application binary files or checksums
 * Remotely stored binary data or checksums
 * Embedded binary data or checksums

### Post Verification Actions
If the verification function determines a process code segment may have been altered, a capability may invoke Eviction techniques  as **Process Termination** to end the current process, or **Executable Blacklisting** to prevent the executable from launching in the future.

## Considerations

### False positives

False positives commonly occur in the case that the layout of code in the process segment is legitimately modified:

*  Operating system features or third-party security software may modify the layout of process code, for example in the defensive technique **Segment Address Offset Randomization**, or in the case that a module is rebased.  In both of these cases, the alteration occurs before the code is fully loaded into memory, and it would be possible to avoid the false positive by securely feeding this constant offset and any relocation data into the verification logic.

* Process code segments may be written to modify themselves or other process code segments; however, this goes against widely-accepted current practices in software development.

### False negatives

False negatives can occur via alteration of the verification logic or source of truth, or insufficient verification logic.

* Verification techniques which are executed only locally may be defeated by altering the local verification logic.

* Verification that is run only on a recurring basis could be evaded if the malicious alteration is completed before verification is run.

* Verification that requests an operation to be performed on a subset of the code segment could be evaded by performing that operation on a copy of the relevant bytes of the code segment.

* Verification based on a system of record that can be altered may fail if that system of record is modifiable by a malicious user.""" ;
    :kb-reference :Reference-Anti-tamperSystemWithSelf-adjustingGuards_ARXANTECHNOLOGIESInc,
        :Reference-GuardsForApplicationInSoftwareTamperproofing_PurdueResearchFoundation,
        :Reference-SystemAndMethodForDetectingMalwareInjectedIntoMemoryOfAComputingDevice_EndgameInc,
        :Reference-SystemAndMethodForValidatingIn-memoryIntegrityOfExecutableFilesToIdentifyMaliciousActivity_EndgameInc,
        :Reference-TamperProofMutatingSoftware_ARXANTECHNOLOGIESInc,
        :Reference-ThreatDetectionThroughTheAccumulatedDetectionOfThreatCharacteristics_SophosLtd .

:ProcessDataSegment a owl:Class ;
    rdfs:label "Process Data Segment" ;
    rdfs:subClassOf :ProcessSegment ;
    :definition "A process data segment, is a portion of the program's virtual address space that contains executable instructions and corresponds to the loaded image data segment." ;
    rdfs:seeAlso "Image Data Segment",
        <http://dbpedia.org/resource/Data_segment> .

:ProcessEnvironmentVariable a owl:Class ;
    rdfs:label "Process Environment Variable" ;
    skos:altLabel "Environment Variable" ;
    rdfs:subClassOf :ApplicationConfiguration ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Environment_variable> ;
    :definition "An environment variable is a dynamic-named value that can affect the way running processes will behave on a computer. They are part of the environment in which a process runs." ;
    :todo "Did \"Environment Variable\" have an conflict with prior version of ATT&CK technique names or were there other env var classes that are no longer in d3fend?" .

:ProcessEviction a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Process Eviction" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Evict ] ;
    :d3fend-id "D3-PE" ;
    :definition "Process eviction techniques terminate or remove running process." ;
    :enables :Evict .

:ProcessImage a owl:Class ;
    rdfs:label "Process Image" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :ProcessSegment ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/System_image#Process_images> ;
    :definition "A process image is a copy of a given process's state at a given point in time. It is often used to create persistence within an otherwise volatile system." .

:ProcessLineageAnalysis a owl:Class,
        owl:NamedIndividual,
        :ProcessSpawnAnalysis ;
    rdfs:label "Process Lineage Analysis" ;
    rdfs:subClassOf :ProcessSpawnAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :Process ],
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :ProcessTree ] ;
    :d3fend-id "D3-PLA" ;
    :definition "Identification of suspicious processes executing on an end-point device by examining the ancestry and siblings of a process, and the associated metadata of each node on the tree, such as process execution, duration, and order relative to siblings and ancestors." ;
    :kb-article """## How it works
Process tree analysis techniques gather information on how a process was initiated to determine if a process is malicious. For example, if a process was not initiated from boot or not initiated by another process, that process is identified as suspicious. Also, if a new process was started before a process initiated by the device (ex. during boot) and that new process was not initiated by a user (which can be determined by examining process parameters such as type of process, its creator, source, etc.) the process is identified as suspicious.

For example, Microsoft Word may block execution of any subprocess that is not in an approved path.

## Considerations
* Attackers may spoof the parent PID (https://attack.mitre.org/techniques/T1502/), rendering such after-the-fact analysis on process lineage ineffective.
* Processes may hide from various means of detection; an example on Linux is where a rootkit might remove key files for the process from its directory in /proc.
* Zombie processes.""" ;
    :kb-reference :Reference-CAR-2020-11-002%3ALocalNetworkSniffing_MITRE,
        :Reference-CAR-2020-11-004%3AProcessesStartedFromIrregularParent_MITRE,
        :Reference-CAR-2021-02-002%3AGetSystemElevation_MITRE,
        :Reference-CAR-2021-05-003%3ABCDEditFailureRecoveryModification_MITRE,
        :Reference-CommandLaunchedFromWinLogon_MITRE,
        :Reference-DebuggersForAccessibilityApplications_MITRE,
        :Reference-GenericRegsvr32_MITRE,
        :Reference-OutlierParentsOfCmd_MITRE,
        :Reference-ProcessesSpawningCmd.exe_MITRE,
        :Reference-QuickExecutionOfASeriesOfSuspiciousCommands_MITRE,
        :Reference-Reg.exeCalledFromCommandShell_MITRE,
        :Reference-RemotelyLaunchedExecutablesViaWMI_MITRE,
        :Reference-ServiceOutlierExecutables_MITRE,
        :Reference-ServiceSearchPathInterception_MITRE,
        :Reference-ServicesLaunchingCmd_MITRE,
        :Reference-SystemAndMethodsThereofForCausalityIdentificationAndAttributionsDeterminationOfProcessesInANetwork_PaloAltoNetworksIncCyberSecdoLtd,
        :Reference-SystemAndMethodsThereofForIdentificationOfSuspiciousSystemProcesses_PaloAltoNetworksInc,
        :Reference-UACBypass_MITRE ;
    :synonym "Process Tree Analysis" .

:Processor a owl:Class ;
    rdfs:label "Processor" ;
    rdfs:subClassOf :HardwareDevice ;
    :synonym "Computer Processor" .

:ProcessorComponent a owl:Class ;
    rdfs:label "Processor Component" ;
    rdfs:subClassOf :HardwareDevice .

:ProcessorRegister a owl:Class ;
    rdfs:label "Processor Register" ;
    rdfs:subClassOf :PrimaryStorage,
        [ a owl:Restriction ;
            owl:onProperty :contained-by ;
            owl:someValuesFrom :CentralProcessingUnit ] ;
    rdfs:isDefinedBy "https://dbpedia.org/page/Processor_register" ;
    :definition "A processor register is a quickly accessible location available to a computer's processor. Registers usually consist of a small amount of fast storage, although some registers have specific hardware functions, and may be read-only or write-only." ;
    rdfs:seeAlso "https://www.techtarget.com/whatis/definition/register" .

:ProcessSegment a owl:Class ;
    rdfs:label "Process Segment" ;
    rdfs:subClassOf :BinarySegment ;
    :definition "Process segments are distinct partitions of the memory space of a running process.  Heap, data, code, and stack segments are examples of process segments." ;
    :synonym "Process Memory" .

:ProcessSegmentExecutionPrevention a :ApplicationHardening,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Process Segment Execution Prevention" ;
    rdfs:subClassOf :ApplicationHardening,
        [ a owl:Restriction ;
            owl:onProperty :neutralizes ;
            owl:someValuesFrom :ProcessSegment ] ;
    :d3fend-id "D3-PSEP" ;
    :definition "Preventing execution of any address in a memory region other than the code segment." ;
    :kb-article """## How it works

During execution of a process, the instruction pointer register should only point to addresses in a code segment (also called the .text segment), as this is the sole segment which should contain program code.

When this technique detects an attempt to execute something that has been designated as non-executable, other techniques such as those in **Process Eviction** might be invoked, such as **Process Termination** to end the current process, or **Executable Blacklisting** to blacklist the potentially vulnerable or malfunctioning executable.

### Software-based implementations
The software-based implementation in Windows XP SP2 might not check that every time the instruction pointer is changed, and does not check on each jump or return.  Before calling an exception handler, Windows XP SP2 software-enforced DEP checks whether the exception handler is located in a memory region marked as executable.  If the program was also built with SafeSEH, this implementation also checks before changing control to the exception handler whether it is a registered exception handler in the program's file on disk.

### Hardware-based implementations
The NX (No Execute) or XD (Execute Disable) bit on the processor specifies whether a certain part of memory is executable.  Early implementations set this bit by the memory segment, while modern implementations which are built on the flat memory model often store this bit in each entry of the page table, to control execution by the page.


## Considerations

Non-hardware process data segment execution prevention is more susceptible to being able to be turned off for a page of memory.

Different implementations of this defense have been in place since the 1980s, but implementation stalled when larger 16-bit programs began stuffing code in the segments usually reserved for data. Many modern programs follow the best practice of separation of code and data, are able to run under this defense.

ROP or ret2libc/return-to-function attacks could bypass this defense, as although they may pass attacker-controlled data or stack frames to a function, they abuse functions that are legitimately located in the .text segment (code segment) of the program.  For those, more advanced defenses such as a table of valid jump addresses, function call analysis, or return depth analysis could be used.""" ;
    :kb-reference :Reference-DataExecutionPrevention_Microsoft,
        :Reference-WhatIsNX_XDFeature_RedHat ;
    :synonym "Execute Disable",
        "No Execute" .

:ProcessSelf-ModificationDetection a owl:Class,
        owl:NamedIndividual,
        :ProcessAnalysis ;
    rdfs:label "Process Self-Modification Detection" ;
    rdfs:subClassOf :ProcessAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :Process ] ;
    :d3fend-id "D3-PSMD" ;
    :definition "Detects processes that modify, change, or replace their own code at runtime." ;
    :kb-article """## How it Works
A security agent installed on the host machine intercepts API calls between a process and operating system. Intercepted API calls are then compared against attack signatures/patterns to identify API calls that modify executable memory or modify the entry point address of a suspended child process. Attack patterns include:

* Executable code of a suspended child process removed from memory by one or more API calls.
* New executable code injected and / or loaded into memory of a suspended child process by one or more API calls.
* Executable code modified by one or more API calls.
* Next instruction pointer value in memory modified by one or more API calls.

## Considerations
Comparing loaded code segments of processes with what is expected to have been loaded from a file can result in false positives, due to legitimate uses of self-modification for decrypting or uncompressing code segments.""" ;
    :kb-reference :Reference-SystemAndMethodForProcessHollowingDetection_CarbonBlackInc .

:ProcessSpawnAnalysis a owl:Class,
        owl:NamedIndividual,
        :ProcessAnalysis ;
    rdfs:label "Process Spawn Analysis" ;
    rdfs:subClassOf :ProcessAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :CreateProcess ],
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :Process ] ;
    :d3fend-id "D3-PSA" ;
    :definition "Analyzing spawn arguments or attributes of a process to detect processes that are unauthorized." ;
    :kb-article """## How it works
Process attributes are established when an operating system spawns a new process. These attributes are analyzed to look for the presence or absence of specific values or patterns.

Some attributes of interest are:
 - user
 - process name
 - image path
 - security content

## Considerations

 - Attackers can spoof the parent process identifier (PPID), which could bypass this defense to allow execution of a malicious process from an arbitrary parent process.
 - Attackers could have legitimately compromised any of the process properties, such as the user, to make the execution appear legitimate.
 - Location: If the full image path is not checked, there could be a conflict with an executable that appears earlier due to resolution involving the system environment path/classpath variable.
 - Parsing issues: If the raw command from a shell is analyzed, rather than the actual function call, it is important to identify the actual command  being run from its arguments.  In Windows, services with unquoted file paths containing spaces will try to use the first token as the executable and the rest as arguments -- and shift tokens to the executable until a valid one is found.
 - Some [operating systems](/dao/artifact/d3f:OperatingSystem) can spawn processes without forking.""" ;
    :kb-reference :Reference-ActiveDirectoryDumpingViaNTDSUtil_MITRE,
        :Reference-CAR-2020-04-001%3AShadowCopyDeletion_MITRE,
        :Reference-CAR-2020-05-003%3ARareLolBASCommandLines_MITRE,
        :Reference-CAR-2020-08-001%3ANTFSAlternateDataStreamExecution-SystemUtilities_MITRE,
        :Reference-CAR-2020-09-003%3AIndicatorBlocking-DriverUnloaded_MITRE,
        :Reference-CAR-2020-09-004%3ACredentialsInFiles%26Registry_MITRE,
        :Reference-CAR-2020-11-001%3ABootOrLogonInitializationScripts_MITRE,
        :Reference-CAR-2020-11-003%3ADLLInjectionWithMavinject_MITRE,
        :Reference-CAR-2020-11-005%3AClearPowershellConsoleCommandHistory_MITRE,
        :Reference-CAR-2020-11-006%3ALocalPermissionGroupDiscovery_MITRE,
        :Reference-CAR-2020-11-007%3ANetworkShareConnectionRemoval_MITRE,
        :Reference-CAR-2020-11-008%3AMSBuildAndMsxsl_MITRE,
        :Reference-CAR-2020-11-009%3ACompiledHTMLAccess_MITRE,
        :Reference-CAR-2021-01-002%3AUnusuallyLongCommandLineStrings_MITRE,
        :Reference-CAR-2021-01-003%3AClearingWindowsLogsWithWevtutil_MITRE,
        :Reference-CAR-2021-01-004%3AUnusualChildProcessForSpoolsv.ExeOrConnhost.Exe_MITRE,
        :Reference-CAR-2021-01-006%3AUnusualChildProcessSpawnedUsingDDEExploit_MITRE,
        :Reference-CAR-2021-01-007%3ADetectingTamperingOfWindowsDefenderCommandPrompt_MITRE,
        :Reference-CAR-2021-01-008%3ADisableUAC_MITRE,
        :Reference-CAR-2021-01-009%3ADetectingShadowCopyDeletionViaVssadmin.exe_MITRE,
        :Reference-CAR-2021-02-001%3AWebshell-IndicativeProcessTree_MITRE,
        :Reference-CAR-2021-04-001%3ACommonWindowsProcessMasquerading_MITRE,
        :Reference-CAR-2021-05-001%3AAttemptToAddCertificateToUntrustedStore_MITRE,
        :Reference-CAR-2021-05-002%3ABatchFileWriteToSystem32_MITRE,
        :Reference-CAR-2021-05-003%3ABCDEditFailureRecoveryModification_MITRE,
        :Reference-CAR-2021-05-004%3ABITSJobPersistence_MITRE,
        :Reference-CAR-2021-05-005%3ABITSAdminDownloadFile_MITRE,
        :Reference-CAR-2021-05-006%3ACertUtilDownloadWithURLCacheAndSplitArguments_MITRE,
        :Reference-CAR-2021-05-007%3ACertUtilDownloadWithVerifyCtlAndSplitArguments_MITRE,
        :Reference-CAR-2021-05-008%3ACertutilExeCertificateExtraction_MITRE,
        :Reference-CAR-2021-05-009%3ACertUtilWithDecodeArgument_MITRE,
        :Reference-CAR-2021-05-010%3ACreateLocalAdminAccountsUsingNetExe_MITRE,
        :Reference-CommandLineUsageOfArchivingSoftware_MITRE,
        :Reference-CreateRemoteProcessViaWMIC_MITRE_Other,
        :Reference-CredentialDumpingViaMimikatz_MITRE,
        :Reference-HostDiscoveryCommands_MITRE,
        :Reference-LsassProcessDumpViaProcdump_MITRE,
        :Reference-PowershellExecution_MITRE,
        :Reference-RunDLL32.exeMonitoring_MITRE,
        :Reference-Squiblydoo_MITRE,
        :Reference-SuspiciousArguments_MITRE,
        :Reference-SuspiciousRunLocations_MITRE .

:ProcessStartFunction a owl:Class ;
    rdfs:label "Process Start Function" ;
    rdfs:subClassOf :Subroutine,
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :CreateProcess ] ;
    :definition "A function creates a new computer process, usually by invoking a create process system call." .

:ProcessSuspension a owl:Class,
        owl:NamedIndividual,
        :ProcessEviction ;
    rdfs:label "Process Suspension" ;
    rdfs:subClassOf :ProcessEviction,
        [ a owl:Restriction ;
            owl:onProperty :suspends ;
            owl:someValuesFrom :Process ] ;
    :d3fend-id "D3-PS" ;
    :definition "Suspending a running process on a computer system." ;
    :kb-article """## How it works

A running process might be suspended to mitigate its immediate effects if it is exhibiting anomalous, unauthorized, or malicious behavior. Defenders may choose to suspend rather than terminate to analyze the process first and resume the process if deemed benign.

### System-provided functions

#### Windows tools
In Windows, the `PsSuspend` command line utility from the SysInternals Suite provides functionality to suspend processes on a local or remote system.""" ;
    :kb-reference :Reference-PsSuspend .

:ProcessTermination a owl:Class,
        owl:NamedIndividual,
        :ProcessEviction ;
    rdfs:label "Process Termination" ;
    rdfs:subClassOf :ProcessEviction,
        [ a owl:Restriction ;
            owl:onProperty :terminates ;
            owl:someValuesFrom :Process ] ;
    :d3fend-id "D3-PT" ;
    :definition "Terminating a running application process on a computer system." ;
    :kb-article """## How it works

Processes are managed by the operating system kernel.  Different operating system kernels manage the creation and termination of processes in a different manner, and expose this functionality via the kernel API.

A running process might be terminated to mitigate its immediate effects if it is exhibiting anomalous, unauthorized, or malicious behavior; such as after detecting anomalous behavior via <a href="https://d3fend.mitre.org/technique/d3f:AdministrativeNetworkActivityAnalysis" rdf:about="https://d3fend.mitre.org/ontologies/d3fend.owl#AdministrativeNetworkActivityAnalysis">Administrative Network Activity Analysis</a>, after a failed check from <a href="https://d3fend.mitre.org/technique/d3f:StackFrameCanaryVerification" rdf:about="https://d3fend.mitre.org/ontologies/d3fend.owl#StackFrameCanaryValidation">Stack Frame Canary Validation</a>, or after <a href="https://d3fend.mitre.org/technique/d3f:SystemCallAnalysis" rdf:about="https://d3fend.mitre.org/ontologies/d3fend.owl#SystemCallAnalysis">System Call Analysis</a> finds an attempt to execute an unauthorized system call.

### Proprietary technology
Security software might use proprietary technology to terminate processes, instead of the system-provided functions.    Further research may provide specific detail on such methods used.

### System-provided functions

#### Windows tools
In Windows, `ExitProcess()` is used to send a signal to a process to request it to exit, and `TerminateProcess()` is used to force a process to exit.

The `taskkill` executable available in the cmd shell is used to kill a process, with the `/F` switch forcing termination as with `TerminateProcess()`.  In PowerShell, `Stop-Process` is used, which is aliased by default to `spps` and `kill`.  Processes started in the Windows Subsystem for Linux (WSL) environment may be terminated there with the `kill` command.

In some cases, existing drivers can also be leveraged to kill processes.

#### Unix/Linux tools
In Unix-like systems, all process termination requests are handled using signals.  The `kill` function takes the Process ID and signal to send, and is accessible with the `kill` command.  Some shells have a `kill` builtin function which is separate than the `kill` binary, which can also kill background jobs in the shell and additionally perform the function faster, and can run from an existing instance of the shell if the process table is full.  The signal SIGTERM specifies that the process to terminate may invoke a handler that it has defined instead of terminating, and the signal SIGKILL forces immediate termination.

The related command `xkill` terminates the connection of a program to the X window server, after which the user process may decide to terminate itself; however, termination is not guaranteed as the process, which could be on the same or different host, could then run in a terminal or reconnect to a different X server on any host.  Emacs is such a program that would not terminate itself after its connection to the X server is terminated.

## Considerations

### Persistence Mechanisms
Terminating a malicious process is not enough to stop an adversary that has already gained persistence in the host via any initial access mechanism, including through that process or another access mechanism.

### Terminating Multiple Processes
On most operating systems, process termination operations typically occur independently of each other, without functionality provided to atomically terminate multiple processes.  If there are multiple malicious processes which can make system calls to spawn other processes once one of them is closed, user session termination or system restart might be required.

### Process Access Permissions
Users must have permissions to kill the process.  On Unix-like systems, either root or the process user can kill the process.  On Windows systems, process permissions are managed separately via process security tokens.

### Process Resource Handles

#### Terminating Processes with Open Resource Handles

Processes may have open resource handles, which could leave those resources in an undesired state if the process is forced to terminate.  As such, most operating systems provide a means to send a signal to a process to inform it to gracefully terminate, and on most of these operating systems, it is the typical first step used to terminate a process.

#### Signal Traps
As the process may have open resource handles, commonly-used methods of process termination involve sending a signal to the process to terminate.
On Windows, the `ExitProcess()` function is used for this purpose.  Process instructions, as well as a third-party DLL can also cause the process to exit.
On Linux, the process is sent a signal on the occurrence of various events: when it loses the console, `SIGHUP`; when termination is requested, `SIGTERM`.  The processor then redirects execution to the function registered to handle the signal.

Therefore, sending a signal to the process to ask it to terminate may not always work.

##### Avoiding Signal Traps

On Unix-like systems, sending the `SIGKILL` signal for a process does not send a message to the process or invoke an implementation-defined handler; instead, it immediately does not allow the process to execute any further processor instructions.   On Windows `TerminateProcess()` instead of `ExitProcess()` performs the equivalent.

#### Hang on System Call Execution

Even still, as the operating system kernel manages the processes, kernel code may block process signals, including those which cannot be trapped, and does in certain circumstances.  Signals are blocked and queued for the duration of the system call when interrupting the system call would result in a kernel invariant being violated, such as when an action results in a malformed data structure; this blocking is common for filesystem requests.  Such system calls can hang when a filesystem has gone offline, leading to a long-term uninterruptible sleep, represented in POSIX command `ps` output as D state.
Any malicious system calls or system call handlers are issues of a much larger problem (a kernel-level rootkit) and the system should be redeployed entirely or restored from a backup known to be prior to compromise, and other systems accessible directly and indirectly from that one should also be examined.

A process that is truly hung in a system call may prevent the system from shutting down and leave it in an unresponsive state; a hard power off is required.

To speed up the action of terminating a process in uninterruptible sleep, the process resource accesses (handles) could be analyzed.

On Linux, [`sync` followed by `echo 3 > /proc/sys/vm/drop_caches`](https://www.kernel.org/doc/Documentation/sysctl/vm.txt) is a safe way to free up some inactive resource handles.


#### Kernel Processes and Threads
The kernel may not allow kernel processes, which are created via methods other than user-space processes, to be terminated.

#### Other Code using the Process

Terminating a shared library can lead to unexpected errors; such shared libraries have their own mechanisms for termination.

On Windows, a DLL is unloaded when the reference count of the library reaches 0.

#### Zombie process

After a process has been terminated, it may still take up an entry in the operating system process table until another event occurs.

##### Windows
In Windows, a process object is deleted when the last handle to the process is closed.

##### Linux
In Linux, a process is removed from the process table when it is reaped by its parent process.  If the parent terminates, historically the parent has been changed to pid 1; however, in the Linux kernel 3.4 and above, processes can set a different process as the subreaper using the `prctl()` system call.

Zombie processes and hung processes could be resolved with a restart of the system.

#### System restart
Finally a system restart might be required to kill a process.
Systems which are only accessible via a remote in-band connection may become inaccessible if a process termination operation that is necessary for reboot does not complete.

### Subsystems
Processes that are started in a subsystem might not be fully terminated if they are terminated using the command for that subsystem.  For example, in the Windows Subsystem for Linux (WSL), processes started and terminated via WSL calls such as with the `kill` command in Bash may still have an entry in the Windows process table.""" ;
    :kb-reference :Reference-InstantProcessTerminationToolToRecoverControlOfAnInformationHandlingSystem_DellProductsLP,
        :Reference-MalwareDetectionUsingLocalComputationalModels_CrowdstrikeInc ;
    :todo "Research on the proprietary methods.  This might include directly overwriting process memory, altering system data structures which relate to processes, changing the operating system task scheduler, or other low-level nonstandard operations that cause a process to cease its own intended operation." .

:ProcessTree a owl:Class ;
    rdfs:label "Process Tree" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :Process ] ;
    :definition "A process tree is a tree structure representation of parent-child relationships established via process spawn operations." ;
    rdfs:seeAlso "Process Spawn",
        <http://dbpedia.org/resource/Child_process>,
        <http://dbpedia.org/resource/Parent_process> .

:Product a owl:Class ;
    rdfs:label "Product" ;
    rdfs:subClassOf :CapabilityImplementation ;
    :todo "Consider generalization of Product and Service to Capability Implementation or Capability Realization.  Alternatively can just always use both in domains/ranges or other axioms." .

:ProductDeveloper a owl:Class ;
    rdfs:label "Product Developer" ;
    rdfs:subClassOf :Provider,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :Product ] .

:ProgressivelyGrowingGAN a owl:Class ;
    rdfs:label "Progressively Growing GAN" ;
    rdfs:subClassOf :ImageSynthesisGAN ;
    :synonym "ProGAN" .

:ProjectedClustering a owl:Class ;
    rdfs:label "Projected Clustering" ;
    rdfs:subClassOf :High-dimensionClustering ;
    :definition "Projected Clustering is a specific type of clustering technique in high-dimensional data mining. It allows for clusters to be found in subsets of dimensions (or 'projections') of the data, providing a more refined analysis when dealing with large, multidimensional datasets. This technique is especially useful when the relevant clustering dimensions differ across clusters." ;
    :kb-article """## How it works
Projected Clustering operates by identifying clusters in subspaces, or projections, of the data set rather than in the full-dimensional space. This methodology is particularly advantageous when dealing with high dimensional data where traditional clustering techniques may struggle due to the "curse of dimensionality", as relevant patterns may only exist in some of the dimensions.

The method starts by randomly initializing a set of clusters. Each cluster is associated with a set of dimensions or 'projections'. Then it iteratively refines the clusters and their associated projections. During each iteration, each data point is assigned to the cluster that it is most similar to, considering only the dimensions in the cluster's associated projection. Then, for each cluster, a search is made for the set of dimensions that best distinguishes the cluster's data points from the rest of the data points.

This process continues iteratively until the clusters' associated projections and the assignment of data points to clusters reach a stable state, or until a certain number of iterations are completed.

## Considerations 
- The selection of the initial clusters and their associated dimensions can significantly affect the result. This randomness could lead to inconsistencies between different runs of the algorithm.
- The choice of similarity measure is critical and should be chosen carefully based on the nature of the data.
- The algorithm could be computationally intensive for very large, high-dimensional datasets, affecting the speed and efficiency of the clustering process.
- Projected Clustering may not work as well with data that is uniformly distributed across all dimensions.

## References 
1. Aggarwal, C. C., & Yu, P. S. (2000). A new framework for itemset generation. Proceedings. 2000. https://www.researchgate.net/publication/221258241
2. Kailing, K., Kriegel, H. P., & Kröger, P. (2004). Density-connected subspace clustering for high-dimensional data. Proceedings. 2004. https://link.springer.com/article/10.1007/s10618-005-0001-5
3. Parthasarathy, S., & Ruan, Y. (2007). Weighted Graph Projection-Based Clustering. Proceedings. 2007. https://dl.acm.org/doi/10.1145/1247480.1247537""" .

:Projection-basedClustering a owl:Class ;
    rdfs:label "Projection-based Clustering" ;
    rdfs:subClassOf :High-dimensionClustering ;
    :definition "Projection-Based Clustering is a machine learning technique used to group similar instances of multidimensional data into clusters. It operates by projecting high-dimensional data onto a lower-dimensional subspace, which simplifies visualization and allows patterns or clusters in the data to be more easily identified." ;
    :kb-article """## How it works
Projection-based clustering operates in multiple stages. Firstly, the high-dimensional data is projected down to a lower-dimensional subspace while preserving as much of the original data's variance as possible. This is typically achieved using linear transformation methods such as Principal Component Analysis (PCA) or Non-negative Matrix Factorization (NMF). The key aim of this step is to reduce dimensionality, manage the curse of dimensionality, and retain as much significant information as possible.

After the projection step, a traditional clustering algorithm (like K-means, Hierarchical Clustering, or DBSCAN) is applied to the reduced-dimensionality data. The goal of this step is to identify and segregate data points into clusters based on their similarity. By reducing the data's dimensionality first, the clustering process is made more computationally efficient and effective, as patterns in the data are made more discernible.

## Considerations 
- The quality of the clusters formed largely depends on the quality of the initial projection. If significant information is lost during dimensionality reduction, the resultant clusters might not accurately represent the original data.
- The choice of projection method (PCA, NMF, etc.) and clustering algorithm (K-means, DBSCAN, etc.) should be made based on the nature and characteristics of the data.
- As with other clustering techniques, the interpretation of the results requires a good understanding of the data. Visual aids can be particularly helpful in understanding the output of projection-based clustering.
- The curse of dimensionality is an important consideration. Higher dimensional data can complicate the clustering process due to increased sparsity and computational load. Projection-based clustering helps to manage this issue, but care must still be taken to preserve as much information as possible during the projection phase.

## References 
1. Beyer, K., Goldstein, J., Ramakrishnan, R., & Shaft, U. (1999). When Is "Nearest Neighbor" Meaningful?. In *International conference on database theory* (pp. 217-235). Springer, Berlin, Heidelberg. [Link](https://link.springer.com/chapter/10.1007/3-540-49257-7_15)
2. Aggarwal, C. C., & Reddy, C. K. (2013). *Data clustering: algorithms and applications*. Chapman and Hall/CRC. [Link](https://www.taylorfrancis.com/books/mono/10.1201/b15834/data-clustering-charu-aggarwal-chandan-reddy)
3. Jolliffe, I. T. (2002). *Principal component analysis*. John Wiley & Sons, Ltd. [Link](https://onlinelibrary.wiley.com/doi/book/10.1002/0471725331)
4. Projection-Based Clustering through Self-Organization and Swarm Intelligence. In: *Evolutionary Computation and Optimization Algorithms in Software Engineering: Applications and Techniques*. [Link](https://www.igi-global.com/chapter/projection-based-clustering-through-self-organization-and-swarm-intelligence/48026)""" .

:Prolog a owl:Class ;
    rdfs:label "Prolog" ;
    rdfs:subClassOf :LogicProgramming ;
    :definition "Prolog has its roots in first-order logic, a formal logic, and unlike many other programming languages, Prolog is intended primarily as a declarative programming language: the program logic is expressed in terms of relations, represented as facts and rules. A computation is initiated by running a query over these relations." ;
    :kb-article """## How it works
_TBD enter text here for how the thing works_

## Considerations 

## References 
- https://en.wikipedia.org/wiki/Prolog""" .

:PropertyListFile a owl:Class ;
    rdfs:label "Property List File" ;
    skos:altLabel "Plist File" ;
    rdfs:subClassOf :ConfigurationFile ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Property_list> ;
    :definition "In the OS X, iOS, NeXTSTEP, and GNUstep programming frameworks, property list files are files that store serialized objects. Property list files use the filename extension .plist, and thus are often referred to as p-list files. Property list files are often used to store a user's settings. They are also used to store information about bundles and applications, a task served by the resource fork in the old Mac OS." .

:Proposition a owl:Class ;
    rdfs:label "Proposition" ;
    rdfs:subClassOf :D3FENDCatalogThing ;
    rdfs:isDefinedBy <http://semanticscience.org/resource/SIO_000256> .

:PropositionalLogic a owl:Class ;
    rdfs:label "Propositional Logic" ;
    rdfs:subClassOf :SymbolicReasoning ;
    :definition "Deals with propositions (which can be true or false) and relations between propositions, including the construction of arguments based on them. Compound propositions are formed by connecting propositions by logical connectives. Propositions that contain no logical connectives are called atomic propositions." ;
    :kb-article """## How it works
_TBD enter text here for how the thing works_

## Considerations 

## References 
- https://en.wikipedia.org/wiki/Propositional_calculus""" .

:ProprietaryLicense a owl:Class ;
    rdfs:label "Proprietary License" ;
    rdfs:subClassOf :License .

:ProtocolMetadataAnomalyDetection a :NetworkTrafficAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Protocol Metadata Anomaly Detection" ;
    rdfs:subClassOf :NetworkTrafficAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :NetworkTraffic ] ;
    :d3fend-id "D3-PMAD" ;
    :definition "Collecting network communication protocol metadata and identifying statistical outliers." ;
    :kb-article """## How it works
Network protocol metadata is first collected and processed in real-time or post-facto. Metadata may include packet header information or information about a session (ex. time between requests/responses). Metadata is then grouped based on shared characteristics and those groups are compared to each other. If particular metadata differs significantly from other data, an alert is generated, identifying the network event as anomalous. Anomalous activity may indicate unauthorized activity.

## Considerations
Metadata collection on enterprises can yield large data sets. Storage, indexing, querying, and aging should be considered prior to implementation.""" ;
    :kb-reference :Reference-MethodAndSystemForDetectingThreatsUsingMetadataVectors_VECTRANETWORKSInc,
        :Reference-MethodAndSystemForDetectingThreatsUsingPassiveClusterMapping_VectraNetworksInc,
        :Reference-SystemForImplementingThreatDetectionUsingDailyNetworkTrafficCommunityOutliers_VECTRANETWORKSInc .

:Provider a owl:Class ;
    rdfs:label "Provider" ;
    rdfs:subClassOf :Organization,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :CapabilityImplementation ] .

:ProxyServer a owl:Class ;
    rdfs:label "Proxy Server" ;
    rdfs:subClassOf :NetworkNode,
        :Server ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Proxy_server> ;
    :definition "In computer networking, a proxy server is a server application or appliance that acts as an intermediary for requests from clients seeking resources from servers that provide those resources. A proxy server thus functions on behalf of the client when requesting service, potentially masking the true origin of the request to the resource server." .

:PublicKey a owl:Class ;
    rdfs:label "Public Key" ;
    rdfs:subClassOf :AsymmetricKey ;
    :definition "A public key can be disseminated widely as part of an asymmetric cryptography framework and be used to encrypt messages to send to the public key's owner or to authenticate signed messages from that sender." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Public-key_cryptography> .

:PythonPackage a owl:Class ;
    rdfs:label "Python Package" ;
    rdfs:subClassOf :SoftwarePackage ;
    :definition "A Python package is an aggregation of many Python files - either in source code or in bytecode - and associated metadata and resources (text, images, etc.). Python packages can be distributed in different file formats." ;
    rdfs:seeAlso <https://packaging.python.org/> .

:PythonScriptFile a owl:Class ;
    rdfs:label "Python Script File" ;
    rdfs:subClassOf :ExecutableScript .

:Q-Learning a owl:Class ;
    rdfs:label "Q-Learning" ;
    rdfs:subClassOf :Model-freeReinforcementLearning ;
    :definition "Q-Learning is a model-free reinforcement learning algorithm that is used to solve Markov Decision Process problems. The goal of Q-Learning is to learn a policy, which informs an agent what action to take under what circumstances. It does not require a model of the environment and can handle problems with stochastic transitions and rewards." ;
    :kb-article """## How it works
Q-Learning operates by learning the value of taking an action in a particular state, referred to as Q-value. This value is iteratively updated by performing actions, observing rewards and the subsequent states, and using this information to create or update a table of Q-values. The Q-value for a state-action pair is the current estimate of the expected future reward for that action taken in that state, given that the agent then follows the optimal policy.

Each step in Q-Learning follows the equation:
Q(s, a) = (1 - α) * Q(s, a) + α * (r + γ * max(Q(s', a')))

Where:
- s, a: current state and action
- α: learning rate
- r: immediate reward after taking action a in state s
- γ: discount factor for future rewards
- s', a': next state and best action in the next state according to the current Q-table

The agent typically follows an exploration/exploitation strategy (like ε-greedy strategy) to balance between exploring unknown states and exploiting known information to make the best decision.

## Considerations
- **Exploration vs. Exploitation**: A significant aspect to consider when implementing Q-Learning is the balance between exploration (trying out new, uncertain actions) and exploitation (choosing the best action based on existing knowledge). This is typically handled by the ε-greedy strategy.

- **Learning Rate and Discount Factor**: The parameters α (learning rate) and γ (discount factor) need to be tuned carefully. The learning rate affects how new information overrides old information, and the discount factor determines the importance of future rewards.

- **Convergence**: Although Q-Learning theoretically guarantees convergence to optimal action-values given infinite exploration and time, in practice, it could be slow or might require a substantial number of episodes.

- **State and Action Space Size**: Q-Learning might not be suitable for problems with very large state or action spaces since it maintains a Q-value for every state-action pair, which could become computationally infeasible.

## References
1. Watkins, Christopher JCH, and Peter Dayan. "Q-learning." Machine learning 8.3-4 (1992): 279-292. [Link](https://link.springer.com/article/10.1007/BF00992698)
2. Sutton, Richard S., and Andrew G. Barto. Reinforcement learning: An introduction. Vol. 1, no. 1. Cambridge: MIT press, 1998. [Link](http://incompleteideas.net/book/the-book.html)
3. "Q-Learning", Wikipedia. [Link](https://en.wikipedia.org/wiki/Q-learning)""" .

:QueryByCommittee a owl:Class ;
    rdfs:label "Query By Committee" ;
    rdfs:subClassOf :ActiveLearning ;
    :definition "Active Learning: Query by Committee (QBC) is a type of active learning strategy where multiple models (the \"committee\") are trained, and queries are selected based on where the committee disagrees most. This approach is founded on the principle of maximizing the disagreement or uncertainty of the ensemble to determine the most informative instances to label next." ;
    :kb-article """## How it works
In Query by Committee, a committee of models is trained on the current labeled dataset. For each unlabeled instance, the committee then predicts the output label. If the committee members largely agree on the prediction, it is assumed that the instance is relatively uninformative (i.e., it is likely an easy example that the models can already handle well). However, if the committee members disagree significantly on the output label for a given instance, that instance is considered informative and is selected for labeling.

This disagreement is quantified using measures like vote entropy or Kullback-Leibler divergence among the predictions of the models. After an instance is selected and the true label is obtained, the models are updated with the newly labeled instance. This process is iteratively repeated, thereby helping the models to learn more about the challenging parts of the input space, reducing the need for large amounts of labeled data, and often improving overall model performance.

## Considerations 

- QBC may be more computationally expensive than other active learning methods as it requires training and maintaining multiple models.
- The performance of QBC is heavily dependent on the diversity of the committee. If all models make similar predictions, the committee may not be effective in identifying informative instances.
- Careful choice of disagreement measure is important as it affects which instances are selected for labeling.
- Like all active learning methods, QBC assumes that obtaining labels for selected instances is feasible and less costly than labeling all instances.

## References 

1. Seung, H. S., Opper, M., & Sompolinsky, H. (1992). [Query by committee](https://www.researchgate.net/publication/2356939_Query_by_Committee). In Proceedings of the fifth annual workshop on Computational learning theory (pp. 287-294).
2. Freund, Y., Seung, H. S., Shamir, E., & Tishby, N. (1997). [Selective sampling using the query by committee algorithm](https://dl.acm.org/doi/10.5555/645526.657166). Machine learning, 28(2-3), 133-168.
3. Settles, B. (2010). [Active Learning Literature Survey](https://minds.wisconsin.edu/bitstream/handle/1793/60660/TR1648.pdf). University of Wisconsin–Madison.""" .

:RadioModem a owl:Class ;
    rdfs:label "Radio Modem" ;
    rdfs:subClassOf :Modem ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Modem#Radio> ;
    :definition "A radio modem provides the means to send digital data wirelessly.  Radio modems are used to communicate by direct broadcast satellite, WiFi, WiMax, mobile phones, GPS, Bluetooth and NFC. Modern telecommunications and data networks also make extensive use of radio modems where long distance data links are required. Such systems are an important part of the PSTN, and are also in common use for high-speed computer network links to outlying areas where fiber optic is not economical." .

:RAM a owl:Class ;
    rdfs:label "RAM" ;
    rdfs:subClassOf :PrimaryStorage ;
    rdfs:isDefinedBy "https://dbpedia.org/page/Random-access_memory" ;
    :definition "Random-access memory (RAM) is a form of computer memory that can be read and changed in any order, typically used to store working data and machine code." ;
    :synonym "Random-access Memory" .

:RandomForest a owl:Class ;
    rdfs:label "Random Forest" ;
    rdfs:subClassOf :BootstrapAggregating ;
    :definition "Random Forest is a ML method that combines several other ML methods. At its core, Random Forest is an ensemble method of multiple bootstrapped decision trees filled with training data and random feature selection." ;
    :kb-article """## How it works
_TBD enter text here for how the thing works_

## Considerations 

## References 
_TBD See KB Cards for content_""" .

:RandomSplits a owl:Class ;
    rdfs:label "Random Splits" ;
    rdfs:subClassOf :ResamplingEnsemble ;
    :definition "Random Splits is a resampling ensemble technique used in Machine Learning. This strategy involves generating multiple different splits of the original dataset into training and testing sets, and independently training a model on each split. The final model prediction is then typically the average or majority vote of the individual model predictions." ;
    :kb-article """## How it works
The core idea of Random Splits is to create several train-test partitions of the original data, each of which is used to train a separate model. The goal is to introduce diversity among the models through the variation in training datasets. Essentially, each model sees a slightly different perspective of the data, and thus is likely to make somewhat different predictions. 

To make a prediction using the ensemble, the predictions of the individual models are aggregated. The exact aggregation method can vary depending on the problem at hand. For regression problems, the final output could be the average of the individual model outputs. For classification problems, a majority vote system could be used where the class predicted by the majority of models is selected.

## Considerations 

* **Overfitting:** While the method may help reduce overfitting due to the varied data each model receives, if the individual models are too complex, overfitting can still occur.

* **Computational resources:** Creating multiple splits and training a model on each can be computationally intensive, especially with large datasets or complex models.

* **Randomness:** Since the splits are created randomly, the performance of the ensemble may vary with different runs. To control this, a consistent random seed may be used.

* **Data distribution:** In data-sparse scenarios or if the data is unevenly distributed, the random split method might not give a representative training set, which could impact the performance of the model.

## References 

1. [Resampling methods for unsupervised estimation of class priors: ensemble and subensemble methods](https://link.springer.com/article/10.1007/s10618-018-0565-5)
   
2. [Ensemble Learning Methods for Binary Classification](https://www.researchgate.net/publication/321259051_Ensemble_Learning_Methods_for_Binary_Classification)

3. [Bootstrap Methods and Random Splits for Training Validation and Testing](https://ieeexplore.ieee.org/document/8466591)

4. Hastie, T., Tibshirani, R., & Friedman, J. (2009). The elements of statistical learning: data mining, inference, and prediction. Springer Science & Business Media.""" .

:Range a owl:Class ;
    rdfs:subClassOf :Variability .

:RangeMatching a owl:Class ;
    rdfs:label "Range Matching" ;
    rdfs:subClassOf :NumericPatternMatching .

:RankCorrelationCoefficient a owl:Class ;
    rdfs:label "Rank Correlation" ;
    rdfs:subClassOf :Correlation .

:RawMemoryAccessFunction a owl:Class ;
    rdfs:label "Raw Memory Access Function" ;
    rdfs:subClassOf :Subroutine,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :MemoryBlock ] ;
    :definition "A function which accesses raw memory, usually using memory addresses." .

:RDPSession a owl:Class ;
    rdfs:label "RDP Session" ;
    skos:altLabel "Remote Desktop Session",
        "Terminal Services" ;
    rdfs:subClassOf :RemoteSession ;
    :definition "A Remote Desktop Protocol (RDP) session is a session established using the RDP protocol to access Remove Desktop Services (RDS)." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Remote_Desktop_Protocol>,
        <http://dbpedia.org/resource/Remote_Desktop_Services> .

:ReadFile a owl:Class ;
    rdfs:label "Read File" ;
    rdfs:subClassOf :SystemCall,
        [ a owl:Restriction ;
            owl:onProperty :reads ;
            owl:someValuesFrom :File ] ;
    :definition "A program that needs to access data from a file stored in a file system uses the read system call. The file is identified by a file descriptor that is normally obtained from a previous call to open. This system call reads in data in bytes, the number of which is specified by the caller, from the file and stores then into a buffer supplied by the calling process." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Read_(system_call)> .

:Reconnaissance a owl:Class ;
    rdfs:subClassOf :OffensiveTactic ;
    :display-order 0 .

:ReconnaissanceTechnique a owl:Class ;
    rdfs:label "Reconnaissance Technique" ;
    rdfs:subClassOf :OffensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Reconnaissance ] .

:Record a owl:Class ;
    rdfs:label "Record" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Record_(computer_science)> ;
    :definition "In computer science, a record (also called struct or compound data) is a basic data structure. A record is a collection of fields, possibly of different data types, typically in fixed number and sequence . The fields of a record may also be called members, particularly in object-oriented programming. Fields may also be called elements, though these risk confusion with the elements of a collection. A tuple may or may not be considered a record, and vice versa, depending on conventions and the specific programming language." .

:RecurrentNeuralNetwork a owl:Class ;
    rdfs:label "Recurrent Neural Network" ;
    rdfs:subClassOf :DeepNeuralNetClassification ;
    :definition """A Recurrent Neural Network (RNN) is a type of artificial neural network designed to recognize patterns in sequences of data, such as text, genomes, handwriting, or speech. Unlike traditional neural networks, RNNs retain a form of memory as they process sequences, allowing them to use information from earlier in the sequence to influence how they process later parts.

or

Recurrent Nerual Networks (RNN) are a class of artificial neural networks where connections between nodes can create a cycle, allowing output from some nodes to affect subsequent input to the same nodes. This allows it to exhibit temporal dynamic behavior.""" ;
    :kb-article """## How it works
RNNs work by maintaining a hidden state, which captures information about the sequence processed up to the current point and influences the processing of the elements of the sequence to come. This hidden state is updated at each step of the sequence, with the new state being a function of the old state and the current input. This is a significant departure from feedforward neural networks, which process each input independently. 

The most common way of training RNNs is through a method called backpropagation through time (BPTT), which is a variant of the standard backpropagation used for feedforward networks. BPTT unfolds the network through time and then applies standard backpropagation. This allows RNNs to learn to predict or classify future elements of the sequence based on the history they've seen so far.

## Considerations 

- **Vanishing and Exploding Gradients:** RNNs often suffer from vanishing or exploding gradients, making them difficult to train effectively. This issue is especially pronounced when dealing with long sequences. To address this, a variety of RNN types have been proposed, including Long Short-Term Memory (LSTM) and Gated Recurrent Unit (GRU) networks.

- **Computational Intensity:** Due to their recurrent nature, RNNs can be computationally intense, particularly for long sequences. They also require more memory to store the intermediate hidden states for backpropagation.

- **Sequential Processing:** RNNs process sequences step by step, which can lead to slower training times since they cannot take advantage of parallel processing opportunities to the same extent as convolutional or fully-connected layers.

## References 

- Understanding LSTM Networks (Colah’s Blog) [link](https://colah.github.io/posts/2015-08-Understanding-LSTMs/)
- Coursera: Sequence Models by Andrew Ng [link](https://www.coursera.org/learn/nlp-sequence-models)
- Vanishing and exploding gradient problems in RNNs [link](https://www.deeplearningbook.org/contents/rnn.html)
- Deep Learning Book by Goodfellow, Bengio, and Courville [link](https://www.deeplearningbook.org/)""" ;
    :todo "Review: Which Definition" .

:Reference a owl:Class ;
    rdfs:label "Reference" ;
    rdfs:subClassOf :D3FENDThing .

:ReferenceType a owl:Class ;
    rdfs:label "Reference Type" ;
    rdfs:subClassOf :D3FENDThing .

:RegexMatching a owl:Class ;
    rdfs:label "Regex Matching" ;
    rdfs:subClassOf :PartialMatching ;
    :definition "A Regular Expression (or Regex) is a pattern (or filter) that describes a set of strings that matches the pattern. In other words, a regex accepts a certain set of strings and rejects the rest." ;
    :kb-article """## How it works
_TBD enter text here for how the thing works_

## Considerations 

## References 
- https://www3.ntu.edu.sg/home/ehchua/programming/howto/Regexe.html""" .

:RegressionAnalysis a owl:Class ;
    rdfs:label "Regression Analysis" ;
    rdfs:subClassOf :StatisticalMethod ;
    :definition "Regression analysis is a statistical method that attempts to predict a dependent variable based on the values of one or more independent variables. It quantitatively analyzes the relationship between these variables and can be utilized for forecasting, time series modeling, and finding causal effect relationships." ;
    :kb-article """## How it works
In a regression analysis, the dataset is divided into dependent (target) and independent (predictor) variables. A model is then created which best fits this set of data, often in the form of an equation that describes the relationship between the variables. For instance, in a simple linear regression, a straight line (Y = a + bX + e) is fitted to the data where Y is the dependent variable, X is the independent variable, a is the Y-intercept, b is the slope of the line (representing the relationship between X and Y), and e is the error term.

The coefficients of the regression model (a and b in this case) are estimated using a method such as least squares, which minimizes the sum of the squared differences (residuals) between the actual and predicted values of the dependent variable. Once this model has been established, it can be used to predict the value of the dependent variable based on new inputs of the independent variable(s).

## Considerations
- Assumptions: Regression analysis makes several assumptions including linearity, independence, homoscedasticity, and normality. Violations of these assumptions can lead to unreliable results.
- Multicollinearity: This refers to high correlations among predictor variables, which can distort the coefficient estimates and make it difficult to determine the individual effects of predictors on the response variable.
- Overfitting: If a model is too complex, it may capture noise in the data and perform poorly on unseen data. Model complexity should be controlled to ensure generalizability.
- Outliers: Outliers can significantly impact the regression line and estimates. They should be examined and addressed appropriately in the analysis.
- Interpretation: The interpretation of regression results should be carried out with care, remembering that "correlation does not imply causation".

## References
1. James, Gareth, et al. "An Introduction to Statistical Learning: with Applications in R." Springer, 2013. [Link](https://www.springer.com/gp/book/9781461471370)
2. Hastie, Trevor, et al. "The Elements of Statistical Learning: Data Mining, Inference, and Prediction." Springer, 2009. [Link](https://www.springer.com/gp/book/9780387848570)
3. NIST/SEMATECH. "e-Handbook of Statistical Methods." [Link](https://www.itl.nist.gov/div898/handbook/pri/section2/pri24.htm)
4. Khan Academy. "Regression and correlation." [Link](https://www.khanacademy.org/math/ap-statistics/bivariate-data-ap/assessing-fit-least-squares-regression/a/r-squared-intuition)""" .

:RegressionAnalysisLearning a owl:Class ;
    rdfs:label "Regression Analysis Learning" ;
    rdfs:subClassOf :SupervisedLearning .

:ReinforcementLearning a owl:Class ;
    rdfs:label "Reinforcement Learning" ;
    rdfs:subClassOf :MachineLearning ;
    :definition """Reinforcement learning (RL) is an area of machine learning concerned with how intelligent agents ought to take actions in an environment in order to maximize the notion of cumulative reward.

or 

Reinforcement Learning (RL) is a type of machine learning paradigm where an agent learns to behave in an environment, by performing certain actions and observing the results or rewards of those actions. This learning process involves identifying the optimal actions that lead to the most rewarding outcomes over time, based on a reward feedback system.""" ;
    :kb-article """## How it works
Reinforcement Learning works by establishing a process where an agent interacts with its environment. During this process, the agent takes actions based on its current state, which in turn leads to a change in the environment's state. Each action has an associated reward (or penalty), and the goal of the agent is to learn a policy, which is a strategy to select actions that maximize the cumulative reward over time.

This learning process is typically formalized using a Markov Decision Process. The agent's task is to find an optimal policy that maximizes the expected sum of discounted future rewards. The learning can occur in various ways, including methods such as value iteration, policy iteration, or through using function approximation methods like Deep Learning (used in Deep Q-Learning and Actor-Critic methods, for example). 

## Considerations 

- **Reward Engineering**: Designing the reward function often requires significant domain knowledge and can be tricky, as unexpected behaviors can emerge if the agent "games" the system to achieve rewards in an unintended way.
  
- **Credit Assignment Problem**: Deciding which actions were responsible for the outcome (either success or failure) can be difficult, especially when there are long sequences of actions.
  
- **Exploration vs. Exploitation**: The algorithm needs to balance the exploration of the environment (to learn more about it) and exploitation (to make the best decision given current knowledge). Achieving a good balance can be challenging.
  
- **Computational Resources**: Reinforcement Learning, especially in its deep learning variants, can require significant computational resources and time to converge.

## References 

1. Richard S. Sutton and Andrew G. Barto, "Reinforcement Learning: An Introduction", MIT Press, 2018. [Online Book](http://incompleteideas.net/book/the-book.html)
  
2. Volodymyr Mnih, et al. "Playing Atari with Deep Reinforcement Learning", arXiv preprint arXiv:1312.5602, 2013. [Research Paper](https://arxiv.org/abs/1312.5602)
  
3. Pieter Abbeel and John Schulman, "Deep Reinforcement Learning" [Course](http://rail.eecs.berkeley.edu/deeprlcourse/)
  
4. OpenAI, "Spinning Up in Deep RL", [Online Resource](https://spinningup.openai.com/en/latest/)

5. https://www.techtarget.com/searchenterpriseai/definition/reinforcement-learning""" ;
    :todo "Review: Which definition is better?" .

:Relational-basedTransferLearning a owl:Class ;
    rdfs:label "Relational-based Transfer Learning" ;
    rdfs:subClassOf :HomogenousTransferLearning ;
    :definition "Relational-based Transfer Learning is a subfield of machine learning where knowledge and patterns learned from one domain, characterized by relational and structured data, are transferred to enhance the learning of another related domain. This approach leverages shared concepts, relations, and structures across domains, taking advantage of the rich semantic knowledge within relational data to improve learning performance in the target task." ;
    :kb-article """## How it works

Relational-based Transfer Learning works by identifying and transferring the underlying relationships or structures from a source domain to a target domain. Instead of focusing on individual instances or feature representations, as in traditional transfer learning, relational-based methods concentrate on the structured and relational characteristics of the data.

For instance, in a relational database, there may be a set of tables with relations and dependencies among them, which contain valuable information not available at the level of individual instances. The first step in this type of learning involves extracting these relationships from the source domain, such as dependencies, semantic relations, or network structures.

The next step involves applying this relational knowledge to the target domain. The goal here is to identify the shared or similar structures between the source and target domains, and map these structures in such a way that the learned patterns can be effectively applied to the target domain. This process can significantly improve the learning accuracy and efficiency in the target domain, especially when there is limited labeled data available.

## Considerations 

- **Domain Similarity**: For effective transfer, there needs to be some degree of similarity or shared structure between the source and target domains. If the domains are very different, the transferred knowledge may not be applicable or beneficial.

- **Negative Transfer**: If not done properly, transfer learning can lead to negative transfer, where the performance in the target task degrades due to the irrelevant or misleading information transferred from the source domain.

- **Complexity**: Extracting and transferring relational information can be complex and computationally intensive, especially for large, interconnected data sets.

- **Privacy and Ethics**: In certain cases, transfer learning could involve sharing of sensitive or proprietary data between domains. Proper data handling and privacy measures need to be in place.

## References

1. [Inductive Transfer for Relational Domains: A Preliminary Report](https://www.researchgate.net/publication/2253864_Inductive_Transfer_for_Relational_Domains_A_Preliminary_Report)
2. [Transfer Learning for Relational Databases](https://ieeexplore.ieee.org/abstract/document/6063134)
3. [Transfer Learning in Relational Domains: A Policy-Based Approach](https://link.springer.com/chapter/10.1007/978-3-642-10439-8_7)
4. [A Survey on Transfer Learning](https://ieeexplore.ieee.org/abstract/document/5288526)
5. [Deep Learning-Based Transfer Learning in Healthcare: A Review](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7672006/)""" .

:RelayPatternAnalysis a :NetworkTrafficAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Relay Pattern Analysis" ;
    rdfs:subClassOf :NetworkTrafficAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :OutboundInternetNetworkTraffic ] ;
    :d3fend-id "D3-RPA" ;
    :definition "The detection of an internal host relaying traffic between the internal network and the external network." ;
    :kb-article """## How it works
A relay may use a variety of proxying, forwarding, or routing technologies to bridge a protected network with an external network. A defensive analytic to detect a relay network may compare the network sessions among multiple hosts. Hosts which have nearly similar network statistics may be part of a relay network. The statistics may include number of bytes sent to and from, time of session initiation, packet size, or packet arrival time data.

## Considerations

Complex intranet VPNs or routing encapsulation may affect the detection analytics.  In addition, unwanted packets might not be forwarded, and additional packets may be added at the relay, further complicating detection.""" ;
    :kb-reference :Reference-MaliciousRelayDetectionOnNetworks_VECTRANETWORKSInc ;
    :synonym "Relay Network Detection" .

:RemoteAuthenticationService a owl:Class ;
    rdfs:label "Remote Authentication Service" ;
    rdfs:subClassOf :AuthenticationService,
        :NetworkService ;
    :definition "A remote authentication service provides for the authentication of a user across a network (i.e., remotely)." .

:RemoteAuthorizationService a owl:Class ;
    rdfs:label "Remote Authorization Service" ;
    rdfs:subClassOf :AuthorizationService ;
    :definition "A remote authorization service provides for the authorization of a user across a network (i.e., remotely)." .

:RemoteCommand a owl:Class ;
    rdfs:label "Remote Command" ;
    rdfs:subClassOf :Command,
        :NetworkSession ;
    :definition "A remote command is a command sent from one computer to another to be executed on the remote computer.  One example of this, is through a command-line interface (CLI) like using Invoke-Command from PowerShell or a command sent through an ssh session. This class generalizes to all means of sending a command through an established protocol to control capabilities on a remote computer." .

:RemoteDatabaseQuery a owl:Class ;
    rdfs:label "Remote Database Query" ;
    rdfs:subClassOf :DatabaseQuery,
        :RemoteCommand ;
    :definition "A remote query session enabling a user to make an SQL, SPARQL, or similar query over the network from one host to another." .

:RemoteProcedureCall a owl:Class ;
    rdfs:label "Remote Procedure Call" ;
    rdfs:subClassOf :RemoteCommand ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Remote_procedure_call> ;
    :definition "In distributed computing a remote procedure call (RPC) is when a computer program causes a procedure (subroutine) to execute in another address space (commonly on another computer on a shared network), which is coded as if it were a normal (local) procedure call, without the programmer explicitly coding the details for the remote interaction. That is, the programmer writes essentially the same code whether the subroutine is local to the executing program, or remote. This is a form of client-server interaction (caller is client, executor is server), typically implemented via a request-response message-passing system. The object-oriented programming analog is remote method invocation (RMI). The RPC model implies a level of location transparency." .

:RemoteResource a owl:Class ;
    rdfs:label "Remote Resource" ;
    rdfs:subClassOf :Resource ;
    :definition "In computing, a remote  resource is a computer resource made available from one host to other hosts on a computer network. It is a device or piece of information on a computer that can be remotely accessed from another computer, typically via a local area network or an enterprise intranet." ;
    rdfs:seeAlso :NetworkResource .

:RemoteSession a owl:Class ;
    rdfs:label "Remote Session" ;
    rdfs:subClassOf :LoginSession ;
    :definition "A remote login session is a login session where a client has logged in from their local host machine to a server via a network." .

:RemoteTerminalSession a owl:Class ;
    rdfs:label "Remote Terminal Session" ;
    rdfs:subClassOf :NetworkSession ;
    :definition "A remote terminal session is a session that provides a user access from one host to another host via a terminal." .

:RemoteTerminalSessionDetection a :NetworkTrafficAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Remote Terminal Session Detection" ;
    rdfs:subClassOf :NetworkTrafficAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :NetworkTraffic ] ;
    :d3fend-id "D3-RTSD" ;
    :definition "Detection of an unauthorized remote live terminal console session by examining network traffic to a network host." ;
    :kb-article """## How it works
An external attacker takes remote control of a host inside a company or organization's network and manually directs offensive techniques. Nonstandard terminal sessions and abnormal behaviors are analyzed in this technique. Abnormal behavior detection includes analysis of user input patterns in the real-time session, keyboard output and packet inspection.

### Network Traffic Inspection
Network traffic from internal hosts is the main concern and focus for the traffic inspection. The network traffic is collected into inspection groups. The groups of traffic are assembled into distinct pair flows (outbound/inbound) and the pair flows are further divided into sessions. Only sessions originated inside of the network are considered for the inspection. Traffic inspection includes analysis to determine if a human is involved in the session exchanges. Time-based statistics are captured for each session being analyzed by the detection engine.

### Algorithm Analysis Description
Analysis algorithms look for patterns in the network traffic captured from the session data.  A detection engine groups the session traffic data, between the hosts, into rapid exchange instances. Analysis of rapid exchange traffic patterns can lead to the discovery of abnormal behavior which is indicative of a compromised internal host. The analysis algorithms look for patterns in the traffic which correlate to known activity (e.g., relay attacks, bot activity, bitcoin mining). Some metrics used during inspection include the following.

* Number of rapid-exchange instances
* Time interval between packets
* Fixed cadence of traffic
* Rhythm and direction of the initiation of instances
* Volume of data flowing from internal to external controlling host
* Data transfer characteristics
* Variability in length of silent periods

## Considerations
* Full packet capture is required which can be process intensive to analyze
* Attackers that move low and slow may blend in with existing traffic resulting in false negatives""" ;
    :kb-reference :Reference-MethodAndSystemForDetectingExternalControlOfCompromisedHosts_VECTRANETWORKSInc,
        :Reference-RDPConnectionDetection_MITRE,
        :Reference-RemoteDesktopLogon_MITRE .

:RemovableMediaDevice a owl:Class ;
    rdfs:label "Removable Media Device" ;
    rdfs:subClassOf :HardwareDevice ;
    :definition "A removable media device is a hardware device used for computer storage and that is designed to be inserted and removed from the system.  It is distinct from other removable media in that all the hardware required to read the data are built into the device.  So USB flash drives and external hard drives are removable media devices, whereas tapes and disks are not, as they require additional hardware to perform read/write operations." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Removable_media> .

:ResamplingEnsemble a owl:Class ;
    rdfs:label "Resampling Ensemble" ;
    rdfs:subClassOf :EnsembleLearning ;
    :definition "A Resampling Ensemble is a machine learning technique that involves creating multiple subsets of the original data, training a model on each, and combining their predictions to generate the final output. This method is highly effective in reducing overfitting and improving model stability." ;
    :kb-article """## How it works
Resampling Ensemble methods work by essentially creating 'diverse' models and then combining them. The diversity comes from the random subsets of data, often created through techniques such as bootstrapping, on which each model is trained. These subsets can be drawn with replacement (like in bagging) or without replacement (like in pasting). Each model is trained independently and makes its predictions. These predictions are then combined, either through a simple majority vote (in case of classification) or an average (in case of regression), to make the final prediction. This process reduces the variance of the prediction by averaging out the noise from each of the individual models, which leads to a more robust and stable final model. 

Resampling ensemble techniques are commonly used in decision tree methods, like Random Forests, and also in boosting algorithms, like AdaBoost or Gradient Boosting, where weak learners are combined to create a strong learner. 

## Considerations 

- **Overfitting**: Resampling ensemble methods can be a powerful tool against overfitting. However, if the individual models are complex and overfit the data, the ensemble could also suffer from overfitting. 

- **Computation Cost**: As multiple models need to be trained independently, the computational cost can be high. This may pose a challenge for very large datasets or complex models.

- **Interpretability**: While ensemble methods can improve prediction accuracy, they may decrease interpretability because they combine predictions from multiple models.

- **Randomness**: The randomness in data sampling can lead to different results if the model is run multiple times. Setting a seed for the random number generator can ensure reproducibility.

## References 

1. Breiman, L. (1996). Bagging predictors. Machine Learning, 24(2), 123-140.
2. James, G., Witten, D., Hastie, T., & Tibshirani, R. (2013). An Introduction to Statistical Learning (Vol. 112, pp. 3-7). New York: springer.
3. Freund, Y., & Schapire, R. E. (1997). A Decision-Theoretic Generalization of on-Line Learning and an Application to Boosting. Journal of Computer and System Sciences, 55(1), 119-139.
4. Ho, T. K. (1995). Random Decision Forests. Proceedings of 3rd International Conference on Document Analysis and Recognition, 1, 278-282.""" .

:ResidualNeuralNetwork a owl:Class ;
    rdfs:label "Residual Neural Network" ;
    rdfs:subClassOf :ConvolutionalNeuralNetwork ;
    :definition "Residual Neural Network (ResNet) is a type of deep learning model introduced by Microsoft Research, which addresses the issue of training very deep neural networks by using \"skip\" or \"shortcut\" connections. These connections bypass layers in the network, allowing gradients to flow directly through these additional paths, which effectively resolves the vanishing/exploding gradients problem commonly seen in deep neural networks." ;
    :kb-article """## How it works
Residual Neural Networks employ residual blocks, which are essentially feedforward networks with shortcut connections. Each residual block consists of several convolutional layers and a shortcut connection. The output of the convolutional layers is added to the input passed via the shortcut, creating the residual learning: instead of learning an underlying mapping, layers learn a residual mapping.

This design addresses the degradation problem faced by deep neural networks: as the network depth increases, accuracy can get saturated and then rapidly degrade. The degradation problem suggests that not all systems are easy to optimize. ResNet ease the training of these networks by providing shortcut connections which create an identity mapping, simplifying the optimization of the network. In essence, the core idea of ResNet is introducing a direct shortcut from input to output which helps in backpropagation of gradients all the way to the initial layers.

## Considerations 
- **Network Depth**: While ResNet allows for deeper networks without the vanishing gradient problem, the depth of the network should still be tailored to the complexity of the problem. Using a network deeper than necessary may increase computational cost without significant gain in accuracy.
- **Computational Resources**: ResNets, especially deeper variants, can be resource-intensive. Ensure sufficient computational resources (like GPU memory) are available.
- **Data Requirement**: As with any deep learning technique, ResNets require a significant amount of labeled training data for optimal performance.
- **Transfer Learning**: Pre-trained ResNet models are widely available and can be fine-tuned on a specific task, which can save significant time and resources.

## References 
1. [Deep Residual Learning for Image Recognition](https://arxiv.org/abs/1512.03385) - Original ResNet paper by Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun.
2. [ResNet Architecture Explained](https://towardsdatascience.com/residual-blocks-building-blocks-of-resnet-fd90ca15d6ec) - Towards Data Science article explaining the ResNet architecture.
3. [CS231n: Convolutional Neural Networks for Visual Recognition](http://cs231n.github.io/) - Stanford University course covering deep learning architectures including ResNet.""" .

:Resource a owl:Class ;
    rdfs:label "Resource" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/System_resource> ;
    :definition "In computing, a system resource, or simply resource, is any physical or virtual component of limited availability within a computer system. Every device connected to a computer system is a resource. Every internal system component is a resource. Virtual system resources include files (concretely file handles), network connections (concretely network sockets), and memory areas. Managing resources is referred to as resource management, and includes both preventing resource leaks (releasing a resource when a process has finished using it) and dealing with resource contention (when multiple processes wish to access a limited resource)." .

:ResourceAccess a owl:Class ;
    rdfs:label "Resource Access" ;
    rdfs:subClassOf :DigitalEvent,
        :UserAction ;
    :definition "Ephemeral digital artifact comprising a request of a resource and any response from that resource." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Computer_access_control> .

:ResourceAccessPatternAnalysis a owl:Class,
        owl:NamedIndividual,
        :UserBehaviorAnalysis ;
    rdfs:label "Resource Access Pattern Analysis" ;
    rdfs:subClassOf :UserBehaviorAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :Authentication ],
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :Authorization ] ;
    :d3fend-id "D3-RAPA" ;
    :definition "Analyzing the resources accessed by a user to identify unauthorized activity." ;
    :kb-article """## How it works
This technique analyzes a user's resource accesses by comparing the user's recent activity against a baseline activity model. Major differences between the current activity and the baseline model might indicate unauthorized activity if they are severe enough.


## Considerations
* Potential for false positives from anomalies that are not associated with malicious activity.
* Attackers that move low and slow may not differentiate their resource access activity behavior enough to trigger an alert.""" ;
    :kb-reference <http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-System,Method,AndComputerProgramProductForDetectingAndAssessingSecurityRisksInANetwork_ExabeamInc>,
        :Reference-HostIntrusionPreventionSystemUsingSoftwareAndUserBehaviorAnalysis_SophosLtd,
        :Reference-MethodAndApparatusForNetworkFraudDetectionAndRemediationThroughAnalytics_IdaptiveLLC,
        :Reference-ModelingUserAccessToComputerResources_DaedalusGroupLLC,
        :Reference-SystemAndMethodThereofForIdentifyingAndRespondingToSecurityIncidentsBasedOnPreemptiveForensics_PaloAltoNetworksInc .

:ResourceDevelopment a owl:Class ;
    rdfs:label "Resource Development" ;
    rdfs:subClassOf :OffensiveTactic .

:ResourceDevelopmentTechnique a owl:Class ;
    rdfs:label "Resource Development Technique" ;
    rdfs:subClassOf :OffensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Reconnaissance ] .

:ResourceFork a owl:Class ;
    rdfs:label "Resource Fork" ;
    rdfs:subClassOf :FileSection ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Resource_fork> ;
    :definition "The resource fork is a fork or section of a file on Apple's classic Mac OS operating system, which was also carried over to the modern macOS for compatibility, used to store structured data along with the unstructured data stored within the data fork." .

:ReverseProxyServer a owl:Class ;
    rdfs:label "Reverse Proxy Server" ;
    rdfs:subClassOf :ProxyServer ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Reverse_proxy> ;
    :definition "In computer networks, a reverse proxy is a type of proxy server that retrieves resources on behalf of a client from one or more servers. These resources are then returned to the client, appearing as if they originated from the proxy server itself. Unlike a forward proxy, which is an intermediary for its associated clients to contact any server, a reverse proxy is an intermediary for its associated servers to be contacted by any client. In other words, a proxy acts on behalf of the client(s), while a reverse proxy acts on behalf of the server(s); a reverse proxy is usually an internal-facing proxy used as a 'front-end' to control and protect access to a server on a private network." .

:ReverseResolutionDomainDenylisting a :DNSDenylisting,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Reverse Resolution Domain Denylisting" ;
    rdfs:subClassOf :DNSDenylisting,
        [ a owl:Restriction ;
            owl:onProperty :blocks ;
            owl:someValuesFrom :InboundInternetDNSResponseTraffic ] ;
    :d3fend-id "D3-RRDD" ;
    :definition "Blocking a reverse DNS lookup's answer's domain name value." ;
    :kb-article """## How it works

In reverse resolution requests, the client sends to a nameserver (such as a DNS server) a query of an IP address, to get a response of the associated domain name(s). This technique drops reverse lookup responses where a domain name matches an entry in the blacklist, either verbatim or as a wildcard subdomain of a higher-level domain on the list. Such domain names might be unwanted because Forward Domain Name Resolution requests to such a blacklisted domain might return an unwanted IP address.

This technique is useful because relying solely on Forward Resolution Domain Blacklisting will miss instances where the domain in question is forward-resolved in a manner that is not inspected via a subsequent technique (as is likely the case if that resolution is performed with DoH (DNS over HTTPS) or DoT (DNS over TLS)). Additionally, note that responses to forward lookups of that domain are *not* necessarily equal to the original IP in the reverse lookup request, and that future lookups of a string based on this domain may even employ a less-common name resolution protocol, such as NBNS.

The DNS response can either be blocked by dropping the network traffic with an inline device, or by modifying the value of the response sent by the DNS server.  To prevent client applications from hanging on a request, it is common practice to replace malicious values, either with names like "localhost." or the address of a honeypot maintained by the network administrators.

## Considerations

* This technique does not prevent the client from contacting the blacklisted domain or any IP addresses that it might resolve to, only from learning about this domain name via a nameserver lookup.
* DNS response traffic can be transmitted over many different protocols, which presents a challenge to implementing methods to extract all DNS answer domain name value(s).
  * DNS has historically used UDP port 53, with TCP port 53 instead used for responses over 512 bytes or after a lack of response over UDP.
  * Usage of new protocols to provide confidentiality for DNS traffic, such as DoH (DNS over HTTPS) and DoT (DNS over TLS), complicates collection of the IP address(es) in DNS responses. These protocols have often been enabled in browser settings transparently after a browser update, with DNS requests proxied over one of these cryptographic protocols through a specified host.
* This technique must be deployed between the application that receives the response and the server which sent the response.
  * DNS responses sent in an encrypted manner, such as using DoH or DoT, will require interception of the TLS connections in order to determine the domain name(s) in the response.
* Replacing the response is not effective in the case that the nameserver uses a technique to provide integrity of its responses, such as DNSSEC for DNS responses.""" ;
    :synonym "Reverse Resolution Domain Blacklisting" .

:ReverseResolutionIPDenylisting a :DNSDenylisting,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Reverse Resolution IP Denylisting" ;
    rdfs:subClassOf :DNSDenylisting,
        [ a owl:Restriction ;
            owl:onProperty :blocks ;
            owl:someValuesFrom :OutboundInternetDNSLookupTraffic ] ;
    :d3fend-id "D3-RRID" ;
    :definition "Blocking a reverse lookup based on the query's IP address value." ;
    :kb-article """## How it works
This technique prevents a client from learning domains deemed to be potentially malicious, which would have been delivered via reverse resolution responses over the DNS protocol.

Queries for reverse resolution requests (that is, requests where IP(s) are sent and a domain is returned) are collected, and the IP address(es) included in the query are examined. If the IP address(es) are in a range included in the blacklist, then the query is dropped.

## Considerations
- The blacklist will have to be maintained and will need to be kept up to date with identified maintenance cycles to ensure lists are not stale.
- DNS query traffic can be transmitted over many different protocols, which presents a challenge to implementing methods to extract all DNS query IP address value(s).
  - DNS has historically used UDP port 53, with TCP port 53 instead used for responses over 512 bytes or after a lack of response over UDP.
  - Usage of new protocols to provide confidentiality for DNS traffic, such as DoH (DNS over HTTPS) and DoT (DNS over TLS), complicates collection of the IP address(es) in DNS queries. These protocols have often been enabled in browser settings transparently after a browser update, with DNS queries proxied over one of these cryptographic protocols through a specified host.""" ;
    :kb-reference :Reference-UseDNSPolicyForApplyingFiltersOnDNSQueries ;
    :synonym "Reverse Resolution IP Blacklisting" .

:RFNode a owl:Class ;
    rdfs:label "RF Node" ;
    rdfs:subClassOf :NetworkNode .

:RFReceiver a owl:Class ;
    rdfs:label "RF Receiver" ;
    rdfs:subClassOf :RFNode .

:RFShielding a owl:Class,
        owl:NamedIndividual,
        :PlatformHardening ;
    rdfs:label "RF Shielding" ;
    rdfs:subClassOf :PlatformHardening ;
    :d3fend-id "D3-RFS" ;
    :definition "Adding physical barriers to a platform to prevent undesired radio interference." ;
    :kb-reference :Reference-PrivacyAndSecuritySystemsAndMethodsOfUse,
        :Reference-Technical_Specifications_for_Construction_and_Management_of_Sensitive_Compartmented_Information_Facilities .

:RFTransceiver a owl:Class ;
    rdfs:label "RF Transceiver" ;
    rdfs:subClassOf :RFNode .

:RFTransmitter a owl:Class ;
    rdfs:label "RF Transmitter" ;
    rdfs:subClassOf :RFNode .

:ROM a owl:Class ;
    rdfs:label "ROM" ;
    rdfs:subClassOf :PrimaryStorage ;
    rdfs:isDefinedBy "https://dbpedia.org/page/Read-only_memory" ;
    :definition "Read-only memory (ROM) is a type of non-volatile memory used in computers and other electronic devices. Data stored in ROM cannot be electronically modified after the manufacture of the memory device. Read-only memory is useful for storing software that is rarely changed during the life of the system, also known as firmware." ;
    :synonym "Read-only Memory" .

:Router a owl:Class ;
    rdfs:label "Router" ;
    rdfs:subClassOf :NetworkNode ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Router_(computing)> ;
    :definition "A router is a networking device that forwards data packets between computer networks. Routers perform the traffic directing functions on the Internet. Data sent through the internet, such as a web page or email, is in the form of data packets. A packet is typically forwarded from one router to another router through the networks that constitute an internetwork (e.g. the Internet) until it reaches its destination node." .

:RPCNetworkTraffic a owl:Class ;
    rdfs:label "RPC Network Traffic" ;
    rdfs:subClassOf :NetworkTraffic ;
    :definition "RPC network traffic is network traffic related to remote procedure calls between network nodes..This includes only network traffic conforming to a standard RPC protocol; not custom protocols." .

:RPCTrafficAnalysis a :NetworkTrafficAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "RPC Traffic Analysis" ;
    rdfs:subClassOf :NetworkTrafficAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :RPCNetworkTraffic ] ;
    :d3fend-id "D3-RTA" ;
    :definition "Monitoring the activity of remote procedure calls in communication traffic to establish standard protocol operations and potential attacker activities." ;
    :kb-article """## How it works
A remote procedure call (RPC) enables one computer to execute a specific function on another computer, as if it were a local application process. There are numerous RPC specifications and implementations. RPC capabilities can be abused by attackers in order to achieve a variety of tactical objectives including execution, persistence, initial access, and more. RPC proxies may be used to collect and store RPC traffic. RPCs can occur over network sockets or named pipes.

Analytics look for unauthorized behavior such as:

* Processes being launched or scheduled remotely
* System configurations being changed remotely
* Unauthorized file read activity

Example RPC Protocols:

* DCE/RPC
* CORBA
* Open Network Computing Remote Procedure Call
* D-Bus
* XML-RPC
* JSON-RPC
* SOAP
* Apache Thrift

## Considerations
* RPC is widely used in enterprise environments, and significant data filtering may be required in large environments to enable analytic processing.
* RPC traffic may occur over a pipe, or within a host over loopback interface, thus making network collection difficult.""" ;
    :kb-reference :Reference-CAR-2014-05-001%3ARPCActivity_MITRE,
        :Reference-CAR-2014-11-007-RemoteWindowsManagementInstrumentation_WMI_OverRPC_MITRE,
        :Reference-CreateRemoteProcessViaWMIC_MITRE_Other,
        :Reference-RemotelyLaunchedExecutablesViaServices_MITRE,
        :Reference-RemotelyLaunchedExecutablesViaWMI_MITRE,
        :Reference-RemotelyScheduledTasksViaSchtasks_MITRE,
        :Reference-RPCCallInterception_CrowdstrikeInc,
        :Reference-SMBWriteRequest-NamedPipes_MITRE ;
    :synonym "RPC Protocol Analysis" .

:SARSA a owl:Class ;
    rdfs:label "SARSA" ;
    rdfs:subClassOf :Model-freeReinforcementLearning ;
    rdfs:isDefinedBy "https://dbpedia.org/page/State%E2%80%93action%E2%80%93reward%E2%80%93state%E2%80%93action" ;
    :definition "SARSA (State-Action-Reward-State-Action) is a reinforcement learning algorithm used to estimate the value of the policy being executed. This method uses on-policy learning and directly approximates the action-value function for the current policy." ;
    :kb-article """## How it works
SARSA learns the Q-values associated with taking a particular action in a specific state. This process is done by continuously updating the Q-values as it interacts with the environment and learns from the consequences of its actions. The agent begins in a state (S), performs an action (A), receives a reward (R), and then enters a new state (S'). It then chooses the next action (A') based on the policy derived from the current Q-value estimates.

The update formula for SARSA can be given by: Q(S, A) = Q(S, A) + α[R + γQ(S', A') - Q(S, A)], where α is the learning rate, and γ is the discount factor. 

## Considerations 
- SARSA is an on-policy algorithm which learns the Q-value based on the action taken by the current policy, which can sometimes lead to less optimal exploration of the state-action space.
- The choice of learning rate (α) and discount factor (γ) greatly impacts the learning process.
- The initial Q-values can influence the learning speed and effectiveness. Hence, thoughtful initialization is necessary.
- SARSA might perform poorly in environments with high function approximation error or non-stationary target policy.
  
## References 
- R. S. Sutton and A. G. Barto, "Reinforcement Learning: An Introduction," MIT Press, 2018. [Book Link](http://incompleteideas.net/book/the-book-2nd.html)
- [SARSA Algorithm](https://www.geeksforgeeks.org/expected-sarsa-in-reinforcement-learning/) from Geeks for Geeks
- [SARSA tutorial](https://medium.com/@m.alzantot/deep-reinforcement-learning-demysitifed-episode-2-policy-iteration-value-iteration-and-q-978f9e89ddaa) from Medium.""" .

:SavedInstructionPointer a owl:Class ;
    rdfs:label "Saved Instruction Pointer" ;
    rdfs:subClassOf :Pointer,
        :StackComponent ;
    :definition "A saved instruction pointer points to the instruction that generated an exception (trap or fault)." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Exception_handling> .

:ScheduledJobAnalysis a :OperatingSystemMonitoring,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Scheduled Job Analysis" ;
    rdfs:subClassOf :OperatingSystemMonitoring,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :TaskSchedule ] ;
    :d3fend-id "D3-SJA" ;
    :definition "Analysis of source files, processes, destination files, or destination servers associated with a scheduled job to detect unauthorized use of job scheduling." ;
    :kb-article """## How it works
Scheduled job execution can be utilized by adversaries for the purpose of persistence, conducting remote execution, or gaining privileges. Details of a scheduled job such as associated source files, processes, destination files, or destination servers are first identified and analyzed and then compared against an anti-malware signature database, whitelist, or reputation server. For example, a file associated with a scheduled job to be executed at a specified time or a remote server that is accessed as part of a scheduled task is compared against an anti-malware signature database, whitelist, or reputation server, and if a match is found, execution is denied and an alert is generated.

In addition to traditional scheduled jobs, triggers can be set to execute a specific command after detecting a specific event in the system, such as with WMI Event Subscriptions in Windows.

## Considerations
Jobs can be scheduled in many different and sometimes creative ways through operating system capabilities.""" ;
    :kb-reference :Reference-ExecutionWithAT_MITRE,
        :Reference-ExecutionWithSchtasks_MITRE,
        :Reference-PreventingExecutionOfTaskScheduledMalware_McAfeeLLC ;
    :synonym "Scheduled Job Execution" .

:Scheduling a owl:Class ;
    rdfs:label "Scheduling" ;
    rdfs:subClassOf :Planning .

:ScriptApplicationProcess a owl:Class ;
    rdfs:label "Script Application Process" ;
    skos:altLabel "Script Process" ;
    rdfs:subClassOf :ApplicationProcess,
        [ a owl:Restriction ;
            owl:onProperty :interprets ;
            owl:someValuesFrom :ExecutableScript ] ;
    :definition "A script application process is an application process interpreting an executable script." ;
    :todo "Consider renaming simply \"Script Process\", as it might not be an \"application\" per se that is intended. Check against motivating offensive techniques and other relationships with Protege." .

:ScriptExecutionAnalysis a owl:Class,
        owl:NamedIndividual,
        :ProcessAnalysis ;
    rdfs:label "Script Execution Analysis" ;
    rdfs:subClassOf :ProcessAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :ScriptApplicationProcess ] ;
    :d3fend-id "D3-SEA" ;
    :definition "Analyzing the execution of a script to detect unauthorized user activity." ;
    :kb-article """## How it works
Software installed on the host system hooks into a scripting engine to intercept commands before they are executed and block commands if they are determined to be harmful. Pattern matching is used to identify unauthorized commands or in the case of script files, a hash of the file is compared against hashes of known unauthorized script files.

## Considerations
List of known unauthorized script files or regular expression patterns must be kept up to date to ensure detection of new threats.""" ;
    :kb-reference :Reference-DetectingScript-basedMalware_CrowdstrikeInc .

:Second-stageBootLoader a owl:Class ;
    rdfs:label "Second-stage Boot Loader" ;
    rdfs:subClassOf :BootLoader ;
    :definition "An optional, often feature rich,  second stage set of routines run in order to load the operating system." .

:SecondaryStorage a owl:Class ;
    rdfs:label "Secondary Storage" ;
    rdfs:subClassOf :HardwareDevice,
        :Storage ;
    rdfs:isDefinedBy "https://whatis.techtarget.com/definition/memory" ;
    :definition "Secondary memory (storage, hard disk) is the computer component holding information that does not need to be accessed quickly and that needs to be retained long-term." ;
    rdfs:seeAlso "https://en.wikipedia.org/wiki/Computer_data_storage#Secondary_storage" .

:SecurityToken a owl:Class ;
    rdfs:label "Security Token" ;
    rdfs:subClassOf :HardwareDevice,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :AccessToken ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Security_token> ;
    :definition "Security tokens are peripheral devices used to prove one's identity electronically (as in the case of a customer trying to access their bank account). The token is used in addition to or in place of a password to prove that the customer is who they claim to be. The token acts like an electronic key to access something." .

:SegmentAddressOffsetRandomization a :ApplicationHardening,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Segment Address Offset Randomization" ;
    rdfs:subClassOf :ApplicationHardening,
        [ a owl:Restriction ;
            owl:onProperty :obfuscates ;
            owl:someValuesFrom :ProcessSegment ] ;
    :d3fend-id "D3-SAOR" ;
    :definition "Randomizing the base (start) address of one or more segments of memory during the initialization of a process." ;
    :kb-article """## How it works

Many application exploits rely on an attacker specifying a location in memory, which points to data or code used by the attacker.  If the addresses are changed each time the program is run, then it becomes more difficult for the attacker to determine the location that will contain the code they wish to run.

Imported modules may be similarly realigned if their default memory addresses conflict with other modules, in a process known as "rebasing."  Just as not all code is built for participation in ASLR, not all modules can be rebased; instead, modules must indicate whether they implement support for rebasing.  Such information to relocate the executable is typically stored in the ".reloc" segment -- each of the addresses pointed to in this segment has its address increased by the amount of the offset.
(An alternative method for relocation would be to add an amount to a global variable each time -- leading to less overhead in the module load, but more for each access.  Still another implementation could instead contain code to deference each changeable memory location on the fly, so that each of the references do not need to be updated.


## Considerations

As the offset for each segment is constant, it is possible to guess at the value of the address given the address of another variable.  Alternatively, memory pointers may be kept around, which contain the address of another variable.
Another bypass technique is known as an "egg hunt," whereby the attacker searches for a rather unique piece of the data or code in memory to determine its likely address.

The program needs to store these addresses for the functions somewhere.  In Linux, the PLT contains a "trampoline" to these addresses.  If an attacker desires to jump to the start of an existing function, they can jump directly to the trampoline anyway, and may have the opportunity to provide their own stack frame to the function with a write to the stack. If they overwrite a saved stack pointer which is loaded back into memory, or execute a function, that changes the address of a stack pointer.

If an attacker wants to inject some data into the program, for example as a parameter to a known function that is not under ASLR or a pointer to a trampoline function in the PLT, then they can repeat the data until they exceed the range of ASLR coverage, which on 32-bit systems is accomplishable in a few seconds with a heap spray.  Microsoft's EMET and Windows 10 Exploit Guard can pre-allocate particular addresses that are commonly used in heap sprays.  However, in many products, there does not seem to be nearly a complete coverage of such addresses, which only need to be executable and in the range of the heap; 0x0c0c0c0c is such an address that is commonly used for the x86 processor architecture, as when executed it only performs a numeric operation to a register four times.""" ;
    :kb-reference :Reference-DYNAMICBASE_UseAddressSpaceLayoutRandomization_MicrosoftDocs,
        :Reference-HowASLRProtectsLinuxSystemsFromBufferOverflowAttacks_NetworkWorld ;
    :synonym "Address Space Layout Randomization",
        "ASLR" .

:Self-organizingMap a owl:Class ;
    rdfs:label "Self-organizing Map" ;
    rdfs:subClassOf :ANN-basedClustering ;
    :definition "A Self-Organizing Map (SOM) is an unsupervised neural network-based machine learning technique used for data visualization and clustering tasks. This technique enables high-dimensional data to be reduced to lower dimensions, typically two, to better visualize and understand complex data patterns. The output of an SOM is a grid of neurons that have learned to represent different areas of the input space, with neighboring neurons responding similarly to similar inputs." ;
    :kb-article """## How it works
The Self-Organizing Map employs a competitive learning strategy. Initially, the weights associated with each neuron in the map are randomly assigned. Then, for each piece of data in the dataset, the algorithm identifies the neuron whose weights are most similar to the input data. This neuron is considered the 'Best Matching Unit' (BMU).

Next, the weights of the BMU and its nearby neurons on the map are adjusted to be closer to the data input. The vicinity of influence decreases over time, meaning that as the learning proceeds, fewer and fewer neurons' weights are updated for each data point. This learning process allows the SOM to form a topological map where similar inputs are mapped to nearby neurons.

The iterative process continues until the network stabilizes and the arrangement of weights remains relatively unchanged. Consequently, the SOM forms clusters of similar data points and makes them easily visible and understandable in two dimensions.

## Considerations 
- **Data normalization:** Prior to training an SOM, it is often beneficial to normalize the data. This ensures that all input features have the same scale and prevents features with larger scales from dominating the learning process.
- **Choice of topology:** The choice of topology (the arrangement and interconnection of neurons) can significantly affect the map's ability to accurately represent data. The two most common topologies are rectangular and hexagonal, each with its own pros and cons.
- **Grid size determination:** Selecting an appropriate grid size (number of neurons) is crucial. A small grid may not capture the complexity of the data, whereas a large grid may overfit the data.
- **Training time:** Training a Self-Organizing Map can be time-consuming, particularly for large datasets and complex topologies.

## References 
1. Kohonen, T., 1990. The self-organizing map. Proceedings of the IEEE, 78(9), pp.1464-1480. [Link](https://ieeexplore.ieee.org/document/58325)
2. Vesanto, J., Himberg, J., Alhoniemi, E., Parhankangas, J., 2000. SOM toolbox for Matlab 5. Helsinki University of Technology, Finland. [Link](http://www.cis.hut.fi/projects/somtoolbox/)
3. Kohonen, T., 2001. Self-Organizing Maps. Springer Series in Information Sciences, 30. [Link](https://www.springer.com/gp/book/9783540679219)""" .

:Semi-supervisedBoosting a owl:Class ;
    rdfs:label "Semi-supervised Boosting" ;
    rdfs:subClassOf :Semi-supervisedWrapperMethod ;
    :definition """Boosting methods can be readily extended to the semi-supervised setting, by introducing pseudo-labeled data after each learning step; which gives rise to the idea of semi-supervised boosting methods. The pseudo-labeling approach of self- training and co-training can be easily extended to boosting methods. Several boosting methods such as SSMBoost, ASSEMBLE, SemiBoost, RegBoost, etc can be found which can be applied for utilizing unlabeled datasets for supervised classifiers.

or

Semi-Supervised Boosting is a machine learning technique that combines the principles of boosting, a supervised learning method, with semi-supervised learning. In this technique, both labeled and unlabeled data are used during training to create an effective predictive model.""" ;
    :kb-article """## How it Works
Semi-Supervised Boosting works by iteratively training a set of weak classifiers on a combination of labeled and unlabeled data and then combining these weak classifiers into a single, strong classifier. The primary idea behind Semi-Supervised Boosting is similar to regular boosting algorithms such as AdaBoost, where the goal is to minimize the error on the labeled data.

However, the semi-supervised aspect is introduced by utilizing the unlabeled data. Here, the algorithm exploits the structure or pattern in the unlabeled data to improve the performance on the labeled data. The pseudo-labels assigned to unlabeled instances are adjusted in each iteration based on the results from the weak classifiers. These pseudo-labeled instances are then incorporated into subsequent iterations of the boosting algorithm, helping to refine the final model.

## Considerations 

- **Label Availability:** The success of semi-supervised boosting heavily depends on the amount and quality of labeled data available. If very little labeled data is available, the model might not train well.
- **Noise in Data:** Semi-supervised boosting can be sensitive to noise in the data. Errors in the initial labeling or pseudo-labeling can propagate through iterations, possibly leading to a less accurate model.
- **Choice of Weak Learner:** The choice of weak learner (base estimator) used in the boosting process can significantly influence the model's performance.
- **Model Complexity:** While boosting can help improve the model's accuracy, it might also increase the complexity of the model, which can potentially lead to overfitting.

## References

1. Zhu, X., & Goldberg, A. (2009). Introduction to Semi-Supervised Learning. Morgan & Claypool Publishers. [Link](http://www.morganclaypool.com/doi/abs/10.2200/S00196ED1V01Y200906AIM006)
2. Seo, S., & Wallat, M. (2018). Semi-Supervised Boosting Using Unlabeled Data. [Link](https://ieeexplore.ieee.org/document/8533594)
3. Schapire, R. E., & Freund, Y. (2012). Boosting: Foundations and algorithms. MIT press. [Link](https://mitpress.mit.edu/books/boosting)""" ;
    :todo "Review: Pick definition" .

:Semi-supervisedCluster-then-label a owl:Class ;
    rdfs:label "Semi-supervised Cluster-then-label" ;
    rdfs:subClassOf :UnsupervisedPreprocessing ;
    :definition "Semi-Supervised Cluster then Label is a hybrid machine learning approach that combines unsupervised clustering and supervised labeling to leverage both labeled and unlabeled data for more accurate classification and pattern recognition in a dataset." ;
    :kb-article """## How it works
The process starts by using an unsupervised clustering algorithm (such as K-means or DBSCAN) to group the data points in the dataset based on their features, forming clusters of similar data points. Once the clusters are formed, a supervised labeling algorithm (e.g., logistic regression, support vector machines, or decision trees) is applied to the labeled data to create a classifier. This classifier is then used to predict labels for the unlabeled data points in each cluster.

The main advantage of this approach is that it effectively utilizes the structure in the unlabeled data to improve the classifier's performance, especially when the labeled data is scarce. By first clustering the data, the algorithm is better equipped to find relationships and patterns within the dataset, which can then be leveraged during the supervised learning phase.

## Considerations

- **Algorithm Suitability:** Ensure that the unsupervised clustering algorithm is appropriate for the dataset and can accurately capture the underlying structure.
- **Labeled Data:** Ensure that there is a sufficient amount of labeled data to train a reliable classifier.
- **Overfitting:** Be mindful of the potential for overfitting, especially when using complex classifiers.
- **Choice of Classifier:** The choice of supervised learning algorithm may impact the overall performance of the technique; experimenting with different classifiers may yield better results.
- **Cluster Quality:** The quality of the final classifier largely depends on the quality of the initial clustering, so it's crucial to evaluate the effectiveness of the clustering algorithm.

## References
1. Zhu, X., & Goldberg, A. B. (2009). Introduction to Semi-Supervised Learning. Synthesis Lectures on Artificial Intelligence and Machine Learning. https://doi.org/10.2200/S00196ED1V01Y200906AIM006
2. Sculley, D. (2007). Combined regression and clustering. In Proceedings of the 2007 SIAM International Conference on Data Mining. http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.72.1103
3. Chapelle, O., Schölkopf, B., & Zien, A. (Eds.). (2010). Semi-Supervised Learning. MIT Press. https://mitpress.mit.edu/books/semi-supervised-learning""" .

:Semi-supervisedCo-training a owl:Class ;
    rdfs:label "Semi-supervised Co-training" ;
    rdfs:subClassOf :Semi-supervisedWrapperMethod ;
    :definition "Semi-supervised co-training is a machine learning approach that takes advantage of both labelled and unlabelled data for training. By constructing multiple complementary classifiers, it facilitates a mutual teaching process where each classifier learns from the predictions of the other, hence enabling the model to learn more about the problem space." ;
    :kb-article """## How it works
Semi-supervised co-training begins with two distinct sets of features from a dataset, with each set being used to train a separate classifier. The process relies on the assumption that these feature sets are conditionally independent given the target class. Once the initial models are trained, they predict the class labels of the unlabelled data. The unlabelled instances about which the classifiers are most confident are then added to the training set along with their predicted labels. The classifiers are then retrained on these expanded labelled data. This process iteratively repeats, with each classifier learning from the confident predictions of the other, hence the term "co-training". 

The underlying principle of this method is that different views of the data provide complementary information, which can be harnessed to improve the model's performance even in the absence of explicit labels.

## Considerations 
- Co-training assumes that there exist two sufficient and redundant views of the data that are conditionally independent given the output class. This assumption might not hold true in all real-world scenarios.
- The quality of the co-training outcome can be greatly influenced by the confidence measure used for selecting unlabelled instances for labelling.
- There could be potential risks of model drift if the classifiers start learning incorrect patterns from misclassified instances.
- As with all semi-supervised techniques, co-training may face challenges with high-dimensional data.

## References 
1. Blum, A., & Mitchell, T. (1998). Combining labeled and unlabeled data with co-training. Proceedings of the Eleventh Annual Conference on Computational Learning Theory - COLT’ 98. [Link](https://doi.org/10.1145/279943.279962)
2. Skurichina, M., & Duin, R.P.W. (2002). Bagging, Boosting and the Random Subspace Method for Linear Classifiers. Pattern Analysis & Applications 5, 121–135. [Link](https://doi.org/10.1007/s100440200011)
3. Zhou, Z.H., & Li, M. (2005). Tri-Training: Exploiting Unlabeled Data Using Three Classifiers. IEEE Transactions on Knowledge and Data Engineering, 17(11), 1529-1541. [Link](https://doi.org/10.1109/TKDE.2005.186)
4. Semi-Supervised Learning. Wikipedia. [Link](https://en.wikipedia.org/wiki/Semi-supervised_learning)
- http://jashish.com.np/blog/posts/beginners-guide-to-semi-supervised-learning/""" .

:Semi-supervisedFeatureExtraction a owl:Class ;
    rdfs:label "Semi-supervised Feature Extraction" ;
    rdfs:subClassOf :UnsupervisedPreprocessing ;
    :definition "Semi-Supervised Feature Extraction is a machine learning technique that leverages both labeled and unlabeled data for learning the best representation of features or inputs in a given dataset. It aims to improve model performance by exploiting the underlying structure of the data, where supervised learning methods might only partially work due to limited labelled data." ;
    :kb-article """## How it works
In Semi-Supervised Feature Extraction, the algorithm combines the strengths of supervised and unsupervised learning methods. Initially, the algorithm uses the labeled data to learn the mapping between features and targets in a supervised manner. This involves identifying patterns in labeled data and then using these patterns to make predictions.

Following this supervised phase, the algorithm then applies unsupervised learning techniques to unlabeled data to extract useful features. The unlabeled data provide additional information about the overall distribution and structure of the data, which can help the model to generalize better to unseen data. The process leverages techniques like clustering, dimensionality reduction, or neural network-based methods (like autoencoders) for extracting these features.

Once these new features are extracted from the unlabeled data, they are combined with the original features from the labeled data, and the model is re-trained or fine-tuned. The integration of unlabeled data helps the model perform better, especially when labeled data is scarce or expensive to acquire.

## Considerations 

- **Data Quality:** The presence of noise or irrelevant features in the unlabeled data can mislead the extraction process and impact the model's performance negatively.

- **Computational Complexity:** Semi-supervised feature extraction can be computationally expensive, particularly for large datasets, as it involves training models on both labeled and unlabeled data.

- **Representation Power:** The quality of extracted features heavily depends on the choice of unsupervised learning method. Not all methods might provide equally useful or discriminative features for a specific problem.

- **Scalability:** While it does improve learning, the semi-supervised approach may not scale well with high-dimensional data due to the curse of dimensionality.

## References 

1. Zhu, X., & Goldberg, A. B. (2009). "Introduction to Semi-Supervised Learning." Morgan & Claypool Publishers. [Link](http://www.morganclaypool.com/doi/abs/10.2200/S00196ED1V01Y200906AIM006)

2. Rasmus, A., Berglund, M., Honkala, M., Valpola, H., & Raiko, T. (2015). "Semi-Supervised Learning with Ladder Networks." In Advances in Neural Information Processing Systems. [Link](https://papers.nips.cc/paper/2015/file/5645-semi-supervised-learning-with-ladder-networks.pdf)

3. LeCun, Y., Bengio, Y., & Hinton, G. (2015). "Deep learning." nature, 521(7553), 436-444. [Link](https://www.nature.com/articles/nature14539)
- http://jashish.com.np/blog/posts/beginners-guide-to-semi-supervised-learning/""" .

:Semi-supervisedGenerativeModelLearning a owl:Class ;
    rdfs:label "Semi-supervised Generative Model Learning" ;
    rdfs:subClassOf :InstrinsicallySemi-supervisedLearning ;
    :definition "Semi-Supervised Generative Model Learning is a machine learning approach that leverages both labeled and unlabeled data in order to generate new data instances. It combines elements of both supervised learning (where models learn from labeled data) and unsupervised learning (where models identify patterns in unlabeled data). The intent is to create a generative model that can generate plausible instances of unseen data." ;
    :kb-article """## How it Works
The basic idea behind semi-supervised generative model learning lies in maximizing the joint likelihood of observed features and their associated labels. This is typically achieved through two steps: the generative model first learns the underlying data distribution using both labeled and unlabeled data, after which a separate model or component is trained to make predictions using the learned representation. This combined approach helps to alleviate some of the problems associated with pure generative or discriminative learning, such as overfitting or inability to generalize from limited labeled data.

There are various algorithms that can be used in semi-supervised generative model learning. One well-known example is the Generative Adversarial Network (GAN) combined with semi-supervised learning. In a semi-supervised GAN, the discriminator is trained not only to distinguish real from fake, but also to classify the real samples among different classes. The generator, on the other hand, tries to generate samples that not only look real, but also belong to a specific class. 

## Considerations 

* Data quality: Semi-supervised generative models are sensitive to the quality of both labeled and unlabeled data. Poor quality data can lead to an inaccurate model.

* Balance between labeled and unlabeled data: A suitable balance between labeled and unlabeled data should be maintained for best results. Too much unlabeled data can dilute the effect of labeled data.

* Model complexity: Models can be quite complex and require substantial computational resources, which should be considered before implementation.

* Risk of overfitting: While the semi-supervised approach helps to mitigate overfitting, it's still possible if the model relies too heavily on the labeled data.

## References 

* [Semi-Supervised Learning Literature Survey](http://pages.cs.wisc.edu/~jerryzhu/pub/ssl_survey.pdf) - A comprehensive survey of semi-supervised learning methods.
* [Learning from labeled and unlabeled data with label propagation](http://mlg.eng.cam.ac.uk/zoubin/papers/CMU-CALD-02-107.pdf) - A paper on label propagation, a commonly used semi-supervised learning method.
* [Improved Techniques for Training GANs](https://arxiv.org/abs/1606.03498) - A paper introducing techniques for training better Generative Adversarial Networks, including a semi-supervised method.""" .

:Semi-supervisedInductiveLearning a owl:Class ;
    rdfs:label "Semi-supervised Inductive Learning" ;
    rdfs:subClassOf :Semi-SupervisedLearning ;
    :definition "Semi-Supervised Inductive Learning is a machine learning approach that combines both labeled and unlabeled data to train a model. The goal of this method is to leverage the unlabeled data to improve the predictive performance of the model, especially when the availability of labeled data is limited." ;
    :kb-article """## How it works
Semi-Supervised Inductive Learning starts by training an initial model on a small set of labeled data. This initial model is then used to predict the labels of the unlabeled data. The model's predictions are taken into account, usually by assigning them as 'soft' labels with associated confidence scores. Then, these 'soft'-labeled data are incorporated back into the training set. The model is retrained using this enhanced dataset, comprising both original labeled data and the newly 'soft'-labeled data.

This process can be iterative: the retrained model can make new predictions on the unlabeled data, which can then be used to further refine the model, and so on. There are also various strategies to decide how to use the model's predictions and how to combine them with the original labeled data, which can be adapted according to the specific needs of the task at hand.

## Considerations 
- **Quantity of Unlabeled Data**: Semi-Supervised Inductive Learning can be very beneficial when you have a large amount of unlabeled data and a small amount of labeled data. However, if the amount of unlabeled data is small, the benefits may not be significant.
- **Quality of Initial Model**: The initial model trained on the labeled data must be reasonably good, as its predictions will guide the learning from the unlabeled data. If the initial model is poor, it may propagate its errors to the unlabeled data.
- **Risk of Bias**: There is a risk of bias or overfitting towards the initially labeled data, especially if it's not representative of the population. The model may learn erroneous patterns which might not be applicable to the whole dataset.
- **Computational Resources**: Iteratively training a model can be computationally intensive and time-consuming, especially with large datasets. 

## References 
- Zhu, X. (2005). [Semi-Supervised Learning Literature Survey](http://pages.cs.wisc.edu/~jerryzhu/pub/ssl_survey.pdf). University of Wisconsin-Madison.
- Chapelle, O., Schölkopf, B., & Zien, A. (Eds.). (2006). [Semi-Supervised Learning](https://mitpress.mit.edu/books/semi-supervised-learning). MIT Press.
- Bennett, K. P., & Demiriz, A. (1998). [Semi-Supervised Support Vector Machines](http://www.nec-labs.com/uploads/images/Department-Images/MediaAnalytics/papers/semi_supervised_SVM.pdf). In Advances in Neural Information Processing Systems (pp. 368-374). MIT Press.

- https://www.cs.sfu.ca/~anoop/papers/pdf/semisup_naacl.pdf  

_TBD determine if semisup_naacl.pdf is canonical reference or not/better info if so put earlier in list and mention that in Considerations or How It Works secitons for citations.""" .

:Semi-SupervisedLearning a owl:Class ;
    rdfs:label "Semi-Supervised Learning" ;
    rdfs:subClassOf :MachineLearning ;
    :definition "Semi-supervised learning is a machine learning paradigm that utilizes a combination of a small amount of labeled data and a large amount of unlabeled data during training. It bridges the gap between supervised learning (which uses labeled data) and unsupervised learning (which uses unlabeled data), leveraging the strengths of both to improve learning accuracy." ;
    :kb-article """## How it works
In a semi-supervised learning framework, the initial step involves training the model with the available labeled data, similar to the traditional supervised learning approach. This model then makes predictions for the unlabeled data. The key idea is that even though the labels of the unlabeled data are unknown, this data holds vital information about the input data distribution which can be utilized to enhance the learning process. 

For instance, some semi-supervised learning algorithms leverage the "cluster assumption" - the idea that similar data points are more likely to share a label. This is typically done by constructing a graph where data points are nodes, and edge weights define the similarity between two nodes. Graph-based methods can then be used to propagate label information from labeled to unlabeled data. Another approach is the self-training or "pseudo-labeling" method, where the model predicts labels for the unlabeled data, which are then added to the training set with their pseudo-labels if the model's confidence is high enough.

## Considerations
- **Data Quality:** Ensure the labeled data used is of high quality, as the initial model training heavily relies on it. Misleading labeled data can cause model inaccuracy.
- **Confidence Thresholds:** When using pseudo-labeling methods, carefully select the confidence threshold for adding pseudo-labeled data to avoid reinforcing incorrect predictions.
- **Algorithm Choice:** Different algorithms (like graph-based methods, self-training, etc.) perform differently on various datasets, so choose the method based on the problem at hand.
- **Computational Resources:** Semi-supervised learning can be computationally expensive, particularly with high-dimensional data or large datasets. Ensure appropriate computational resources.

## References 
- Zhu, X., & Goldberg, A. B. (2009). Introduction to semi-supervised learning. Morgan & Claypool Publishers. [Link](https://www.morganclaypool.com/doi/abs/10.2200/S00196ED1V01Y200906AIM006)
- Scikit-learn documentation on Semi-Supervised Learning [Link](https://scikit-learn.org/stable/modules/label_propagation.html)
- Chapelle, O., Schölkopf, B., & Zien, A. (2006). Semi-Supervised Learning (Chapelle, O. et al., Eds.; 1st ed. 2006.). The MIT Press. [Link](https://mitpress.mit.edu/books/semi-supervised-learning)""" ;
    rdfs:seeAlso "https://link.springer.com/article/10.1007/s10994-019-05855-6" .

:Semi-supervisedManifoldLearning a owl:Class ;
    rdfs:label "Semi-supervised Manifold Learning" ;
    rdfs:subClassOf :InstrinsicallySemi-supervisedLearning ;
    :definition "Semi-Supervised Manifold Learning is a machine learning technique that leverages a combination of both labeled and unlabeled data for training - typically a small amount of labeled data with a large amount of unlabeled data. It aims to capture the low-dimensional manifold structure embedded in the high-dimensional input space by taking advantage of the geometric arrangement of the data points." ;
    :kb-article """## How it works
Semi-Supervised Manifold Learning employs the principle that data points that are close to each other on the manifold are likely to share similar properties and therefore belong to the same class. It integrates the concept of manifold learning into a semi-supervised learning framework. A manifold is a lower-dimensional subspace within a high-dimensional space. Manifold learning techniques, such as Locally Linear Embedding (LLE), Isomap, and Laplacian Eigenmaps, are designed to identify these manifolds.

The goal of Semi-Supervised Manifold Learning is to use the inherent geometry of both labeled and unlabeled data to discover the overall structure of the data and make accurate predictions. The technique does this by trying to minimize the difference between distances in the input space and the learned feature space, hence preserving the manifold structure. Labelled data helps to guide the learning process, whereas the unlabeled data helps to reinforce the underlying data structure and improve the generalization capability of the model.

## Considerations 
- **Data Quality**: As with any machine learning technique, the quality of your data significantly influences the outcome. Ensure your data is clean and relevant for the model to learn effectively.
- **Balancing Labeled and Unlabeled Data**: The ratio between labeled and unlabeled data should be handled with care, as it may influence the learning process and the final results.
- **Dimensionality**: Given its nature, this technique might not be as effective with extremely high-dimensional data, as finding a meaningful lower-dimensional manifold can become challenging.
- **Computational Resources**: Depending on the dataset's size and complexity, Semi-Supervised Manifold Learning can be computationally intensive and time-consuming.

## References 
1. Zhu, X., & Goldberg, A. B. (2009). "Introduction to Semi-Supervised Learning." Morgan & Claypool Publishers. [Link](https://www.morganclaypool.com/doi/abs/10.2200/S00196ED1V01Y200906AIM006)
2. Wang, C., & Mahadevan, S. (2011). "Manifold Alignment Without Correspondence." The 21st International Joint Conference on Artificial Intelligence. [Link](https://www.ijcai.org/Proceedings/09/Papers/267.pdf)
3. Belkin, M., Niyogi, P., & Sindhwani, V. (2006). "Manifold Regularization: A Geometric Framework for Learning from Labeled and Unlabeled Examples." Journal of Machine Learning Research. [Link](https://www.jmlr.org/papers/volume7/belkin06a/belkin06""" .

:Semi-supervisedPre-training a owl:Class ;
    rdfs:label "Semi-supervised Pre-training" ;
    rdfs:subClassOf :UnsupervisedPreprocessing ;
    :definition "Semi-Supervised Pre-Training is a hybrid machine learning technique that combines both unsupervised and supervised learning elements. In this approach, a model is initially trained with unsupervised learning on a large amount of unlabeled data, and then fine-tuned with supervised learning on a smaller set of labeled data, thereby leveraging the strengths of both paradigms to improve learning efficiency and overall model performance." ;
    :kb-article """## How it works
In Semi-Supervised Pre-Training, the process starts with the pre-training phase where the model learns from a large dataset without labels, an unsupervised learning approach. The objective in this phase could be learning to generate data like the input (as in generative models), or learning to represent the data in a meaningful way (as in self-supervised learning). This helps the model capture underlying structures and patterns in the data.

Once the model is pre-trained, it undergoes a fine-tuning phase on a smaller labeled dataset. This phase employs supervised learning. The model fine-tunes the weights learned during the pre-training phase based on the specific task for which it has labeled data. The labels help guide the model to better adapt its general pre-training knowledge to specific tasks, thus improving its performance.

## Considerations 
- Semi-Supervised Pre-Training often requires a large amount of unlabeled data for pre-training to capture useful patterns.
- The fine-tuning phase may overfit to the smaller labeled dataset if not managed properly. Techniques like early stopping or regularization may be required to mitigate this risk.
- The quality and relevance of the unlabeled data used for pre-training can greatly impact the performance of the model. It should be as representative as possible of the data the model will encounter in its final task.
- Compute resources: Given that the model is trained twice - once in an unsupervised manner and then in a supervised manner, this approach can be more resource-intensive than other techniques.

## References 
1. [Sebastian Ruder's "An Overview of Multi-Task Learning in Deep Neural Networks"](https://ruder.io/multi-task/)
2. [Semi-Supervised Learning with Deep Generative Models: Tutorial and Review (Arxiv Preprint)](https://arxiv.org/abs/2006.16082)
3. [Semi-Supervised Learning - Wikipedia](https://en.wikipedia.org/wiki/Semi-supervised_learning)
4. [Howard and Ruder's "Universal Language Model Fine-tuning for Text Classification"](https://arxiv.org/abs/1801.06146)
- http://jashish.com.np/blog/posts/beginners-guide-to-semi-supervised-learning/""" .

:Semi-supervisedSelf-training a owl:Class ;
    rdfs:label "Semi-supervised Self-training" ;
    rdfs:subClassOf :Semi-supervisedWrapperMethod ;
    :definition "Semi-Supervised Self Training is a machine learning technique that leverages a combination of labeled and unlabeled data for training. The initial model is trained on a small set of labeled data and then used to make predictions on the unlabeled data. The most confident predictions are then added to the labeled set, and the model is retrained, repeating the process until no more data can be confidently labeled or another stopping criterion is met." ;
    :kb-article """## How it works
In the self-training process, a base classifier (like Support Vector Machines, Decision Trees, or Neural Networks) is first trained on the available labeled dataset. This trained model is then used to predict labels for the unlabeled dataset. Following this, some of the unlabeled data points with the highest confidence predictions are selected and their predicted labels are considered as 'true' labels. These newly labeled data points are added to the initial labeled dataset. The updated labeled dataset is then used to retrain the classifier. This process continues iteratively, often until a stopping criterion is reached, such as a set number of iterations, a minimum confidence level, or when no more unlabeled instances can be confidently classified.

## Considerations 
- **Quality of initial labeled data**: The effectiveness of self-training relies heavily on the quality and representativeness of the initially labeled data. If the initial data is not representative of the problem space, there can be a risk of model drift.
- **Confidence threshold setting**: The confidence threshold for assigning labels to unlabeled data plays a critical role. A lower threshold might include wrongly labeled instances, introducing noise and possibly deteriorating the model performance.
- **Risk of model bias**: As the model itself labels the unlabeled data, there's a risk of reinforcing its own biases and errors, potentially leading to a feedback loop of errors (also known as confirmation bias).
- **Model interpretability**: As with many iterative techniques, the process of self-training might be considered less interpretable or transparent, which might not be suitable for some applications.

## References 
1. Zhu, Xiaojin, and Zoubin Ghahramani. "Learning from labeled and unlabeled data with label propagation." (2002). [Link](http://mlg.eng.cam.ac.uk/zoubin/papers/CMU-CALD-02-107.pdf)
2. Rosenberg, Charles, et al. "Semi-supervised self-training of object detection models." Seventh IEEE Workshops on Application of Computer Vision. Vol. 1. IEEE, 2005. [Link](https://ieeexplore.ieee.org/document/1509941)
3. Scikit-Learn: Semi-Supervised Learning. [Link](https://scikit-learn.org/stable/modules/label_propagation.html)
4. Bengio, Yoshua, Olivier Delalleau, and Nicolas Le Roux. "Label propagation and quadratic criterion." Semi-supervised learning (2006): 193-216. [Link](https://www.researchgate.net/publication/220690966_Label_Propagation_and_Quadratic_Criterion)""" .

:Semi-supervisedTransductiveLearning a owl:Class ;
    rdfs:label "Semi-supervised Transductive Learning" ;
    rdfs:subClassOf :Semi-SupervisedLearning ;
    :definition "Semi-Supervised Transductive Learning is a type of machine learning methodology that utilizes both labeled and unlabeled data to improve learning accuracy. In this context, transductive refers to the goal of the algorithm: to predict the labels for specific, given unlabeled instances, rather than inferring a general rule to apply to future instances." ;
    :kb-article """## How it works
Semi-supervised transductive learning combines supervised and unsupervised learning techniques. It starts with a small amount of labeled data and a large amount of unlabeled data. The goal is to determine the labels for the unlabeled instances. Unlike inductive learning which seeks to learn a function that can be generalized to new instances, transductive learning is about predicting labels specifically for the given unlabeled data.

The common approach to semi-supervised transductive learning is to design a model that maintains the structure or geometry of the data. A graph-based approach is one such example, where each data point corresponds to a node in the graph, and edges represent the similarities between the data points. The labels of unlabeled instances are inferred based on the idea that similar instances are likely to share the same label.

## Considerations 
- Quality of labeled data: The performance of semi-supervised transductive learning largely depends on the quality of the initial labeled data. Poor quality of labeled data can lead to inaccurate labeling of the unlabeled data.
- Data similarity: The assumptions of the model, such as data points in the same region sharing the same label, may not always hold true, which can impact the performance of the algorithm.
- Choice of similarity metric: Different metrics for measuring similarity between data points can lead to different results. It's important to choose a metric that best suits the underlying distribution of the data.
- Scalability: While graph-based methods can perform well on small to medium datasets, they may not scale well to very large datasets due to computational complexities.

## References 
1. Zhu, X., & Goldberg, A. B. (2009). Introduction to semi-supervised learning. Synthesis lectures on artificial intelligence and machine learning, 3(1), 1-130. [Link](http://www.morganclaypool.com/doi/abs/10.2200/S00196ED1V01Y200906AIM006)
2. Chapelle, O., Scholkopf, B., & Zien, A. (2009). Semi-Supervised Learning (1st ed.). The MIT Press. [Link](https://mitpress.mit.edu/books/semi-supervised-learning)
3. "Semi-Supervised Learning", Wikipedia, [Link](https://en.wikipedia.org/wiki/Semi-supervised_learning)""" .

:Semi-supervisedWrapperMethod a owl:Class ;
    rdfs:label "Semi-supervised Wrapper Method" ;
    rdfs:subClassOf :Semi-SupervisedLearning ;
    :definition """## Definition
The Semi-Supervised Wrapper Method is a technique in machine learning that employs both labeled and unlabeled data for training - typically a small amount of labeled data with a large amount of unlabeled data. The 'Wrapper' aspect denotes its feature selection process, which utilizes a learning algorithm as a black-box to score subsets of variables according to their predictive power.""" ;
    :kb-article """## How it Works
In a Semi-Supervised Wrapper Method, both labeled and unlabeled data are used in the learning process. Initially, the algorithm is trained on a small amount of labeled data. Then, the trained model is used to predict labels for the unlabeled data. The most confident predictions are added to the labeled data, and the process is repeated. This method allows the algorithm to learn more about the underlying data structure than would be possible with the small amount of labeled data alone. 

The 'Wrapper' part of this technique refers to the process of feature selection. In the context of machine learning, a wrapper method uses a predictive model to score the usefulness of a subset of features, typically by assessing their predictive power. The method is called 'Wrapper' because it 'wraps' the selection process around the learning algorithm, providing a sort of feedback loop for feature selection. The wrapper evaluation function considers the selection of features as a search problem, where different combinations are prepared, evaluated and compared to other combinations.

## Considerations 

- The Semi-Supervised Wrapper Method requires a small amount of labeled data to initialize the learning process. This may limit its application in situations where labeled data is not available.
- The method can potentially propagate errors if mislabeled data is confidently predicted and added to the training set.
- The Wrapper method tends to be computationally expensive as it involves multiple rounds of model training to evaluate different subsets of features. 

## References 

1. Zhu, X., & Goldberg, A. B. (2009). "Introduction to Semi-Supervised Learning". Synthesis Lectures on Artificial Intelligence and Machine Learning. [Link](https://www.morganclaypool.com/doi/abs/10.2200/S00196ED1V01Y200906AIM006)
2. Kohavi, R., & John, G. H. (1997). "Wrappers for feature subset selection". Artificial Intelligence. [Link](https://doi.org/10.1016/S0004-3702(97)00043-X)
3. Chapelle, O., Scholkopf, B., & Zien, A. (2006). "Semi-Supervised Learning". MIT Press. [Link](https://mitpress.mit.edu/books/semi-supervised-learning)""" .

:SenderMTAReputationAnalysis a :MessageAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Sender MTA Reputation Analysis" ;
    rdfs:subClassOf :MessageAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :Email ] ;
    :d3fend-id "D3-SMRA" ;
    :definition "Characterizing the reputation of mail transfer agents (MTA) to determine the security risk in emails." ;
    :kb-article """## How it works
The sender message transfer agent (MTA) trust rating can be considered an indicator of the level of security risk and/or a trust level associated with sender MTAs in an email header.

The features considered in determining the trust rating may include:

* Length of time MTA has interacted with the enterprise
* Number of sender domains sending emails from the MTA
* Number of recipients in the enterprise the MTA sends emails to
* Number of emails received from this MTA
* Number of email replies received from this MTA

For example, higher values for the length of time an MTA has interacted with the enterprise, or number of emails received from an MTA can result in a higher trust rating. The trust rating categorizes the sender MTA as unrated, neutral, trusted, suspicious, or malicious.

## Considerations
Legitimate emails from a sender MTA may receive a lower trust rating over time if the sender's domain gets spoofed and is used to send unauthorized emails.""" ;
    :kb-reference :Reference-SystemsAndMethodsForDetectingAnd_orHandlingTargetedAttacksInTheEmailChannel_GraphusInc .

:SenderReputationAnalysis a :MessageAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Sender Reputation Analysis" ;
    rdfs:subClassOf :MessageAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :Email ] ;
    :d3fend-id "D3-SRA" ;
    :definition "Ascertaining sender reputation based on information associated with a message (e.g. email/instant messaging)." ;
    :kb-article """## How it works

Sender trust rating can be considered an indicator of the level of security risk and/or a trust level associated with a sender. The features considered in determining the trust rating include:

* Length of time sender has sent emails to the enterprise
* Number of recipients in the enterprise the sender interacts with
* Sender vs. enterprise originated message ratio
* Sender messages opened vs. not-opened ratio
* Number of emails received from this sender
* Number of emails replied to this sender
* Number of emails from this sender not opened
* Number of emails from this sender not opened that contain an attachment
* Number of emails from this sender not opened that contain a URL
* Number of emails sent to this sender
* Number of email replies received from this sender.

Higher values for the number of recipients the sender has interacted with or the number of emails received from the sender, for example, results in a higher trust rating. The trust rating can categorize the sender as unrated, neutral, trusted, suspicious, or malicious.

## Considerations
Legitimate emails from a sender may receive a lower trust rating over time if the sender's domain gets spoofed and is used to send unauthorized emails.""" ;
    :kb-reference :Reference-SystemsAndMethodsForDetectingAnd_orHandlingTargetedAttacksInTheEmailChannel_GraphusInc .

:Sensor a owl:Class ;
    rdfs:label "Sensor" ;
    rdfs:subClassOf :D3FENDThing,
        :DigitalArtifact .

:SeqGAN a owl:Class ;
    rdfs:label "SeqGAN" ;
    rdfs:subClassOf :GenerativeAdversarialNetwork ;
    :synonym "Sequence GAN" .

:SerializationFunction a owl:Class ;
    rdfs:label "Serialization Function" ;
    rdfs:subClassOf :Subroutine ;
    :definition "A function which has an operation that serializes data." .

:Server a owl:Class ;
    rdfs:label "Server" ;
    rdfs:subClassOf :Host,
        :NetworkResource,
        [ a owl:Restriction ;
            owl:onProperty :manages ;
            owl:someValuesFrom :ServiceApplicationProcess ],
        [ a owl:Restriction ;
            owl:onProperty :runs ;
            owl:someValuesFrom :ServiceApplication ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Server_(computing)> ;
    :definition "In computing, a server is a piece of computer hardware or software (computer program) that provides functionality for other programs or devices, called \"clients\". This architecture is called the client-server model. Servers can provide various functionalities, often called \"services\", such as sharing data or resources among multiple clients, or performing computation for a client. A single server can serve multiple clients, and a single client can use multiple servers. A client process may run on the same device or may connect over a network to a server on a different device. Typical servers are database servers, file servers, mail servers, print servers, web servers, game servers, and application servers." .

:Service a owl:Class ;
    rdfs:label "Service" ;
    rdfs:subClassOf :CapabilityImplementation .

:ServiceApplication a owl:Class ;
    rdfs:label "Service Application" ;
    rdfs:subClassOf :Application ;
    :definition "An application that provides a set of software functionalities so that multiple clients who can reuse the functionality, provided they are authorized for use of the service." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Server_(computing)>,
        <http://dbpedia.org/resource/Service_(systems_architecture)> .

:ServiceApplicationProcess a owl:Class ;
    rdfs:label "Service Application Process" ;
    rdfs:subClassOf :ApplicationProcess .

:ServiceBinaryVerification a owl:Class,
        owl:NamedIndividual,
        :SystemFileAnalysis ;
    rdfs:label "Service Binary Verification" ;
    rdfs:subClassOf :SystemFileAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :verifies ;
            owl:someValuesFrom :ServiceApplication ] ;
    :d3fend-id "D3-SBV" ;
    :definition "Analyzing changes in service binary files by comparing to a source of truth." ;
    :kb-article """## How it works
System service applications may originate from the operating system installation or third-party applications installed with administrative privileges. These services have an entry point of some executable file-- a binary or a script. Attackers sometimes modify these executables to launch their own code. Analyzing changes in these files may uncover unauthorized activity.

## Considerations
* These files change for legitimate reasons when the system or software updates.
* The source of truth must not be corrupted in order for this method to work.""" ;
    :kb-reference :Reference-ServiceBinaryModifications_MITRE .

:ServiceDependency a owl:Class ;
    rdfs:label "Service Dependency" ;
    rdfs:subClassOf :Dependency ;
    :definition "A service dependency indicates a service has an activity, agent, or another service which relies on it in order to be functional." .

:ServiceDependencyMapping a owl:Class,
        owl:NamedIndividual,
        :SystemMapping ;
    rdfs:label "Service Dependency Mapping" ;
    rdfs:subClassOf :SystemMapping,
        [ a owl:Restriction ;
            owl:onProperty :maps ;
            owl:someValuesFrom :ServiceDependency ] ;
    :d3fend-id "D3-SVCDM" ;
    :definition "Service dependency mapping determines the services on which each given service relies." ;
    :kb-article """## How it works
The organization collects and models architectural information about the services and consumers of services and maps the dependencies between the services.

## Considerations
* Architectural design artifacts and SMEs may need to be consulted to determine if dependencies are intended or otherwise essential.
* Service dependencies for critical systems--those supporting critical organizational activities--should be prioritized for supply chain risk analysis.
* Service dependencies in cloud or microservice architectures may be discovered using distributed tracing capabilities""" ;
    :kb-reference :Reference-CatiaUAFPlugin,
        :Reference-TivoliApplicationDependencyDiscoverManager7_3_0DependenciesBetweenResources,
        :Reference-UnifiedArchitectureFrameworkUAF ;
    :synonym "Distributed Tracing" .

:ServiceProvider a owl:Class ;
    rdfs:label "Service Provider" ;
    rdfs:subClassOf :Provider,
        [ a owl:Restriction ;
            owl:onProperty :provides ;
            owl:someValuesFrom :Service ] .

:Session a owl:Class ;
    rdfs:label "Session" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Session_(computer_science)> ;
    :definition "In computer science, in particular networking, a session is a semi-permanent interactive information interchange, also known as a dialogue, a conversation or a meeting, between two or more communicating devices, or between a computer and user (see Login session). A session is set up or established at a certain point in time, and then torn down at some later point. An established communication session may involve more than one message in each direction. A session is typically, but not always, stateful, meaning that at least one of the communicating parts needs to save information about the session history in order to be able to communicate, as opposed to stateless communication, where the communication consists of independent requests with responses." .

:SessionCookie a owl:Class ;
    rdfs:label "Session Cookie" ;
    skos:altLabel "In-memory Cookie",
        "Non-persistent Cookie",
        "Transient Cookie",
        "Web Session Cookie" ;
    rdfs:subClassOf :Credential ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/HTTP_cookie#Session_cookie> ;
    :definition "A session cookie, also known as an in-memory cookie, transient cookie or non-persistent cookie, exists only in temporary memory while the user navigates the website. Web browsers normally delete session cookies when the user closes the browser. Unlike other cookies, session cookies do not have an expiration date assigned to them, which is how the browser knows to treat them as session cookies." ;
    rdfs:seeAlso <http://dbpedia.org/resource/HTTP_cookie> .

:SessionDurationAnalysis a owl:Class,
        owl:NamedIndividual,
        :UserBehaviorAnalysis ;
    rdfs:label "Session Duration Analysis" ;
    rdfs:subClassOf :UserBehaviorAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :Authentication ],
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :Authorization ] ;
    :d3fend-id "D3-SDA" ;
    :definition "Analyzing the duration of user sessions in order to detect unauthorized  activity." ;
    :kb-article """## How it works
Detecting unauthorized user sessions by comparing the duration of a user logon session with a baseline behavior model. The behavior model comprises historical user session duration times.  Abnormalities between session duration and the behavior model may indicate suspicious activity.

## Considerations
* Potential for false positives from anomalies that are not associated with malicious activity.
* Attackers may not differentiate their session duration enough to trigger an alert.""" ;
    :kb-reference <http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-System,Method,AndComputerProgramProductForDetectingAndAssessingSecurityRisksInANetwork_ExabeamInc>,
        :Reference-MethodAndApparatusForNetworkFraudDetectionAndRemediationThroughAnalytics_IdaptiveLLC .

:SetSystemConfigValue a owl:Class ;
    rdfs:label "Set System Config Value" ;
    rdfs:subClassOf :SystemConfigSystemCall,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ] ;
    rdfs:seeAlso "https://docs.microsoft.com/en-us/windows/win32/api/winreg/nf-winreg-regsetvalueexa" .

:ShadowStack a owl:Class ;
    rdfs:label "Shadow Stack" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :copy-of ;
            owl:someValuesFrom :CallStack ] ;
    rdfs:isDefinedBy "https://dbpedia.org/page/Shadow_stack" ;
    :definition "A shadow stack is a mechanism for protecting a procedure's stored return address, such as from a stack buffer overflow. The shadow stack itself is a second, separate stack that \"shadows\" the program call stack. In the function prologue, a function stores its return address to both the call stack and the shadow stack. In the function epilogue, a function loads the return address from both the call stack and the shadow stack, and then compares them. If the two records of the return address differ, then an attack is detected." ;
    :todo "Model more completely: what manages the shadowstack, where does it reside specifically in memory." .

:ShadowStackComparisons a owl:Class,
        owl:NamedIndividual,
        :ProcessAnalysis ;
    rdfs:label "Shadow Stack Comparisons" ;
    rdfs:subClassOf :ProcessAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :StackFrame ] ;
    :d3fend-id "D3-SSC" ;
    :definition "Comparing a call stack in system memory with a shadow call stack maintained by the processor to determine unauthorized shellcode activity." ;
    :kb-article """## How it works
This technique compares the call stack stored in system memory with the shadow call stack maintained in the cache memory of the processor.  Mismatches between the two are compared since a return oriented programming attack may only be able to control or spoof the call stack and not the shadow call stack. Mismatches are counted and if the number of mismatches exceeds a certain threshold it is an indication of unauthorized activity and a security response action is performed.

## Considerations
If the threshold for detecting a stack anomaly is low, it may not detect a return-oriented attack with just one gadget, such as a return-to-libc or return-to-plt attack.  Additionally, this technique may not detect JOP (Jump-oriented programming), as the return instruction is not executed.""" ;
    :kb-reference :Reference-ThreatDetectionForReturnOrientedProgramming_CrowdstrikeInc .

:SharedComputer a owl:Class ;
    rdfs:label "Shared Computer" ;
    rdfs:subClassOf :ClientComputer ;
    :definition "A computer whose resources are intended to be shared widely." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Time-sharing> .

:SharedLibraryFile a owl:Class ;
    rdfs:label "Shared Library File" ;
    skos:altLabel "Shared Library",
        "Shared Object" ;
    rdfs:subClassOf :ObjectFile ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Library_(computing)#Shared_libraries> ;
    :definition "A shared library file is a file that is intended to be shared by executable files and further shared library (object) files. Modules used by a program are loaded from individual shared objects into memory at load time or runtime, rather than being copied by a linker when it creates a single monolithic executable file for the program" .

:SharedResourceAccessFunction a owl:Class ;
    rdfs:label "Shared Resource Access Function" ;
    rdfs:subClassOf :Subroutine,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :Resource ] ;
    :definition "A function which access a shared resource." .

:Shim a owl:Class ;
    rdfs:label "Shim" ;
    rdfs:subClassOf :Software ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Shim_(computing)> ;
    :definition "In computer programming, a shim is a small library that transparently intercepts API calls and changes the arguments passed, handles the operation itself, or redirects the operation elsewhere. Shims can be used to support an old API in a newer environment, or a new API in an older environment. Shims can also be used for running programs on different software platforms than those for which they were developed." .

:ShimDatabase a owl:Class ;
    rdfs:label "Shim Database" ;
    rdfs:subClassOf :ApplicationConfigurationDatabase ;
    :definition "A application configuration database that contains or points to software shims (e.g., for backward compatibility, patches, etc.)" .

:ShortcutFile a owl:Class ;
    rdfs:label "Shortcut File" ;
    rdfs:subClassOf :File ;
    :definition """A shortcut file, or shortcut, is a handle that allows the user to find a file or resource located in a different directory or folder from the place where the shortcut is located.

Shortcuts, which are supported by the graphical file browsers of some operating systems, may resemble symbolic links but differ in a number of important ways. One difference is what type of software is able to follow them:

 - Symbolic links are automatically resolved by the file system. Any software program, upon accessing a symbolic link, will see the target instead, whether the program is aware of symbolic links or not.

 - Shortcuts are treated like ordinary files by the file system and by software programs that are not aware of them. Only software programs that understand shortcuts (such as the Windows shell and file browsers) treat them as references to other files.

Another difference are the capabilities of the mechanism:

 - Microsoft Windows shortcuts normally refer to a destination by an absolute path (starting from the root directory), whereas POSIX symbolic links can refer to destinations via either an absolute or a relative path. The latter is useful if both the location and destination of the symbolic link share a common path prefix[clarification needed], but that prefix is not yet known when the symbolic link is created (e.g., in an archive file that can be unpacked anywhere).

- Microsoft Windows application shortcuts contain additional metadata that can be associated with the destination, whereas POSIX symbolic links are just strings that will be interpreted as absolute or relative pathnames.

- Unlike symbolic links, Windows shortcuts maintain their references to their targets even when the target is moved or renamed. Windows domain clients may subscribe to a Windows service called Distributed Link Tracking to track the changes in files and folders to which they are interested. The service maintains the integrity of shortcuts, even when files and folders are moved across the network.[14] Additionally, in Windows 9x and later, Windows shell tries to find the target of a broken shortcut before proposing to delete it.""" ;
    rdfs:seeAlso <http://dbpedia.org/resource/Shortcut_(computing)>,
        <http://dbpedia.org/resource/Symbolic_link#Shortcuts> .

:SimulatedAnnealing a owl:Class ;
    rdfs:label "Simulated Annealing" ;
    rdfs:subClassOf :MetaheuristicAlgorithm .

:Simulation a owl:Class ;
    rdfs:label "Simulation" ;
    rdfs:subClassOf :Generation .

:SingularValueDecomposition a owl:Class ;
    rdfs:label "Singular Value Decomposition" ;
    rdfs:subClassOf :DimensionReduction ;
    :definition "Singular Value Decomposition (SVD) is a factorization technique used in linear algebra and computer science that breaks down a matrix into three components. These are a rotation, a scaling, and another rotation, represented by the matrices U, Σ, and V* respectively. SVD is used for tasks such as signal processing, image compression, and is integral to many machine learning algorithms, particularly in the domain of natural language processing." ;
    :kb-article """## How it works
Singular Value Decomposition (SVD) is a method that decomposes a matrix A into three resultant matrices: U, Σ, and V*. U and V* are orthogonal matrices, representing rotations or reflections, while Σ is a diagonal matrix, representing a scaling or stretching. 

The matrix A is of dimension m x n, U is m x m, Σ is m x n, and V* is n x n. The decomposition represents the system of linear equations embodied by matrix A in terms of mutually independent factors. This greatly simplifies many computational tasks. In terms of data science and machine learning, these matrices can represent different aspects of the data such as patterns, singularities, and noise, among others. 

## Considerations 
- **Data preprocessing**: SVD is sensitive to the scale of the data. Hence, features should be scaled (standardized) prior to applying SVD.
- **Computational complexity**: SVD can be computationally intensive on large datasets. Therefore, it might be necessary to consider truncated or randomized SVD for high-dimensional data.
- **Data sparsity**: If the data matrix is sparse, other methods such as Sparse SVD or matrix factorization techniques tailored for sparsity might be more appropriate.
- **Interpretability**: The transformed features after SVD might lose their original interpretability.
  
## References 
1. [Strang, G. (1993). The Singular Value Decomposition. *Introduction to Linear Algebra*. Wellesley-Cambridge Press.](http://www.cs.huji.ac.il/courses/learning/Course/Strang-SVD.pdf)
2. [Deerwester, S., Dumais, S. T., Furnas, G. W., Landauer, T. K., & Harshman, R. (1990). Indexing by Latent Semantic Analysis. *Journal of the American Society for Information Science*.](http://www.cs.bham.ac.uk/~pxt/IDA/lsa_ind.pdf)
3. [Halko, N., Martinsson, P. G., & Tropp, J. A. (2011). Finding Structure with Randomness: Probabilistic Algorithms for Constructing Approximate Matrix Decompositions. *SIAM Review*.](https://epubs.siam.org/doi/abs/10.1137/090771806)
4. [Andrew Ng's Machine Learning course - Singular Value Decomposition - Coursera](https://www.coursera.org/learn/machine-learning)""" .

:Skewness a owl:Class ;
    rdfs:subClassOf :DistributionProperties .

:SlowSymbolicLink a owl:Class ;
    rdfs:label "Slow Symbolic Link" ;
    skos:altLabel "Slow Symlink" ;
    rdfs:subClassOf :SymbolicLink,
        :UnixLink ;
    :definition "A slow symbolic link is any symbolic link on a Unix filesystem that is not a fast symbolic link; slow symlink is thus retroactively termed from fast symlink.  Slow symbolic links stored the symbolic link information as data in regular files." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Symbolic_link#Storage_of_symbolic_links> .

:Software a owl:Class ;
    rdfs:label "Software" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :ExecutableFile ],
        [ a owl:Restriction ;
            owl:onProperty :implements ;
            owl:someValuesFrom :Subroutine ],
        [ a owl:Restriction ;
            owl:onProperty :instructs ;
            owl:someValuesFrom :Process ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Software> ;
    :definition "Computer software, or simply software, is that part of a computer system that consists of encoded information or computer instructions, in contrast to the physical hardware from which the system is built." .

:SoftwareArtifactServer a owl:Class ;
    rdfs:label "Software Artifact Server" ;
    rdfs:subClassOf :ArtifactServer ;
    :definition "A software artifact server provides access to the software artifacts in a software repository. A software repository, or \"repo\" for short, is a storage location for software packages. Often a table of contents is stored, as well as metadata. Repositories group packages. Sometimes the grouping is for a programming language, such as CPAN for the Perl programming language, sometimes for an entire operating system, sometimes the license of the contents is the criteria. At client side, a package manager helps installing from and updating the repositories." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Artifact_(software_development)>,
        <http://dbpedia.org/resource/Software_repository> .

:SoftwareDeploymentTool a owl:Class ;
    rdfs:label "Software Deployment Tool" ;
    rdfs:subClassOf :ServiceApplication ;
    :definition "Software that coordinates the deployment process of software to systems, typically remotely." .

:SoftwareInventory a :AssetInventory,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Software Inventory" ;
    rdfs:subClassOf :AssetInventory,
        [ a owl:Restriction ;
            owl:onProperty :inventories ;
            owl:someValuesFrom :Software ] ;
    :d3fend-id "D3-SWI" ;
    :definition "Software inventorying identifies and records the software items in the organization's architecture." ;
    :kb-article """## How it works
Administrators collect information on software items in their architecture using a variety of administrative and management tools that query network nodes for information.  In limited cases, where such queries are not supported or provide specific information of interest, an administrator may also collect this information through network enumeration methods to determine services responding on network nodes.

## Considerations
* Scanning and probing techniques using mapping tools can result in side effects to information technology (IT) and operational technology (OT) systems.
* An adversary conducting network enumeration may engage in activities that parallel normal software inventorying activities, but would require escalating to admin privileges for most of the operations requiting administrative tools.

## Examples

Application-layer discovery:

* Simple Network Management Protocol (SNMP) collects MIB information
* Web-based Enterprise Management (WBEM) collects CIM information
   * Windows Management Instrumentation (WMI)
   * Windows Management Infrastructure (MI)""" ;
    :kb-reference :Reference-Web-BasedEnterpriseManagement,
        :Reference-Windows-Management-Infrastructure,
        :Reference-Windows-Management-Instrumentation ;
    :synonym "Software Discovery",
        "Software Inventorying" .

:SoftwareLibrary a owl:Class ;
    rdfs:label "Software Library" ;
    rdfs:subClassOf :Software,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :SoftwareLibraryFile ] ;
    :definition "A software library is a collection of software components that are used to build a software product." ;
    rdfs:seeAlso <https://dbpedia.org/page/Library_(computing)> .

:SoftwareLibraryFile a owl:Class ;
    rdfs:label "Software Library File" ;
    rdfs:subClassOf :File,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :Subroutine ],
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :ExecutableBinary ],
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :ExecutableScript ] ;
    :definition "A software library is a collection of software components that are used to build a software product." ;
    rdfs:seeAlso <https://dbpedia.org/page/Library_(computing)> .

:SoftwarePackage a owl:Class ;
    rdfs:label "Software Package" ;
    rdfs:subClassOf :DigitalArtifact .

:SoftwarePackagingTool a owl:Class ;
    rdfs:label "Software Packaging Tool" ;
    rdfs:subClassOf :BuildTool ;
    :definition "A tool that automates the process of packaging either or both binary code  and source code for use on one or more target platforms." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Build_automation>,
        <http://dbpedia.org/resource/Package_manager> .

:SoftwarePatch a owl:Class ;
    rdfs:label "Software Patch" ;
    skos:altLabel "Patch" ;
    rdfs:subClassOf :Software ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Patch_(computing)> ;
    :definition "A patch is a piece of software designed to update a computer program or its supporting data, to fix or improve it. This includes fixing security vulnerabilities and other bugs, with such patches usually called bugfixes or bug fixes, and improving the usability or performance. Although meant to fix problems, poorly designed patches can sometimes introduce new problems (see software regressions). In some special cases updates may knowingly break the functionality, for instance, by removing components for which the update provider is no longer licensed or disabling a device." .

:SoftwareProduct a owl:Class ;
    rdfs:label "Software Product" ;
    skos:altLabel "SaaP" ;
    rdfs:subClassOf :Product .

:SoftwareService a owl:Class ;
    rdfs:label "Software Service" ;
    skos:altLabel "SaaS" ;
    rdfs:subClassOf :Service .

:SoftwareUpdate a owl:Class,
        owl:NamedIndividual,
        :PlatformHardening ;
    rdfs:label "Software Update" ;
    rdfs:subClassOf :PlatformHardening,
        [ a owl:Restriction ;
            owl:onProperty :updates ;
            owl:someValuesFrom :Software ] ;
    :d3fend-id "D3-SU" ;
    :definition "Replacing old software on a computer system component." ;
    :kb-reference :Reference-MethodAndSystemForProvidingSoftwareUpdatesToLocalMachines .

:SomersD a owl:Class ;
    rdfs:label "Somers' D" ;
    rdfs:subClassOf :RankCorrelationCoefficient .

:SoundexMatching a owl:Class ;
    rdfs:label "Soundex Matching" ;
    rdfs:subClassOf :PartialMatching ;
    :definition "Soundex is a phonetic algorithm for indexing names by sound, as pronounced in English. The goal is for homophones to be encoded to the same representation so that they can be matched despite minor differences in spelling." ;
    :kb-article """## How it works
_TBD enter text here for how the thing works_

## Considerations 

## References 
- https://en.wikipedia.org/wiki/Soundex""" .

:SourceCode a owl:Class,
        owl:NamedIndividual,
        :ReferenceType ;
    rdfs:label "Source Code" ;
    rdfs:subClassOf :InformationContentEntity .

:SourceCodeAnalyzerTool a owl:Class ;
    rdfs:label "Source Code Analyzer Tool" ;
    rdfs:subClassOf :StaticAnalysisTool ;
    :definition "A source code analyzer tool is a static analysis tool that operates specifically on source code, but not object code." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Static_program_analysis> .

:SourceCodeReference a owl:Class ;
    rdfs:label "Source Code Reference" ;
    rdfs:subClassOf :TechniqueReference ;
    :pref-label "Source Code" .

:SpearmansRankCorrelationCoefficient a owl:Class ;
    rdfs:label "Spearman's Rank Correlation Coefficient" ;
    rdfs:subClassOf :RankCorrelationCoefficient ;
    :synonym "Spearman's Rho" .

:Specification a owl:Class ;
    rdfs:label "Specification" ;
    rdfs:subClassOf :Document .

:SpecificationReference a owl:Class ;
    rdfs:label "Specification Reference" ;
    rdfs:subClassOf :TechniqueReference ;
    :pref-label "Specification" .

:SpectralClustering a owl:Class ;
    rdfs:label "Spectral Clustering" ;
    rdfs:subClassOf :Graph-basedClustering .

:SSHSession a owl:Class ;
    rdfs:label "SSH Session" ;
    rdfs:subClassOf :RemoteSession ;
    :definition "A Secure Shell Protocol (SSH) session is a session over a secure channel established using SSH to connect a client to a server and establish the remote session." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Secure_Shell_Protocol> .

:StackComponent a owl:Class ;
    rdfs:label "Stack Component" ;
    rdfs:subClassOf :DigitalArtifact ;
    :definition "A stack component is any component of a call stack used for stack-based memory allocation in a running process.  Examples include saved instruction pointers, stack frames, and stack frame canaries." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Call_stack> .

:StackFrame a owl:Class ;
    rdfs:label "Stack Frame" ;
    skos:altLabel "Activation Frame",
        "Activation Record" ;
    rdfs:subClassOf :StackComponent,
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :Pointer ],
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :StackFrameCanary ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Call_stack#Structure> ;
    :definition "A machine-dependent and application-binary-dependent (ABI-dependent) data structure containing subroutine state information including the arguments passed into the routine, the return address back to the routine's caller, and space for local variables of the routine." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Call_stack> .

:StackFrameCanary a owl:Class ;
    rdfs:label "Stack Frame Canary" ;
    skos:altLabel "Stack Canary" ;
    rdfs:subClassOf :StackComponent ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Stack_buffer_overflow#Stack_canaries> ;
    :definition "Stack canaries, named for their analogy to a canary in a coal mine, are used to detect a stack buffer overflow before execution of malicious code can occur. This method works by placing a small integer, the value of which is randomly chosen at program start, in memory just before the stack return pointer. Most buffer overflows overwrite memory from lower to higher memory addresses, so in order to overwrite the return pointer (and thus take control of the process) the canary value must also be overwritten. This value is checked to make sure it has not changed before a routine uses the return pointer on the stack. This technique can greatly increase the difficulty of exploiting a stack buffer overflow because it forces the attacker to gain control of the instruction pointer by some non-traditional means such as corrupting other important variables on the stack." .

:StackFrameCanaryValidation a :ApplicationHardening,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Stack Frame Canary Validation" ;
    rdfs:subClassOf :ApplicationHardening,
        [ a owl:Restriction ;
            owl:onProperty :validates ;
            owl:someValuesFrom :StackFrame ] ;
    :d3fend-id "D3-SFCV" ;
    :definition "Comparing a value stored in a stack frame with a known good value in order to prevent or detect a memory segment overwrite." ;
    :kb-article """## How it works

This defense must be applied at compile-time, or via a patch to the program binary.  Stack Frame Canary Verification inserts instructions at the prologue and epilogue of desired functions.  In the prologue, a canary value, typically with the same size as the register size, is stored in the system of record and on the stack.  Typically, the canary is loaded to where it has a memory address just below that of the saved instruction pointer and base pointer.  In the epilogue, the canary value stored on the stack and, is compared to the canary value in the system of record.  If the values are different, other techniques such as those in Process Eviction might be invoked, such as Process Termination to end the current process, or Executable Blacklisting to blacklist the potentially vulnerable or malfunctioning executable.

Stack Frame Canary Verification is commonly used to detect potential tampering of a saved register value on the stack before it has been restored.  Examples of registers with values commonly saved to the stack include the instruction pointer and the base pointer.

The canary should be stored between where the start of a buffer overrun is likely, and the data to protect, in cases where the buffer size increases it will overwrite the data to be protected.

On most processor architectures, including x86, x64, and ARM, a "push" operation to store data to the stack grows the stack towards a lower memory address.  As in these architectures, saved register values are stored to the stack at a point in time just before space is made for the local function variables, the saved register values have a higher address than that of the local function variables.  Values at increasing indexes of a buffer are written to increasing memory addresses; therefore, an overwrite in the local variable buffer could overwrite saved register values, and a stack canary between these two would be useful in detecting an overwrite.

On some other processor architectures such as the B5000, the stack grows towards increasing memory addresses, and some architectures, such as System Z and RCA1802A, stack direction can be chosen.  If the stack grows towards increasing memory addresses, while this architecture inherently provides more protection against a saved register being overwritten, other data including local function variables might be overwritten.


## Considerations

There are several ways that the protection provided by a canary could be rendered ineffective.

### Performing a malicious action before the canary is checked

If the attacker alters the memory in such a way that it performs a malicious action before the epilogue is called, then this protection will not be effective.  This includes altering the logic of the program by altering the values of local variables stored on the function stack, or by causing an exception and exploiting the exception mechanism such as the SEH (Structured Exception Handling) mechanism on Windows.

### Determining the canary value

Determining the canary value is possible through reading memory either for the code used to check the canary, or from the stored canary value itself in a stack frame.

### Changing the canary value

A vulnerability such as a write-what-where condition that allows one to write data after the canary in the stack, would allow control of the value of the saved instruction pointer without needing to know the canary value.""" ;
    :kb-reference :Reference-GS_BufferSecurityCheck_MicrosoftDocs,
        :Reference-StackSmashingProtection_StackGuard_RedHat .

:Stacking a owl:Class ;
    rdfs:label "Stacking" ;
    rdfs:subClassOf :EnsembleLearning ;
    :definition "Stacking is a machine learning technique that combines multiple classification or regression models via a meta-classifier or a meta-regressor. The base-level models are trained based on a complete training set, then the meta-model is trained on the outputs of the base models to make final predictions." ;
    :kb-article """## How it works
Stacking works by training multiple diverse models on the same dataset and then combining their predictions. Each of these models makes a prediction which is used as input to a second-level model, known as the meta-model, which makes the final prediction.

In the first step, multiple base models are trained independently on the same dataset. The diversity among the base models can be promoted by using different types of algorithms or configurations. Each base model then makes predictions on the training set. These predictions are stacked together and serve as the input features for the second step. 

In the second step, another model (the meta-model) is trained on this stacked dataset. Since the meta-model is trained on the predictions of the base models, it can learn how to best combine the predictive power of each base model to improve the overall performance.

## Considerations 
- **Diversity among base models**: For stacking to be effective, the base models should be diverse, which can be achieved by using different types of algorithms or configurations.
- **Risk of overfitting**: Stacking can lead to overfitting, especially when the number of base models is large.
- **Computational cost**: As stacking involves training multiple models, it can be computationally expensive and time-consuming.
- **Interpretability**: Stacking, like many other ensemble methods, may sacrifice model interpretability as it becomes challenging to understand the contribution of each base model to the final decision.

## References 
1. Wolpert, D. H. (1992). Stacked generalization. Neural networks, 5(2), 241-259.
2. Ting, K. M., & Witten, I. H. (1999). Issues in stacked generalization. Journal of artificial intelligence research, 10, 271-289.
3. Breiman, L. (1996). Stacked regressions. Machine learning, 24(1), 49-64.
4. Sill, J., Takács, G., Mackey, L., & Lin, D. (2009). Feature-weighted linear stacking. arXiv preprint arXiv:0911.0460.
5. [Scikit-Learn Stacking guide](https://scikit-learn.org/stable/modules/ensemble.html#stacking)""" .

:StackSegment a owl:Class ;
    rdfs:label "Stack Segment" ;
    rdfs:subClassOf :ProcessSegment,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :StackFrame ] ;
    :definition "The stack segment contains the program stack, a last-in-first-out structure, typically allocated in the higher parts of memory for the process." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Call_stack>,
        <http://dbpedia.org/resource/Data_segment#Stack> .

:StandaloneHoneynet a :DecoyEnvironment,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Standalone Honeynet" ;
    rdfs:subClassOf :DecoyEnvironment,
        [ a owl:Restriction ;
            owl:onProperty :spoofs ;
            owl:someValuesFrom :IntranetNetwork ] ;
    :d3fend-id "D3-SHN" ;
    :definition "An environment created for the purpose of attracting attackers and eliciting their behaviors that is not connected to any production enterprise systems." ;
    :kb-article """## How it works
A standalone honeynet does not directly interact with the real enterprise environment. It may be located near or in some portion of the enterprise address space, but it does not interact with enterprise resources.

## Considerations
A standalone honeynet is a lower risk to deploy compared to connected or integrated honeynets due to its isolation from the enterprise network. However, this comes at cost in loss of fidelity and realism. Significant extra effort must be made in order to make the environment look realistic.""" ;
    :kb-reference :Reference-DynamicSelectionAndGenerationOfAVirtualCloneForDetonationOfSuspiciousContentWithinAHoneyNetwork_PaloAltoNetworksInc .

:StandardDeviation a owl:Class ;
    rdfs:label "Standard Deviation" ;
    rdfs:subClassOf :Variability ;
    :synonym "SD" .

:StartupDirectory a owl:Class ;
    rdfs:label "Startup Directory" ;
    rdfs:subClassOf :Directory,
        :LocalResource ;
    :definition "A startup directory is a directory containing executable files or links to executable files which are run when a user logs in or when a system component or service is started." .

:Statement a owl:Class ;
    rdfs:label "Statement" ;
    rdfs:subClassOf :Proposition ;
    rdfs:isDefinedBy <http://semanticscience.org/resource/SIO_001183> ;
    :definition "A statement is a proposition that is either (a) a meaningful declarative sentence that is either true or false, or (b) that which a true or false declarative sentence asserts." .

:StaticAnalysisTool a owl:Class ;
    rdfs:label "Static Analysis Tool" ;
    skos:altLabel "Static Program Analysis Tool" ;
    rdfs:subClassOf :CodeAnalyzer ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Static_program_analysis> ;
    :definition "A static [program] analysis tool performs an automated analysis of computer software without actually executing programs, in contrast with dynamic analysis, which is analysis performed on programs while they are executing. In most cases the analysis is performed on some version of the source code, and in the other cases, some form of the object code." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Category:Program_analysis>,
        <http://dbpedia.org/resource/Program_analysis> ;
    :todo "Not sure what intended diff of Source Code Analyzer Tool and Static Analysis Tool is.  At high level these are grouped.  There are subtypes of analysis, but much finer grained operations/capes.  Also, there ought to be a Dynamic Analysis Tool (http://dbpedia.org/resource/Dynamic_program_analysis) as part of Program Analysis as parent.  Not sure what Code Analyzer parent is other than another name for Static Code Analyzer/Static Analysis Tool... or Program Analysis Tool see" .

:StatisticalMethod a owl:Class ;
    rdfs:label "Statistical Method" ;
    rdfs:subClassOf :AnalyticTechnique .

:Step a owl:Class ;
    rdfs:subClassOf :D3FENDThing,
        [ a owl:Restriction ;
            owl:onProperty :end ;
            owl:someValuesFrom :Step ],
        [ a owl:Restriction ;
            owl:onProperty :fork ;
            owl:someValuesFrom :Step ],
        [ a owl:Restriction ;
            owl:onProperty :may-be-associated-with ;
            owl:someValuesFrom :Artifact ],
        [ a owl:Restriction ;
            owl:onProperty :next ;
            owl:someValuesFrom :Step ] .

:Storage a owl:Class ;
    rdfs:label "Storage" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :may-contain ;
            owl:someValuesFrom :FileSystem ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Computer_data_storage> ;
    :definition "Computer data storage, often called storage or memory, is a technology consisting of computer components and recording media used to retain digital data. It is a core function and fundamental component of computers. In the Von Neumann architecture, the CPU consists of two main parts: The control unit and the arithmetic / logic unit (ALU). The former controls the flow of data between the CPU and memory, while the latter performs arithmetic and logical operations on data." ;
    :synonym "Computer data storage",
        "Storage" .

:StoredProcedure a owl:Class ;
    rdfs:label "Stored Procedure" ;
    rdfs:subClassOf :Subroutine ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Stored_procedure> ;
    :definition "A stored procedure (also termed proc, storp, sproc, StoPro, StoredProc, StoreProc, sp, or SP) is a subroutine available to applications that access a relational database management system (RDBMS). Such procedures are stored in the database data dictionary." .

:StringEquivalenceMatching a owl:Class ;
    rdfs:label "String Equivalence Matching" ;
    rdfs:subClassOf :StringPatternMatching ;
    :definition "String Equavilance Matching needs definition" ;
    :kb-article """## How it works
_TBD enter text here for how the thing works_

## Considerations 

## References 
_TBD_""" .

:StringFormatFunction a owl:Class ;
    rdfs:label "String Format Function" ;
    rdfs:subClassOf :Subroutine ;
    :definition "A function which creates a new string based on a format specification and correspondingi specified values." .

:StringPatternMatching a owl:Class ;
    rdfs:label "String Pattern Matching" ;
    rdfs:subClassOf :PatternMatching ;
    :definition "String Pattern Matching is a computational technique used in information retrieval and data processing that searches for specific sequences or patterns of characters within a given text or document. It is a fundamental concept in computer science, particularly in fields such as natural language processing, data mining, and bioinformatics, and plays a critical role in tasks like data validation, parsing, syntax highlighting, and virus scanning." ;
    :kb-article """## How it works
String Pattern Matching operates on the premise of locating and identifying specific patterns within a dataset. This can range from simple character patterns to more complex sequences. The algorithm scans a text from left to right, character by character, comparing the input string to the target pattern. Various algorithms exist for this purpose, such as the Knuth-Morris-Pratt (KMP) algorithm, the Boyer-Moore algorithm, and the Rabin-Karp algorithm. Each algorithm has its strengths and weaknesses and is used in different contexts based on these trade-offs. 

For instance, the Knuth-Morris-Pratt algorithm pre-processes the pattern to identify any prefixes that are also suffixes. This allows it to skip sections of the input, making it more efficient. On the other hand, the Boyer-Moore algorithm works by preprocessing the pattern and creating a 'bad-character' table to allow it to skip sections of the text. It performs best when the pattern is relatively short compared to the text and the alphabet is reasonably large.

## Considerations
- **Algorithm Selection**: Different pattern matching algorithms have different performance characteristics and trade-offs. Factors such as the size of the dataset, the nature of the patterns to be matched, and the expected frequency of matches should inform the choice of algorithm.
- **Regular Expressions**: These are a powerful tool for string pattern matching but can be complex and challenging to debug. Make sure you understand the regular expression syntax and how it behaves in your chosen language or tool.
- **Case Sensitivity**: Pattern matching is often case-sensitive by default. Consider how case-sensitivity will impact your matching and adjust your approach accordingly.
- **Unicode and Special Characters**: Special characters and different encodings can complicate pattern matching. Ensure your approach is robust to the character sets you expect in your data.

## References
1. [Knuth, D. E., Morris Jr, J. H., & Pratt, V. R. (1977). Fast pattern matching in strings. SIAM journal on computing, 6(2), 323-350.](https://dl.acm.org/doi/10.5555/321879)
2. [Boyer, R. S., & Moore, J. S. (1977). A fast string searching algorithm. Communications of the ACM, 20(10), 762-772.](https://dl.acm.org/doi/10.1145/359842.359859)
3. [Rabin, M. O., & Karp, R. M. (1987). Efficient randomized pattern-matching algorithms. IBM journal of research and development, 31(2), 249-260.](https://domino.research.ibm.com/library/cyberdig.nsf/papers/6B06ED554786C9B385257222006FD9A2/$File/rj2418.pdf)
4. [Mastering Regular Expressions, Jeffrey E. F. Friedl, O'Reilly Media](https://www.oreilly.com/library/view/mastering-regular-expressions/0596528124/)
5. [Regular Expressions in Python, Python Documentation](https://docs.python.org/3/library/re.html)""" .

:StrongPasswordPolicy a :CredentialHardening,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Strong Password Policy" ;
    rdfs:subClassOf :CredentialHardening,
        [ a owl:Restriction ;
            owl:onProperty :strengthens ;
            owl:someValuesFrom :Password ],
        [ a owl:Restriction ;
            owl:onProperty :strengthens ;
            owl:someValuesFrom :UserAccount ] ;
    :d3fend-id "D3-SPP" ;
    :definition "Modifying system configuration to increase password strength." ;
    :kb-article """## How it works
Password strength guidelines include increasing password length, permitting passwords that contain ASCII or Unicode characters, and requiring systems to screen new passwords against lists of commonly used or compromised passwords.
## Considerations
Extremely complex password requirements may lead users to saving passwords in text files or picking obvious passwords that meet the policy.""" ;
    :kb-reference :Reference-DigitalIdentityGuidelines800-63-3,
        :Reference-Testing_Metrics_for_Password_Creation_Policies_by_Attacking_Large_Sets_of_Revealed_Passwords .

:StyleGAN a owl:Class ;
    rdfs:label "StyleGAN" ;
    rdfs:subClassOf :ImageSynthesisGAN ;
    :synonym "Style GAN" .

:Subroutine a owl:Class ;
    rdfs:label "Subroutine" ;
    rdfs:subClassOf :Software ;
    :definition "In different programming languages, a subroutine may be called a procedure, a function, a routine, a method, or a subprogram. The generic term callable unit is sometimes used." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Subroutine> ;
    :synonym "Method",
        "Software Function" .

:SubspaceClustering a owl:Class ;
    rdfs:label "Subspace Clustering" ;
    rdfs:subClassOf :CorrelationClustering ;
    :definition "Subspace clustering is a type of machine learning technique that involves finding clusters in different subspaces within a high-dimensional data set. These subspaces are typically lower-dimensional projections of the original high-dimensional space, containing different clusters that are not visible in the full-dimensional space." ;
    :kb-article """## How it works
In subspace clustering, the technique explores subsets of dimensions of the data in search of clusters. The goal is to identify where these clusters exist in a complex, multidimensional space, recognizing that clusters may exist only within certain subspaces. A subspace cluster is defined as a cluster that can only be observed in a particular subspace of the dataset. 

There are three common approaches: bottom-up (or Apriori-like), top-down, and simultaneous (or bi-level). The bottom-up approach starts with single dimensions and extends the dimensionality, checking at each step if the extended cluster still satisfies the cluster definition. The top-down approach starts with the full space and reduces it by removing irrelevant dimensions. The simultaneous approach does not follow a strict order of dimensions but combines both previous strategies.

## Considerations 
- **Data dimensionality**: Subspace clustering performs best with high-dimensional data. It may not be as useful or effective with low-dimensional data where conventional clustering techniques may suffice.

- **Cluster distribution**: It's crucial to understand that clusters may not exist in all subspaces or dimensions. It's the nature of subspace clustering to find clusters that exist in different subspaces of a high-dimensional dataset.

- **Computational complexity**: While subspace clustering can handle high dimensional data better than traditional clustering, it is often more computationally expensive due to the need to explore a large number of subspaces.

- **Interpretability**: While subspace clustering can yield powerful insights, results can be challenging to interpret due to their high-dimensional nature.

## References 
1. [Kriegel, H.-P., Kröger, P., Zimek, A.: Clustering high-dimensional data: A survey on subspace clustering, pattern-based clustering, and correlation clustering. ACM Trans. Knowl. Discov. Data 3(1), 1–58 (2009)](https://dl.acm.org/doi/10.1145/1497577.1497578)
2. [Assent, I.: Clustering high dimensional data. WIREs Data Mining Knowl. Discov. 2(4), 340–350 (2012)](https://onlinelibrary.wiley.com/doi/abs/10.1002/widm.1050)
3. [Cheng, Y., Church, G.M.: Biclustering of expression data. In: Proc. Int. Conf. Intell. Syst. Mol. Biol., pp. 93–103 (2000)](https://www.aaai.org/Papers/ISMB/2000/ISMB00-011.pdf)""" .

:SubstringMatching a owl:Class ;
    rdfs:label "Substring Matching" ;
    rdfs:subClassOf :PartialMatching ;
    :definition "Rabin Karp Algorithm: It matches the hash value of the pattern with the hash value of current substring of text, and if the hash values match then only it starts matching individual characters. ?" ;
    :kb-article """## How it works
_TBD enter text here for how the thing works_

## Considerations 

## References 
- https://www.geeksforgeeks.org/rabin-karp-algorithm-for-pattern-searching/""" .

:Summarizing a owl:Class ;
    rdfs:label "Summarizing" ;
    rdfs:subClassOf :AnalyticalPurpose .

:SupervisedLearning a owl:Class ;
    rdfs:label "Supervised Learning" ;
    rdfs:subClassOf :MachineLearning ;
    :definition "Supervised Learning is a type of Machine Learning where an algorithm learns from labeled training data, and makes predictions based on that knowledge. It requires explicit supervision in the form of a labelled dataset, where the algorithm is provided with both the input data and corresponding correct output." ;
    :kb-article """## How it works
Supervised Learning algorithms operate by associating input features with corresponding output labels in the training dataset, which can then be used to predict the outputs of unseen data. During the training phase, the model creates a function that establishes a relationship between the inputs and the output. This function is then used to map new, unseen input to predicted output.

Two common types of supervised learning algorithms are classification and regression. In a classification problem, the output is a category, like 'spam' or 'not spam'. In regression problems, the output is a real or continuous value, such as 'house price'. In both cases, the model makes predictions based on the patterns it has learned from the training dataset.

## Considerations 

- **Quality of Data**: The effectiveness of supervised learning highly depends on the quality of the training data. High-quality, correctly labelled data will lead to better model performance.

- **Balanced Data**: In classification problems, it is important to have a balanced dataset, meaning that each class has a roughly equal number of instances. Imbalanced data can cause the model to be biased towards the class with more instances.

- **Overfitting**: Overfitting is a common issue in supervised learning where the model performs well on the training data but poorly on unseen data. Techniques such as cross-validation, regularization, and early stopping can be used to prevent overfitting.

- **Feature Selection**: Careful selection of input features is important to ensure the model is not overly complex and can generalize well to unseen data.

## References 

1. Russell, Stuart J., and Peter Norvig. *Artificial Intelligence: A Modern Approach*. Prentice Hall Press, 2009. [Link](http://aima.cs.berkeley.edu/)

2. Hastie, T., Tibshirani, R., and Friedman, J. *The Elements of Statistical Learning*. Springer, 2009. [Link](https://web.stanford.edu/~hastie/ElemStatLearn/)

3. Goodfellow, Ian, et al. *Deep Learning*. MIT Press, 2016. [Link](http://www.deeplearningbook.org/)
   
4. Bishop, Christopher M. *Pattern Recognition and Machine Learning*. Springer, 2006. [Link](https://www.springer.com/gp/book/9780387310732)""" .

:SupportVectorMachineClassification a owl:Class ;
    rdfs:label "Support Vector Machine Classification" ;
    rdfs:subClassOf :Classification ;
    :definition "A Support Vector Machine (SVM) Classifier is a supervised machine learning model used for binary classification problems. It works by drawing a hyperplane that separates the data into two classes, aiming to maximize the margin between these classes. The data points that are closest to the margin on either side are called the \"support vectors.\"" ;
    :kb-article """## How it works
The core idea of an SVM Classifier is to find an optimal hyperplane that distinctly classifies the data points in a multidimensional space. In simple terms, for a two-dimensional space, this would be a line that separates two classes of data points. For higher dimensions, this "line" is a hyperplane.

The SVM selects the hyperplane in such a way that the margin between the two classes is maximized, meaning it is as far from the nearest points of each class as possible. These nearest points are the support vectors. 

In some scenarios, the data isn't linearly separable. In such cases, SVMs can employ a technique known as the kernel trick. The kernel trick involves mapping the input vectors into a high-dimensional feature space where a hyperplane can be used to achieve separation.

## Considerations
- SVM works effectively in high-dimensional spaces and when there is a clear margin of separation in the data. However, it is not suitable for large datasets due to its high training time.
- SVMs do not directly provide probability estimates, these are calculated using an expensive five-fold cross-validation.
- It is sensitive to the choice of the kernel parameters. Therefore, careful tuning of parameters is required.
- It doesn't perform well when the dataset has more noise i.e., target classes are overlapping.

## References
- Cortes, C., & Vapnik, V. (1995). [Support-vector networks](https://link.springer.com/article/10.1007/BF00994018). Machine Learning, 20(3), 273–297.
- Scholkopf, B., Smola, A. J., & Bach, F. (2002). [Learning with Kernels: Support Vector Machines, Regularization, Optimization, and Beyond](https://mitpress.mit.edu/books/learning-kernels). MIT Press.
- [Support Vector Machines - Scikit Learn Documentation](https://scikit-learn.org/stable/modules/svm.html)""" .

:SuspendProcess a owl:Class ;
    rdfs:label "Suspend Process" ;
    rdfs:subClassOf :SystemCall,
        [ a owl:Restriction ;
            owl:onProperty :evicts ;
            owl:someValuesFrom :Process ] .

:Switch a owl:Class ;
    rdfs:label "Switch" ;
    skos:altLabel "Bridging Hub",
        "MAC Bridge",
        "Network Switch",
        "Switching Hub" ;
    rdfs:subClassOf :NetworkNode ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Network_switch> ;
    :definition "A network switch (also called switching hub, bridging hub, and by the IEEE MAC bridge) is networking hardware that connects devices on a computer network by using packet switching to receive and forward data to the destination device. A network switch is a multiport network bridge that uses MAC addresses to forward data at the data link layer (layer 2) of the OSI model. Some switches can also forward data at the network layer (layer 3) by additionally incorporating routing functionality. Such switches are commonly known as layer-3 switches or multilayer switches." .

:SymbolicLink a owl:Class ;
    rdfs:label "Symbolic Link" ;
    skos:altLabel "Soft Link",
        "Softlink",
        "Symlink" ;
    rdfs:subClassOf :File,
        :FileSystemLink,
        [ a owl:Restriction ;
            owl:onProperty :addresses ;
            owl:someValuesFrom :File ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Symbolic_link> ;
    :definition "A symbolic link (also symlink or soft link) is a term for any file that contains a reference to another file or directory in the form of an absolute or relative path and that affects pathname resolution." .

:SymbolicLogic a owl:Class ;
    rdfs:label "Symbolic Logic" ;
    rdfs:subClassOf :AnalyticTechnique ;
    :definition "Symbolic Logic, also known as formal logic, is a branch of mathematics that uses symbolic representations for logical expressions and relationships. It provides a systematic method for examining the structure of arguments and reasoning, focusing on the relationships between propositions rather than the content of those propositions." ;
    :kb-article """## How it Works
Symbolic logic works by substituting symbols for statements in a logical argument, thereby creating a mathematical construct that can be more readily manipulated and analyzed. A simple example might involve using 'P' for the statement "it is raining" and 'Q' for "the street is wet". A logical relationship can then be expressed symbolically, such as "If P, then Q" - which in English would translate to "If it is raining, then the street is wet". 

These symbols are then manipulated according to the rules of symbolic logic, which are derived from the principles of deductive reasoning. This allows one to determine the validity of an argument based on its structure rather than its content. Moreover, symbolic logic enables the creation of more complex logical structures, such as propositions with multiple variables, logical operators (and, or, not), and quantifiers (for all, there exists).

## Considerations 
- **Language precision:** When translating propositions into symbolic form, it is crucial to maintain precision and accuracy, as slight changes in language can significantly alter the symbolic representation.
- **Complexity:** As the complexity of the logical argument increases, so too does the complexity of the symbolic representation. This can make it challenging to manipulate and understand the logical structure.
- **Assumptions:** It's important to note that symbolic logic is based on certain axiomatic assumptions (like the law of non-contradiction), and these assumptions must be valid for the logical argument under consideration.
- **Understanding logical fallacies:** Misapplication of symbolic logic can lead to logical fallacies. Understanding these common errors is important for proper use.

## References 
1. Copi, Irving M.; Cohen, Carl (2001). [Introduction to Logic](https://www.amazon.com/Introduction-Logic-Irving-M-Copi/dp/0130337358). Prentice Hall.
2. Russell, Bertrand (1912). [The Problems of Philosophy](https://www.gutenberg.org/files/5827/5827-h/5827-h.htm). Project Gutenberg.
3. Stanford Encyclopedia of Philosophy. [Classical Logic](https://plato.stanford.edu/entries/logic-classical/).
4. [Symbolic Logic](https://www.britannica.com/topic/symbolic-logic) - Encyclopedia Britannica.
5. [Logic Primer](https://ocw.mit.edu/courses/linguistics-and-philosophy/24-241-logic-i-fall-2005/readings/chapter01.pdf) - Massachusetts Institute of Technology.""" .

:SymbolicReasoning a owl:Class ;
    rdfs:label "Symbolic Reasoning" ;
    rdfs:subClassOf :SymbolicLogic ;
    :definition """The ability to internally represent numbers, logical relationships, and mathematical rules in an abstract, amodal fashion. 

or 

Embodied reasoning in which arithmetic and logical formulae, externally represented as notations, serve as targets for powerful perceptual and sensorimotor systems""" ;
    :kb-article """## How it works
_TBD enter text here for how the thing works_

## Considerations 

## References 
- https://www.frontiersin.org/articles/10.3389/fpsyg.2014.00275/full""" .

:SymmetricKey a owl:Class ;
    rdfs:label "Symmetric Key" ;
    rdfs:subClassOf :CryptographicKey ;
    :definition "A symmetric key is a single key used for both encryption and decryption and used with a symmetric-key algorithm. Symmetric-key algorithms are algorithms for cryptography that use the same cryptographic keys for both encryption of plaintext and decryption of ciphertext. The keys may be identical or there may be a simple transformation to go between the two keys. The keys, in practice, represent a shared secret between two or more parties that can be used to maintain a private information link. This requirement that both parties have access to the secret key is one of the main drawbacks of symmetric key encryption, in comparison to public-key encrytption (also known as asymmetric key encryption)." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Symmetric-key_algorithm> .

:System a owl:Class ;
    rdfs:label "System" ;
    rdfs:subClassOf :Artifact ;
    rdfs:isDefinedBy "http://wordnet-rdf.princeton.edu/id/04384144-n" ;
    :definition "An artifact (instrumentality) that combines interrelated interacting artifacts designed to work as a coherent entity.  [Note that not all digital artifacts are systems nor are all systems digital artifacts.]" .

:SystemCall a owl:Class ;
    rdfs:label "System Call" ;
    rdfs:subClassOf :DigitalArtifact,
        :DigitalEvent,
        [ a owl:Restriction ;
            owl:onProperty :executes ;
            owl:someValuesFrom :Subroutine ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/System_call> ;
    :definition "A system call is the programmatic way in which a computer program requests a service from the kernel of the operating system it is executed on. This may include hardware-related services (for example, accessing a hard disk drive), creation and execution of new processes, and communication with integral kernel services such as process scheduling. System calls provide an essential interface between a process and the operating system." ;
    :synonym "API Monitoring" .

:SystemCallAnalysis a owl:Class,
        owl:NamedIndividual,
        :ProcessAnalysis ;
    rdfs:label "System Call Analysis" ;
    rdfs:subClassOf :ProcessAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :SystemCall ] ;
    :d3fend-id "D3-SCA" ;
    :definition "Analyzing system calls to determine whether a process is exhibiting unauthorized behavior." ;
    :kb-article """## How it works

System calls are APIs between a user application and the operating system [1].

By analyzing a process's use of these APIs, it is, in some cases, possible to ascertain whether a program is exhibiting unauthorized behavior, including trying to escalate its privileges.

### Gathering System Calls
A common method to capture system calls is to use kernel APIs to hook [2] a process's system call invocations.

The Linux system call `ptrace` tracks other system calls in a process and allows their alteration; this is made use of by GDB.  `strace` utilizes `ptrace` and will print to stdout each system call invoked. Other applications record this data in local or remote databases.

The log entry for each system call, which may reference additional information such as the date and time, and the process tree for the process which made the system call, is relayed, in real time or post-facto, to an analysis module which consults a catalog or model to determine whether the distribution matches a known-good or known-bad pattern.


### Analysis

System calls are analyzed with a variety of methods. Some analytics look for specific sequences of instructions, others may apply statistical methods to identify abnormal behavior. Sequences of instructions can be abstracted into conceptually higher order user activities, for example:

* An attacker executes many system calls in a short period of time, with several sequences which could be used to escalate privileges.
* Getting the contents from a URL, writing to a new file, and then executing the same file.
* A ransomware program which either uses a loop or creates many threads to: read a specified file, encrypt its contents, create an output file with a similar name to the original file, and delete the unencrypted original.

## Considerations

* Duplicative or extraneous system calls may be added to malware to defeat analytics.
* Malware could replace API hooking instructions to allow system calls to be made without being monitored.
* A model built from a training set of system calls and related data may not be updated fast enough to detect new threats.


[1] [Syscalls](http://man7.org/linux/man-pages/man2/syscalls.2.html)

[2] [Hooking](http://dbpedia.org/resource/Hooking)""" ;
    :kb-reference :Reference-CAR-2020-05-001%3AMiniDumpOfLSASS_MITRE,
        :Reference-CAR-2021-05-011%3ACreateRemoteThreadIntoLSASS_MITRE,
        :Reference-CredentialDumpingViaWindowsTaskManager_MITRE,
        :Reference-DeterministicMethodForDetectingAndBlockingOfExploitsOnInterpretedCode_K2CyberSecurityInc,
        :Reference-DLLInjectionViaLoadLibrary_MITRE,
        :Reference-Hardware-assistedSystemAndMethodForDetectingAndAnalyzingSystemCallsMadeToAnOpertingSystemKernel_EndgameInc,
        :Reference-MalwareDetectionInEventLoops_CrowdstrikeInc,
        :Reference-PostSandboxMethodsAndSystemsForDetectingAndBlockingZero-dayExploitsViaApiCallValidation_K2CyberSecurityInc .

:SystemCallFiltering a :Kernel-basedProcessIsolation,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "System Call Filtering" ;
    rdfs:subClassOf :Kernel-basedProcessIsolation,
        [ a owl:Restriction ;
            owl:onProperty :filters ;
            owl:someValuesFrom :SystemCall ] ;
    :d3fend-id "D3-SCF" ;
    :definition "Configuring a kernel to use an allow or deny list to filter kernel api calls." ;
    :kb-reference :Reference-OverviewOfTheSeccompSandbox ;
    :todo "write kb-article" .

:SystemConfigSystemCall a owl:Class ;
    rdfs:label "System Config System Call" ;
    rdfs:subClassOf :SystemCall .

:SystemConfigurationDatabase a owl:Class ;
    rdfs:label "System Configuration Database" ;
    rdfs:subClassOf :Database,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ] ;
    :definition "A database used to hold system configuration data." .

:SystemConfigurationDatabaseRecord a owl:Class ;
    rdfs:label "System Configuration Database Record" ;
    rdfs:subClassOf :ConfigurationDatabaseRecord,
        :OperatingSystemConfigurationComponent ;
    :definition "A database record holding information used to configure the services, parameters, and initial settings for an operating system." .

:SystemConfigurationInitDatabaseRecord a owl:Class ;
    rdfs:label "System Configuration Init Database Record" ;
    skos:altLabel "System Configuration Startup Database Record" ;
    rdfs:subClassOf :SystemConfigurationDatabaseRecord,
        :SystemConfigurationInitResource,
        :SystemInitConfiguration ;
    :definition "A database record holding information used to configure the services, parameters, and initial settings for an operating system at startup." .

:SystemConfigurationInitResource a owl:Class ;
    rdfs:label "System Configuration Init Resource" ;
    skos:altLabel "System Init Resource" ;
    rdfs:subClassOf :LocalResource ;
    :definition "A system configuration initialization resource has information for initializing (booting) a system." .

:SystemConfigurationPermissions a owl:Class,
        owl:NamedIndividual,
        :PlatformHardening ;
    rdfs:label "System Configuration Permissions" ;
    rdfs:subClassOf :PlatformHardening,
        [ a owl:Restriction ;
            owl:onProperty :restricts ;
            owl:someValuesFrom :SystemConfigurationDatabase ],
        [ a owl:Restriction ;
            owl:onProperty :restricts ;
            owl:hasValue :M1028 ] ;
    :d3fend-id "D3-SCP" ;
    :definition "Restricting system configuration modifications to a specific user or group of users." ;
    :kb-reference :Reference-HowToChangeRegistryValuesOrPermissionsFromACommandLineOrAScript ;
    :todo "write kb-article" .

:SystemDaemonMonitoring a :OperatingSystemMonitoring,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "System Daemon Monitoring" ;
    rdfs:subClassOf :OperatingSystemMonitoring,
        [ a owl:Restriction ;
            owl:onProperty :monitors ;
            owl:someValuesFrom :OperatingSystemProcess ] ;
    :d3fend-id "D3-SDM" ;
    :definition "Tracking changes to the state or configuration of critical system level processes." ;
    :kb-article """## How it works
Attackers may manipulate system settings or services to disable system logging or monitoring of security tools and events. Firewall and antivirus services are popular targets for attackers. Disabling system logs will also allow an attacker's actions to go unnoticed. Analysis of logs, registries, and process monitoring help defenders locate signs of tampering. Two possible approaches are to monitor hardened system services or to monitor registry updates for modifications to security settings.""" ;
    :kb-reference :Reference-HostIntrusionPreventionSystemUsingSoftwareAndUserBehaviorAnalysis_SophosLtd,
        :Reference-MethodUsingKernelModeAssistanceForTheDetectionAndRemovalOfThreatsWhichAreActivelyPreventingDetectionAndRemovalFromARunningSystem_SymantecCorporation,
        :Reference-UserActivityFromStoppingWindowsDefensiveServices_MITRE .

:SystemDependency a owl:Class ;
    rdfs:label "System Dependency" ;
    rdfs:subClassOf :Dependency ;
    :definition "A system dependency indicates a system has an activity, agent, or another system which relies on it in order to be functional." ;
    rdfs:seeAlso "https://dl.acm.org/doi/10.1145/960116.53994",
        "https://r-docs.synapse.org/articles/systemDependencies.html",
        "https://www.ibm.com/docs/en/taddm/7.3.0?topic=model-dependencies-between-resources" .

:SystemDependencyMapping a owl:Class,
        owl:NamedIndividual,
        :SystemMapping ;
    rdfs:label "System Dependency Mapping" ;
    rdfs:subClassOf :SystemMapping,
        [ a owl:Restriction ;
            owl:onProperty :maps ;
            owl:someValuesFrom :SystemDependency ] ;
    :d3fend-id "D3-SYSDM" ;
    :definition "System dependency mapping identifies and models the dependencies of system components on each other to carry out their function." ;
    :kb-article """## How it works
The organization collects and models architectural information about the software, hardware, and products and maps the dependencies between systems, including each system's internal components and dependencies.

## Considerations
* Data exchanges identified in the network mapping efforts usually indicate such dependencies, but may not be part of the intended design.
* Architectural design artifacts and SMEs may need to be consulted to determine if dependencies are intended or otherwise essential.
* System depedency mapping can identify internal dependencies of standard and pre-built systems that should be incorporated into a complete system dependency model.
* System dependencies for critical systems--those supporting critical organizational activities--should be prioritized for supply chain risk analysis.
* System dependencies should identify the integral components of a given named system and their structure to form a system.
* System dependencies with a given system may be fixed by a particular product's configuration, and leveraging external knowledge bases about dependencies available (e.g., from package managers) is essential.""" ;
    :kb-reference :Reference-CatiaUAFPlugin,
        :Reference-SoftwareVulnerabilityGraphDatabase,
        :Reference-TivoliApplicationDependencyDiscoverManager7_3_0DependenciesBetweenResources,
        :Reference-UnifiedArchitectureFrameworkUAF .

:SystemFileAnalysis a :OperatingSystemMonitoring,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "System File Analysis" ;
    rdfs:subClassOf :OperatingSystemMonitoring,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :OperatingSystemFile ] ;
    :d3fend-id "D3-SFA" ;
    :definition "Monitoring system files such as authentication databases, configuration files, system logs, and system executables for modification or tampering." ;
    :kb-article """## How it works
This technique ensures the integrity of system owned file resources. System files can impact the behavior below the user level.


## Considerations
* Need to manage the size of log file analysis.
* False positives are a concern with this technique and filtering will need to be given additional thought.
* A baseline or snapshot of file checksums should be established for future comparison.""" ;
    :kb-reference :Reference-AccessPermissionModification_MITRE,
        :Reference-AutorunDifferences_MITRE,
        :Reference-UserActivityFromClearingEventLogs_MITRE .

:SystemFirewallConfiguration a owl:Class ;
    rdfs:label "System Firewall Configuration" ;
    rdfs:subClassOf :OperatingSystemConfigurationComponent,
        [ a owl:Restriction ;
            owl:onProperty :configures ;
            owl:someValuesFrom :Host-basedFirewall ] ;
    :definition "The configuration for a individual host operating system's firewall." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Firewall_(computing)> ;
    :todo "No SystemFirewall class specified in ontology to relate the configuration concept to... ahem." .

:SystemFirmware a owl:Class ;
    rdfs:label "System Firmware" ;
    skos:altLabel "BIOS Firmware",
        "UEFI Firmware" ;
    rdfs:subClassOf :Firmware ;
    :definition "Firmware that is installed on a computer's main board which manages the initial boot process. It can also continue to run or function after the operating system boots." .

:SystemFirmwareVerification a :FirmwareVerification,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "System Firmware Verification" ;
    rdfs:subClassOf :FirmwareVerification,
        [ a owl:Restriction ;
            owl:onProperty :verifies ;
            owl:someValuesFrom :SystemFirmware ] ;
    :d3fend-id "D3-SFV" ;
    :definition "Cryptographically verifying installed system firmware integrity." ;
    :kb-article """## How it works
Cryptographic hash values are computed for system firmware. The hash values are compared against precomputed firmware hash values to determine if the firmware has been tampered with.

When system firmware verification fails a set of predefined responses is typically invoked. The responses may direct the system to disable some devices or operations.

## Considerations
* Requires the use of system provided security modules
* Secure hash values will need to be computed for firmware""" ;
    :kb-reference :Reference-FirmwareVerificationEclypsium,
        :Reference-PlatformFirmwareResiliencyGuidelines_NIST .

:SystemInitConfigAnalysis a :OperatingSystemMonitoring,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "System Init Config Analysis" ;
    skos:altLabel "System Initialization Configuration Analysis" ;
    rdfs:subClassOf :OperatingSystemMonitoring,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :SystemInitConfiguration ] ;
    :d3fend-id "D3-SICA" ;
    :definition "Analysis of any system process startup configuration." ;
    :kb-reference :Reference-AutorunDifferences_MITRE,
        :Reference-CAR-2020-09-005%3AAppInitDLLs_MITRE,
        :Reference-CAR-2020-11-001%3ABootOrLogonInitializationScripts_MITRE ;
    :synonym "Autorun Analysis",
        "Startup Analysis" .

:SystemInitConfiguration a owl:Class ;
    rdfs:label "System Init Configuration" ;
    skos:altLabel "Autoruns" ;
    rdfs:subClassOf :OperatingSystemConfigurationComponent ;
    :definition "System initialization configuration information is configuration information used to configure the services, parameters, and initial settings for an operating system at startup." .

:SystemInitProcess a owl:Class ;
    rdfs:label "System Init Process" ;
    skos:altLabel "System Initialization Process",
        "System Startup Process" ;
    rdfs:subClassOf :OperatingSystemProcess ;
    :definition "A system initialization process is a process that executes to initialize (boot) an operating system." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Booting>,
        <http://dbpedia.org/resource/Linux_startup_process>,
        <http://dbpedia.org/resource/Windows_startup_process> .

:SystemInitScript a owl:Class ;
    rdfs:label "System Init Script" ;
    rdfs:subClassOf :ExecutableScript,
        :SystemConfigurationInitResource,
        :SystemInitConfiguration ;
    :definition "A script used to initialize and configure elements of the system's environment, applications, services, or its operating system." .

:SystemMapping a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "System Mapping" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Model ] ;
    :d3fend-id "D3-SYSM" ;
    :definition "System mapping encompasses the techniques to identify the organization's systems, how they are configured and decomposed into subsystems and components, how they are dependent on one another, and where they are physically located." ;
    :display-order 2 .

:SystemPasswordDatabase a owl:Class ;
    rdfs:label "System Password Database" ;
    rdfs:subClassOf :PasswordDatabase ;
    :definition "A password database used by a system service or process to authenticate users (e.g., Security Account Manager)" .

:SystemServiceSoftware a owl:Class ;
    rdfs:label "System Service Software" ;
    rdfs:subClassOf :Software,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :OperatingSystemFile ] ;
    :definition "Software services provided as part of the operating system, typically accessed through system calls." ;
    rdfs:seeAlso <https://www.os-book.com/OS9/slide-dir/PPT-dir/ch2.ppt> .

:SystemSoftware a owl:Class ;
    rdfs:label "System Software" ;
    rdfs:subClassOf :Software ;
    :definition "Computer software which enables operating system or platform functionality." .

:SystemStartupDirectory a owl:Class ;
    rdfs:label "System Startup Directory" ;
    rdfs:subClassOf :Directory,
        :SystemConfigurationInitResource,
        :SystemInitConfiguration ;
    :definition "A system startup directory is a directory containing executable files or links to executable files which are run when the system starts." .

:SystemTimeApplication a owl:Class ;
    rdfs:label "System Time Application" ;
    rdfs:subClassOf :UtilitySoftware ;
    :definition "A system time utility is utility software that can get the system time, such as the Unix date command or Windows' Net utility." .

:SystemUtilizationRecord a owl:Class ;
    rdfs:label "System Utilization Record" ;
    rdfs:subClassOf :Record ;
    :definition "A system utilization record is a record for the tracking of resource utilization e.g. CPU, Disk, Network, Memory Bandwidth, GPU, or other resources for a given time period." .

:SystemVulnerabilityAssessment a owl:Class,
        owl:NamedIndividual,
        :SystemMapping ;
    rdfs:label "System Vulnerability Assessment" ;
    rdfs:subClassOf :SystemMapping,
        [ a owl:Restriction ;
            owl:onProperty :evaluates ;
            owl:someValuesFrom :DigitalSystem ],
        [ a owl:Restriction ;
            owl:onProperty :identifies ;
            owl:someValuesFrom :Vulnerability ] ;
    :d3fend-id "D3-SYSVA" ;
    :definition "System vulnerability assessment relates all the vulnerabilities of a system's components in the context of their configuration and internal dependencies and can also include assessing risk emerging from the system's design as a whole, not just the sum of individual component vulnerabilities." ;
    :kb-reference :Reference-SoftwareVulnerabilityGraphDatabase .

:T1001 a owl:Class ;
    rdfs:label "Data Obfuscation" ;
    rdfs:subClassOf :CommandAndControlTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetNetworkTraffic ] ;
    :attack-id "T1001" .

:T1001.001 a owl:Class ;
    rdfs:label "Junk Data" ;
    rdfs:subClassOf :T1001 ;
    :attack-id "T1001.001" .

:T1001.002 a owl:Class ;
    rdfs:label "Steganography" ;
    rdfs:subClassOf :T1001 ;
    :attack-id "T1001.002" .

:T1001.003 a owl:Class ;
    rdfs:label "Protocol Impersonation" ;
    rdfs:subClassOf :T1001 ;
    :attack-id "T1001.003" .

:T1002 a owl:Class ;
    rdfs:label "Data Compressed" ;
    rdfs:subClassOf :ExfiltrationTechnique ;
    :attack-id "T1002" .

:T1003 a owl:Class ;
    rdfs:label "OS Credential Dumping" ;
    rdfs:subClassOf :CredentialAccessTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :Credential ] ;
    :attack-id "T1003" .

:T1003.001 a owl:Class ;
    rdfs:label "LSASS Memory" ;
    rdfs:subClassOf :T1003,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :AuthenticationService ],
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :Process ] ;
    :attack-id "T1003.001" .

:T1003.002 a owl:Class ;
    rdfs:label "Security Account Manager" ;
    rdfs:subClassOf :T1003,
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :AuthenticationService ],
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :Process ],
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :SystemPasswordDatabase ] ;
    :attack-id "T1003.002" .

:T1003.003 a owl:Class ;
    rdfs:label "NTDS" ;
    rdfs:subClassOf :T1003,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :EncryptedCredential ] ;
    :attack-id "T1003.003" .

:T1003.004 a owl:Class ;
    rdfs:label "LSA Secrets" ;
    rdfs:subClassOf :T1003,
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :Process ],
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :SystemPasswordDatabase ] ;
    :attack-id "T1003.004" .

:T1003.005 a owl:Class ;
    rdfs:label "Cached Domain Credentials" ;
    rdfs:subClassOf :T1003,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :EncryptedCredential ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :Log ] ;
    :attack-id "T1003.005" .

:T1003.006 a owl:Class ;
    rdfs:label "DCSync" ;
    rdfs:subClassOf :T1003,
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :EventLog ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :IntranetAdministrativeNetworkTraffic ] ;
    :attack-id "T1003.006" .

:T1003.007 a owl:Class ;
    rdfs:label "Proc Filesystem" ;
    rdfs:subClassOf :T1003,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :OperatingSystemFile ],
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :ProcessImage ] ;
    :attack-id "T1003.007" .

:T1003.008 a owl:Class ;
    rdfs:label "/etc/passwd and /etc/shadow" ;
    rdfs:subClassOf :T1003,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :EncryptedCredential ],
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :PasswordFile ] ;
    :attack-id "T1003.008" .

:T1004 a owl:Class ;
    rdfs:label "Winlogon Helper DLL" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1004" .

:T1005 a owl:Class ;
    rdfs:label "Data from Local System" ;
    rdfs:subClassOf :CollectionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :File ],
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :LocalResource ] ;
    :attack-id "T1005" .

:T1006 a owl:Class ;
    rdfs:label "Direct Volume Access" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :Volume ] ;
    :attack-id "T1006" .

:T1007 a owl:Class ;
    rdfs:label "System Service Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :CreateProcess ],
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :GetRunningProcesses ] ;
    :attack-id "T1007" .

:T1008 a owl:Class ;
    rdfs:label "Fallback Channels" ;
    rdfs:subClassOf :CommandAndControlTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetNetworkTraffic ] ;
    :attack-id "T1008" .

:T1009 a owl:Class ;
    rdfs:label "Binary Padding" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1009" .

:T1010 a owl:Class ;
    rdfs:label "Application Window Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :CreateProcess ],
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :GetOpenWindows ] ;
    :attack-id "T1010" .

:T1011 a owl:Class ;
    rdfs:label "Exfiltration Over Other Network Medium" ;
    rdfs:subClassOf :ExfiltrationTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :InternetNetworkTraffic ] ;
    :attack-id "T1011" .

:T1011.001 a owl:Class ;
    rdfs:label "Exfiltration Over Bluetooth" ;
    rdfs:subClassOf :T1011 ;
    :attack-id "T1011.001" .

:T1012 a owl:Class ;
    rdfs:label "Query Registry" ;
    rdfs:subClassOf :DiscoveryTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :SystemConfigurationDatabase ],
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :GetSystemConfigValue ] ;
    :attack-id "T1012" .

:T1013 a owl:Class ;
    rdfs:label "Port Monitors" ;
    rdfs:subClassOf :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1013" .

:T1014 a owl:Class ;
    rdfs:label "Rootkit" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :BootSector ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :Firmware ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :Kernel ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :KernelModule ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :SharedLibraryFile ] ;
    :attack-id "T1014" .

:T1015 a owl:Class ;
    rdfs:label "Accessibility Features" ;
    rdfs:subClassOf :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1015" .

:T1016 a owl:Class ;
    rdfs:label "System Network Configuration Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-execute ;
            owl:someValuesFrom :ExecutableScript ],
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :CreateProcess ],
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :GetSystemNetworkConfigValue ] ;
    :attack-id "T1016" .

:T1016.001 a owl:Class ;
    rdfs:label "Internet Connection Discovery" ;
    rdfs:subClassOf :T1016 ;
    :attack-id "T1016.001" .

:T1017 a owl:Class ;
    rdfs:label "Application Deployment Software" ;
    rdfs:subClassOf :LateralMovementTechnique ;
    :attack-id "T1017" .

:T1018 a owl:Class ;
    rdfs:label "Remote System Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :OperatingSystemConfigurationFile ],
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :CreateProcess ],
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :CreateSocket ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :NetworkTraffic ] ;
    :attack-id "T1018" .

:T1019 a owl:Class ;
    rdfs:label "System Firmware" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1019" .

:T1020 a owl:Class ;
    rdfs:label "Automated Exfiltration" ;
    rdfs:subClassOf :ExfiltrationTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :InternetNetworkTraffic ] ;
    :attack-id "T1020" .

:T1020.001 a owl:Class ;
    rdfs:label "Traffic Duplication" ;
    rdfs:subClassOf :T1020 ;
    :attack-id "T1020.001" .

:T1021 a owl:Class ;
    rdfs:label "Remote Services" ;
    rdfs:subClassOf :LateralMovementTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :IntranetNetworkTraffic ] ;
    :attack-id "T1021" .

:T1021.001 a owl:Class ;
    rdfs:label "Remote Desktop Protocol" ;
    rdfs:subClassOf :T1021,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :RDPSession ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :AdministrativeNetworkTraffic ] ;
    :attack-id "T1021.001" .

:T1021.002 a owl:Class ;
    rdfs:label "SMB/Windows Admin Shares" ;
    rdfs:subClassOf :T1021 ;
    :attack-id "T1021.002" .

:T1021.003 a owl:Class ;
    rdfs:label "Distributed Component Object Model" ;
    rdfs:subClassOf :T1021 ;
    :attack-id "T1021.003" .

:T1021.004 a owl:Class ;
    rdfs:label "SSH" ;
    rdfs:subClassOf :T1021,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :SSHSession ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :AdministrativeNetworkTraffic ] ;
    :attack-id "T1021.004" .

:T1021.005 a owl:Class ;
    rdfs:label "VNC" ;
    rdfs:subClassOf :T1021 ;
    :attack-id "T1021.005" .

:T1021.006 a owl:Class ;
    rdfs:label "Windows Remote Management" ;
    rdfs:subClassOf :T1021 ;
    :attack-id "T1021.006" .

:T1022 a owl:Class ;
    rdfs:label "Data Encrypted" ;
    rdfs:subClassOf :ExfiltrationTechnique ;
    :attack-id "T1022" .

:T1023 a owl:Class ;
    rdfs:label "Shortcut Modification" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1023" .

:T1024 a owl:Class ;
    rdfs:label "Custom Cryptographic Protocol" ;
    rdfs:subClassOf :CommandAndControlTechnique ;
    :attack-id "T1024" .

:T1025 a owl:Class ;
    rdfs:label "Data from Removable Media" ;
    rdfs:subClassOf :CollectionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :RemovableMediaDevice ] ;
    :attack-id "T1025" .

:T1027 a owl:Class ;
    rdfs:label "Obfuscated Files or Information" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1027" .

:T1027.001 a owl:Class ;
    rdfs:label "Binary Padding" ;
    rdfs:subClassOf :T1027,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :ExecutableBinary ] ;
    :attack-id "T1027.001" .

:T1027.002 a owl:Class ;
    rdfs:label "Software Packing" ;
    rdfs:subClassOf :T1027,
        [ a owl:Restriction ;
            owl:onProperty :obfuscates ;
            owl:someValuesFrom :ExecutableFile ] ;
    :attack-id "T1027.002" .

:T1027.003 a owl:Class ;
    rdfs:label "Steganography" ;
    rdfs:subClassOf :T1027 ;
    :attack-id "T1027.003" .

:T1027.004 a owl:Class ;
    rdfs:label "Compile After Delivery" ;
    rdfs:subClassOf :T1027,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :ExecutableFile ] ;
    :attack-id "T1027.004" .

:T1027.005 a owl:Class ;
    rdfs:label "Indicator Removal from Tools" ;
    rdfs:subClassOf :T1027 ;
    :attack-id "T1027.005" .

:T1027.006 a owl:Class ;
    rdfs:label "HTML Smuggling" ;
    rdfs:subClassOf :T1027,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :JavaScriptBlob ],
        [ a owl:Restriction ;
            owl:onProperty :hides ;
            owl:someValuesFrom :DigitalArtifact ] ;
    :attack-id "T1027.006" ;
    :todo "Digital artifact is not quite specific enough here.  Although hides must for HTML hide an IBO, t is a file .. or information (so isn't always characterizable as a file.)  Transmittable digitable artifacts (or digitally encodable (as opposed to physical hardware.  But not \"software\", not executable.  Ephemeral?  What captures the essence of this?  Binary data seems right (close enough, though binary data can be at rest and fixed in HW or SW... if accessible by digital system.  That's close enough unless Mutable Binary Data is a necessary thing.  But you could HTML smuggling in immutable-hardware memory (ROM) say, and it would be Binary Data (if we coin that na dfit it in could work.)" .

:T1028 a owl:Class ;
    rdfs:label "Windows Remote Management" ;
    rdfs:subClassOf :ExecutionTechnique,
        :LateralMovementTechnique ;
    :attack-id "T1028" .

:T1029 a owl:Class ;
    rdfs:label "Scheduled Transfer" ;
    rdfs:subClassOf :ExfiltrationTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :InternetNetworkTraffic ] ;
    :attack-id "T1029" .

:T1030 a owl:Class ;
    rdfs:label "Data Transfer Size Limits" ;
    rdfs:subClassOf :ExfiltrationTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :InternetNetworkTraffic ] ;
    :attack-id "T1030" .

:T1031 a owl:Class ;
    rdfs:label "Modify Existing Service" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1031" .

:T1032 a owl:Class ;
    rdfs:label "Standard Cryptographic Protocol" ;
    rdfs:subClassOf :CommandAndControlTechnique ;
    :attack-id "T1032" .

:T1033 a owl:Class ;
    rdfs:label "System Owner/User Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :DirectoryService ],
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :GetSystemConfigValue ],
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :PasswordFile ],
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :ProcessSegment ],
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :CopyToken ],
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :CreateProcess ] ;
    :attack-id "T1033" .

:T1035 a owl:Class ;
    rdfs:label "Service Execution" ;
    rdfs:subClassOf :ExecutionTechnique ;
    :attack-id "T1035" .

:T1036 a owl:Class ;
    rdfs:label "Masquerading" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1036" .

:T1036.001 a owl:Class ;
    rdfs:label "Invalid Code Signature" ;
    rdfs:subClassOf :T1036,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :ExecutableBinary ] ;
    :attack-id "T1036.001" .

:T1036.002 a owl:Class ;
    rdfs:label "Right-to-Left Override" ;
    rdfs:subClassOf :T1036,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :FileSystemMetadata ] ;
    :attack-id "T1036.002" .

:T1036.003 a owl:Class ;
    rdfs:label "Rename System Utilities" ;
    rdfs:subClassOf :T1036,
        [ a owl:Restriction ;
            owl:onProperty :may-create ;
            owl:someValuesFrom :ExecutableFile ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :OperatingSystemExecutableFile ] ;
    :attack-id "T1036.003" .

:T1036.004 a owl:Class ;
    rdfs:label "Masquerade Task or Service" ;
    rdfs:subClassOf :T1036,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :TaskSchedule ] ;
    :attack-id "T1036.004" .

:T1036.005 a owl:Class ;
    rdfs:label "Match Legitimate Name or Location" ;
    rdfs:subClassOf :T1036,
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :MoveFile ],
        [ a owl:Restriction ;
            owl:onProperty :may-create ;
            owl:someValuesFrom :File ] ;
    :attack-id "T1036.005" .

:T1036.006 a owl:Class ;
    rdfs:label "Space after Filename" ;
    rdfs:subClassOf :T1036,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :File ] ;
    :attack-id "T1036.006" .

:T1036.007 a owl:Class ;
    rdfs:label "Double File Extension" ;
    rdfs:subClassOf :T1036,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :FileSystemMetadata ] ;
    :attack-id "T1036.007" .

:T1037 a owl:Class ;
    rdfs:label "Boot or Logon Initialization Scripts" ;
    rdfs:subClassOf :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1037" .

:T1037.001 a owl:Class ;
    rdfs:label "Logon Script (Windows)" ;
    rdfs:subClassOf :T1037,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :UserInitScript ] ;
    :attack-id "T1037.001" .

:T1037.002 a owl:Class ;
    rdfs:label "Logon Script (Mac)" ;
    rdfs:subClassOf :T1037,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :UserInitScript ] ;
    :attack-id "T1037.002" .

:T1037.003 a owl:Class ;
    rdfs:label "Network Logon Script" ;
    rdfs:subClassOf :T1037,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :NetworkInitScriptFileResource ] ;
    :attack-id "T1037.003" ;
    :definition "Group Policy Object / Active Directory Users and Computers are both Active Directory-based" ;
    :todo "May want to represent more detail here, or capture distinct characteristic of Active Directory more later.  ADUC to GPO just seems like naming/implementation of same underlying thing.  Doesn't matter pre-release." .

:T1037.004 a owl:Class ;
    rdfs:label "Rc.common" ;
    rdfs:subClassOf :T1037,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemInitScript ] ;
    :attack-id "T1037.004" .

:T1037.005 a owl:Class ;
    rdfs:label "Startup Items" ;
    rdfs:subClassOf :T1037,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemStartupDirectory ] ;
    :attack-id "T1037.005" .

:T1038 a owl:Class ;
    rdfs:label "DLL Search Order Hijacking" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1038" .

:T1039 a owl:Class ;
    rdfs:label "Data from Network Shared Drive" ;
    rdfs:subClassOf :CollectionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :NetworkFileShareResource ] ;
    :attack-id "T1039" .

:T1040 a owl:Class ;
    rdfs:label "Network Sniffing" ;
    rdfs:subClassOf :CredentialAccessTechnique,
        :DiscoveryTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-produce ;
            owl:someValuesFrom :DNSLookup ] ;
    :attack-id "T1040" .

:T1041 a owl:Class ;
    rdfs:label "Exfiltration Over C2 Channel" ;
    rdfs:subClassOf :ExfiltrationTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-transfer ;
            owl:someValuesFrom :CertificateFile ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :InternetNetworkTraffic ] ;
    :attack-id "T1041" .

:T1042 a owl:Class ;
    rdfs:label "Change Default File Association" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1042" .

:T1044 a owl:Class ;
    rdfs:label "File System Permissions Weakness" ;
    rdfs:subClassOf :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1044" .

:T1045 a owl:Class ;
    rdfs:label "Software Packing" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1045" .

:T1046 a owl:Class ;
    rdfs:label "Network Service Scanning" ;
    rdfs:subClassOf :DiscoveryTechnique ;
    :attack-id "T1046" .

:T1047 a owl:Class ;
    rdfs:label "Windows Management Instrumentation Execution" ;
    rdfs:subClassOf :ExecutionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-create ;
            owl:someValuesFrom :IntranetAdministrativeNetworkTraffic ],
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :CreateProcess ] ;
    :attack-id "T1047" .

:T1048 a owl:Class ;
    rdfs:label "Exfiltration Over Alternative Protocol" ;
    rdfs:subClassOf :ExfiltrationTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :InternetNetworkTraffic ] ;
    :attack-id "T1048" .

:T1048.001 a owl:Class ;
    rdfs:label "Exfiltration Over Symmetric Encrypted Non-C2 Protocol" ;
    rdfs:subClassOf :T1048,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetEncryptedTraffic ] ;
    :attack-id "T1048.001" .

:T1048.002 a owl:Class ;
    rdfs:label "Exfiltration Over Asymmetric Encrypted Non-C2 Protocol" ;
    rdfs:subClassOf :T1048,
        [ a owl:Restriction ;
            owl:onProperty :may-transfer ;
            owl:someValuesFrom :CertificateFile ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetEncryptedTraffic ] ;
    :attack-id "T1048.002" .

:T1048.003 a owl:Class ;
    rdfs:label "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol" ;
    rdfs:subClassOf :T1048,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetNetworkTraffic ] ;
    :attack-id "T1048.003" .

:T1049 a owl:Class ;
    rdfs:label "System Network Connections Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :GetOpenSockets ] ;
    :attack-id "T1049" .

:T1050 a owl:Class ;
    rdfs:label "New Service" ;
    rdfs:subClassOf :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1050" .

:T1052 a owl:Class ;
    rdfs:label "Exfiltration Over Physical Medium" ;
    rdfs:subClassOf :ExfiltrationTechnique ;
    :attack-id "T1052" .

:T1052.001 a owl:Class ;
    rdfs:label "Exfiltration over USB" ;
    rdfs:subClassOf :T1052,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :RemovableMediaDevice ] ;
    :attack-id "T1052.001" .

:T1053 a owl:Class ;
    rdfs:label "Scheduled Task/Job Execution" ;
    rdfs:subClassOf :ExecutionTechnique,
        :PersistenceTechnique,
        :PrivilegeEscalationTechnique,
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :CreateProcess ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :TaskSchedule ] ;
    :attack-id "T1053" ;
    :definition "The sub-techniques of this are specific software implementations of scheduling capabilities" .

:T1053.001 a owl:Class ;
    rdfs:label "At (Linux) Execution" ;
    rdfs:subClassOf :T1053 ;
    :attack-id "T1053.001" .

:T1053.002 a owl:Class ;
    rdfs:label "At (Windows) Execution" ;
    rdfs:subClassOf :T1053 ;
    :attack-id "T1053.002" .

:T1053.003 a owl:Class ;
    rdfs:label "Cron Execution" ;
    rdfs:subClassOf :T1053 ;
    :attack-id "T1053.003" .

:T1053.004 a owl:Class ;
    rdfs:label "Launchd" ;
    rdfs:subClassOf :T1053,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :PropertyListFile ] ;
    :attack-id "T1053.004" .

:T1053.005 a owl:Class ;
    rdfs:label "Schtasks Execution" ;
    rdfs:subClassOf :T1053 ;
    :attack-id "T1053.005" ;
    :definition "Renamed from ATT&CK to be consistent with at, launchd, cron siblings; name as is looks like parent.  Not sure why parent is not just Scheduled Task [Execution[." .

:T1053.006 a owl:Class ;
    rdfs:label "Systemd Timers" ;
    rdfs:subClassOf :T1053 ;
    :attack-id "T1053.006" .

:T1053.007 a owl:Class ;
    rdfs:label "Container Orchestration Job" ;
    rdfs:subClassOf :T1053 ;
    :attack-id "T1053.007" .

:T1054 a owl:Class ;
    rdfs:label "Indicator Blocking" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1054" .

:T1055 a owl:Class ;
    rdfs:label "Process Injection" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1055" .

:T1055.001 a owl:Class ;
    rdfs:label "Dynamic-link Library Injection" ;
    rdfs:subClassOf :T1055,
        [ a owl:Restriction ;
            owl:onProperty :adds ;
            owl:someValuesFrom :SharedLibraryFile ],
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :SystemCall ],
        [ a owl:Restriction ;
            owl:onProperty :loads ;
            owl:someValuesFrom :SharedLibraryFile ] ;
    :attack-id "T1055.001" .

:T1055.002 a owl:Class ;
    rdfs:label "Portable Executable Injection" ;
    rdfs:subClassOf :T1055,
        [ a owl:Restriction ;
            owl:onProperty :may-add ;
            owl:someValuesFrom :ObjectFile ] ;
    :attack-id "T1055.002" .

:T1055.003 a owl:Class ;
    rdfs:label "Thread Execution Hijacking" ;
    rdfs:subClassOf :T1055,
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :SystemCall ],
        [ a owl:Restriction ;
            owl:onProperty :may-add ;
            owl:someValuesFrom :ExecutableBinary ] ;
    :attack-id "T1055.003" .

:T1055.004 a owl:Class ;
    rdfs:label "Asynchronous Procedure Call" ;
    rdfs:subClassOf :T1055,
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :CreateProcess ] ;
    :attack-id "T1055.004" .

:T1055.005 a owl:Class ;
    rdfs:label "Thread Local Storage" ;
    rdfs:subClassOf :T1055,
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :SystemCall ] ;
    :attack-id "T1055.005" .

:T1055.008 a owl:Class ;
    rdfs:label "Ptrace System Calls" ;
    rdfs:subClassOf :T1055,
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :SystemCall ] ;
    :attack-id "T1055.008" .

:T1055.009 a owl:Class ;
    rdfs:label "Proc Memory" ;
    rdfs:subClassOf :T1055,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :OperatingSystemFile ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :OperatingSystemFile ] ;
    :attack-id "T1055.009" .

:T1055.011 a owl:Class ;
    rdfs:label "Extra Window Memory Injection" ;
    rdfs:subClassOf :T1055 ;
    :attack-id "T1055.011" .

:T1055.012 a owl:Class ;
    rdfs:label "Process Hollowing" ;
    rdfs:subClassOf :T1055,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :ProcessCodeSegment ] ;
    :attack-id "T1055.012" .

:T1055.013 a owl:Class ;
    rdfs:label "Process Doppelgänging" ;
    rdfs:subClassOf :T1055,
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :CreateProcess ] ;
    :attack-id "T1055.013" .

:T1055.014 a owl:Class ;
    rdfs:label "VDSO Hijacking" ;
    rdfs:subClassOf :T1055,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :SharedLibraryFile ],
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :SystemCall ] ;
    :attack-id "T1055.014" .

:T1055.015 a owl:Class ;
    rdfs:label "ListPlanting" ;
    rdfs:subClassOf :T1055 ;
    :attack-id "T1055.015" .

:T1056 a owl:Class ;
    rdfs:label "Input Capture" ;
    rdfs:subClassOf :CollectionTechnique,
        :CredentialAccessTechnique ;
    :attack-id "T1056" .

:T1056.001 a owl:Class ;
    rdfs:label "Keylogging" ;
    rdfs:subClassOf :T1056,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :KeyboardInputDevice ] ;
    :attack-id "T1056.001" .

:T1056.002 a owl:Class ;
    rdfs:label "GUI Input Capture" ;
    rdfs:subClassOf :T1056,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :GraphicalUserInterface ] ;
    :attack-id "T1056.002" .

:T1056.003 a owl:Class ;
    rdfs:label "Web Portal Capture" ;
    rdfs:subClassOf :T1056,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :WebServerApplication ] ;
    :attack-id "T1056.003" .

:T1056.004 a owl:Class ;
    rdfs:label "Credential API Hooking" ;
    rdfs:subClassOf :T1056,
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :ProcessCodeSegment ] ;
    :attack-id "T1056.004" .

:T1057 a owl:Class ;
    rdfs:label "Process Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :CreateProcess ],
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :GetRunningProcesses ] ;
    :attack-id "T1057" .

:T1058 a owl:Class ;
    rdfs:label "Service Registry Permissions Weakness" ;
    rdfs:subClassOf :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1058" .

:T1059 a owl:Class ;
    rdfs:label "Command and Scripting Interpreter Execution" ;
    rdfs:subClassOf :ExecutionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :executes ;
            owl:someValuesFrom :ExecutableScript ] ;
    :attack-id "T1059" .

:T1059.001 a owl:Class ;
    rdfs:label "PowerShell Execution" ;
    rdfs:subClassOf :T1059 ;
    :attack-id "T1059.001" .

:T1059.002 a owl:Class ;
    rdfs:label "AppleScript Execution" ;
    rdfs:subClassOf :T1059 ;
    :attack-id "T1059.002" .

:T1059.003 a owl:Class ;
    rdfs:label "Windows Command Shell Execution" ;
    rdfs:subClassOf :T1059 ;
    :attack-id "T1059.003" .

:T1059.004 a owl:Class ;
    rdfs:label "Unix Shell Execution" ;
    skos:altLabel "Bash Execution" ;
    rdfs:subClassOf :T1059 ;
    :attack-id "T1059.004" ;
    :todo "Retained Bash Execution as altLabel." .

:T1059.005 a owl:Class ;
    rdfs:label "VBScript Execution" ;
    rdfs:subClassOf :T1059 ;
    :attack-id "T1059.005" .

:T1059.006 a owl:Class ;
    rdfs:label "Python Execution" ;
    rdfs:subClassOf :T1059 ;
    :attack-id "T1059.006" .

:T1059.007 a owl:Class ;
    rdfs:label "JavaScript/JScript" ;
    rdfs:subClassOf :T1059 ;
    :attack-id "T1059.007" .

:T1059.008 a owl:Class ;
    rdfs:label "Network Device CLI" ;
    rdfs:subClassOf :T1059 ;
    :attack-id "T1059.008" .

:T1060 a owl:Class ;
    rdfs:label "Registry Run Keys / Startup Folder" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1060" .

:T1063 a owl:Class ;
    rdfs:label "Security Software Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique ;
    :attack-id "T1063" .

:T1065 a owl:Class ;
    rdfs:label "Uncommonly Used Port" ;
    rdfs:subClassOf :CommandAndControlTechnique ;
    :attack-id "T1065" .

:T1066 a owl:Class ;
    rdfs:label "Indicator Removal from Tools" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1066" .

:T1067 a owl:Class ;
    rdfs:label "Bootkit" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1067" .

:T1068 a owl:Class ;
    rdfs:label "Exploitation for Privilege Escalation" ;
    rdfs:subClassOf :PrivilegeEscalationTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :PrivilegeEscalation ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :StackFrame ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :ProcessCodeSegment ] ;
    :attack-id "T1068" .

:T1069 a owl:Class ;
    rdfs:label "Permission Groups Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique ;
    :attack-id "T1069" .

:T1069.001 a owl:Class ;
    rdfs:label "Local Groups" ;
    rdfs:subClassOf :T1069 ;
    :attack-id "T1069.001" .

:T1069.002 a owl:Class ;
    rdfs:label "Domain Groups" ;
    rdfs:subClassOf :T1069 ;
    :attack-id "T1069.002" .

:T1069.003 a owl:Class ;
    rdfs:label "Cloud Groups" ;
    rdfs:subClassOf :T1069 ;
    :attack-id "T1069.003" .

:T1070 a owl:Class ;
    rdfs:label "Indicator Removal on Host" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1070" .

:T1070.001 a owl:Class ;
    rdfs:label "Clear Windows Event Logs" ;
    rdfs:subClassOf :T1070,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :EventLog ] ;
    :attack-id "T1070.001" .

:T1070.002 a owl:Class ;
    rdfs:label "Clear Linux or Mac System Logs" ;
    rdfs:subClassOf :T1070,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :OperatingSystemLogFile ] ;
    :attack-id "T1070.002" .

:T1070.003 a owl:Class ;
    rdfs:label "Clear Command History" ;
    rdfs:subClassOf :T1070,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :CommandHistoryLog ] ;
    :attack-id "T1070.003" .

:T1070.004 a owl:Class ;
    rdfs:label "File Deletion" ;
    rdfs:subClassOf :T1070,
        [ a owl:Restriction ;
            owl:onProperty :deletes ;
            owl:someValuesFrom :File ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :File ] ;
    :attack-id "T1070.004" .

:T1070.005 a owl:Class ;
    rdfs:label "Network Share Connection Removal" ;
    rdfs:subClassOf :T1070,
        [ a owl:Restriction ;
            owl:onProperty :unmounts ;
            owl:someValuesFrom :NetworkFileShareResource ] ;
    :attack-id "T1070.005" .

:T1070.006 a owl:Class ;
    rdfs:label "Timestomp" ;
    rdfs:subClassOf :T1070,
        [ a owl:Restriction ;
            owl:onProperty :forges ;
            owl:someValuesFrom :FileSystemMetadata ] ;
    :attack-id "T1070.006" .

:T1071 a owl:Class ;
    rdfs:label "Application Layer Protocol" ;
    rdfs:subClassOf :CommandAndControlTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-transfer ;
            owl:someValuesFrom :CertificateFile ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetNetworkTraffic ] ;
    :attack-id "T1071" ;
    :pref-label "Application Layer Protocol C2" .

:T1071.001 a owl:Class ;
    rdfs:label "Web Protocols" ;
    rdfs:subClassOf :T1071,
        [ a owl:Restriction ;
            owl:onProperty :may-transfer ;
            owl:someValuesFrom :CertificateFile ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetWebTraffic ] ;
    :attack-id "T1071.001" .

:T1071.002 a owl:Class ;
    rdfs:label "File Transfer Protocols" ;
    rdfs:subClassOf :T1071,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetFileTransferTraffic ] ;
    :attack-id "T1071.002" .

:T1071.003 a owl:Class ;
    rdfs:label "Mail Protocols" ;
    rdfs:subClassOf :T1071,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetMailTraffic ] ;
    :attack-id "T1071.003" .

:T1071.004 a owl:Class ;
    rdfs:label "DNS" ;
    rdfs:subClassOf :T1071,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetDNSLookupTraffic ] ;
    :attack-id "T1071.004" .

:T1072 a owl:Class ;
    rdfs:label "Software Deployment Tools Execution" ;
    rdfs:subClassOf :ExecutionTechnique,
        :LateralMovementTechnique,
        [ a owl:Restriction ;
            owl:onProperty :adds ;
            owl:someValuesFrom :File ],
        [ a owl:Restriction ;
            owl:onProperty :executes ;
            owl:someValuesFrom :SoftwareDeploymentTool ],
        [ a owl:Restriction ;
            owl:onProperty :installs ;
            owl:someValuesFrom :Software ] ;
    :attack-id "T1072" .

:T1073 a owl:Class ;
    rdfs:label "DLL Side-Loading" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1073" .

:T1074 a owl:Class ;
    rdfs:label "Data Staged" ;
    rdfs:subClassOf :CollectionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :reads ;
            owl:someValuesFrom :Resource ] ;
    :attack-id "T1074" .

:T1074.001 a owl:Class ;
    rdfs:label "Local Data Staging" ;
    rdfs:subClassOf :T1074,
        [ a owl:Restriction ;
            owl:onProperty :may-create ;
            owl:someValuesFrom :File ],
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :CreateFile ] ;
    :attack-id "T1074.001" .

:T1074.002 a owl:Class ;
    rdfs:label "Remote Data Staging" ;
    rdfs:subClassOf :T1074,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :NetworkResource ] ;
    :attack-id "T1074.002" .

:T1075 a owl:Class ;
    rdfs:label "Pass the Hash" ;
    rdfs:subClassOf :LateralMovementTechnique ;
    :attack-id "T1075" .

:T1076 a owl:Class ;
    rdfs:label "Remote Desktop Protocol" ;
    rdfs:subClassOf :LateralMovementTechnique ;
    :attack-id "T1076" .

:T1077 a owl:Class ;
    rdfs:label "Windows Admin Shares" ;
    rdfs:subClassOf :LateralMovementTechnique ;
    :attack-id "T1077" .

:T1078 a owl:Class ;
    rdfs:label "Valid Accounts" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :InitialAccessTechnique,
        :PersistenceTechnique,
        :PrivilegeEscalationTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :Authentication ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :Authorization ],
        [ a owl:Restriction ;
            owl:onProperty :uses ;
            owl:someValuesFrom :UserAccount ] ;
    :attack-id "T1078" .

:T1078.001 a owl:Class ;
    rdfs:label "Default Accounts" ;
    rdfs:subClassOf :T1078,
        [ a owl:Restriction ;
            owl:onProperty :uses ;
            owl:someValuesFrom :DefaultUserAccount ] ;
    :attack-id "T1078.001" .

:T1078.002 a owl:Class ;
    rdfs:label "Domain Accounts" ;
    rdfs:subClassOf :T1078,
        [ a owl:Restriction ;
            owl:onProperty :uses ;
            owl:someValuesFrom :DomainUserAccount ] ;
    :attack-id "T1078.002" .

:T1078.003 a owl:Class ;
    rdfs:label "Local Accounts" ;
    rdfs:subClassOf :T1078,
        [ a owl:Restriction ;
            owl:onProperty :uses ;
            owl:someValuesFrom :LocalUserAccount ] ;
    :attack-id "T1078.003" .

:T1078.004 a owl:Class ;
    rdfs:label "Cloud Accounts" ;
    rdfs:subClassOf :T1078,
        [ a owl:Restriction ;
            owl:onProperty :uses ;
            owl:someValuesFrom :CloudUserAccount ] ;
    :attack-id "T1078.004" .

:T1079 a owl:Class ;
    rdfs:label "Multilayer Encryption" ;
    rdfs:subClassOf :CommandAndControlTechnique ;
    :attack-id "T1079" .

:T1080 a owl:Class ;
    rdfs:label "Taint Shared Content" ;
    rdfs:subClassOf :LateralMovementTechnique,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :NetworkResource ] ;
    :attack-id "T1080" .

:T1081 a owl:Class ;
    rdfs:label "Credentials in Files" ;
    rdfs:subClassOf :CredentialAccessTechnique ;
    :attack-id "T1081" .

:T1082 a owl:Class ;
    rdfs:label "System Information Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :DecoyArtifact ],
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :CreateProcess ] ;
    :attack-id "T1082" .

:T1083 a owl:Class ;
    rdfs:label "File and Directory Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :Directory ],
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :File ] ;
    :attack-id "T1083" .

:T1084 a owl:Class ;
    rdfs:label "Windows Management Instrumentation Event Subscription" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1084" .

:T1085 a owl:Class ;
    rdfs:label "Rundll32" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :ExecutionTechnique ;
    :attack-id "T1085" .

:T1086 a owl:Class ;
    rdfs:label "PowerShell" ;
    rdfs:subClassOf :ExecutionTechnique ;
    :attack-id "T1086" .

:T1087 a owl:Class ;
    rdfs:label "Account Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique ;
    :attack-id "T1087" .

:T1087.001 a owl:Class ;
    rdfs:label "Local Account" ;
    rdfs:subClassOf :T1136,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :LocalUserAccount ] ;
    :attack-id "T1087.001" ;
    :todo "Review User Local Account as special case of User Account; could use Local Account of dao/d3f namespace if had one.  That or could rename attack's Local Account to something like Local Account [Persistence] Technique" .

:T1087.002 a owl:Class ;
    rdfs:label "Domain Account" ;
    rdfs:subClassOf :T1136,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :DomainUserAccount ] ;
    :attack-id "T1087.002" .

:T1087.003 a owl:Class ;
    rdfs:label "Email Account" ;
    rdfs:subClassOf :T1087 ;
    :attack-id "T1087.003" .

:T1087.004 a owl:Class ;
    rdfs:label "Cloud Account" ;
    rdfs:subClassOf :T1136,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :CloudUserAccount ] ;
    :attack-id "T1087.004" .

:T1088 a owl:Class ;
    rdfs:label "Bypass User Account Control" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1088" .

:T1089 a owl:Class ;
    rdfs:label "Disabling Security Tools" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1089" .

:T1090 a owl:Class ;
    rdfs:label "Proxy" ;
    rdfs:subClassOf :CommandAndControlTechnique ;
    :attack-id "T1090" .

:T1090.001 a owl:Class ;
    rdfs:label "Internal Proxy" ;
    rdfs:subClassOf :T1090,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :IntranetNetworkTraffic ] ;
    :attack-id "T1090.001" .

:T1090.002 a owl:Class ;
    rdfs:label "External Proxy" ;
    rdfs:subClassOf :T1090,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetNetworkTraffic ] ;
    :attack-id "T1090.002" .

:T1090.003 a owl:Class ;
    rdfs:label "Multi-hop Proxy" ;
    rdfs:subClassOf :T1090,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetNetworkTraffic ] ;
    :attack-id "T1090.003" .

:T1090.004 a owl:Class ;
    rdfs:label "Domain Fronting" ;
    rdfs:subClassOf :T1090,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetEncryptedWebTraffic ] ;
    :attack-id "T1090.004" .

:T1091 a owl:Class ;
    rdfs:label "Replication Through Removable Media" ;
    rdfs:subClassOf :InitialAccessTechnique,
        :LateralMovementTechnique,
        [ a owl:Restriction ;
            owl:onProperty :executes ;
            owl:someValuesFrom :RemovableMediaDevice ] ;
    :attack-id "T1091" .

:T1092 a owl:Class ;
    rdfs:label "Communication Through Removable Media" ;
    rdfs:subClassOf :CommandAndControlTechnique,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :RemovableMediaDevice ] ;
    :attack-id "T1092" .

:T1093 a owl:Class ;
    rdfs:label "Process Hollowing" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1093" .

:T1094 a owl:Class ;
    rdfs:label "Custom Command and Control Protocol" ;
    rdfs:subClassOf :CommandAndControlTechnique ;
    :attack-id "T1094" .

:T1095 a owl:Class ;
    rdfs:label "Non-Application Layer Protocol" ;
    rdfs:subClassOf :CommandAndControlTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetNetworkTraffic ] ;
    :attack-id "T1095" .

:T1096 a owl:Class ;
    rdfs:label "NTFS File Attributes" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1096" .

:T1097 a owl:Class ;
    rdfs:label "Pass the Ticket" ;
    rdfs:subClassOf :LateralMovementTechnique ;
    :attack-id "T1097" .

:T1098 a owl:Class ;
    rdfs:label "Account Manipulation" ;
    rdfs:subClassOf :PersistenceTechnique,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :UserAccount ] ;
    :attack-id "T1098" .

:T1098.001 a owl:Class ;
    rdfs:label "Additional Azure Service Principal Credentials" ;
    rdfs:subClassOf :T1098,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :Credential ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :IntranetAdministrativeNetworkTraffic ] ;
    :attack-id "T1098.001" .

:T1098.002 a owl:Class ;
    rdfs:label "Exchange Email Delegate Permissions" ;
    rdfs:subClassOf :T1098,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :DomainUserAccount ] ;
    :attack-id "T1098.002" .

:T1098.003 a owl:Class ;
    rdfs:label "Add Office 365 Global Administrator Role" ;
    rdfs:subClassOf :T1098,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :GlobalUserAccount ] ;
    :attack-id "T1098.003" .

:T1098.004 a owl:Class ;
    rdfs:label "SSH Authorized Keys" ;
    rdfs:subClassOf :T1098 ;
    :attack-id "T1098.004" .

:T1098.005 a owl:Class ;
    rdfs:label "Device Registration" ;
    rdfs:subClassOf :T1098 ;
    :attack-id "T1098.005" .

:T1099 a owl:Class ;
    rdfs:label "Timestomp" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1099" .

:T1100 a owl:Class ;
    rdfs:label "Web Shell" ;
    rdfs:subClassOf :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1100" .

:T1101 a owl:Class ;
    rdfs:label "Security Support Provider" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1101" .

:T1102 a owl:Class ;
    rdfs:label "Web Service" ;
    rdfs:subClassOf :CommandAndControlTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetWebTraffic ] ;
    :attack-id "T1102" .

:T1102.001 a owl:Class ;
    rdfs:label "Dead Drop Resolver" ;
    rdfs:subClassOf :T1102 ;
    :attack-id "T1102.001" .

:T1102.002 a owl:Class ;
    rdfs:label "Bidirectional Communication" ;
    rdfs:subClassOf :T1102 ;
    :attack-id "T1102.002" .

:T1102.003 a owl:Class ;
    rdfs:label "One-Way Communication" ;
    rdfs:subClassOf :T1102 ;
    :attack-id "T1102.003" .

:T1103 a owl:Class ;
    rdfs:label "AppInit DLLs" ;
    rdfs:subClassOf :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1103" .

:T1104 a owl:Class ;
    rdfs:label "Multi-Stage Channels" ;
    rdfs:subClassOf :CommandAndControlTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetNetworkTraffic ] ;
    :attack-id "T1104" .

:T1105 a owl:Class ;
    rdfs:label "Ingress Tool Transfer" ;
    rdfs:subClassOf :CommandAndControlTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetNetworkTraffic ] ;
    :attack-id "T1105" ;
    :definition "Session is initiated by the client, and may be a custom protocol which is why it is related to generic network traffic instead of file transfer network traffic." .

:T1106 a owl:Class ;
    rdfs:label "Native API Execution" ;
    rdfs:subClassOf :ExecutionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :SystemCall ] ;
    :attack-id "T1106" .

:T1107 a owl:Class ;
    rdfs:label "File Deletion" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1107" .

:T1109 a owl:Class ;
    rdfs:label "Component Firmware" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :PersistenceTechnique ;
    :attack-id "T1109" .

:T1110 a owl:Class ;
    rdfs:label "Brute Force" ;
    rdfs:subClassOf :CredentialAccessTechnique ;
    :attack-id "T1110" .

:T1110.001 a owl:Class ;
    rdfs:label "Password Guessing" ;
    rdfs:subClassOf :T1110,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :Password ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :AuthenticationLog ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :Authentication ] ;
    :attack-id "T1110.001" .

:T1110.002 a owl:Class ;
    rdfs:label "Password Cracking" ;
    rdfs:subClassOf :T1110,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :Password ] ;
    :attack-id "T1110.002" .

:T1110.003 a owl:Class ;
    rdfs:label "Password Spraying" ;
    rdfs:subClassOf :T1110,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :Password ],
        [ a owl:Restriction ;
            owl:onProperty :may-create ;
            owl:someValuesFrom :IntranetAdministrativeNetworkTraffic ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :AuthenticationLog ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :Authentication ] ;
    :attack-id "T1110.003" .

:T1110.004 a owl:Class ;
    rdfs:label "Credential Stuffing" ;
    rdfs:subClassOf :T1110,
        [ a owl:Restriction ;
            owl:onProperty :may-create ;
            owl:someValuesFrom :IntranetAdministrativeNetworkTraffic ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :AuthenticationLog ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :Authentication ] ;
    :attack-id "T1110.004" .

:T1111 a owl:Class ;
    rdfs:label "Two-Factor Authentication Interception" ;
    rdfs:subClassOf :CredentialAccessTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :SecurityToken ] ;
    :attack-id "T1111" .

:T1112 a owl:Class ;
    rdfs:label "Modify Registry" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :WindowsRegistry ] ;
    :attack-id "T1112" .

:T1113 a owl:Class ;
    rdfs:label "Screen Capture" ;
    rdfs:subClassOf :CollectionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :DisplayServer ],
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :GetScreenCapture ] ;
    :attack-id "T1113" .

:T1114 a owl:Class ;
    rdfs:label "Email Collection" ;
    rdfs:subClassOf :CollectionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :Resource ] ;
    :attack-id "T1114" .

:T1114.001 a owl:Class ;
    rdfs:label "Local Email Collection" ;
    rdfs:subClassOf :T1114,
        [ a owl:Restriction ;
            owl:onProperty :reads ;
            owl:someValuesFrom :Email ] ;
    :attack-id "T1114.001" .

:T1114.002 a owl:Class ;
    rdfs:label "Remote Email Collection" ;
    rdfs:subClassOf :T1114,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :MailServer ] ;
    :attack-id "T1114.002" .

:T1114.003 a owl:Class ;
    rdfs:label "Email Forwarding Rule" ;
    rdfs:subClassOf :T1114,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :ApplicationConfiguration ] ;
    :attack-id "T1114.003" .

:T1115 a owl:Class ;
    rdfs:label "Clipboard Data" ;
    rdfs:subClassOf :CollectionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :reads ;
            owl:someValuesFrom :Clipboard ] ;
    :attack-id "T1115" .

:T1116 a owl:Class ;
    rdfs:label "Code Signing" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1116" .

:T1117 a owl:Class ;
    rdfs:label "Regsvr32" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :ExecutionTechnique ;
    :attack-id "T1117" .

:T1118 a owl:Class ;
    rdfs:label "InstallUtil" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :ExecutionTechnique ;
    :attack-id "T1118" .

:T1119 a owl:Class ;
    rdfs:label "Automated Collection" ;
    rdfs:subClassOf :CollectionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :File ] ;
    :attack-id "T1119" ;
    :comment "too generic to model" .

:T1120 a owl:Class ;
    rdfs:label "Peripheral Device Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique ;
    :attack-id "T1120" .

:T1121 a owl:Class ;
    rdfs:label "Regsvcs/Regasm" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :ExecutionTechnique ;
    :attack-id "T1121" .

:T1122 a owl:Class ;
    rdfs:label "Component Object Model Hijacking" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :PersistenceTechnique ;
    :attack-id "T1122" .

:T1123 a owl:Class ;
    rdfs:label "Audio Capture" ;
    rdfs:subClassOf :CollectionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :AudioInputDevice ] ;
    :attack-id "T1123" .

:T1124 a owl:Class ;
    rdfs:label "System Time Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :CreateProcess ],
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :GetSystemTime ] ;
    :attack-id "T1124" .

:T1125 a owl:Class ;
    rdfs:label "Video Capture" ;
    rdfs:subClassOf :CollectionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :VideoInputDevice ] ;
    :attack-id "T1125" .

:T1126 a owl:Class ;
    rdfs:label "Network Share Connection Removal" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1126" .

:T1127 a owl:Class ;
    rdfs:label "Trusted Developer Utilities Proxy Execution" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1127" .

:T1127.001 a owl:Class ;
    rdfs:label "MSBuild" ;
    rdfs:subClassOf :T1127,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :CompilerConfigurationFile ],
        [ a owl:Restriction ;
            owl:onProperty :runs ;
            owl:someValuesFrom :Compiler ] ;
    :attack-id "T1127.001" .

:T1128 a owl:Class ;
    rdfs:label "Netsh Helper DLL" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1128" .

:T1129 a owl:Class ;
    rdfs:label "Shared Modules Execution" ;
    rdfs:subClassOf :ExecutionTechnique ;
    :attack-id "T1129" ;
    :todo "This is distinct [sub-]technique, but isn't it related to Native API Execution?  The concrete procedure examples indicate in3 or 4 cases API function calls to load the modules, which is not execution per se, but loading the code in preparation for execution.  [Astaroth software's 'techniques used' was one reference for this comment.]" .

:T1130 a owl:Class ;
    rdfs:label "Install Root Certificate" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1130" .

:T1131 a owl:Class ;
    rdfs:label "Authentication Package" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1131" .

:T1132 a owl:Class ;
    rdfs:label "Data Encoding" ;
    rdfs:subClassOf :CommandAndControlTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetNetworkTraffic ] ;
    :attack-id "T1132" .

:T1132.001 a owl:Class ;
    rdfs:label "Standard Encoding" ;
    rdfs:subClassOf :T1132 ;
    :attack-id "T1132.001" .

:T1132.002 a owl:Class ;
    rdfs:label "Non-Standard Encoding" ;
    rdfs:subClassOf :T1132 ;
    :attack-id "T1132.002" .

:T1133 a owl:Class ;
    rdfs:label "External Remote Services" ;
    rdfs:subClassOf :InitialAccessTechnique,
        :PersistenceTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :Authentication ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :Authorization ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :NetworkSession ] ;
    :attack-id "T1133" .

:T1134 a owl:Class ;
    rdfs:label "Access Token Manipulation" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1134" .

:T1134.001 a :AccessToken,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Token Impersonation/Theft" ;
    rdfs:subClassOf :T1134,
        [ a owl:Restriction ;
            owl:onProperty :copies ;
            owl:someValuesFrom :AccessToken ] ;
    :attack-id "T1134.001" .

:T1134.002 a owl:Class ;
    rdfs:label "Create Process with Token" ;
    rdfs:subClassOf :T1134,
        [ a owl:Restriction ;
            owl:onProperty :copies ;
            owl:someValuesFrom :AccessToken ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :EventLog ] ;
    :attack-id "T1134.002" .

:T1134.003 a owl:Class ;
    rdfs:label "Make and Impersonate Token" ;
    rdfs:subClassOf :T1134,
        [ a owl:Restriction ;
            owl:onProperty :copies ;
            owl:someValuesFrom :AccessToken ],
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :LoginSession ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :EventLog ] ;
    :attack-id "T1134.003" .

:T1134.004 a owl:Class ;
    rdfs:label "Parent PID Spoofing" ;
    rdfs:subClassOf :T1134,
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :CreateProcess ] ;
    :attack-id "T1134.004" .

:T1134.005 a owl:Class ;
    rdfs:label "SID-History Injection" ;
    rdfs:subClassOf :T1134,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :AccessControlConfiguration ] ;
    :attack-id "T1134.005" .

:T1135 a owl:Class ;
    rdfs:label "Network Share Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique ;
    :attack-id "T1135" .

:T1136 a owl:Class ;
    rdfs:label "Create Account" ;
    rdfs:subClassOf :PersistenceTechnique,
        :PrivilegeEscalationTechnique,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :UserAccount ] ;
    :attack-id "T1136" .

:T1136.001 a owl:Class ;
    rdfs:label "Local Account" ;
    rdfs:subClassOf :T1136 ;
    :attack-id "T1136.001" .

:T1136.002 a owl:Class ;
    rdfs:label "Domain Account" ;
    rdfs:subClassOf :T1136 ;
    :attack-id "T1136.002" .

:T1136.003 a owl:Class ;
    rdfs:label "Cloud Account" ;
    rdfs:subClassOf :T1136 ;
    :attack-id "T1136.003" .

:T1137 a owl:Class ;
    rdfs:label "Office Application Startup" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1137" .

:T1137.001 a owl:Class ;
    rdfs:label "Office Template Macros" ;
    rdfs:subClassOf :T1137,
        [ a owl:Restriction ;
            owl:onProperty :may-add ;
            owl:someValuesFrom :ExecutableScript ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :ExecutableScript ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ] ;
    :attack-id "T1137.001" .

:T1137.002 a owl:Class ;
    rdfs:label "Office Test" ;
    rdfs:subClassOf :T1137,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ] ;
    :attack-id "T1137.002" .

:T1137.003 a owl:Class ;
    rdfs:label "Outlook Forms" ;
    rdfs:subClassOf :T1137,
        [ a owl:Restriction ;
            owl:onProperty :adds ;
            owl:someValuesFrom :OfficeApplicationFile ] ;
    :attack-id "T1137.003" .

:T1137.004 a owl:Class ;
    rdfs:label "Outlook Home Page" ;
    rdfs:subClassOf :T1137,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :ApplicationConfigurationDatabase ] ;
    :attack-id "T1137.004" .

:T1137.005 a owl:Class ;
    rdfs:label "Outlook Rules" ;
    rdfs:subClassOf :T1137,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :ApplicationConfigurationDatabase ] ;
    :attack-id "T1137.005" .

:T1137.006 a owl:Class ;
    rdfs:label "Add-ins" ;
    rdfs:subClassOf :T1137,
        [ a owl:Restriction ;
            owl:onProperty :adds ;
            owl:someValuesFrom :Software ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :SystemConfigurationDatabase ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :OfficeApplication ] ;
    :attack-id "T1137.006" .

:T1138 a owl:Class ;
    rdfs:label "Application Shimming" ;
    rdfs:subClassOf :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1138" .

:T1139 a owl:Class ;
    rdfs:label "Bash History" ;
    rdfs:subClassOf :CredentialAccessTechnique ;
    :attack-id "T1139" .

:T1140 a owl:Class ;
    rdfs:label "Deobfuscate/Decode Files or Information" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :CreateProcess ],
        [ a owl:Restriction ;
            owl:onProperty :may-add ;
            owl:someValuesFrom :ExecutableFile ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :EventLog ] ;
    :attack-id "T1140" .

:T1141 a owl:Class ;
    rdfs:label "Input Prompt" ;
    rdfs:subClassOf :CredentialAccessTechnique ;
    :attack-id "T1141" .

:T1142 a owl:Class ;
    rdfs:label "Keychain" ;
    rdfs:subClassOf :CredentialAccessTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :EncryptedCredential ] ;
    :attack-id "T1142" .

:T1143 a owl:Class ;
    rdfs:label "Hidden Window" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1143" .

:T1144 a owl:Class ;
    rdfs:label "Gatekeeper Bypass" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1144" .

:T1145 a owl:Class ;
    rdfs:label "Private Keys" ;
    rdfs:subClassOf :CredentialAccessTechnique ;
    :attack-id "T1145" .

:T1146 a owl:Class ;
    rdfs:label "Clear Command History" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1146" .

:T1147 a owl:Class ;
    rdfs:label "Hidden Users" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1147" .

:T1148 a owl:Class ;
    rdfs:label "HISTCONTROL" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1148" .

:T1150 a owl:Class ;
    rdfs:label "Plist Modification" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1150" .

:T1151 a owl:Class ;
    rdfs:label "Space after Filename" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :ExecutionTechnique ;
    :attack-id "T1151" .

:T1152 a owl:Class ;
    rdfs:label "Launchctl" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :ExecutionTechnique,
        :PersistenceTechnique ;
    :attack-id "T1152" .

:T1154 a owl:Class ;
    rdfs:label "Trap" ;
    rdfs:subClassOf :ExecutionTechnique,
        :PersistenceTechnique ;
    :attack-id "T1154" .

:T1155 a owl:Class ;
    rdfs:label "AppleScript" ;
    rdfs:subClassOf :ExecutionTechnique ;
    :attack-id "T1155" .

:T1156 a owl:Class ;
    rdfs:label "Malicious Shell Modification" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1156" .

:T1157 a owl:Class ;
    rdfs:label "Dylib Hijacking" ;
    rdfs:subClassOf :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1157" .

:T1158 a owl:Class ;
    rdfs:label "Hidden Files and Directories" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :PersistenceTechnique ;
    :attack-id "T1158" .

:T1159 a owl:Class ;
    rdfs:label "Launch Agent" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1159" .

:T1160 a owl:Class ;
    rdfs:label "Launch Daemon" ;
    rdfs:subClassOf :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1160" .

:T1161 a owl:Class ;
    rdfs:label "LC_LOAD_DYLIB Addition" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1161" .

:T1162 a owl:Class ;
    rdfs:label "Login Item" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1162" .

:T1163 a owl:Class ;
    rdfs:label "Rc.common" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1163" .

:T1164 a owl:Class ;
    rdfs:label "Re-opened Applications" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1164" .

:T1165 a owl:Class ;
    rdfs:label "Startup Items" ;
    rdfs:subClassOf :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1165" .

:T1166 a owl:Class ;
    rdfs:label "Setuid and Setgid" ;
    rdfs:subClassOf :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1166" .

:T1167 a owl:Class ;
    rdfs:label "Securityd Memory" ;
    rdfs:subClassOf :CredentialAccessTechnique ;
    :attack-id "T1167" .

:T1168 a owl:Class ;
    rdfs:label "Local Job Scheduling" ;
    rdfs:subClassOf :ExecutionTechnique,
        :PersistenceTechnique ;
    :attack-id "T1168" .

:T1169 a owl:Class ;
    rdfs:label "Sudo" ;
    rdfs:subClassOf :PrivilegeEscalationTechnique ;
    :attack-id "T1169" .

:T1170 a owl:Class ;
    rdfs:label "Mshta" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :ExecutionTechnique ;
    :attack-id "T1170" .

:T1171 a owl:Class ;
    rdfs:label "LLMNR/NBT-NS Poisoning and Relay" ;
    rdfs:subClassOf :CredentialAccessTechnique ;
    :attack-id "T1171" .

:T1172 a owl:Class ;
    rdfs:label "Domain Fronting" ;
    rdfs:subClassOf :CommandAndControlTechnique ;
    :attack-id "T1172" .

:T1173 a owl:Class ;
    rdfs:label "Dynamic Data Exchange" ;
    rdfs:subClassOf :ExecutionTechnique ;
    :attack-id "T1173" .

:T1174 a owl:Class ;
    rdfs:label "Password Filter DLL" ;
    rdfs:subClassOf :CredentialAccessTechnique ;
    :attack-id "T1174" .

:T1176 a owl:Class ;
    rdfs:label "Browser Extensions" ;
    rdfs:subClassOf :PersistenceTechnique,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :BrowserExtension ] ;
    :attack-id "T1176" .

:T1177 a owl:Class ;
    rdfs:label "LSASS Driver" ;
    rdfs:subClassOf :ExecutionTechnique,
        :PersistenceTechnique ;
    :attack-id "T1177" .

:T1178 a owl:Class ;
    rdfs:label "SID-History Injection" ;
    rdfs:subClassOf :PrivilegeEscalationTechnique ;
    :attack-id "T1178" .

:T1179 a owl:Class ;
    rdfs:label "Hooking" ;
    rdfs:subClassOf :CredentialAccessTechnique,
        :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1179" .

:T1180 a owl:Class ;
    rdfs:label "Screensaver" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1180" .

:T1181 a owl:Class ;
    rdfs:label "Extra Window Memory Injection" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1181" .

:T1182 a owl:Class ;
    rdfs:label "AppCert DLLs" ;
    rdfs:subClassOf :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1182" .

:T1183 a owl:Class ;
    rdfs:label "Image File Execution Options Injection" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1183" .

:T1184 a owl:Class ;
    rdfs:label "SSH Hijacking" ;
    rdfs:subClassOf :LateralMovementTechnique ;
    :attack-id "T1184" .

:T1185 a owl:Class ;
    rdfs:label "Man in the Browser" ;
    rdfs:subClassOf :CollectionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :WebNetworkTraffic ] ;
    :attack-id "T1185" .

:T1186 a owl:Class ;
    rdfs:label "Process Doppelgänging" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1186" .

:T1187 a owl:Class ;
    rdfs:label "Forced Authentication" ;
    rdfs:subClassOf :CredentialAccessTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :WindowsShortcutFile ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :AuthenticationLog ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :Authentication ] ;
    :attack-id "T1187" .

:T1188 a owl:Class ;
    rdfs:label "Multi-hop Proxy" ;
    rdfs:subClassOf :CommandAndControlTechnique ;
    :attack-id "T1188" .

:T1189 a owl:Class ;
    rdfs:label "Drive-by Compromise" ;
    rdfs:subClassOf :InitialAccessTechnique,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :ProcessSegment ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetNetworkTraffic ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :URL ] ;
    :attack-id "T1189" .

:T1190 a owl:Class ;
    rdfs:label "Exploit Public-Facing Application" ;
    rdfs:subClassOf :InitialAccessTechnique,
        [ a owl:Restriction ;
            owl:onProperty :injects ;
            owl:someValuesFrom :DatabaseQuery ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :ProcessSegment ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :InboundInternetNetworkTraffic ] ;
    :attack-id "T1190" .

:T1191 a owl:Class ;
    rdfs:label "CMSTP" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :ExecutionTechnique ;
    :attack-id "T1191" .

:T1192 a owl:Class ;
    rdfs:label "Spearphishing Link" ;
    rdfs:subClassOf :InitialAccessTechnique ;
    :attack-id "T1192" .

:T1193 a owl:Class ;
    rdfs:label "Spearphishing Attachment" ;
    rdfs:subClassOf :InitialAccessTechnique ;
    :attack-id "T1193" .

:T1194 a owl:Class ;
    rdfs:label "Spearphishing via Service" ;
    rdfs:subClassOf :InitialAccessTechnique ;
    :attack-id "T1194" .

:T1195 a owl:Class ;
    rdfs:label "Supply Chain Compromise" ;
    rdfs:subClassOf :InitialAccessTechnique,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :DigitalArtifact ] ;
    :attack-id "T1195" .

:T1195.001 a owl:Class ;
    rdfs:label "Compromise Software Dependencies and Development Tools" ;
    rdfs:subClassOf :T1195,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :Software ] ;
    :attack-id "T1195.001" .

:T1195.002 a owl:Class ;
    rdfs:label "Compromise Software Supply Chain" ;
    rdfs:subClassOf :T1195,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :Software ] ;
    :attack-id "T1195.002" .

:T1195.003 a owl:Class ;
    rdfs:label "Compromise Hardware Supply Chain" ;
    rdfs:subClassOf :T1195,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :HardwareDevice ] ;
    :attack-id "T1195.003" .

:T1196 a owl:Class ;
    rdfs:label "Control Panel Items" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :ExecutionTechnique ;
    :attack-id "T1196" .

:T1197 a owl:Class ;
    rdfs:label "BITS Jobs" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :PersistenceTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-produce ;
            owl:someValuesFrom :IntranetIPCNetworkTraffic ],
        [ a owl:Restriction ;
            owl:onProperty :may-produce ;
            owl:someValuesFrom :IntranetWebNetworkTraffic ],
        [ a owl:Restriction ;
            owl:onProperty :may-produce ;
            owl:someValuesFrom :OutboundInternetWebTraffic ] ;
    :attack-id "T1197" .

:T1198 a owl:Class ;
    rdfs:label "SIP and Trust Provider Hijacking" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :PersistenceTechnique ;
    :attack-id "T1198" .

:T1199 a owl:Class ;
    rdfs:label "Trusted Relationship" ;
    rdfs:subClassOf :InitialAccessTechnique,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :LoginSession ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :IntranetNetworkTraffic ] ;
    :attack-id "T1199" .

:T1200 a owl:Class ;
    rdfs:label "Hardware Additions" ;
    rdfs:subClassOf :InitialAccessTechnique,
        [ a owl:Restriction ;
            owl:onProperty :connects ;
            owl:someValuesFrom :HardwareDevice ] ;
    :attack-id "T1200" ;
    :todo "This technique would best be captured as a frame, in that a hardware device is added (connected) to a local area network.  The technique could act as an ersatz frame if the roles connects and modifies were understood to be the item connected and the network connected to respectively (but not particular natural role names)." .

:T1201 a owl:Class ;
    rdfs:label "Password Policy Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique ;
    :attack-id "T1201" .

:T1202 a owl:Class ;
    rdfs:label "Indirect Command Execution" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1202" .

:T1203 a owl:Class ;
    rdfs:label "Exploitation for Client Execution" ;
    rdfs:subClassOf :ExecutionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :ProcessCodeSegment ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :StackFrame ] ;
    :attack-id "T1203" .

:T1204 a owl:Class ;
    rdfs:label "User Execution" ;
    rdfs:subClassOf :ExecutionTechnique ;
    :attack-id "T1204" .

:T1204.001 a owl:Class ;
    rdfs:label "Malicious Link Execution" ;
    rdfs:subClassOf :T1204,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :URL ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetWebTraffic ] ;
    :attack-id "T1204.001" .

:T1204.002 a owl:Class ;
    rdfs:label "Malicious File Execution" ;
    rdfs:subClassOf :T1204,
        [ a owl:Restriction ;
            owl:onProperty :executes ;
            owl:someValuesFrom :ExecutableFile ] ;
    :attack-id "T1204.002" .

:T1204.003 a owl:Class ;
    rdfs:label "Malicious Image" ;
    rdfs:subClassOf :T1204 ;
    :attack-id "T1204.003" .

:T1205 a owl:Class ;
    rdfs:label "Traffic Signaling" ;
    rdfs:subClassOf :CommandAndControlTechnique,
        :DefenseEvasionTechnique,
        :PersistenceTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :NetworkTraffic ] ;
    :attack-id "T1205" ;
    :definition "used all over so its not just internet traffic" .

:T1205.001 a owl:Class ;
    rdfs:label "Port Knocking" ;
    rdfs:subClassOf :T1205,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :NetworkTraffic ] ;
    :attack-id "T1205.001" .

:T1206 a owl:Class ;
    rdfs:label "Sudo Caching" ;
    rdfs:subClassOf :PrivilegeEscalationTechnique ;
    :attack-id "T1206" .

:T1207 a owl:Class ;
    rdfs:label "Rogue Domain Controller" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemConfigurationDatabase ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :IntranetAdministrativeNetworkTraffic ] ;
    :attack-id "T1207" .

:T1208 a owl:Class ;
    rdfs:label "Kerberoasting" ;
    rdfs:subClassOf :CredentialAccessTechnique ;
    :attack-id "T1208" .

:T1209 a owl:Class ;
    rdfs:label "Time Providers" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1209" .

:T1210 a owl:Class ;
    rdfs:label "Exploitation of Remote Services" ;
    rdfs:subClassOf :LateralMovementTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :ProcessCodeSegment ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :ProcessSegment ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :StackFrame ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :IntranetNetworkTraffic ] ;
    :attack-id "T1210" .

:T1211 a owl:Class ;
    rdfs:label "Exploitation for Defense Evasion" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :ProcessCodeSegment ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :StackFrame ] ;
    :attack-id "T1211" .

:T1212 a owl:Class ;
    rdfs:label "Exploitation for Credential Access" ;
    rdfs:subClassOf :CredentialAccessTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :AuthenticationService ],
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :CredentialManagementSystem ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :ProcessCodeSegment ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :StackFrame ] ;
    :attack-id "T1212" .

:T1213 a owl:Class ;
    rdfs:label "Data from Information Repositories" ;
    rdfs:subClassOf :CollectionTechnique,
        :DiscoveryTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :Resource ] ;
    :attack-id "T1213" .

:T1213.001 a owl:Class ;
    rdfs:label "Confluence" ;
    rdfs:subClassOf :T1213,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :WebFileResource ] ;
    :attack-id "T1213.001" .

:T1213.002 a owl:Class ;
    rdfs:label "Sharepoint" ;
    rdfs:subClassOf :T1213,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :WebFileResource ] ;
    :attack-id "T1213.002" .

:T1213.003 a owl:Class ;
    rdfs:label "Code Repositories" ;
    rdfs:subClassOf :T1213,
        [ a owl:Restriction ;
            owl:onProperty :reads ;
            owl:someValuesFrom :CodeRepository ] ;
    :attack-id "T1213.003" .

:T1214 a owl:Class ;
    rdfs:label "Credentials in Registry" ;
    rdfs:subClassOf :CredentialAccessTechnique ;
    :attack-id "T1214" .

:T1215 a owl:Class ;
    rdfs:label "Kernel Modules and Extensions" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1215" .

:T1216 a owl:Class ;
    rdfs:label "Signed Script Proxy Execution" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :ExecutionTechnique ;
    :attack-id "T1216" .

:T1216.001 a owl:Class ;
    rdfs:label "PubPrn Execution" ;
    rdfs:subClassOf :T1216 ;
    :attack-id "T1216.001" .

:T1217 a owl:Class ;
    rdfs:label "Browser Bookmark Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique ;
    :attack-id "T1217" .

:T1218 a owl:Class ;
    rdfs:label "Signed Binary Proxy Execution" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :ExecutionTechnique ;
    :attack-id "T1218" .

:T1218.001 a owl:Class ;
    rdfs:label "Compiled HTML File" ;
    rdfs:subClassOf :T1218,
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :CreateFile ],
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :CreateProcess ] ;
    :attack-id "T1218.001" .

:T1218.002 a owl:Class ;
    rdfs:label "Control Panel Execution" ;
    rdfs:subClassOf :T1218,
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :CreateProcess ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ] ;
    :attack-id "T1218.002" .

:T1218.003 a owl:Class ;
    rdfs:label "CMSTP" ;
    rdfs:subClassOf :T1218,
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :CreateProcess ],
        [ a owl:Restriction ;
            owl:onProperty :may-produce ;
            owl:someValuesFrom :NetworkTraffic ] ;
    :attack-id "T1218.003" .

:T1218.004 a owl:Class ;
    rdfs:label "InstallUtil Execution" ;
    rdfs:subClassOf :T1218 ;
    :attack-id "T1218.004" .

:T1218.005 a owl:Class ;
    rdfs:label "Mshta Execution" ;
    rdfs:subClassOf :T1218 ;
    :attack-id "T1218.005" .

:T1218.007 a owl:Class ;
    rdfs:label "Msiexec Execution" ;
    rdfs:subClassOf :T1218 ;
    :attack-id "T1218.007" .

:T1218.008 a owl:Class ;
    rdfs:label "Odbcconf Execution" ;
    rdfs:subClassOf :T1218 ;
    :attack-id "T1218.008" .

:T1218.009 a owl:Class ;
    rdfs:label "Regsvcs/Regasm Execution" ;
    rdfs:subClassOf :T1218 ;
    :attack-id "T1218.009" .

:T1218.010 a owl:Class ;
    rdfs:label "Regsvr32 Execution" ;
    rdfs:subClassOf :T1218 ;
    :attack-id "T1218.010" .

:T1218.011 a owl:Class ;
    rdfs:label "Rundll32 Execution" ;
    rdfs:subClassOf :T1218,
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :CreateProcess ],
        [ a owl:Restriction ;
            owl:onProperty :loads ;
            owl:someValuesFrom :SharedLibraryFile ] ;
    :attack-id "T1218.011" .

:T1218.012 a owl:Class ;
    rdfs:label "Verclsid" ;
    rdfs:subClassOf :T1218 ;
    :attack-id "T1218.012" .

:T1218.013 a owl:Class ;
    rdfs:label "Mavinject" ;
    rdfs:subClassOf :T1218,
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :CreateThread ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :ProcessSegment ] ;
    :attack-id "T1218.013" ;
    rdfs:seeAlso <https://posts.specterops.io/mavinject-exe-functionality-deconstructed-c29ab2cf5c0e> ;
    :todo "Could add additional invokes; requires adding additional function calls.  This is far more narrow than MMC, but still has multiple angles.  Specified at this level, one has knowledge with which to start to \"hunt\" with an auto-created analytic (as in CAR analytic.)  Do we want to note it runs Mavinject?  That would require specifying a specific program." .

:T1218.014 a owl:Class ;
    rdfs:label "MMC" ;
    rdfs:subClassOf :T1218,
        [ a owl:Restriction ;
            owl:onProperty :executes ;
            owl:someValuesFrom :Command ],
        [ a owl:Restriction ;
            owl:onProperty :may-add ;
            owl:someValuesFrom :Software ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :SystemConfigurationDatabase ] ;
    :attack-id "T1218.014" ;
    :todo "Consider may-install instead of may-add (may be distinct).  Not modeling MMC unique command per se, just as a command.  The mmc command operates what amounts to platform of same name that implements the console's capabilities.  MMC (the platform) might be modified by changing snap-ins (also not modeled; would be MMC modules.)  This ATT&CK technique is really just noting that MMC can do many things related to opportunities MMC presents.  Not sure why the ATT&CK technique is under Defense Evasion per se, other than it is using legacy software, which is really probably Software Downgrade technique and an /Execution Technique/ as well [for awareness of ATT&CK, check to see if both or not for MMC and SD.]" .

:T1219 a owl:Class ;
    rdfs:label "Remote Access Software" ;
    rdfs:subClassOf :CommandAndControlTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetNetworkTraffic ] ;
    :attack-id "T1219" .

:T1220 a owl:Class ;
    rdfs:label "XSL Script Processing" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :adds ;
            owl:someValuesFrom :File ],
        [ a owl:Restriction ;
            owl:onProperty :interprets ;
            owl:someValuesFrom :ExecutableScript ],
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :CreateProcess ] ;
    :attack-id "T1220" .

:T1221 a owl:Class ;
    rdfs:label "Template Injection" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1221" .

:T1222 a owl:Class ;
    rdfs:label "File and Directory Permissions Modification" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :AccessControlConfiguration ] ;
    :attack-id "T1222" .

:T1222.001 a owl:Class ;
    rdfs:label "Windows File and Directory Permissions Modification" ;
    rdfs:subClassOf :T1222 ;
    :attack-id "T1222.001" .

:T1222.002 a owl:Class ;
    rdfs:label "Linux and Mac File and Directory Permissions Modification" ;
    rdfs:subClassOf :T1222 ;
    :attack-id "T1222.002" .

:T1223 a owl:Class ;
    rdfs:label "Compiled HTML File" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :ExecutionTechnique ;
    :attack-id "T1223" .

:T1480 a owl:Class ;
    rdfs:label "Execution Guardrails" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1480" .

:T1480.001 a owl:Class ;
    rdfs:label "Environmental Keying" ;
    rdfs:subClassOf :T1480 ;
    :attack-id "T1480.001" .

:T1482 a owl:Class ;
    rdfs:label "Domain Trust Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique ;
    :attack-id "T1482" .

:T1483 a owl:Class ;
    rdfs:label "Domain Generation Algorithms" ;
    rdfs:subClassOf :CommandAndControlTechnique ;
    :attack-id "T1483" .

:T1484 a owl:Class ;
    rdfs:label "Group Policy Modification" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :PrivilegeEscalationTechnique,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :GroupPolicy ] ;
    :attack-id "T1484" .

:T1484.001 a owl:Class ;
    rdfs:label "Group Policy Modification" ;
    rdfs:subClassOf :T1484 ;
    :attack-id "T1484.001" .

:T1484.002 a owl:Class ;
    rdfs:label "Domain Trust Modification" ;
    rdfs:subClassOf :T1484 ;
    :attack-id "T1484.002" .

:T1485 a owl:Class ;
    rdfs:label "Data Destruction" ;
    rdfs:subClassOf :ImpactTechnique ;
    :attack-id "T1485" .

:T1486 a owl:Class ;
    rdfs:label "Data Encrypted for Impact" ;
    rdfs:subClassOf :ImpactTechnique ;
    :attack-id "T1486" .

:T1487 a owl:Class ;
    rdfs:label "Disk Structure Wipe" ;
    rdfs:subClassOf :ImpactTechnique ;
    :attack-id "T1487" .

:T1488 a owl:Class ;
    rdfs:label "Disk Content Wipe" ;
    rdfs:subClassOf :ImpactTechnique ;
    :attack-id "T1488" .

:T1489 a owl:Class ;
    rdfs:label "Service Stop" ;
    rdfs:subClassOf :ImpactTechnique ;
    :attack-id "T1489" .

:T1490 a owl:Class ;
    rdfs:label "Inhibit System Recovery" ;
    rdfs:subClassOf :ImpactTechnique ;
    :attack-id "T1490" .

:T1491 a owl:Class ;
    rdfs:label "Defacement" ;
    rdfs:subClassOf :ImpactTechnique ;
    :attack-id "T1491" .

:T1491.001 a owl:Class ;
    rdfs:label "Internal Defacement" ;
    rdfs:subClassOf :T1491,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :Resource ] ;
    :attack-id "T1491.001" .

:T1491.002 a owl:Class ;
    rdfs:label "External Defacement" ;
    rdfs:subClassOf :T1491,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :NetworkResource ] ;
    :attack-id "T1491.002" .

:T1492 a owl:Class ;
    rdfs:label "Stored Data Manipulation" ;
    rdfs:subClassOf :ImpactTechnique ;
    :attack-id "T1492" .

:T1493 a owl:Class ;
    rdfs:label "Transmitted Data Manipulation" ;
    rdfs:subClassOf :ImpactTechnique ;
    :attack-id "T1493" .

:T1494 a owl:Class ;
    rdfs:label "Runtime Data Manipulation" ;
    rdfs:subClassOf :ImpactTechnique ;
    :attack-id "T1494" .

:T1495 a owl:Class ;
    rdfs:label "Firmware Corruption" ;
    rdfs:subClassOf :ImpactTechnique ;
    :attack-id "T1495" .

:T1496 a owl:Class ;
    rdfs:label "Resource Hijacking" ;
    rdfs:subClassOf :ImpactTechnique ;
    :attack-id "T1496" .

:T1497 a owl:Class ;
    rdfs:label "Virtualization/Sandbox Evasion" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1497" .

:T1497.001 a owl:Class ;
    rdfs:label "System Checks" ;
    rdfs:subClassOf :T1497 ;
    :attack-id "T1497.001" .

:T1497.002 a owl:Class ;
    rdfs:label "User Activity Based Checks" ;
    rdfs:subClassOf :T1497 ;
    :attack-id "T1497.002" .

:T1497.003 a owl:Class ;
    rdfs:label "Time Based Evasion" ;
    rdfs:subClassOf :T1497,
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :GetSystemTime ],
        [ a owl:Restriction ;
            owl:onProperty :may-run ;
            owl:someValuesFrom :SystemTimeApplication ] ;
    :attack-id "T1497.003" .

:T1498 a owl:Class ;
    rdfs:label "Network Denial of Service" ;
    rdfs:subClassOf :ImpactTechnique ;
    :attack-id "T1498" .

:T1498.001 a owl:Class ;
    rdfs:label "Direct Network Flood" ;
    rdfs:subClassOf :T1498,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :InboundInternetNetworkTraffic ] ;
    :attack-id "T1498.001" .

:T1498.002 a owl:Class ;
    rdfs:label "Reflection Amplification" ;
    rdfs:subClassOf :T1498,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :InboundInternetNetworkTraffic ] ;
    :attack-id "T1498.002" .

:T1499 a owl:Class ;
    rdfs:label "Endpoint Denial of Service" ;
    rdfs:subClassOf :ImpactTechnique ;
    :attack-id "T1499" .

:T1499.001 a owl:Class ;
    rdfs:label "OS Exhaustion Flood" ;
    rdfs:subClassOf :T1499 ;
    :attack-id "T1499.001" .

:T1499.002 a owl:Class ;
    rdfs:label "Service Exhaustion Flood" ;
    rdfs:subClassOf :T1498,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :InboundInternetNetworkTraffic ] ;
    :attack-id "T1499.002" .

:T1499.003 a owl:Class ;
    rdfs:label "Application Exhaustion Flood" ;
    rdfs:subClassOf :T1499 ;
    :attack-id "T1499.003" .

:T1499.004 a owl:Class ;
    rdfs:label "Application or System Exploitation" ;
    rdfs:subClassOf :T1499 ;
    :attack-id "T1499.004" .

:T1500 a owl:Class ;
    rdfs:label "Compile After Delivery" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1500" .

:T1501 a owl:Class ;
    rdfs:label "Systemd Service" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1501" .

:T1502 a owl:Class ;
    rdfs:label "Parent PID Spoofing" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1502" .

:T1503 a owl:Class ;
    rdfs:label "Credentials from Web Browsers" ;
    rdfs:subClassOf :CredentialAccessTechnique ;
    :attack-id "T1503" .

:T1504 a owl:Class ;
    rdfs:label "PowerShell Profile" ;
    rdfs:subClassOf :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1504" .

:T1505 a owl:Class ;
    rdfs:label "Server Software Component" ;
    rdfs:subClassOf :PersistenceTechnique ;
    :attack-id "T1505" .

:T1505.001 a owl:Class ;
    rdfs:label "SQL Stored Procedures" ;
    rdfs:subClassOf :T1505,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :StoredProcedure ],
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :CreateProcess ] ;
    :attack-id "T1505.001" .

:T1505.002 a owl:Class ;
    rdfs:label "Transport Agent" ;
    rdfs:subClassOf :T1505,
        [ a owl:Restriction ;
            owl:onProperty :adds ;
            owl:someValuesFrom :MessageTransferAgent ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :MailServer ] ;
    :attack-id "T1505.002" .

:T1505.003 a owl:Class ;
    rdfs:label "Web Shell" ;
    rdfs:subClassOf :T1505,
        [ a owl:Restriction ;
            owl:onProperty :adds ;
            owl:someValuesFrom :WebScriptFile ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :WebServer ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :Process ] ;
    :attack-id "T1505.003" .

:T1505.004 a owl:Class ;
    rdfs:label "IIS Components" ;
    rdfs:subClassOf :T1505,
        [ a owl:Restriction ;
            owl:onProperty :adds ;
            owl:someValuesFrom :Software ] ;
    :attack-id "T1505.004" ;
    :todo "Post Release 3: Should we model Web Server extensions, modules, filters as distinct installs?  Do we further drive down to IIS specifics?  Do we characterize adds as installs for a technique such as this?" .

:T1505.005 a owl:Class ;
    rdfs:label "Terminal Services DLL" ;
    rdfs:subClassOf :T1505 ;
    :attack-id "T1505.005" .

:T1506 a owl:Class ;
    rdfs:label "Web Session Cookie" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :LateralMovementTechnique ;
    :attack-id "T1506" .

:T1514 a owl:Class ;
    rdfs:label "Elevated Execution with Prompt" ;
    rdfs:subClassOf :PrivilegeEscalationTechnique ;
    :attack-id "T1514" .

:T1518 a owl:Class ;
    rdfs:label "Software Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique ;
    :attack-id "T1518" .

:T1518.001 a owl:Class ;
    rdfs:label "Security Software Discovery" ;
    rdfs:subClassOf :T1518,
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :FileSystemMetadata ],
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :KernelProcessTable ],
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ],
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :SystemFirewallConfiguration ],
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :GetRunningProcesses ] ;
    :attack-id "T1518.001" .

:T1519 a owl:Class ;
    rdfs:label "Emond" ;
    rdfs:subClassOf :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1519" .

:T1522 a owl:Class ;
    rdfs:label "Cloud Instance Metadata API" ;
    rdfs:subClassOf :CredentialAccessTechnique ;
    :attack-id "T1522" .

:T1525 a owl:Class ;
    rdfs:label "Implant Container Image" ;
    rdfs:subClassOf :PersistenceTechnique,
        [ a owl:Restriction ;
            owl:onProperty :adds ;
            owl:someValuesFrom :ContainerImage ] ;
    :attack-id "T1525" .

:T1526 a owl:Class ;
    rdfs:label "Cloud Service Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique,
        [ a owl:Restriction ;
            owl:onProperty :reads ;
            owl:someValuesFrom :CloudConfiguration ] ;
    :attack-id "T1526" .

:T1527 a owl:Class ;
    rdfs:label "Application Access Token" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :LateralMovementTechnique ;
    :attack-id "T1527" .

:T1528 a owl:Class ;
    rdfs:label "Steal Application Access Token" ;
    rdfs:subClassOf :CredentialAccessTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :AccessToken ] ;
    :attack-id "T1528" .

:T1529 a owl:Class ;
    rdfs:label "System Shutdown/Reboot" ;
    rdfs:subClassOf :ImpactTechnique ;
    :attack-id "T1529" .

:T1530 a owl:Class ;
    rdfs:label "Data from Cloud Storage Object" ;
    rdfs:subClassOf :CollectionTechnique ;
    :attack-id "T1530" .

:T1531 a owl:Class ;
    rdfs:label "Account Access Removal" ;
    rdfs:subClassOf :ImpactTechnique,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :UserAccount ] ;
    :attack-id "T1531" .

:T1534 a owl:Class ;
    rdfs:label "Internal Spearphishing" ;
    rdfs:subClassOf :LateralMovementTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :Email ] ;
    :attack-id "T1534" .

:T1535 a owl:Class ;
    rdfs:label "Unused/Unsupported Cloud Regions" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1535" .

:T1536 a owl:Class ;
    rdfs:label "Revert Cloud Instance" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1536" .

:T1537 a owl:Class ;
    rdfs:label "Transfer Data to Cloud Account" ;
    rdfs:subClassOf :ExfiltrationTechnique ;
    :attack-id "T1537" .

:T1538 a owl:Class ;
    rdfs:label "Cloud Service Dashboard" ;
    rdfs:subClassOf :DiscoveryTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :CloudConfiguration ] ;
    :attack-id "T1538" .

:T1539 a owl:Class ;
    rdfs:label "Steal Web Session Cookie" ;
    rdfs:subClassOf :CredentialAccessTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :SessionCookie ] ;
    :attack-id "T1539" .

:T1542 a owl:Class ;
    rdfs:label "Pre-OS Boot" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :PersistenceTechnique ;
    :attack-id "T1542" .

:T1542.001 a owl:Class ;
    rdfs:label "System Firmware" ;
    rdfs:subClassOf :T1542,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemFirmware ] ;
    :attack-id "T1542.001" .

:T1542.002 a owl:Class ;
    rdfs:label "Component Firmware" ;
    rdfs:subClassOf :T1542,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :Firmware ] ;
    :attack-id "T1542.002" .

:T1542.003 a owl:Class ;
    rdfs:label "Bootkit" ;
    rdfs:subClassOf :T1542,
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :BootLoader ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :BootSector ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :VolumeBootRecord ] ;
    :attack-id "T1542.003" .

:T1542.004 a owl:Class ;
    rdfs:label "ROMMONkit" ;
    rdfs:subClassOf :T1542 ;
    :attack-id "T1542.004" .

:T1542.005 a owl:Class ;
    rdfs:label "TFTP Boot" ;
    rdfs:subClassOf :T1542,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :TFTPNetworkTraffic ] ;
    :attack-id "T1542.005" .

:T1543 a owl:Class ;
    rdfs:label "Create or Modify System Process" ;
    rdfs:subClassOf :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1543" .

:T1543.001 a owl:Class ;
    rdfs:label "Launch Agent" ;
    rdfs:subClassOf :T1543,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :PropertyListFile ] ;
    :attack-id "T1543.001" .

:T1543.002 a owl:Class ;
    rdfs:label "Systemd Service" ;
    rdfs:subClassOf :T1543,
        [ a owl:Restriction ;
            owl:onProperty :may-create ;
            owl:someValuesFrom :OperatingSystemConfigurationFile ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :OperatingSystemConfigurationFile ] ;
    :attack-id "T1543.002" .

:T1543.003 a owl:Class ;
    rdfs:label "Windows Service" ;
    rdfs:subClassOf :T1543,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemConfigurationDatabase ] ;
    :attack-id "T1543.003" .

:T1543.004 a owl:Class ;
    rdfs:label "Launch Daemon" ;
    rdfs:subClassOf :T1543,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :PropertyListFile ] ;
    :attack-id "T1543.004" .

:T1546 a owl:Class ;
    rdfs:label "Event Triggered Execution" ;
    rdfs:subClassOf :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1546" .

:T1546.001 a owl:Class ;
    rdfs:label "Change Default File Association" ;
    rdfs:subClassOf :T1546,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ] ;
    :attack-id "T1546.001" .

:T1546.002 a owl:Class ;
    rdfs:label "Screensaver" ;
    rdfs:subClassOf :T1546,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :ExecutableFile ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ] ;
    :attack-id "T1546.002" .

:T1546.003 a owl:Class ;
    rdfs:label "Windows Management Instrumentation Event Subscription" ;
    rdfs:subClassOf :T1546,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :EventLog ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :IntranetAdministrativeNetworkTraffic ] ;
    :attack-id "T1546.003" .

:T1546.004 a owl:Class ;
    rdfs:label ".bash_profile and .bashrc" ;
    rdfs:subClassOf :T1546,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :UserInitConfigurationFile ] ;
    :attack-id "T1546.004" .

:T1546.005 a owl:Class ;
    rdfs:label "Trap" ;
    rdfs:subClassOf :T1546,
        [ a owl:Restriction ;
            owl:onProperty :executes ;
            owl:someValuesFrom :Command ],
        [ a owl:Restriction ;
            owl:onProperty :may-create ;
            owl:someValuesFrom :ExecutableScript ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :ExecutableScript ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :EventLog ] ;
    :attack-id "T1546.005" .

:T1546.006 a owl:Class ;
    rdfs:label "LC_LOAD_DYLIB Addition" ;
    rdfs:subClassOf :T1546,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :ExecutableBinary ] ;
    :attack-id "T1546.006" .

:T1546.007 a owl:Class ;
    rdfs:label "Netsh Helper DLL" ;
    rdfs:subClassOf :T1546,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :Process ] ;
    :attack-id "T1546.007" .

:T1546.008 a owl:Class ;
    rdfs:label "Accessibility Features" ;
    rdfs:subClassOf :T1546,
        [ a owl:Restriction ;
            owl:onProperty :may-create ;
            owl:someValuesFrom :IntranetAdministrativeNetworkTraffic ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :ExecutableBinary ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ] ;
    :attack-id "T1546.008" .

:T1546.009 a owl:Class ;
    rdfs:label "AppCert DLLs" ;
    rdfs:subClassOf :T1546,
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :CreateProcess ],
        [ a owl:Restriction ;
            owl:onProperty :loads ;
            owl:someValuesFrom :SharedLibraryFile ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ] ;
    :attack-id "T1546.009" .

:T1546.010 a owl:Class ;
    rdfs:label "AppInit DLLs" ;
    rdfs:subClassOf :T1546,
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :CreateProcess ],
        [ a owl:Restriction ;
            owl:onProperty :loads ;
            owl:someValuesFrom :SharedLibraryFile ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ] ;
    :attack-id "T1546.010" .

:T1546.011 a owl:Class ;
    rdfs:label "Application Shimming" ;
    rdfs:subClassOf :T1546,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :Shim ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :ShimDatabase ] ;
    :attack-id "T1546.011" .

:T1546.012 a owl:Class ;
    rdfs:label "Image File Execution Options Injection" ;
    rdfs:subClassOf :T1546,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemConfigurationDatabase ] ;
    :attack-id "T1546.012" .

:T1546.013 a owl:Class ;
    rdfs:label "PowerShell Profile" ;
    rdfs:subClassOf :T1546,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :PowerShellProfileScript ] ;
    :attack-id "T1546.013" .

:T1546.014 a owl:Class ;
    rdfs:label "Emond" ;
    rdfs:subClassOf :T1546,
        [ a owl:Restriction ;
            owl:onProperty :may-create ;
            owl:someValuesFrom :PropertyListFile ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :PropertyListFile ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :ConfigurationResource ] ;
    :attack-id "T1546.014" .

:T1546.015 a owl:Class ;
    rdfs:label "Component Object Model Hijacking" ;
    rdfs:subClassOf :T1546,
        [ a owl:Restriction ;
            owl:onProperty :loads ;
            owl:someValuesFrom :ExecutableBinary ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemConfigurationDatabase ] ;
    :attack-id "T1546.015" ;
    rdfs:seeAlso <http://dbpedia.org/resource/Component_Object_Model> .

:T1547 a owl:Class ;
    rdfs:label "Boot or Logon Autostart Execution" ;
    rdfs:subClassOf :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1547" .

:T1547.001 a owl:Class ;
    rdfs:label "Registry Run Keys / Startup Folder" ;
    rdfs:subClassOf :T1547,
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :SystemConfigurationInitDatabaseRecord ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :UserStartupScriptFile ] ;
    :attack-id "T1547.001" ;
    :todo "Two different things and different access (admin vs. user) given detail given to other siblings and apparent implementation.  Soon to be deprecated in favor of two?  Problematic in that can't assert at this class level some registry or some start up folder, because often not both." .

:T1547.002 a owl:Class ;
    rdfs:label "Authentication Package" ;
    rdfs:subClassOf :T1547,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ] ;
    :attack-id "T1547.002" .

:T1547.003 a owl:Class ;
    rdfs:label "Time Providers" ;
    rdfs:subClassOf :T1547,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ] ;
    :attack-id "T1547.003" .

:T1547.004 a owl:Class ;
    rdfs:label "Winlogon Helper DLL" ;
    rdfs:subClassOf :T1547,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ] ;
    :attack-id "T1547.004" .

:T1547.005 a owl:Class ;
    rdfs:label "Security Support Provider" ;
    rdfs:subClassOf :T1547,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ] ;
    :attack-id "T1547.005" .

:T1547.006 a owl:Class ;
    rdfs:label "Kernel Modules and Extensions" ;
    rdfs:subClassOf :T1547,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :KernelModule ] ;
    :attack-id "T1547.006" .

:T1547.007 a owl:Class ;
    rdfs:label "Re-opened Applications" ;
    rdfs:subClassOf :T1547,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :ApplicationConfigurationFile ] ;
    :attack-id "T1547.007" .

:T1547.008 a owl:Class ;
    rdfs:label "LSASS Driver" ;
    rdfs:subClassOf :T1547,
        [ a owl:Restriction ;
            owl:onProperty :may-create ;
            owl:someValuesFrom :SharedLibraryFile ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemServiceSoftware ] ;
    :attack-id "T1547.008" .

:T1547.009 a owl:Class ;
    rdfs:label "Shortcut Modification" ;
    rdfs:subClassOf :T1547,
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :SymbolicLink ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :UserStartupScriptFile ] ;
    :attack-id "T1547.009" .

:T1547.010 a owl:Class ;
    rdfs:label "Port Monitors" ;
    rdfs:subClassOf :T1547,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ] ;
    :attack-id "T1547.010" .

:T1547.011 a owl:Class ;
    rdfs:label "Plist Modification" ;
    rdfs:subClassOf :T1547,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :ApplicationConfigurationFile ] ;
    :attack-id "T1547.011" .

:T1547.012 a owl:Class ;
    rdfs:label "Print Processors" ;
    rdfs:subClassOf :T1547 ;
    :attack-id "T1547.012" .

:T1547.013 a owl:Class ;
    rdfs:label "XDG Autostart Entries" ;
    rdfs:subClassOf :T1547 ;
    :attack-id "T1547.013" .

:T1547.014 a owl:Class ;
    rdfs:label "Active Setup" ;
    rdfs:subClassOf :T1547 ;
    :attack-id "T1547.014" .

:T1547.015 a owl:Class ;
    rdfs:label "Login Items" ;
    rdfs:subClassOf :T1547,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :UserLogonInitResource ] ;
    :attack-id "T1547.015" .

:T1548 a owl:Class ;
    rdfs:label "Abuse Elevation Control Mechanism" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1548" .

:T1548.001 a owl:Class ;
    rdfs:label "Setuid and Setgid" ;
    rdfs:subClassOf :T1548,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :AccessControlConfiguration ] ;
    :attack-id "T1548.001" .

:T1548.002 a owl:Class ;
    rdfs:label "Bypass User Access Control" ;
    rdfs:subClassOf :T1548,
        [ a owl:Restriction ;
            owl:onProperty :executes ;
            owl:someValuesFrom :ExecutableFile ],
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :CreateProcess ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ] ;
    :attack-id "T1548.002" .

:T1548.003 a owl:Class ;
    rdfs:label "Sudo and Sudo Caching" ;
    rdfs:subClassOf :T1548,
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :EventLog ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :OperatingSystemConfigurationFile ] ;
    :attack-id "T1548.003" .

:T1548.004 a owl:Class ;
    rdfs:label "Elevated Execution with Prompt" ;
    rdfs:subClassOf :T1548,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :SystemConfigurationDatabase ],
        [ a owl:Restriction ;
            owl:onProperty :invokes ;
            owl:someValuesFrom :SystemCall ] ;
    :attack-id "T1548.004" .

:T1550 a owl:Class ;
    rdfs:label "Use Alternate Authentication Material" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :LateralMovementTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :AuthenticationService ] ;
    :attack-id "T1550" .

:T1550.001 a owl:Class ;
    rdfs:label "Application Access Token" ;
    rdfs:subClassOf :T1550,
        [ a owl:Restriction ;
            owl:onProperty :may-produce ;
            owl:someValuesFrom :NetworkTraffic ],
        [ a owl:Restriction ;
            owl:onProperty :uses ;
            owl:someValuesFrom :AccessToken ] ;
    :attack-id "T1550.001" .

:T1550.002 a owl:Class ;
    rdfs:label "Pass The Hash" ;
    rdfs:subClassOf :T1550,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :Authentication ] ;
    :attack-id "T1550.002" .

:T1550.003 a owl:Class ;
    rdfs:label "Pass The Ticket" ;
    rdfs:subClassOf :T1550,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :Authentication ] ;
    :attack-id "T1550.003" .

:T1550.004 a owl:Class ;
    rdfs:label "Web Session Cookie" ;
    rdfs:subClassOf :T1550,
        [ a owl:Restriction ;
            owl:onProperty :adds ;
            owl:someValuesFrom :SessionCookie ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :WebNetworkTraffic ] ;
    :attack-id "T1550.004" .

:T1552 a owl:Class ;
    rdfs:label "Unsecured Credentials" ;
    rdfs:subClassOf :CredentialAccessTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :Credential ] ;
    :attack-id "T1552" .

:T1552.001 a owl:Class ;
    rdfs:label "Credentials in Files" ;
    rdfs:subClassOf :T1552,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :File ] ;
    :attack-id "T1552.001" .

:T1552.002 a owl:Class ;
    rdfs:label "Credentials in Registry" ;
    rdfs:subClassOf :T1552,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :SystemConfigurationDatabase ] ;
    :attack-id "T1552.002" .

:T1552.003 a owl:Class ;
    rdfs:label "Bash History" ;
    rdfs:subClassOf :T1552,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :CommandHistoryLogFile ] ;
    :attack-id "T1552.003" .

:T1552.004 a owl:Class ;
    rdfs:label "Private Keys" ;
    rdfs:subClassOf :T1552,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :PrivateKey ] ;
    :attack-id "T1552.004" .

:T1552.005 a owl:Class ;
    rdfs:label "Cloud Instance Metadata  API" ;
    rdfs:subClassOf :T1552,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :CloudInstanceMetadata ] ;
    :attack-id "T1552.005" .

:T1552.006 a owl:Class ;
    rdfs:label "Group Policy Preferences" ;
    rdfs:subClassOf :T1552,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :GroupPolicy ] ;
    :attack-id "T1552.006" .

:T1552.007 a owl:Class ;
    rdfs:label "Container API" ;
    rdfs:subClassOf :T1552 ;
    :attack-id "T1552.007" .

:T1553 a owl:Class ;
    rdfs:label "Subvert Trust Controls" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1553" .

:T1553.001 a owl:Class ;
    rdfs:label "Gatekeeper Bypass" ;
    rdfs:subClassOf :T1553,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :FileSystemMetadata ] ;
    :attack-id "T1553.001" .

:T1553.002 a owl:Class ;
    rdfs:label "Code Signing" ;
    rdfs:subClassOf :T1553,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :DefenseEvasion ] ;
    :attack-id "T1553.002" .

:T1553.003 a owl:Class ;
    rdfs:label "SIP and Trust Provider Hijacking" ;
    rdfs:subClassOf :T1553,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ] ;
    :attack-id "T1553.003" .

:T1553.004 a owl:Class ;
    rdfs:label "Install Root Certificate" ;
    rdfs:subClassOf :T1553,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :CertificateTrustStore ] ;
    :attack-id "T1553.004" .

:T1553.005 a owl:Class ;
    rdfs:label "Mark-of-the-Web Bypass" ;
    rdfs:subClassOf :T1553 ;
    :attack-id "T1553.005" .

:T1553.006 a owl:Class ;
    rdfs:label "Code Signing Policy Modification" ;
    rdfs:subClassOf :T1553 ;
    :attack-id "T1553.006" .

:T1554 a owl:Class ;
    rdfs:label "Compromise Client Software Binary" ;
    rdfs:subClassOf :PersistenceTechnique,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :ClientApplication ] ;
    :attack-id "T1554" .

:T1555 a owl:Class ;
    rdfs:label "Credentials from Password Stores" ;
    rdfs:subClassOf :CredentialAccessTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :PasswordStore ],
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :DatabaseFile ] ;
    :attack-id "T1555" .

:T1555.001 a owl:Class ;
    rdfs:label "Keychain" ;
    rdfs:subClassOf :T1555,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :MacOSKeychain ] ;
    :attack-id "T1555.001" .

:T1555.002 a owl:Class ;
    rdfs:label "Securityd Memory" ;
    rdfs:subClassOf :T1555,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :In-memoryPasswordStore ] ;
    :attack-id "T1555.002" .

:T1555.003 a owl:Class ;
    rdfs:label "Credentials from Web Browsers" ;
    rdfs:subClassOf :T1555,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :DatabaseFile ],
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :In-memoryPasswordStore ],
        [ a owl:Restriction ;
            owl:onProperty :may-invoke ;
            owl:someValuesFrom :ReadFile ] ;
    :attack-id "T1555.003" .

:T1555.004 a owl:Class ;
    rdfs:label "Windows Credential Manager" ;
    rdfs:subClassOf :T1555 ;
    :attack-id "T1555.004" .

:T1555.005 a owl:Class ;
    rdfs:label "Password Managers" ;
    rdfs:subClassOf :T1555 ;
    :attack-id "T1555.005" .

:T1556 a owl:Class ;
    rdfs:label "Modify Authentication Process" ;
    rdfs:subClassOf :CredentialAccessTechnique,
        :DefenseEvasionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :AuthenticationService ] ;
    :attack-id "T1556" .

:T1556.001 a owl:Class ;
    rdfs:label "Domain Controller Authentication" ;
    rdfs:subClassOf :T1556 ;
    :attack-id "T1556.001" .

:T1556.002 a owl:Class ;
    rdfs:label "Password Filter DLL" ;
    rdfs:subClassOf :T1556,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :SharedLibraryFile ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ] ;
    :attack-id "T1556.002" .

:T1556.003 a owl:Class ;
    rdfs:label "Pluggable Authentication Modules" ;
    rdfs:subClassOf :T1556,
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :OperatingSystemConfigurationFile ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :OperatingSystemSharedLibraryFile ] ;
    :attack-id "T1556.003" .

:T1556.004 a owl:Class ;
    rdfs:label "Network Device Authentication" ;
    rdfs:subClassOf :T1556 ;
    :attack-id "T1556.004" .

:T1556.005 a owl:Class ;
    rdfs:label "Reversible Encryption" ;
    rdfs:subClassOf :T1556 ;
    :attack-id "T1556.005" .

:T1557 a owl:Class ;
    rdfs:label "Man-in-the-Middle" ;
    rdfs:subClassOf :CollectionTechnique,
        :CredentialAccessTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :NetworkTraffic ] ;
    :attack-id "T1557" .

:T1557.001 a owl:Class ;
    rdfs:label "LLMNR/NBT-NS Poisoning and SMB Relay" ;
    rdfs:subClassOf :T1557,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :IntranetMulticastNetworkTraffic ] ;
    :attack-id "T1557.001" .

:T1557.002 a owl:Class ;
    rdfs:label "ARP Cache Poisoning" ;
    rdfs:subClassOf :T1557 ;
    :attack-id "T1557.002" .

:T1557.003 a owl:Class ;
    rdfs:label "DHCP Spoofing" ;
    rdfs:subClassOf :T1557,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :DHCPNetworkTraffic ] ;
    :attack-id "T1557.003" .

:T1558 a owl:Class ;
    rdfs:label "Steal or Forge Kerberos Tickets" ;
    rdfs:subClassOf :CredentialAccessTechnique,
        [ a owl:Restriction ;
            owl:onProperty :may-access ;
            owl:someValuesFrom :KerberosTicket ],
        [ a owl:Restriction ;
            owl:onProperty :may-create ;
            owl:someValuesFrom :KerberosTicket ] ;
    :attack-id "T1558" .

:T1558.001 a owl:Class ;
    rdfs:label "Golden Ticket" ;
    rdfs:subClassOf :T1558,
        [ a owl:Restriction ;
            owl:onProperty :forges ;
            owl:someValuesFrom :KerberosTicketGrantingTicket ] ;
    :attack-id "T1558.001" .

:T1558.002 a owl:Class ;
    rdfs:label "Silver Ticket" ;
    rdfs:subClassOf :T1558 ;
    :attack-id "T1558.002" .

:T1558.003 a owl:Class ;
    rdfs:label "Kerberoasting" ;
    rdfs:subClassOf :T1558,
        [ a owl:Restriction ;
            owl:onProperty :may-produce ;
            owl:someValuesFrom :RPCNetworkTraffic ] ;
    :attack-id "T1558.003" ;
    :definition "Service Provider Name (SPN) scanning is one way to gather hashes, which results in RPC calls conforming to the NSPI protocol." ;
    rdfs:seeAlso <https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-nspi/6dd0a3ea-b4d4-4a73-a857-add03a89a543> .

:T1558.004 a owl:Class ;
    rdfs:label "AS-REP Roasting" ;
    rdfs:subClassOf :T1558 ;
    :attack-id "T1558.004" .

:T1559 a owl:Class ;
    rdfs:label "Inter-Process Communication Execution" ;
    rdfs:subClassOf :ExecutionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :injects ;
            owl:someValuesFrom :InterprocessCommunication ] ;
    :attack-id "T1559" .

:T1559.001 a owl:Class ;
    rdfs:label "Component Object Model Execution" ;
    rdfs:subClassOf :T1559 ;
    :attack-id "T1559.001" .

:T1559.002 a owl:Class ;
    rdfs:label "Dynamic Data Exchange Execution" ;
    rdfs:subClassOf :T1559 ;
    :attack-id "T1559.002" .

:T1559.003 a owl:Class ;
    rdfs:label "XPC Services" ;
    rdfs:subClassOf :T1559 ;
    :attack-id "T1559.003" .

:T1560 a owl:Class ;
    rdfs:label "Archive Collected Data" ;
    rdfs:subClassOf :CollectionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :ArchiveFile ] ;
    :attack-id "T1560" .

:T1560.001 a owl:Class ;
    rdfs:label "Archive via Utility" ;
    rdfs:subClassOf :T1560,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :ArchiveFile ] ;
    :attack-id "T1560.001" .

:T1560.002 a owl:Class ;
    rdfs:label "Archive via Library" ;
    rdfs:subClassOf :T1560,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :ArchiveFile ] ;
    :attack-id "T1560.002" .

:T1560.003 a owl:Class ;
    rdfs:label "Archive via Custom Method" ;
    rdfs:subClassOf :T1560,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :CustomArchiveFile ] ;
    :attack-id "T1560.003" .

:T1561 a owl:Class ;
    rdfs:label "Disk Wipe" ;
    rdfs:subClassOf :ImpactTechnique ;
    :attack-id "T1561" .

:T1561.001 a owl:Class ;
    rdfs:label "Disk Content Wipe" ;
    rdfs:subClassOf :T1561,
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :BootSector ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :Partition ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :PartitionTable ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :Volume ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :BlockDevice ] ;
    :attack-id "T1561.001" .

:T1561.002 a owl:Class ;
    rdfs:label "Disk Structure Wipe" ;
    rdfs:subClassOf :T1561,
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :BootSector ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :PartitionTable ] ;
    :attack-id "T1561.002" .

:T1562 a owl:Class ;
    rdfs:label "Impair Defenses" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1562" .

:T1562.001 a owl:Class ;
    rdfs:label "Disable or Modify Tools" ;
    rdfs:subClassOf :T1562,
        [ a owl:Restriction ;
            owl:onProperty :disables ;
            owl:someValuesFrom :OperatingSystemProcess ] ;
    :attack-id "T1562.001" .

:T1562.002 a owl:Class ;
    rdfs:label "Disable Windows Event Logging" ;
    rdfs:subClassOf :T1562,
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :ApplicationConfiguration ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :OperatingSystemConfigurationComponent ] ;
    :attack-id "T1562.002" .

:T1562.003 a owl:Class ;
    rdfs:label "Impair Command History Logging" ;
    rdfs:subClassOf :T1562,
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :UserInitScript ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :WindowsRegistryKey ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :ProcessEnvironmentVariable ] ;
    :attack-id "T1562.003" .

:T1562.004 a owl:Class ;
    rdfs:label "Disable or Modify System Firewall" ;
    rdfs:subClassOf :T1562,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemFirewallConfiguration ] ;
    :attack-id "T1562.004" .

:T1562.006 a owl:Class ;
    rdfs:label "Indicator Blocking" ;
    rdfs:subClassOf :T1562 ;
    :attack-id "T1562.006" .

:T1562.007 a owl:Class ;
    rdfs:label "Disable or Modify Cloud Firewall" ;
    rdfs:subClassOf :T1562 ;
    :attack-id "T1562.007" .

:T1562.008 a owl:Class ;
    rdfs:label "Disable Cloud Logs" ;
    rdfs:subClassOf :T1562 ;
    :attack-id "T1562.008" .

:T1562.009 a owl:Class ;
    rdfs:label "Safe Mode Boot" ;
    rdfs:subClassOf :T1562,
        [ a owl:Restriction ;
            owl:onProperty :disables ;
            owl:someValuesFrom :EndpointSensor ],
        [ a owl:Restriction ;
            owl:onProperty :disables ;
            owl:someValuesFrom :SystemConfigurationInitDatabaseRecord ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :EndpointHealthBeacon ] ;
    :attack-id "T1562.009" .

:T1562.010 a owl:Class ;
    rdfs:label "Downgrade Attack" ;
    rdfs:subClassOf :T1562,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :LegacySystem ] ;
    :attack-id "T1562.010" .

:T1563 a owl:Class ;
    rdfs:label "Remote Service Session Hijacking" ;
    rdfs:subClassOf :LateralMovementTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :RemoteSession ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :AdministrativeNetworkTraffic ] ;
    :attack-id "T1563" .

:T1563.001 a owl:Class ;
    rdfs:label "SSH Hijacking" ;
    rdfs:subClassOf :T1563,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :SSHSession ] ;
    :attack-id "T1563.001" .

:T1563.002 a owl:Class ;
    rdfs:label "RDP Hijacking" ;
    rdfs:subClassOf :T1563,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :RDPSession ] ;
    :attack-id "T1563.002" .

:T1564 a owl:Class ;
    rdfs:label "Hide Artifacts" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1564" .

:T1564.001 a owl:Class ;
    rdfs:label "Hidden Files and Directories" ;
    rdfs:subClassOf :T1564,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :FileSystemMetadata ] ;
    :attack-id "T1564.001" .

:T1564.002 a owl:Class ;
    rdfs:label "Hidden Users" ;
    rdfs:subClassOf :T1564,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :UserInitConfigurationFile ] ;
    :attack-id "T1564.002" .

:T1564.003 a owl:Class ;
    rdfs:label "Hidden Window" ;
    rdfs:subClassOf :T1564,
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :PropertyListFile ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :SystemConfigurationDatabase ] ;
    :attack-id "T1564.003" ;
    :todo "Not full capture or relationships:. For instance, many of the extant software techniques in the wild result in powershell invocations with option to be hidden. This is a particular option. and -creates->process isn't the key distinction, so we want to be able to capture nuances like that.  The verb \"hides\" is lurking somewhere as knowledge to be exploited in model, but that is relative to viewer and not the data artifacts being changed." .

:T1564.004 a owl:Class ;
    rdfs:label "NTFS File Attributes" ;
    rdfs:subClassOf :T1564,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :FileSystemMetadata ] ;
    :attack-id "T1564.004" ;
    :todo "Consider in joint review: Master File Table (MFT) is a specific type of metadata associated with NTFS that is key to this technique, easy enough to subclass and refine other elements of file metadata as well." .

:T1564.005 a owl:Class ;
    rdfs:label "Hidden File System" ;
    rdfs:subClassOf :T1564,
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :SystemConfigurationDatabase ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :Storage ] ;
    :attack-id "T1564.005" .

:T1564.006 a owl:Class ;
    rdfs:label "Run Virtual Instance" ;
    rdfs:subClassOf :T1564,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :File ],
        [ a owl:Restriction ;
            owl:onProperty :executes ;
            owl:someValuesFrom :VirtualizationSoftware ],
        [ a owl:Restriction ;
            owl:onProperty :may-add ;
            owl:someValuesFrom :VirtualizationSoftware ],
        [ a owl:Restriction ;
            owl:onProperty :may-create ;
            owl:someValuesFrom :Directory ] ;
    :attack-id "T1564.006" .

:T1564.007 a owl:Class ;
    rdfs:label "VBA Stomping" ;
    rdfs:subClassOf :T1564,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :OfficeApplicationFile ] ;
    :attack-id "T1564.007" .

:T1564.008 a owl:Class ;
    rdfs:label "Email Hiding Rules" ;
    rdfs:subClassOf :T1564,
        [ a owl:Restriction ;
            owl:onProperty :may-create ;
            owl:someValuesFrom :EmailRule ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :EmailRule ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :ApplicationConfiguration ] ;
    :attack-id "T1564.008" .

:T1564.009 a owl:Class ;
    rdfs:label "Resource Forking" ;
    rdfs:subClassOf :T1564,
        [ a owl:Restriction ;
            owl:onProperty :may-create ;
            owl:someValuesFrom :ResourceFork ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :ResourceFork ] ;
    :attack-id "T1564.009" .

:T1564.010 a owl:Class ;
    rdfs:label "Process Argument Spoofing" ;
    rdfs:subClassOf :T1564 ;
    :attack-id "T1564.010" .

:T1565 a owl:Class ;
    rdfs:label "Data Manipulation" ;
    rdfs:subClassOf :ImpactTechnique ;
    :attack-id "T1565" .

:T1565.001 a owl:Class ;
    rdfs:label "Stored Data Manipulation" ;
    rdfs:subClassOf :T1565,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :File ] ;
    :attack-id "T1565.001" .

:T1565.002 a owl:Class ;
    rdfs:label "Transmitted Data Manipulation" ;
    rdfs:subClassOf :T1565,
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :NetworkTraffic ] ;
    :attack-id "T1565.002" .

:T1565.003 a owl:Class ;
    rdfs:label "Runtime Data Manipulation" ;
    rdfs:subClassOf :T1565,
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :ExecutableFile ] ;
    :attack-id "T1565.003" .

:T1566 a owl:Class ;
    rdfs:label "Phishing" ;
    rdfs:subClassOf :InitialAccessTechnique ;
    :attack-id "T1566" .

:T1566.001 a owl:Class ;
    rdfs:label "Spearphishing Attachment" ;
    rdfs:subClassOf :T1566,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :Email ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :InboundInternetMailTraffic ] ;
    :attack-id "T1566.001" .

:T1566.002 a owl:Class ;
    rdfs:label "Spearphishing Link" ;
    rdfs:subClassOf :T1566,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :Email ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :InboundInternetMailTraffic ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :URL ] ;
    :attack-id "T1566.002" .

:T1566.003 a owl:Class ;
    rdfs:label "Spearphishing Via Service" ;
    rdfs:subClassOf :T1566,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :File ],
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :URL ] ;
    :attack-id "T1566.003" .

:T1567 a owl:Class ;
    rdfs:label "Exfiltration Over Web Service" ;
    rdfs:subClassOf :ExfiltrationTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetWebTraffic ] ;
    :attack-id "T1567" .

:T1567.001 a owl:Class ;
    rdfs:label "Exfiltration to Code Repository" ;
    rdfs:subClassOf :T1567,
        [ a owl:Restriction ;
            owl:onProperty :may-produce ;
            owl:someValuesFrom :OutboundInternetEncryptedRemoteTerminalTraffic ],
        [ a owl:Restriction ;
            owl:onProperty :may-produce ;
            owl:someValuesFrom :OutboundInternetEncryptedWebTraffic ] ;
    :attack-id "T1567.001" .

:T1567.002 a owl:Class ;
    rdfs:label "Exfiltration to Cloud Storage" ;
    rdfs:subClassOf :T1567,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetEncryptedWebTraffic ] ;
    :attack-id "T1567.002" .

:T1568 a owl:Class ;
    rdfs:label "Dynamic Resolution" ;
    rdfs:subClassOf :CommandAndControlTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetDNSLookupTraffic ] ;
    :attack-id "T1568" .

:T1568.001 a owl:Class ;
    rdfs:label "Fast Flux DNS" ;
    rdfs:subClassOf :T1568 ;
    :attack-id "T1568.001" .

:T1568.002 a owl:Class ;
    rdfs:label "Domain Generation Algorithms" ;
    rdfs:subClassOf :T1568 ;
    :attack-id "T1568.002" .

:T1568.003 a owl:Class ;
    rdfs:label "DNS Calculation" ;
    rdfs:subClassOf :T1568 ;
    :attack-id "T1568.003" .

:T1569 a owl:Class ;
    rdfs:label "System Services" ;
    rdfs:subClassOf :ExecutionTechnique ;
    :attack-id "T1569" ;
    :definition "This technique has been deprecated." .

:T1569.001 a owl:Class ;
    rdfs:label "Launchctl" ;
    rdfs:subClassOf :T1569 ;
    :attack-id "T1569.001" .

:T1569.002 a owl:Class ;
    rdfs:label "Service Execution" ;
    rdfs:subClassOf :T1569 ;
    :attack-id "T1569.002" .

:T1570 a owl:Class ;
    rdfs:label "Lateral Tool Transfer" ;
    rdfs:subClassOf :LateralMovementTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :IntranetFileTransferTraffic ] ;
    :attack-id "T1570" .

:T1571 a owl:Class ;
    rdfs:label "Non-Standard Port" ;
    rdfs:subClassOf :CommandAndControlTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetNetworkTraffic ] ;
    :attack-id "T1571" .

:T1572 a owl:Class ;
    rdfs:label "Protocol Tunneling" ;
    rdfs:subClassOf :CommandAndControlTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetNetworkTraffic ] ;
    :attack-id "T1572" .

:T1573 a owl:Class ;
    rdfs:label "Encrypted Channel" ;
    skos:altLabel "Custom Command and Control Protocol",
        "Custom Cryptographic Protocol",
        "Multilayer Encryption" ;
    rdfs:subClassOf :CommandAndControlTechnique,
        [ a owl:Restriction ;
            owl:onProperty :produces ;
            owl:someValuesFrom :OutboundInternetEncryptedTraffic ] ;
    :attack-id "T1573" .

:T1573.001 a owl:Class ;
    rdfs:label "Symmetric Cryptography" ;
    rdfs:subClassOf :T1573,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :OutboundInternetEncryptedTraffic ] ;
    :attack-id "T1573.001" .

:T1573.002 a owl:Class ;
    rdfs:label "Asymmetric Cryptography" ;
    rdfs:subClassOf :T1573,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :OutboundInternetEncryptedTraffic ],
        [ a owl:Restriction ;
            owl:onProperty :may-transfer ;
            owl:someValuesFrom :CertificateFile ] ;
    :attack-id "T1573.002" .

:T1574 a owl:Class ;
    rdfs:label "Hijack Execution Flow" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :PersistenceTechnique,
        :PrivilegeEscalationTechnique ;
    :attack-id "T1574" .

:T1574.001 a owl:Class ;
    rdfs:label "DLL Search Order Hijacking" ;
    rdfs:subClassOf :T1574,
        [ a owl:Restriction ;
            owl:onProperty :may-create ;
            owl:someValuesFrom :SharedLibraryFile ] ;
    :attack-id "T1574.001" .

:T1574.002 a owl:Class ;
    rdfs:label "DLL Side-Loading" ;
    rdfs:subClassOf :T1574,
        [ a owl:Restriction ;
            owl:onProperty :may-create ;
            owl:someValuesFrom :SharedLibraryFile ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :SharedLibraryFile ] ;
    :attack-id "T1574.002" .

:T1574.004 a owl:Class ;
    rdfs:label "Dylib Hijacking" ;
    rdfs:subClassOf :T1574,
        [ a owl:Restriction ;
            owl:onProperty :may-create ;
            owl:someValuesFrom :SharedLibraryFile ],
        [ a owl:Restriction ;
            owl:onProperty :may-modify ;
            owl:someValuesFrom :SharedLibraryFile ] ;
    :attack-id "T1574.004" .

:T1574.005 a owl:Class ;
    rdfs:label "Executable Installer File Permissions Weakness" ;
    rdfs:subClassOf :T1574,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :ServiceApplication ] ;
    :attack-id "T1574.005" .

:T1574.006 a owl:Class ;
    rdfs:label "LD_PRELOAD" ;
    rdfs:subClassOf :T1574,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :OperatingSystemConfigurationFile ] ;
    :attack-id "T1574.006" ;
    :comment "Just modifies the system configuration file /etc/profile, does not appear to modify any other resource per their resources." .

:T1574.007 a owl:Class ;
    rdfs:label "Path Interception by PATH Environment Variable" ;
    rdfs:subClassOf :T1574,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :ExecutableFile ] ;
    :attack-id "T1574.007" .

:T1574.008 a owl:Class ;
    rdfs:label "Path Interception by Search Order Hijacking" ;
    rdfs:subClassOf :T1574,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :ExecutableFile ] ;
    :attack-id "T1574.008" .

:T1574.009 a owl:Class ;
    rdfs:label "Path Interception by Unquoted Path" ;
    rdfs:subClassOf :T1574,
        [ a owl:Restriction ;
            owl:onProperty :creates ;
            owl:someValuesFrom :ExecutableFile ] ;
    :attack-id "T1574.009" .

:T1574.010 a owl:Class ;
    rdfs:label "Services File Permissions Weakness" ;
    skos:altLabel "Service Registry Permissions Weakness" ;
    rdfs:subClassOf :T1574,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :ServiceApplication ] ;
    :attack-id "T1574.010" .

:T1574.011 a owl:Class ;
    rdfs:label "Services Registry Permissions Weakness" ;
    rdfs:subClassOf :T1574,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemConfigurationInitDatabaseRecord ] ;
    :attack-id "T1574.011" .

:T1574.012 a owl:Class ;
    rdfs:label "COR_PROFILER" ;
    rdfs:subClassOf :T1574,
        [ a owl:Restriction ;
            owl:onProperty :adds ;
            owl:someValuesFrom :SharedLibraryFile ],
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :SystemConfigurationDatabaseRecord ] ;
    :attack-id "T1574.012" .

:T1574.013 a owl:Class ;
    rdfs:label "KernelCallbackTable" ;
    rdfs:subClassOf :T1574 ;
    :attack-id "T1574.013" .

:T1578 a owl:Class ;
    rdfs:label "Modify Cloud Compute Infrastructure" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1578" .

:T1578.001 a owl:Class ;
    rdfs:label "Create Snapshot" ;
    rdfs:subClassOf :T1578 ;
    :attack-id "T1578.001" .

:T1578.002 a owl:Class ;
    rdfs:label "Create Cloud Instance" ;
    rdfs:subClassOf :T1578 ;
    :attack-id "T1578.002" .

:T1578.003 a owl:Class ;
    rdfs:label "Delete Cloud Instance" ;
    rdfs:subClassOf :T1578 ;
    :attack-id "T1578.003" .

:T1578.004 a owl:Class ;
    rdfs:label "Revert Cloud Instance" ;
    rdfs:subClassOf :T1578 ;
    :attack-id "T1578.004" .

:T1580 a owl:Class ;
    rdfs:label "Cloud Infrastructure Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique ;
    :attack-id "T1580" .

:T1583 a owl:Class ;
    rdfs:label "Acquire Infrastructure" ;
    rdfs:subClassOf :ResourceDevelopmentTechnique ;
    :attack-id "T1583" .

:T1583.001 a owl:Class ;
    rdfs:label "Domains" ;
    rdfs:subClassOf :T1583 ;
    :attack-id "T1583.001" .

:T1583.002 a owl:Class ;
    rdfs:label "DNS Server" ;
    rdfs:subClassOf :T1583 ;
    :attack-id "T1583.002" .

:T1583.003 a owl:Class ;
    rdfs:label "Virtual Private Server" ;
    rdfs:subClassOf :T1583 ;
    :attack-id "T1583.003" .

:T1583.004 a owl:Class ;
    rdfs:label "Server" ;
    rdfs:subClassOf :T1583 ;
    :attack-id "T1583.004" .

:T1583.005 a owl:Class ;
    rdfs:label "Botnet" ;
    rdfs:subClassOf :T1583 ;
    :attack-id "T1583.005" .

:T1583.006 a owl:Class ;
    rdfs:label "Web Services" ;
    rdfs:subClassOf :T1583 ;
    :attack-id "T1583.006" .

:T1584 a owl:Class ;
    rdfs:label "Compromise Infrastructure" ;
    rdfs:subClassOf :ResourceDevelopmentTechnique ;
    :attack-id "T1584" .

:T1584.001 a owl:Class ;
    rdfs:label "Domains" ;
    rdfs:subClassOf :T1584 ;
    :attack-id "T1584.001" .

:T1584.002 a owl:Class ;
    rdfs:label "DNS Server" ;
    rdfs:subClassOf :T1584 ;
    :attack-id "T1584.002" .

:T1584.003 a owl:Class ;
    rdfs:label "Virtual Private Server" ;
    rdfs:subClassOf :T1584 ;
    :attack-id "T1584.003" .

:T1584.004 a owl:Class ;
    rdfs:label "Server" ;
    rdfs:subClassOf :T1584 ;
    :attack-id "T1584.004" .

:T1584.005 a owl:Class ;
    rdfs:label "Botnet" ;
    rdfs:subClassOf :T1584 ;
    :attack-id "T1584.005" .

:T1584.006 a owl:Class ;
    rdfs:label "Web Services" ;
    rdfs:subClassOf :T1584 ;
    :attack-id "T1584.006" .

:T1585 a owl:Class ;
    rdfs:label "Establish Accounts" ;
    rdfs:subClassOf :ResourceDevelopmentTechnique ;
    :attack-id "T1585" .

:T1585.001 a owl:Class ;
    rdfs:label "Social Media Accounts" ;
    rdfs:subClassOf :T1585 ;
    :attack-id "T1585.001" .

:T1585.002 a owl:Class ;
    rdfs:label "Email Accounts" ;
    rdfs:subClassOf :T1585 ;
    :attack-id "T1585.002" .

:T1586 a owl:Class ;
    rdfs:label "Compromise Accounts" ;
    rdfs:subClassOf :ResourceDevelopmentTechnique ;
    :attack-id "T1586" .

:T1586.001 a owl:Class ;
    rdfs:label "Social Media Accounts" ;
    rdfs:subClassOf :T1586 ;
    :attack-id "T1586.001" .

:T1586.002 a owl:Class ;
    rdfs:label "Email Accounts" ;
    rdfs:subClassOf :T1586 ;
    :attack-id "T1586.002" .

:T1587 a owl:Class ;
    rdfs:label "Develop Capabilities" ;
    rdfs:subClassOf :ResourceDevelopmentTechnique ;
    :attack-id "T1587" .

:T1587.001 a owl:Class ;
    rdfs:label "Malware" ;
    rdfs:subClassOf :T1587 ;
    :attack-id "T1587.001" .

:T1587.002 a owl:Class ;
    rdfs:label "Code Signing Certificates" ;
    rdfs:subClassOf :T1587 ;
    :attack-id "T1587.002" .

:T1587.003 a owl:Class ;
    rdfs:label "Digital Certificates" ;
    rdfs:subClassOf :T1587 ;
    :attack-id "T1587.003" .

:T1587.004 a owl:Class ;
    rdfs:label "Exploits" ;
    rdfs:subClassOf :T1587 ;
    :attack-id "T1587.004" .

:T1588 a owl:Class ;
    rdfs:label "Obtain Capabilities" ;
    rdfs:subClassOf :ResourceDevelopmentTechnique ;
    :attack-id "T1588" .

:T1588.001 a owl:Class ;
    rdfs:label "Malware" ;
    rdfs:subClassOf :T1588 ;
    :attack-id "T1588.001" .

:T1588.002 a owl:Class ;
    rdfs:label "Tool" ;
    rdfs:subClassOf :T1588 ;
    :attack-id "T1588.002" .

:T1588.003 a owl:Class ;
    rdfs:label "Code Signing Certificates" ;
    rdfs:subClassOf :T1588 ;
    :attack-id "T1588.003" .

:T1588.004 a owl:Class ;
    rdfs:label "Digital Certificates" ;
    rdfs:subClassOf :T1588 ;
    :attack-id "T1588.004" .

:T1588.005 a owl:Class ;
    rdfs:label "Exploits" ;
    rdfs:subClassOf :T1588 ;
    :attack-id "T1588.005" .

:T1588.006 a owl:Class ;
    rdfs:label "Vulnerabilities" ;
    rdfs:subClassOf :T1588 ;
    :attack-id "T1588.006" .

:T1589 a owl:Class ;
    rdfs:label "Gather Victim Identity Information" ;
    rdfs:subClassOf :ReconnaissanceTechnique ;
    :attack-id "T1589" .

:T1589.001 a owl:Class ;
    rdfs:label "Credentials" ;
    rdfs:subClassOf :T1589 ;
    :attack-id "T1589.001" .

:T1589.002 a owl:Class ;
    rdfs:label "Email Addresses" ;
    rdfs:subClassOf :T1589 ;
    :attack-id "T1589.002" .

:T1589.003 a owl:Class ;
    rdfs:label "Employee Names" ;
    rdfs:subClassOf :T1589 ;
    :attack-id "T1589.003" .

:T1590 a owl:Class ;
    rdfs:label "Gather Victim Network Information" ;
    rdfs:subClassOf :ReconnaissanceTechnique ;
    :attack-id "T1590" .

:T1590.001 a owl:Class ;
    rdfs:label "Domain Properties" ;
    rdfs:subClassOf :T1590 ;
    :attack-id "T1590.001" .

:T1590.002 a owl:Class ;
    rdfs:label "DNS" ;
    rdfs:subClassOf :T1590 ;
    :attack-id "T1590.002" .

:T1590.003 a owl:Class ;
    rdfs:label "Network Trust Dependencies" ;
    rdfs:subClassOf :T1590 ;
    :attack-id "T1590.003" .

:T1590.004 a owl:Class ;
    rdfs:label "Network Topology" ;
    rdfs:subClassOf :T1590 ;
    :attack-id "T1590.004" .

:T1590.005 a owl:Class ;
    rdfs:label "IP Addresses" ;
    rdfs:subClassOf :T1590 ;
    :attack-id "T1590.005" .

:T1590.006 a owl:Class ;
    rdfs:label "Network Security Appliances" ;
    rdfs:subClassOf :T1590 ;
    :attack-id "T1590.006" .

:T1591 a owl:Class ;
    rdfs:label "Gather Victim Org Information" ;
    rdfs:subClassOf :ReconnaissanceTechnique ;
    :attack-id "T1591" .

:T1591.001 a owl:Class ;
    rdfs:label "Determine Physical Locations" ;
    rdfs:subClassOf :T1591 ;
    :attack-id "T1591.001" .

:T1591.002 a owl:Class ;
    rdfs:label "Business Relationships" ;
    rdfs:subClassOf :T1591 ;
    :attack-id "T1591.002" .

:T1591.003 a owl:Class ;
    rdfs:label "Identify Business Tempo" ;
    rdfs:subClassOf :T1591 ;
    :attack-id "T1591.003" .

:T1591.004 a owl:Class ;
    rdfs:label "Identify Roles" ;
    rdfs:subClassOf :T1591 ;
    :attack-id "T1591.004" .

:T1592 a owl:Class ;
    rdfs:label "Gather Victim Host Information" ;
    rdfs:subClassOf :ReconnaissanceTechnique ;
    :attack-id "T1592" .

:T1592.001 a owl:Class ;
    rdfs:label "Hardware" ;
    rdfs:subClassOf :T1592 ;
    :attack-id "T1592.001" .

:T1592.002 a owl:Class ;
    rdfs:label "Software" ;
    rdfs:subClassOf :T1592 ;
    :attack-id "T1592.002" .

:T1592.003 a owl:Class ;
    rdfs:label "Firmware" ;
    rdfs:subClassOf :T1592 ;
    :attack-id "T1592.003" .

:T1592.004 a owl:Class ;
    rdfs:label "Client Configurations" ;
    rdfs:subClassOf :T1592 ;
    :attack-id "T1592.004" .

:T1593 a owl:Class ;
    rdfs:label "Search Open Websites/Domains" ;
    rdfs:subClassOf :ReconnaissanceTechnique ;
    :attack-id "T1593" .

:T1593.001 a owl:Class ;
    rdfs:label "Social Media" ;
    rdfs:subClassOf :T1593 ;
    :attack-id "T1593.001" .

:T1593.002 a owl:Class ;
    rdfs:label "Search Engines" ;
    rdfs:subClassOf :T1593 ;
    :attack-id "T1593.002" .

:T1594 a owl:Class ;
    rdfs:label "Search Victim-Owned Websites" ;
    rdfs:subClassOf :ReconnaissanceTechnique ;
    :attack-id "T1594" .

:T1595 a owl:Class ;
    rdfs:label "Active Scanning" ;
    rdfs:subClassOf :ReconnaissanceTechnique ;
    :attack-id "T1595" .

:T1595.001 a owl:Class ;
    rdfs:label "Scanning IP Blocks" ;
    rdfs:subClassOf :T1595 ;
    :attack-id "T1595.001" .

:T1595.002 a owl:Class ;
    rdfs:label "Vulnerability Scanning" ;
    rdfs:subClassOf :T1595 ;
    :attack-id "T1595.002" .

:T1595.003 a owl:Class ;
    rdfs:label "Wordlist Scanning" ;
    rdfs:subClassOf :T1595 ;
    :attack-id "T1595.003" .

:T1596 a owl:Class ;
    rdfs:label "Search Open Technical Databases" ;
    rdfs:subClassOf :ReconnaissanceTechnique ;
    :attack-id "T1596" .

:T1596.001 a owl:Class ;
    rdfs:label "DNS/Passive DNS" ;
    rdfs:subClassOf :T1596 ;
    :attack-id "T1596.001" .

:T1596.002 a owl:Class ;
    rdfs:label "WHOIS" ;
    rdfs:subClassOf :T1596 ;
    :attack-id "T1596.002" .

:T1596.003 a owl:Class ;
    rdfs:label "Digital Certificates" ;
    rdfs:subClassOf :T1596 ;
    :attack-id "T1596.003" .

:T1596.004 a owl:Class ;
    rdfs:label "CDNs" ;
    rdfs:subClassOf :T1596 ;
    :attack-id "T1596.004" .

:T1596.005 a owl:Class ;
    rdfs:label "Scan Databases" ;
    rdfs:subClassOf :T1596 ;
    :attack-id "T1596.005" .

:T1597 a owl:Class ;
    rdfs:label "Search Closed Sources" ;
    rdfs:subClassOf :ReconnaissanceTechnique ;
    :attack-id "T1597" .

:T1597.001 a owl:Class ;
    rdfs:label "Threat Intel Vendors" ;
    rdfs:subClassOf :T1597 ;
    :attack-id "T1597.001" .

:T1597.002 a owl:Class ;
    rdfs:label "Purchase Technical Data" ;
    rdfs:subClassOf :T1597 ;
    :attack-id "T1597.002" .

:T1598 a owl:Class ;
    rdfs:label "Phishing for Information" ;
    rdfs:subClassOf :ReconnaissanceTechnique ;
    :attack-id "T1598" .

:T1598.001 a owl:Class ;
    rdfs:label "Spearphishing Service" ;
    rdfs:subClassOf :T1598 ;
    :attack-id "T1598.001" .

:T1598.002 a owl:Class ;
    rdfs:label "Spearphishing Attachment" ;
    rdfs:subClassOf :T1598 ;
    :attack-id "T1598.002" .

:T1598.003 a owl:Class ;
    rdfs:label "Spearphishing Link" ;
    rdfs:subClassOf :T1598 ;
    :attack-id "T1598.003" .

:T1599 a owl:Class ;
    rdfs:label "Network Boundary Bridging" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1599" .

:T1599.001 a owl:Class ;
    rdfs:label "Network Address Translation Traversal" ;
    rdfs:subClassOf :T1599 ;
    :attack-id "T1599.001" .

:T1600 a owl:Class ;
    rdfs:label "Weaken Encryption" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1600" .

:T1600.001 a owl:Class ;
    rdfs:label "Reduce Key Space" ;
    rdfs:subClassOf :T1600 ;
    :attack-id "T1600.001" .

:T1600.002 a owl:Class ;
    rdfs:label "Disable Crypto Hardware" ;
    rdfs:subClassOf :T1600 ;
    :attack-id "T1600.002" .

:T1601 a owl:Class ;
    rdfs:label "Modify System Image" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1601" .

:T1601.001 a owl:Class ;
    rdfs:label "Patch System Image" ;
    rdfs:subClassOf :T1601 ;
    :attack-id "T1601.001" .

:T1601.002 a owl:Class ;
    rdfs:label "Downgrade System Image" ;
    rdfs:subClassOf :T1601 ;
    :attack-id "T1601.002" .

:T1602 a owl:Class ;
    rdfs:label "Data from Configuration Repository" ;
    rdfs:subClassOf :CollectionTechnique ;
    :attack-id "T1602" .

:T1602.001 a owl:Class ;
    rdfs:label "SNMP (MIB Dump)" ;
    rdfs:subClassOf :T1602 ;
    :attack-id "T1602.001" .

:T1602.002 a owl:Class ;
    rdfs:label "Network Device Configuration Dump" ;
    rdfs:subClassOf :T1602 ;
    :attack-id "T1602.002" .

:T1606 a owl:Class ;
    rdfs:label "Forge Web Credentials" ;
    rdfs:subClassOf :CredentialAccessTechnique ;
    :attack-id "T1606" .

:T1606.001 a owl:Class ;
    rdfs:label "Web Cookies" ;
    rdfs:subClassOf :T1606 ;
    :attack-id "T1606.001" .

:T1606.002 a owl:Class ;
    rdfs:label "SAML Tokens" ;
    rdfs:subClassOf :T1606 ;
    :attack-id "T1606.002" .

:T1608 a owl:Class ;
    rdfs:label "Stage Capabilities" ;
    rdfs:subClassOf :ResourceDevelopmentTechnique ;
    :attack-id "T1608" .

:T1608.001 a owl:Class ;
    rdfs:label "Upload Malware" ;
    rdfs:subClassOf :T1608 ;
    :attack-id "T1608.001" .

:T1608.002 a owl:Class ;
    rdfs:label "Upload Tool" ;
    rdfs:subClassOf :T1608 ;
    :attack-id "T1608.002" .

:T1608.003 a owl:Class ;
    rdfs:label "Install Digital Certificate" ;
    rdfs:subClassOf :T1608 ;
    :attack-id "T1608.003" .

:T1608.004 a owl:Class ;
    rdfs:label "Drive-by Target" ;
    rdfs:subClassOf :T1608 ;
    :attack-id "T1608.004" .

:T1608.005 a owl:Class ;
    rdfs:label "Link Target" ;
    rdfs:subClassOf :T1608 ;
    :attack-id "T1608.005" .

:T1609 a owl:Class ;
    rdfs:label "Container Administration Command" ;
    rdfs:subClassOf :ExecutionTechnique ;
    :attack-id "T1609" .

:T1610 a owl:Class ;
    rdfs:label "Deploy Container" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :ExecutionTechnique ;
    :attack-id "T1610" .

:T1611 a owl:Class ;
    rdfs:label "Escape to Host" ;
    rdfs:subClassOf :PrivilegeEscalationTechnique ;
    :attack-id "T1611" .

:T1612 a owl:Class ;
    rdfs:label "Build Image on Host" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1612" .

:T1613 a owl:Class ;
    rdfs:label "Container and Resource Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique ;
    :attack-id "T1613" .

:T1614 a owl:Class ;
    rdfs:label "System Location Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :ConfigurationResource ] ;
    :attack-id "T1614" .

:T1614.001 a owl:Class ;
    rdfs:label "System Language Discovery" ;
    rdfs:subClassOf :T1614,
        [ a owl:Restriction ;
            owl:onProperty :queries ;
            owl:someValuesFrom :SystemConfigurationDatabase ] ;
    :attack-id "T1614.001" .

:T1615 a owl:Class ;
    rdfs:label "Group Policy Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique,
        [ a owl:Restriction ;
            owl:onProperty :reads ;
            owl:someValuesFrom :GroupPolicy ] ;
    :attack-id "T1615" .

:T1619 a owl:Class ;
    rdfs:label "Cloud Storage Object Discovery" ;
    rdfs:subClassOf :DiscoveryTechnique,
        [ a owl:Restriction ;
            owl:onProperty :accesses ;
            owl:someValuesFrom :CloudStorage ] ;
    :attack-id "T1619" .

:T1620 a owl:Class ;
    rdfs:label "Reflective Code Loading" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :ProcessSegment ] ;
    :attack-id "T1620" .

:T1621 a owl:Class ;
    rdfs:label "Multi-Factor Authentication Request Generation" ;
    rdfs:subClassOf :CredentialAccessTechnique ;
    :attack-id "T1621" .

:T1622 a owl:Class ;
    rdfs:label "Debugger Evasion" ;
    rdfs:subClassOf :DefenseEvasionTechnique,
        :DiscoveryTechnique ;
    :attack-id "T1622" .

:T1647 a owl:Class ;
    rdfs:label "Plist File Modification" ;
    rdfs:subClassOf :DefenseEvasionTechnique ;
    :attack-id "T1647" .

:t-SNEClustering a owl:Class ;
    rdfs:label "t-SNE Clustering" ;
    rdfs:subClassOf :Projection-basedClustering ;
    :definition "t-distributed Stochastic Neighbor Embedding (t-SNE) is a statistical method for visualizing high-dimensional data by giving each datapoint a location in a two or three-dimensional map." ;
    :kb-article """## How it works
_TBD enter text here for how the thing works_

## Considerations 

## References 
https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding""" .

:TabletComputer a owl:Class ;
    rdfs:label "Tablet Computer" ;
    skos:altLabel "Tablet" ;
    rdfs:subClassOf :PersonalComputer ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Tablet_computer> ;
    :definition "A tablet computer, commonly shortened to tablet, is a mobile device, typically with a mobile operating system and touchscreen display processing circuitry, and a rechargeable battery in a single, thin and flat package. Tablets, being computers, do what other personal computers do, but lack some input/output (I/O) abilities that others have. Modern tablets largely resemble modern smartphones, the only differences being that tablets are relatively larger than smartphones, with screens 7 inches (18 cm) or larger, measured diagonally, and may not support access to a cellular network." .

:TabuAlgorithm a owl:Class ;
    rdfs:label "Tabu Algorithm" ;
    rdfs:subClassOf :MetaheuristicAlgorithm .

:TargetAudience a owl:Class ;
    rdfs:label "Target Audience" ;
    rdfs:subClassOf :D3FENDUseCaseThing .

:TaskSchedule a owl:Class ;
    rdfs:label "Task Schedule" ;
    rdfs:subClassOf :DigitalArtifact ;
    :definition "A task schedule is a specification of tasks to be executed at particular times or time intervals.  The schedule is a plan that enacted by a task scheduling process." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Cron>,
        <http://dbpedia.org/resource/Windows_Task_Scheduler> .

:TaskSchedulerProcess a owl:Class ;
    rdfs:label "Task Scheduler Process" ;
    rdfs:subClassOf :OperatingSystemProcess ;
    :definition "A task scheduler process is an operating system process that executes scheduled tasks (time-scheduling in the sense of wall clock time; not operating system scheduling of processes for multitasking)." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Cron>,
        <http://dbpedia.org/resource/Windows_Task_Scheduler> .

:TaskSchedulerSoftware a owl:Class ;
    rdfs:label "Task Scheduler Software" ;
    rdfs:subClassOf :SystemServiceSoftware ;
    :definition "A task scheduler software is operating system software that when run executes scheduled tasks (time-scheduling in the sense of wall clock time; not operating system scheduling of processes for multitasking). Processes running such software are task scheduler processes." ;
    rdfs:seeAlso "Task Scheduler Process" .

:Technique a owl:Class ;
    rdfs:label "Technique" ;
    rdfs:subClassOf :D3FENDThing,
        [ a owl:Restriction ;
            owl:onProperty :associated-with ;
            owl:someValuesFrom :DigitalArtifact ],
        [ a owl:Restriction ;
            owl:onProperty :implemented-by ;
            owl:someValuesFrom :Procedure ] .

:TechniqueReference a owl:Class ;
    rdfs:label "Technique Reference" ;
    rdfs:subClassOf :D3FENDThing,
        [ a owl:Restriction ;
            owl:onProperty :has-link ;
            owl:someValuesFrom xsd:anyURI ],
        [ a owl:Restriction ;
            owl:onProperty :kb-reference-of ;
            owl:someValuesFrom :DefensiveTechnique ],
        [ a owl:Restriction ;
            owl:onProperty :kb-reference-title ;
            owl:someValuesFrom xsd:string ] ;
    :definition "A reference used to develop KB articles." ;
    :pref-label "Technique Reference" .

:TemporalDifferenceLearning a owl:Class ;
    rdfs:label "Temporal Difference Learning" ;
    rdfs:subClassOf :Model-freeReinforcementLearning ;
    rdfs:comment "Temporal difference (TD) learning refers to a class of model-free reinforcement learning methods which learn by bootstrapping from the current estimate of the value function." ;
    :definition "Temporal Difference Learning (TD Learning) is a prediction-based method used in reinforcement learning, an approach in machine learning. It combines ideas from both Monte Carlo methods and dynamic programming to estimate the optimal policy and value function in an environment. This learning algorithm differs from the traditional approach in that it updates its estimates based on the difference, or \"temporal difference\", between value estimates at different times." ;
    :kb-article """## How it works
TD Learning is unique in that it learns directly from episodes of experience without requiring a model of the environment. An "episode" is a sequence of states, actions, and rewards, from the start to the termination of an interaction in the environment. 

At each time step, the agent makes a prediction of the total future reward it will get, and then it makes another prediction at the next time step. The "temporal difference" is the difference between the prediction at the current time step and the prediction at the next time step, plus the reward actually received at the next time step. This difference is used to update the prediction at the current time step. 

This process repeats until the agent's predictions accurately estimate the total future reward, at which point the value function and policy are optimal. The agent then follows this policy to interact with the environment.

## Considerations 
- **Incomplete Sampling**: Since TD Learning is a model-free approach, it learns from actual experiences, which means that it's vulnerable to incomplete or inaccurate sampling. If some states or transitions are not sufficiently explored, the learning process may result in a sub-optimal policy.
- **Learning Rate Selection**: The speed at which learning occurs is highly dependent on the learning rate. Selecting an inappropriate learning rate may cause the algorithm to converge slowly or not at all.
- **Reward Function Design**: Designing a suitable reward function is critical. Poorly designed rewards can lead to unintended behaviors.
- **Exploration vs Exploitation Trade-off**: A balance must be struck between exploiting known good actions and exploring new ones to improve long-term rewards.

## References 
1. Sutton, Richard S., and Andrew G. Barto. "Reinforcement learning: An introduction." (2018). [Link](http://incompleteideas.net/book/the-book.html)
2. Van Seijen, H., Van Hasselt, H., Whiteson, S., & Wiering, M. (2009). A theoretical and empirical analysis of Expected Sarsa. [Link](https://ieeexplore.ieee.org/document/5342407)
3. Chris Watkins' PhD Thesis: "Learning from Delayed Rewards" [Link](http://www.cs.rhul.ac.uk/~chrisw/new_thesis.pdf)""" .

:TemporalLogic a owl:Class ;
    rdfs:label "Temporal Logic" ;
    rdfs:subClassOf :ModalLogic .

:TerminateProcess a owl:Class ;
    rdfs:label "Terminate Process" ;
    rdfs:subClassOf :SystemCall,
        [ a owl:Restriction ;
            owl:onProperty :terminates ;
            owl:someValuesFrom :Process ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Exit_(system_call)> ;
    :definition "On many computer operating systems, a computer process terminates its execution by making an exit system call. More generally, an exit in a multithreading environment means that a thread of execution has stopped running. For resource management, the operating system reclaims resources (memory, files, etc.) that were used by the process. The process is said to be a dead process after it terminates." .

:TertiaryStorage a owl:Class ;
    rdfs:label "Tertiary Storage" ;
    rdfs:subClassOf :HardwareDevice,
        :MemoryBlock,
        :SecondaryStorage ;
    rdfs:isDefinedBy "https://en.wikipedia.org/wiki/Computer_data_storage#Tertiary_storage" ;
    :definition "Tertiary storage or tertiary memory is memory primarily used for archiving rarely accessed information. It is primarily useful for extraordinarily large data stores. Typical examples include tape libraries and optical jukeboxes." .

:TestExecutionTool a owl:Class ;
    rdfs:label "Test Execution Tool" ;
    skos:altLabel "Test Execution Engine",
        "Test Executive",
        "Test Manager" ;
    rdfs:subClassOf :DeveloperApplication ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Test_execution_engine> ;
    :definition "A test execution tool is a type of software used to test software, hardware or complete systems.  Synonyms of test execution tool include test execution engine, test executive, test manager, test sequencer.  Two common forms in which a test execution engine may appear are as a: (a) module of a test software suite (test bench) or an integrated development environment, or (b) stand-alone application software." .

:TFTPNetworkTraffic a owl:Class ;
    rdfs:label "TFTP Network Traffic" ;
    rdfs:subClassOf :NetworkTraffic ;
    :definition "TFTP Network Traffic is network traffic typically used to automatically transfer configuration or boot files between machines." .

:TFTPServer a owl:Class ;
    rdfs:label "TFTP Server" ;
    rdfs:subClassOf :Server ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Trivial_File_Transfer_Protocol> ;
    :definition "Trivial File Transfer Protocol (TFTP) is a simple file transfer protocol, typically used to automatically transfer configuration or boot files between machines.  It is used where user authentication and directory visibility are not required." .

:ThinClientComputer a owl:Class ;
    rdfs:label "Thin Client Computer" ;
    rdfs:subClassOf :SharedComputer ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Thin_client> ;
    :definition "A thin client is a lightweight computer that has been optimized for establishing a remote connection with a server-based computing environment. The server does most of the work, which can include launching software programs, performing calculations, and storing data. This contrasts with a fat client or a conventional personal computer; the former is also intended for working in a client-server model but has significant local processing power, while the latter aims to perform its function mostly locally. Thin clients are shared computers as the thin client's computing resources are provided by a remote server." .

:Thread a owl:Class ;
    rdfs:label "Thread" ;
    rdfs:subClassOf :DigitalArtifact .

:ThreadStartFunction a owl:Class ;
    rdfs:label "Thread Start Function" ;
    rdfs:subClassOf :Subroutine,
        [ a owl:Restriction ;
            owl:onProperty :executes ;
            owl:someValuesFrom :Thread ] ;
    :definition "A function which invokes a create thread system call." .

:TicketGrantingTicket a owl:Class ;
    rdfs:label "Ticket Granting Ticket" ;
    skos:altLabel "Golden Ticket" ;
    rdfs:subClassOf :AccessToken ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Ticket_Granting_Ticket> ;
    :definition "In some computer security systems, a Ticket Granting Ticket or Ticket to Get Tickets (TGT) is a small, encrypted identification file with a limited validity period. After authentication, this file is granted to a user for data traffic protection by the key distribution center (KDC) subsystem of authentication services such as Kerberos. The TGT file contains the session key, its expiration date, and the user's IP address, which protects the user from man-in-the-middle attacks. The TGT is used to obtain a service ticket from Ticket Granting Service (TGS). User is granted access to network services only after this service ticket is provided." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Charlie_and_the_Chocolate_Factory> .

:TimeSeriesAnalysis a owl:Class ;
    rdfs:label "Time Series Analysis" ;
    rdfs:subClassOf :StatisticalMethod .

:TPMBootIntegrity a owl:Class,
        owl:NamedIndividual,
        :PlatformHardening ;
    rdfs:label "TPM Boot Integrity" ;
    rdfs:subClassOf :PlatformHardening ;
    :d3fend-id "D3-TBI" ;
    :definition "Assuring the integrity of a platform by demonstrating that the boot process starts from a trusted combination of hardware and software and continues until the operating system has fully booted and applications are running.  Sometimes called Static Root of Trust Measurement (STRM)." ;
    :kb-article """## How it works
During the boot process, the BIOS boot block (which with this defense enabled, is the Core Root of Trust for Measurement) measures boot components (firmware, ROM). The TPM hashes those measurements and stores the hashes in Platform Configuration Registers (PCRs).  Upon a subsequent boot, these hashes are provided to a verifier which compares the stored measurements to the new boot measurements. Integrity of the boot components is assured if they match.

Attestation of the secure boot occurs when a verifying entity requests a Quote which is a concatenation of the requested PCR values, hashed and signed by the TPM's unique RSA key.  The TPM signature is trusted because the private key is stored securely in hardware and never leaves the TPM.

## Considerations

* The TPM does not perform the follow-on actions of acting on the PCR value information, it just provides the PCR stored information.
* The current version of TPM is 2.0.; most existing implementations use TPM 1.2.

## Citations
[1] [TPM 2.0 Library](https://trustedcomputinggroup.org/resource/tpm-library-specification/)
[2] [TCG Trusted Attestation Protocol (TAP) Use Cases for TPM Families 1.2 and 2.0 and DICE](https://trustedcomputinggroup.org/wp-content/uploads/TCG_TNC_TAP_Use_Cases_v1r0p35_published.pdf)""" ;
    :kb-reference <http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-TPM2.0LibrarySpecification_TrustedComputingGroup,Incorporated>,
        :Reference-TCGTrustedAttestationProtocolUseCasesForTPMFamilies1.2And2.0AndDICE,
        :Reference-TrustedAttestationProtocolUseCases ;
    :synonym "Static Root of Trust Measurement",
        "STRM" .

:TraceProcess a owl:Class ;
    rdfs:label "Trace Process" ;
    rdfs:subClassOf :SystemCall,
        [ a owl:Restriction ;
            owl:onProperty :monitors ;
            owl:someValuesFrom :Process ] ;
    :definition "A trace system call provides a means by which one process (the \"tracer\") may observe and control the execution of another process (the \"tracee\"), and examine and change the tracee's memory and registers. It is primarily used to implement breakpoint debugging and system call tracing." ;
    rdfs:seeAlso <https://dbpedia.org/resource/Ptrace>,
        <https://linux.die.net/man/2/ptrace> .

:TrajectoryPrediction a owl:Class ;
    rdfs:label "Trajectory Prediction" ;
    rdfs:subClassOf :Forecasting .

:TransferAgentAuthentication a :MessageHardening,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "Transfer Agent Authentication" ;
    rdfs:subClassOf :MessageHardening ;
    :d3fend-id "D3-TAAN" ;
    :definition "Validating that server components of a messaging infrastructure are authorized to send a particular message." ;
    :kb-article """## How it works
Transfer Agent Authentication can be accomplished in different ways for depending on the protocol. In Email,  Sender Policy Framework (SPF), Domain Key Identified Email (DKIM) or Domain-based Message Authentication Reporting and Conformance (DMARC) to validate sender domain ownership.

### SPF
SPF protocol allows for mail domain owners to specify the mail servers they use when sending email. SPF requires the use of SPF records published in the Domain Name System (DNS). The records record the authorized IPs for email senders. SPF uses the return-path address for domain IP identification. Email that is forwarded may cause the return-path validation problems.
### DKIM
DKIM also uses a record entry in DNS for authentication but does not rely on the simple return-path for validation. A signature header is added to email and encryption is used for security. This adds an additional layer of complexity and requires that DKIM servers be configured identified cryptographic signatures. The additional complexity results in a validation process that can survive complex routing of emails.

### DMARC
DMARC is an email policy and authentication protocol that seeks to ensure that the "From" field of emails is not spoofed. DMARC makes use of both SPF records and DKIM published key validation. DMARC also has a decision policy framework, contained in a DMARC record, for handling of rejected email. The DMARC framework also updates DMARC domains with authentication statues for allowed senders of that domain.

## Considerations
- Additional work is required to ensure that all SPF, DKIM and DMARC records are current and up to date.
- Maintenance of DKIM signing keys is needed.
- Using SPF without DKIM and DMARC verifies the Return-Path domain however does not prevent spoofing of the displayed From: address.
- Parts of an email that are not signed or verified by email authentication methods, such as the message body or the header To: and Subject: fields, can be altered or modified.
- Email message authentication does not replace the need to do email content analysis since executables, attachments, or links or other parts of the email beyond the sender domain are not verified.""" ;
    :kb-reference :Reference-DomainKeysIdentifiedMail-Signatures-IETF,
        :Reference-RFC7208-SenderPolicyFramework-SPF-ForAuthorizingUseOfDomainsInEmail-IETF,
        :Reference-RFC7489-Domain-basedMessageAuthentication-Reporting-AndConformance-DMARC .

:TransferLearning a owl:Class ;
    rdfs:label "Transfer Learning" ;
    rdfs:subClassOf :MachineLearning ;
    :definition "Transfer Learning is a machine learning technique where a pre-trained model, typically trained on a large dataset, is used as the starting point for a similar problem. It allows us to leverage existing models and apply their learning to new, but related tasks, thereby saving time, computational resources, and often achieving better performance." ;
    :kb-article """## How it works
In transfer learning, the knowledge gained from a prior task is utilized to solve a new, but related problem. This is done by taking a model that has been trained on one problem, and re-purposing it on a second related task. 

For example, in the case of deep learning models, neural networks with millions of parameters can be trained on large datasets, such as ImageNet for image classification tasks. Once the model has been trained, instead of starting from scratch, the learned weights can be used as the initialization for training the model on a new task. This is particularly useful for tasks where the available dataset is not very large, as transfer learning can mitigate the risks of overfitting. 

There are different strategies in transfer learning such as fine-tuning, in which the model's weights are tweaked from their pre-trained state to better adapt to the new problem, and feature extraction, where the pre-trained network's representations are used as features for the new task.

## Considerations 

- **Data similarity:** Transfer learning works best when the source and target tasks are related. If the tasks are vastly different, transfer learning may not provide a significant benefit.

- **Amount of data:** While transfer learning can help when there is a lack of data, there still needs to be enough data in the target task to effectively fine-tune the model.

- **Complexity of the task:** The complexity of the new task should be considered. If the new task is simpler, it might be beneficial to freeze some of the earlier layers of the pre-trained model to prevent overfitting.

- **Computational resources:** Although transfer learning generally reduces the need for extensive computational resources, it still requires a significant amount of processing power, especially when fine-tuning large pre-trained models.

## References 

1. [Sebastian Ruder, "An Overview of Multi-Task Learning in Deep Neural Networks", arXiv, 2017.](https://arxiv.org/abs/1706.05098)
2. [Tomas Mikolov, et al., "Efficient Estimation of Word Representations in Vector Space", arXiv, 2013.](https://arxiv.org/abs/1301.3781)
3. [Yoshua Bengio, "Deep Learning of Representations for Unsupervised and Transfer Learning", Proceedings of ICML Workshop on Unsupervised and Transfer Learning, 2012.](http://proceedings.mlr.press/v27/bengio12a.html)
4. [Ian Goodfellow, Yoshua Bengio, Aaron Courville, "Deep Learning", MIT Press, 2016.](http://www.deeplearningbook.org/)""" ;
    rdfs:seeAlso "https://arxiv.org/abs/1808.01974",
        "https://arxiv.org/abs/1911.02685",
        "https://journalofbigdata.springeropen.com/articles/10.1186/s40537-016-0043-6" .

:Transformer-basedLearning a owl:Class ;
    rdfs:label "Transformer-based Learning" ;
    rdfs:subClassOf :MachineLearning .

:Transformer-XL a owl:Class ;
    rdfs:label "Transformer-XL" ;
    rdfs:subClassOf :Transformer-basedLearning .

:TranslationLookasideBuffer a owl:Class ;
    rdfs:label "Translation Lookaside Buffer" ;
    rdfs:subClassOf :MemoryManagementUnitComponent ;
    rdfs:isDefinedBy "https://dbpedia.org/page/Translation_lookaside_buffer" ;
    :definition "A translation lookaside buffer (TLB) is a memory cache that is used to reduce the time taken to access a user memory location. It is a part of the chip's memory-management unit (MMU)." .

:TransportLink a owl:Class ;
    rdfs:label "Transport Link" ;
    rdfs:subClassOf :LogicalLink .

:TrimmedMean a owl:Class ;
    rdfs:label "Trimmed Mean" ;
    rdfs:subClassOf :CentralTendency .

:TrustStore a owl:Class ;
    rdfs:label "Trust Store" ;
    rdfs:subClassOf :DigitalArtifact ;
    :definition "Stores public information necessary to determine if another party can be trusted." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Public_key_certificate>,
        <https://www.educative.io/edpresso/keystore-vs-truststore> ;
    :todo "Not sure in practice we need this abstraction... what is the trust store that is not a certificate trust store?  Or was it to distinguish between standard CA PKI truststores and other non-SSL schemes?" .

:UncertaintySampling a owl:Class ;
    rdfs:label "Uncertainty Sampling" ;
    rdfs:subClassOf :ActiveLearning ;
    :definition "Active Learning: Uncertainty Sampling is a subset of machine learning where the learning algorithm selectively queries the user (or some other information source) to obtain labels for data points it finds difficult to predict. It employs a strategy of selecting the data points where the model has the maximum uncertainty or where the outcome prediction is least confident." ;
    :kb-article """## How it works
Uncertainty Sampling works by having the model predict the class label of each instance in the unlabelled dataset and then determining the confidence of these predictions. The instances where the model's predictions are the least confident (most uncertain) are selected for labeling. These selected instances are then labeled by an "oracle" (which could be a human expert or another reliable source), and these newly labeled instances are added to the training dataset. The model is then retrained with this updated training dataset, which ideally improves its performance.

This approach is based on the intuition that the instances that a model is least confident about are those from which it stands to learn the most. Therefore, obtaining the correct labels for these instances will provide the most informational value for the learning process, reducing the need for a large amount of labeled data and thus making the learning process more efficient.

## Considerations 
- **Efficiency of Oracle**: Uncertainty Sampling relies on an oracle to provide labels for selected data points. If the oracle is slow or expensive, this could be a bottleneck for the process.
- **Model Bias**: If the model's uncertainty does not reflect the true difficulty of labeling, this approach could be less effective.
- **Redundancy**: There's a risk of asking the oracle to label similar or nearly identical instances repeatedly, leading to redundant information.
- **Edge Cases**: Uncertainty Sampling may overemphasize edge cases which are inherently more difficult for the model to predict. 

## References 
1. Settles, B. (2010). Active Learning Literature Survey. Computer Sciences Technical Report 1648, University of Wisconsin–Madison. [Link](http://burrsettles.com/pub/settles.activelearning.pdf)
2. Lewis, D. D., & Gale, W. A. (1994). A sequential algorithm for training text classifiers. In Proceedings of the 17th annual international ACM SIGIR conference on Research and development in information retrieval (pp. 3-12). Springer-Verlag New York, Inc.. [Link](https://dl.acm.org/doi/10.5555/188490.188495)
3. Nguyen, H. T., & Smeulders, A. (2004, May). Active learning using pre-clustering. In Proceedings of the twenty-first international conference on Machine learning (pp. 79-86). [Link](https://dl.acm.org/doi/10.5555/1015330.1015425)""" .

:UnitTestExecutionTool a owl:Class ;
    rdfs:label "Unit Test Execution Tool" ;
    rdfs:subClassOf :TestExecutionTool ;
    :definition "An unit test execution tool automatically performs unit testing.  Unit testing is a software testing method by which individual units of source code are tested to determine whether they are fit for use.  Unit test execution tools work with sets of one or more computer program modules together with associated control data, usage procedures, and operating procedures. This contrasts with integration testing, which tests inter-unit dependencies and the modules as a group." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Unit_testing> .

:UnixHardLink a owl:Class ;
    rdfs:label "Unix Hard Link" ;
    rdfs:subClassOf :HardLink,
        :UnixLink ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Hard_link> ;
    :definition "A Unix hard link is a hard link on a Unix file system." .

:UnixLink a owl:Class ;
    rdfs:label "Unix Link" ;
    rdfs:subClassOf :FileSystemLink ;
    :definition "A Unix link is a file link in a Unix file system." .

:UnsupervisedLearning a owl:Class ;
    rdfs:label "Unsupervised Learning" ;
    rdfs:subClassOf :MachineLearning ;
    :definition "Unsupervised Learning is a type of machine learning that infers patterns from a dataset without reference to known or labeled outcomes. The goal is to model the underlying structure or distribution in the data to learn more about it, rather than for the prediction of a particular outcome. Examples of unsupervised learning include clustering, dimensionality reduction, and association rule mining." ;
    :kb-abstract """## How it works
Unsupervised learning works by modeling the underlying structure or distribution in the data without relying on explicit labels. The algorithm is exposed to unlabelled data and is tasked with identifying patterns or correlations within this data. For instance, clustering algorithms, like K-means or hierarchical clustering, partition data into distinct groups based on their similarities. 

Dimensionality reduction, another form of unsupervised learning, seeks to simplify data without losing much information. Techniques like Principal Component Analysis (PCA) identify the directions (or principal components) in which the data varies the most and reduces the dataset to fewer dimensions, making it easier to visualize and interpret. Association rule mining, such as the Apriori algorithm, identifies sets of items or events that frequently occur together, which can be useful in fields like market basket analysis.

## Considerations 
* Unsupervised learning may reveal unexpected or non-intuitive patterns in the data that may not be discoverable through supervised learning methods.
* Interpretability can be challenging with unsupervised learning, as the uncovered patterns might not align with preconceived categories or labels.
* The quality and relevance of the results are heavily dependent on the quality of the input data. Unsupervised learning doesn't have an objective correctness to guide it, so noise or errors in the data can lead to inaccurate or misleading patterns.
* Deciding on the number of clusters in clustering methods, or the number of components in dimensionality reduction, often requires subjective judgment, trial and error, or additional techniques like the elbow method for optimal results.
  
## References 
1. Bishop, Christopher M. (2006). Pattern Recognition and Machine Learning. Springer. ISBN 978-0-387-31073-2.
2. "Unsupervised Learning: Foundations of Neural Computation". MIT Press.
3. [Unsupervised Learning Explained](https://towardsdatascience.com/unsupervised-learning-with-python-173c51dc7f03)
4. [Unsupervised Learning](https://developers.google.com/machine-learning/clustering/overview) from Google Developers
5. [Unsupervised Learning: What it is and Why it Matters](https://www.sas.com/en_us/insights/analytics/unsupervised-learning.html) from SAS
6. [PCA in Python](https://jakevdp.github.io/PythonDataScienceHandbook/05.09-principal-component-analysis.html)
7. [Association Rules and the Apriori Algorithm](https://towardsdatascience.com/association-rules-2-aa9a77241654)""" .

:UnsupervisedPreprocessing a owl:Class ;
    rdfs:label "Unsupervised Preprocessing" ;
    rdfs:subClassOf :Semi-SupervisedLearning ;
    :definition "Unsupervised Preprocessing refers to a class of Machine Learning techniques that help prepare and transform raw data for subsequent analysis, where the transformation rules are inferred from the data itself, rather than being supervised by explicit outcome labels. Techniques in this class include dimensionality reduction, feature extraction, normalization, and noise reduction." ;
    :kb-article """## How it works
Unsupervised preprocessing works by applying statistical methods or machine learning algorithms to raw data to distill information, extract insights or create structured inputs for further analysis. Without relying on labelled output, these techniques explore the intrinsic structure or patterns within the data itself.

For example, one popular method is Principal Component Analysis (PCA), a dimensionality reduction technique that identifies the directions (principal components) in which the data varies the most. By transforming the original data into a lower-dimensional space spanned by these principal components, we can retain the most valuable parts of the information while reducing computational complexity and mitigating the curse of dimensionality.

Another method is clustering (like K-means), where the aim is to group similar data points together based on chosen distance or similarity measures. This can help reveal natural groupings or segments in the data.

## Considerations 
- Quality of input data: As with any machine learning method, garbage in equals garbage out. If the raw data is noisy, biased, or full of outliers, unsupervised preprocessing may not yield meaningful or useful results.
  
- Feature scaling: Many unsupervised preprocessing techniques, such as PCA and clustering, are sensitive to the scale of the features. It's crucial to apply appropriate scaling (like min-max normalization or standardization) prior to these techniques.

- Interpretability: Techniques like PCA might result in new features that are less interpretable because they're combinations of the original ones.

- Choice of technique: The choice of unsupervised preprocessing technique should be aligned with the goals of the subsequent analysis. For instance, if preserving data variance is important, PCA would be suitable. However, if discovering clusters or groups is the goal, clustering would be more appropriate.

## References 
1. Hastie, T., Tibshirani, R., & Friedman, J. (2009). [The Elements of Statistical Learning](https://web.stanford.edu/~hastie/ElemStatLearn/) (2nd ed.). Springer.
  
2. James, G., Witten, D., Hastie, T., & Tibshirani, R. (2013). [An Introduction to Statistical Learning](http://faculty.marshall.usc.edu/gareth-james/ISL/). Springer.

3. Pedregosa, F., et al. (2011). [Scikit-learn: Machine Learning in Python](https://jmlr.csail.mit.edu/papers/v12/pedregosa11a.html), Journal of Machine Learning Research, 12, 2825–2830.
  
4. Bishop, C. M. (2006). [Pattern Recognition and Machine Learning](https://www.microsoft.com/en-us/research/uploads/prod/2006/01/Bishop-Pattern-Recognition-and-Machine-Learning-2006.pdf). Springer.

- https://documentation.sas.com/doc/en/vdmmlcdc/8.4/vdmmladvug/n1e4spzcnv1f0fn1vsxhbzgdp1bb.htm""" .

:URL a owl:Class ;
    rdfs:label "URL" ;
    skos:altLabel "Uniform Resource Locator" ;
    rdfs:subClassOf :Identifier,
        [ a owl:Restriction ;
            owl:onProperty :addresses ;
            owl:someValuesFrom :Resource ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Uniform_Resource_Locator> ;
    :definition "A Uniform Resource Locator (URL), commonly informally termed a web address (a term which is not defined identically) is a reference to a web resource that specifies its location on a computer network and a mechanism for retrieving it.A URL is a specific type of Uniform Resource Identifier (URI), although many people use the two terms interchangeably. A URL implies the means to access an indicated resource, which is not true of every URI. URLs occur most commonly to reference web pages (http), but are also used for file transfer (ftp), email (mailto), database access (JDBC), and many other applications." .

:URLAnalysis a :IdentifierAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "URL Analysis" ;
    rdfs:subClassOf :IdentifierAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :URL ] ;
    :d3fend-id "D3-UA" ;
    :definition "Determining if a URL is benign or malicious by analyzing the URL or its components." ;
    :kb-article """## How it works

URLs may contain components, for example:

 * scheme
 * userinfo
 * host name
 * port
 * path
 * query
 * fragment

These components are used as features in analysis algorithms.

Contextual information about a URL such as where it is embedded (ex. emails, files, network protocols), header, path, location, and origin information, as well as information about the content returned from the URL request, may be incorporated into an analytic for URL analysis. For example, if a URL indicates a .pdf file but an executable is actually returned, the combination of these two pieces of information indicates suspicious activity.

Additional techniques include:

* Extracting features of a URL such as domain name length, ratio of consecutive consonants, percentage of digits in a domain, and number of vowels. Values for each feature are combined to develop a score for the URL.
* Determining the probability of a character occurring in the URL given the preceding two characters. For example, for google.com, the probability of a 'g' occurring at the beginning of a word, the probability of an 'o' occurring after a "g, the probability of an o" occurring after a 'g' and "o, and so forth. A dictionary or a list of known good domains is used to determine probability. Probabilities are multiplied to develop a score for the URL.

URL analysis may trigger follow-on analytics such as **File Analysis**

## Considerations

* Volume of URLs being analyzed, combined with the speed at which they are analyzed
* Fidelity of analysis technique at detecting brand new URLs versus analyzing URLs of established domains""" ;
    :kb-reference :Reference-MethodAndApparatusForDetectingMaliciousWebsites_EndgameInc,
        :Reference-MethodAndSystemForDetectingRestrictedContentAssociatedWithRetrievedContent_SophosLtd .

:URLReputationAnalysis a :IdentifierReputationAnalysis,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "URL Reputation Analysis" ;
    rdfs:subClassOf :IdentifierReputationAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :URL ] ;
    :d3fend-id "D3-URA" ;
    :definition "Analyzing the reputation of a URL." ;
    :kb-reference :Reference-Finding_phishing_sites .

:UseCaseGoal a owl:Class ;
    rdfs:label "Use Case Goal" ;
    rdfs:subClassOf :D3FENDUseCaseThing .

:UseCasePrerequisite a owl:Class ;
    rdfs:label "Use Case Prerequisite" ;
    rdfs:subClassOf :D3FENDUseCaseThing .

:UseCaseProcedure a owl:Class ;
    rdfs:label "Use Case Procedure" ;
    rdfs:subClassOf :D3FENDUseCaseThing,
        :Procedure .

:UseCaseStep a owl:Class ;
    rdfs:label "Use Case Step" ;
    rdfs:subClassOf :D3FENDUseCaseThing,
        :Step .

:User a owl:Class ;
    rdfs:label "User" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :has-account ;
            owl:someValuesFrom :UserAccount ],
        [ a owl:Restriction ;
            owl:onProperty :restricted-by ;
            owl:someValuesFrom :AccessControlList ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/User_(computing)> ;
    :definition "A user is a person [or agent] who uses a computer or network service. Users generally use a system or a software product without the technical expertise required to fully understand it. Power users use advanced features of programs, though they are not necessarily capable of computer programming and system administration. A user often has a user account and is identified to the system by a username (or user name). Other terms for username include login name, screenname (or screen name), nickname (or nick) and handle, which is derived from the identical Citizen's Band radio term. Some software products provide services to other systems and have no direct end users." ;
    rdfs:seeAlso "UserAccount",
        <http://wordnet-rdf.princeton.edu/id/10761247-n> .

:UserAccount a owl:Class ;
    rdfs:label "User Account" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/User_(computing)#User_account> ;
    :definition "A user account allows a user to authenticate to a system and potentially to receive authorization to access resources provided by or connected to that system; however, authentication does not imply authorization. To log into an account, a user is typically required to authenticate oneself with a password or other credentials for the purposes of accounting, security, logging, and resource management." ;
    rdfs:seeAlso <http://dbpedia.org/resource/User_account> .

:UserAccountPermissions a :CredentialHardening,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "User Account Permissions" ;
    rdfs:subClassOf :CredentialHardening,
        [ a owl:Restriction ;
            owl:onProperty :restricts ;
            owl:someValuesFrom :UserAccount ] ;
    :d3fend-id "D3-UAP" ;
    :definition "Restricting a user account's access to resources." ;
    :kb-reference :Reference-ConfigureUserAccessControlAndPermissions .

:UserAction a owl:Class ;
    rdfs:label "User Action" ;
    rdfs:subClassOf :DigitalArtifact,
        :DigitalEvent ;
    :definition "An action performed by a user. Executing commands, granting permissions, and accessing resources are examples of user actions." .

:UserApplication a owl:Class ;
    rdfs:label "User Application" ;
    rdfs:subClassOf :Application ;
    :definition "A user application is executed for that an individual user on a user's personal computer or remotely by means of virtualization.  This is in contrast to service applications or enterprise software." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Enterprise_software> .

:UserBehavior a owl:Class ;
    rdfs:label "User Behavior" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :UserAction ] ;
    :definition "A user behavior is a pattern of user actions, or set of such patterns. Modeling and analyzing these patterns and monitoring a users actions for meaningful anomalies is known as user behavior analytics (UBA)." ;
    rdfs:seeAlso <http://dbpedia.org/resource/User_behavior_analytics> .

:UserBehaviorAnalysis a :DefensiveTechnique,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "User Behavior Analysis" ;
    rdfs:subClassOf :DefensiveTechnique,
        [ a owl:Restriction ;
            owl:onProperty :enables ;
            owl:someValuesFrom :Detect ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/User_behavior_analytics> ;
    :d3fend-id "D3-UBA" ;
    :definition "Analysis of user behavior and patterns for the purpose of detecting unauthorized user activity.",
        "User behavior analytics (\"UBA\") as defined by Gartner, is a cybersecurity process about detection of insider threats, targeted attacks, and financial fraud. UBA solutions look at patterns of human behavior, and then apply algorithms and statistical analysis to detect meaningful anomalies from those patterns-anomalies that indicate potential threats.' Instead of tracking devices or security events, UBA tracks a system's users. Big data platforms are increasing UBA functionality by allowing them to analyze petabytes worth of data to detect insider threats and advanced persistent threats." ;
    :enables :Detect ;
    :kb-article """## Technique Overview

Some techniques monitor patterns of human behavior and then apply algorithms and to identify patterns such as repeated login attempts from a single IP address or large file downloads, or abnormal accesses.

Other techniques may have explicit or rigid definitions of "bad behavior" which are then matched against instances in a computer network environment.""" ;
    :synonym "Credential Monitoring",
        "UBA" .

:UserDataTransferAnalysis a owl:Class,
        owl:NamedIndividual,
        :UserBehaviorAnalysis ;
    rdfs:label "User Data Transfer Analysis" ;
    rdfs:subClassOf :UserBehaviorAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :ResourceAccess ] ;
    :d3fend-id "D3-UDTA" ;
    :definition "Analyzing the amount of data transferred by a user." ;
    :kb-article """## How it works
Unusual data transfer activity may indicate unauthorized activity. Data transfers can be analyzed by collecting network traffic or application logs.

## Considerations
* There is a potential for false positives from anomalies that are not associated with unauthorized activity.
* Attackers that move low and slow may not differentiate their data transfer behavior enough for an alert to trigger.""" ;
    :kb-reference :Reference-SystemAndMethodThereofForIdentifyingAndRespondingToSecurityIncidentsBasedOnPreemptiveForensics_PaloAltoNetworksInc,
        :Reference-SystemForImplementingThreatDetectionUsingThreatAndRiskAssessmentOfAsset-actorInteractions_VECTRANETWORKSInc ;
    :todo "improve kb-article" .

:UserGeolocationLogonPatternAnalysis a owl:Class,
        owl:NamedIndividual,
        :UserBehaviorAnalysis ;
    rdfs:label "User Geolocation Logon Pattern Analysis" ;
    rdfs:subClassOf :UserBehaviorAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :NetworkTraffic ] ;
    :d3fend-id "D3-UGLPA" ;
    :definition "Monitoring geolocation data of user logon attempts and comparing it to a baseline user behavior profile to identify anomalies in logon location." ;
    :kb-article """## How it works
Geolocation data for each user logon attempt is collected and used to create a baseline user behavior profile. Current geolocation logon data is then compared against the user behavior profile. Logon activity that deviates from normal patterns and can help in identifying situations that may be indicative of a remote attacker using stolen credentials. For example:

* logons from locations that are different from where a user usually logs in
* logons from a location in which an enterprise has no users located
* logon that is not physically possible given the elapsed time since a logon from another location.

## Considerations
* Potential for false positives from logon anomalies that are not associated with malicious activity.
* Attackers may not differentiate their logon behavior enough to trigger an alert.""" ;
    :kb-reference <http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-System,Method,AndComputerProgramProductForDetectingAndAssessingSecurityRisksInANetwork_ExabeamInc>,
        :Reference-MethodAndApparatusForNetworkFraudDetectionAndRemediationThroughAnalytics_IdaptiveLLC .

:UserGroup a owl:Class ;
    rdfs:label "User Group" ;
    rdfs:subClassOf :AccessControlConfiguration,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :User ],
        [ a owl:Restriction ;
            owl:onProperty :restricted-by ;
            owl:someValuesFrom :AccessControlList ] ;
    :definition "User groups are a way to collect user accounts and/or computer accounts into manageable units. Administrators can assign permissions, roles, or access to resources, as well as modify group membership, depending on the operating system." ;
    :synonym "Security Group" .

:UserInitConfigurationFile a owl:Class ;
    rdfs:label "User Init Configuration File" ;
    skos:altLabel "User Configuration File" ;
    rdfs:subClassOf :ConfigurationFile,
        :UserLogonInitResource ;
    :definition "A user initialization configuration file is a file containing the information necessary to configure that part of a user's environment which is common to all applications and actions. User configurations may be overridden by more specific configuration information (such as that found in a application configuration file.)" .

:UserInitScript a owl:Class ;
    rdfs:label "User Init Script" ;
    rdfs:subClassOf :ExecutableScript,
        :InitScript,
        :UserLogonInitResource ;
    :definition "A script used to initialize and configure elements of the user's applications and user environment." .

:UserInputFunction a owl:Class ;
    rdfs:label "User Input Function" ;
    rdfs:subClassOf :InputFunction ;
    :definition "Generic function that receives direct user input from an untrusted source." .

:UserInterface a owl:Class ;
    rdfs:label "User Interface" ;
    skos:altLabel "UI" ;
    rdfs:subClassOf :DigitalArtifact ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/User_interface> ;
    :definition "The user interface (UI), in the industrial design field of human-machine interaction, is the space where interactions between humans and machines occur. The goal of this interaction is to allow effective operation and control of the machine from the human end, whilst the machine simultaneously feeds back information that aids the operators' decision-making process. Examples of this broad concept of user interfaces include the interactive aspects of computer operating systems, hand tools, heavy machinery operator controls, and process controls. The design considerations applicable when creating user interfaces are related to or involve such disciplines as ergonomics and psychology." .

:UserLogonInitResource a owl:Class ;
    rdfs:label "User Logon Init Resource" ;
    rdfs:subClassOf :LocalResource ;
    :definition "A user logon initialization resource contains information used to configure a user's environment when a user logs into a system." .

:UserManual a owl:Class,
        owl:NamedIndividual,
        :ReferenceType ;
    rdfs:label "User Manual" ;
    rdfs:subClassOf :Document .

:UserManualReference a owl:Class ;
    rdfs:label "User Manual Reference" ;
    rdfs:subClassOf :TechniqueReference ;
    :pref-label "User Manual" .

:UserProcess a owl:Class ;
    rdfs:label "User Process" ;
    rdfs:subClassOf :Process ;
    :definition "A user process is a process running to perform functions in the name of on particular user and user account, such as run an application or application service serving any number users.  This is in contrast to a system process, which executes software to fulfill operating system functions." .

:UserSessionInitConfigAnalysis a :OperatingSystemMonitoring,
        owl:Class,
        owl:NamedIndividual ;
    rdfs:label "User Session Init Config Analysis" ;
    rdfs:subClassOf :OperatingSystemMonitoring,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :UserInitConfigurationFile ] ;
    :d3fend-id "D3-USICA" ;
    :definition "Analyzing modifications to user session config files such as .bashrc or .bash_profile." ;
    :kb-reference :Reference-CAR-2020-09-002%3AComponentObjectModelHijacking_MITRE,
        :Reference-CAR-2020-11-011%3ARegistryEditFromScreensaver,
        :Reference-IdentificationAndExtractionOfKeyForensicsIndicatorsOfCompromiseUsingSubject-specificFilesystemViews,
        :Reference-RegistryKeySecurityAndAccessRights ;
    :synonym "User Startup Config Analysis" .

:UserStartupDirectory a owl:Class ;
    rdfs:label "User Startup Directory" ;
    rdfs:subClassOf :UserLogonInitResource,
        [ a owl:Restriction ;
            owl:onProperty :contains ;
            owl:someValuesFrom :UserStartupScriptFile ] ;
    :definition "A user startup directory holds information necessary to start the users session with the system." .

:UserStartupScriptFile a owl:Class ;
    rdfs:label "User Startup Script File" ;
    rdfs:subClassOf :ExecutableScript,
        :UserLogonInitResource ;
    :definition "A user startup script file is a shortcut file that is executed when a user logs in and starts a session on the host.  These indicate applications the user wants started at login.  For Windows, these are typically found in the user's startup directory." .

:UserToUserMessage a owl:Class ;
    rdfs:label "User to User Message" ;
    skos:altLabel "Personal Message",
        "Private Message" ;
    rdfs:subClassOf :DigitalArtifact,
        [ a owl:Restriction ;
            owl:onProperty :has-recipient ;
            owl:someValuesFrom :UserAccount ],
        [ a owl:Restriction ;
            owl:onProperty :has-sender ;
            owl:someValuesFrom :UserAccount ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Personal_message> ;
    :definition "Personal message, private message (PM), direct message (DM), or personal chat (PC) is a private form of messaging between different members on a given platform. It is only seen and accessible by the users participating in the message." .

:UtilitySoftware a owl:Class ;
    rdfs:label "Utility Software" ;
    skos:altLabel "Utility Application" ;
    rdfs:subClassOf :Software ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Utility_software> ;
    :definition "Utility applications are software applications designed to help to analyze, configure, optimize or maintain a computer. It is used to support the computer infrastructure - in contrast to application software, which is aimed at directly performing tasks that benefit ordinary users. However, utilities often form part of the application systems. For example, a batch job may run user-written code to update a database and may then include a step that runs a utility to back up the database, or a job may run a utility to compress a disk before copying files." .

:Variability a owl:Class ;
    rdfs:subClassOf :DescriptiveStatistics .

:Variance a owl:Class ;
    rdfs:label "Variance" ;
    rdfs:subClassOf :Variability .

:VarianceReduction a owl:Class ;
    rdfs:label "Variance Reduction" ;
    rdfs:subClassOf :ActiveLearning ;
    :definition "Active Learning: Variance Reduction is a sampling strategy in machine learning where the algorithm actively queries the user (or some other information source) to obtain outputs for specific input instances. Variance reduction in this context refers to the goal of minimizing the variability of the learning model's predictions by selectively sampling the most informative data points.." ;
    :kb-article """## How it works
Active Learning with Variance Reduction works on the principle of uncertainty sampling. In this method, the learning algorithm queries the instances about which it is least certain, thereby maximizing the expected information gain and reducing the uncertainty or "variance" in its predictions. 

First, the model is trained on an initial small labeled dataset. After that, the model is used to predict the remaining unlabeled data. The algorithm then identifies the instances where the model's prediction is most uncertain or has the highest variance. These instances are then queried to the user or the information source for labeling. After obtaining the true labels, the model is retrained including these new data points. This iterative process continues until the model achieves satisfactory performance or a predefined stopping condition is met.

In essence, Active Learning: Variance Reduction is about being strategic in choosing which instances to label so as to obtain the most informative data for learning and reducing the variance of the model's predictions.

## Considerations 

* **Data Quality**: The effectiveness of active learning greatly depends on the quality of queried labels. If the data source provides incorrect or inconsistent labels, it could harm the model's performance.
* **Query Cost**: Active learning involves repeatedly querying the information source, which could be time-consuming and costly, depending on the nature of the source.
* **Model Complexity**: It may be computationally expensive as the model needs to be retrained iteratively on an increasing dataset.
* **Stopping Criteria**: A clearly defined stopping criterion is important, such as a specific performance level or a maximum number of queries, to prevent endless querying.
* **Expecation Minimization**: Minimizing the expectation of a loss function directly is often computationally expensive, so an alternative approach is to minimize output variance, which can have a closed-form solution in certain cases. In regression problems, where the objective is to minimize standard error, the decomposition of expected future error includes terms for noise, bias, and variance. By minimizing variance, the future generalization error of the model can be minimized.
## References 

1. Settles, B. (2012). "Active Learning". Synthesis Lectures on Artificial Intelligence and Machine Learning. Morgan & Claypool Publishers. [Link](https://www.morganclaypool.com/doi/abs/10.2200/S00429ED1V01Y201207AIM018)
2. Burr Settles, Mark Craven, "An Analysis of Active Learning Strategies for Sequence Labeling Tasks", Proceedings of the Conference on Empirical Methods in Natural Language Processing (EMNLP), 2008. [Link](https://www.aclweb.org/anthology/D08-1112.pdf)
3. Chakraborty, S., Tomsett, R., Raghavendra, R., Harborne, D., Alzantot, M., Cerutti, F., ... & Preece, A. (2017). "Interpretability of deep learning models: A survey of results." 2017 IEEE SmartWorld, Ubiquitous Intelligence & Computing, Advanced & Trusted Computed, Scalable Computing & Communications, Cloud & Big Data Computing, Internet of People and Smart City Innovation (SmartWorld/SCALCOM/UIC/ATC/CBDCom/IOP/SCI). IEEE. [Link](https://ieeexplore.ieee.org/document/8167064)""" ;
    :todo "Review: Last bullet on considerations - may not belong but felt it might be relevant" .

:Vendor a owl:Class ;
    rdfs:label "Vendor" ;
    rdfs:subClassOf :Provider,
        [ a owl:Restriction ;
            owl:onProperty :sells ;
            owl:someValuesFrom :CapabilityImplementation ] .

:VersionControlTool a owl:Class ;
    rdfs:label "Version Control Tool" ;
    skos:altLabel "Revision Control",
        "Source Control" ;
    rdfs:subClassOf :DeveloperApplication ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Version_control> ;
    :definition "Version control tools are tools that used to conduct version control. A  component of software configuration management, version control, also known as revision control, source control, or source code management systems are systems responsible for the management of changes to documents, computer programs, large web sites, and other collections of information. Changes are usually identified by a number or letter code, termed the \"revision number\", \"revision level\", or simply \"revision\". For example, an initial set of files is \"revision 1\". When the first change is made, the resulting set is \"revision 2\", and so on. Each revision is associated with a timestamp and the person making the change. Revisions can be compared, restored, and with some types of files, merged." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Software_configuration_management> .

:VideoInputDevice a owl:Class ;
    rdfs:label "Video Input Device" ;
    rdfs:subClassOf :InputDevice ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Input_device#Video_input_devices> ;
    :definition "Video input devices are used to digitize images or video from the outside world into the computer. The information can be stored in a multitude of formats depending on the user's requirement." .

:VirtualAddress a owl:Class ;
    rdfs:label "Virtual Address" ;
    rdfs:subClassOf :MemoryAddress ;
    rdfs:isDefinedBy "https://www.techopedia.com/definition/9934/virtual-address-va" ;
    :definition "A virtual address in memory is a pointer or marker for a memory space that an operating system allows a process to use. The virtual address points to a location in primary storage that a process can use independently of other processes." ;
    rdfs:seeAlso "https://dbpedia.org/page/Virtual_address_space",
        "https://en.wikipedia.org/wiki/Memory_address#Logical_addresses" ;
    :synonym "Logical Address" .

:VirtualizationSoftware a owl:Class ;
    rdfs:label "Virtualization Software" ;
    rdfs:subClassOf :ServiceApplication ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Category:Virtualization_software> ;
    :definition "Virtualization software allows a single host computer to create and run one or more virtual environments. Virtualization software is most often used to emulate a complete computer system in order to allow a guest operating system to be run, for example allowing Linux to run as a guest on top of a PC that is natively running a Microsoft Windows operating system (or the inverse, running Windows as a guest on Linux)." .

:VirtualMemorySpace a owl:Class ;
    rdfs:label "Virtual Memory Space" ;
    rdfs:subClassOf :MemoryAddressSpace ;
    rdfs:isDefinedBy "https://whatis.techtarget.com/definition/memory" ;
    :definition "Virtual memory is a memory management technique where secondary memory can be used as if it were a part of the main memory. Virtual memory uses hardware and software to enable a computer to compensate for physical memory shortages" ;
    rdfs:seeAlso "https://dbpedia.org/page/Virtual_memory" .

:Volume a owl:Class ;
    rdfs:label "Volume" ;
    skos:altLabel "Drive Volume",
        "Logical Drive" ;
    rdfs:subClassOf :DigitalArtifact ;
    :definition "In the context of computer operating systems, a volume or logical drive is a single accessible storage area with a single file system, typically (though not necessarily) resident on a single partition of a hard disk. Although a volume might be different from a physical disk drive, it can still be accessed with an operating system's logical interface. However, a volume differs from a partition." ;
    :todo "Can't create new class \"Volume\" and merge this into that new class, as it always resolves in  Web Protege to this entry.  Have to do as merge of external file into Protege, or find another method." .

:VolumeBootRecord a owl:Class ;
    rdfs:label "Volume Boot Record" ;
    rdfs:subClassOf :BootRecord ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Volume_boot_record> ;
    :definition "A volume boot record (VBR) (also known as a volume boot sector, a partition boot record or a partition boot sector) is a type of boot sector introduced by the IBM Personal Computer. It may be found on a partitioned data storage device, such as a hard disk, or an unpartitioned device, such as a floppy disk, and contains machine code for bootstrapping programs (usually, but not necessarily, operating systems) stored in other parts of the device. On non-partitioned storage devices, it is the first sector of the device. On partitioned devices, it is the first sector of an individual partition on the device, with the first sector of the entire device being a Master Boot Record (MBR) containing the partition table." .

:Voting a owl:Class ;
    rdfs:label "Voting" ;
    rdfs:subClassOf :EnsembleLearning ;
    :definition "Voting is a machine learning technique where multiple models, often called \"base learners,\" are trained and their predictions are combined through a voting mechanism to produce a final prediction. This methodology aims to improve the overall performance by capitalizing on the strengths of each model and mitigating their individual weaknesses." ;
    :kb-article """## How it works
Ensemble Learning - Voting operates by training multiple learning algorithms, each on the same dataset. These algorithms can be different types or even the same type with different configurations. Once these models are trained, they are used to predict the output for unseen data points. In the case of a classification problem, each model makes a prediction (a 'vote') for the class of the data point. The final prediction is typically the class that receives the majority of votes. 

In a variant called 'weighted voting', each model's vote is not considered equal. Instead, each model is assigned a weight based on its accuracy or other performance metric, and these weights are used when tallying the votes to make the final prediction. The idea behind this is to give more influence to the more accurate or reliable models in the ensemble.

In regression problems, the voting ensemble can take the form of averaging the predictions of all models (average voting) or using a weighted average based on the performance of each model.

The core assumption behind voting ensembles is that a collection of weak learners can come together to form a strong learner. Each model in the ensemble makes different types of errors, and by aggregating their predictions, the ensemble can often achieve lower error rates than any individual model.

## Considerations 

* **Diversity of Models**: For the voting mechanism to work effectively, the base learners should be diverse i.e., they should make different kinds of errors. If the errors are correlated, the benefit of ensemble learning diminishes.

* **Overfitting**: While ensembles can mitigate overfitting due to their ability to average out individual model biases, they can also lead to overfitting if complex base learners are used or if the models are too similar.

* **Computationally Intensive**: Training multiple models can be computationally expensive and time-consuming. This may not be suitable for real-time applications or scenarios with limited computational resources.

* **Interpretability**: Ensemble models, particularly those involving many different types of base learners, can be more difficult to interpret than single models.

## References 

1. Dietterich, T.G., 2000. Ensemble methods in machine learning. In International workshop on multiple classifier systems (pp. 1-15). Springer, Berlin, Heidelberg.
   
2. Zhou, Z.H., 2012. Ensemble methods: foundations and algorithms. CRC press.
   
3. Opitz, D., & Maclin, R. (1999). Popular ensemble methods: An empirical study. Journal of artificial intelligence research, 11, 169-198.

4. Scikit-Learn: Ensemble Methods (https://scikit-learn.org/stable/modules/ensemble.html)""" .

:VPNServer a owl:Class ;
    rdfs:label "VPN Server" ;
    rdfs:subClassOf :Server ;
    rdfs:isDefinedBy <https://www.techopedia.com/definition/30750/vpn-server> ;
    :definition """A VPN server is a type of server that enables hosting and delivery of VPN services.

It is a combination of VPN hardware and software technologies that provides VPN clients with connectivity to a secure and/or private network, or rather, the VPN.""" ;
    rdfs:seeAlso <http://dbpedia.org/resource/Virtual_private_network> .

:Vulnerability a owl:Class ;
    rdfs:subClassOf :D3FENDThing .

:Weakness a owl:Class ;
    rdfs:label "Weakness" ;
    rdfs:subClassOf :D3FENDThing ;
    :comment "A type of behavior that has the potential for allowing an attacker to violate the intended security policy, if the behavior is made accessible to the attacker. For example, an unbounded strcpy() call is a weakness, since it might be subject to a buffer overflow if an attacker can provide an input buffer that is larger than the output buffer. (CWE)",
        "Logic present in hardware or software which enables an attacker to violate the intended security policy." ;
    :definition "A weakness is a condition in a software, firmware, hardware, or service component that, under certain circumstances, could contribute to the introduction of vulnerabilities." .

:WebApplicationFirewall a owl:Class ;
    rdfs:label "Web Application Firewall" ;
    skos:altLabel "WAF" ;
    rdfs:subClassOf :ApplicationLayerFirewall ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Web_application_firewall> ;
    :definition "A web application firewall (or WAF) filters, monitors, and blocks HTTP traffic to and from a web application. A WAF is differentiated from a regular firewall in that a WAF is able to filter the content of specific web applications while regular firewalls serve as a safety gate between servers. By inspecting HTTP traffic, it can prevent attacks stemming from web application security flaws, such as SQL injection, cross-site scripting (XSS), file inclusion, and security misconfigurations." .

:WebApplicationServer a owl:Class ;
    rdfs:label "Web Application Server" ;
    rdfs:subClassOf :WebServer ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Application_server> ;
    :definition "A web application server is a web server that hosts applications. Application server frameworks are software frameworks for building application servers. An application server framework provides both facilities to create web applications and a server environment to run them. In the case of Java application servers, the server behaves like an extended virtual machine for running applications, transparently handling connections to the database on one side, and, often, connections to the Web client on the other." .

:WebAuthentication a owl:Class ;
    rdfs:label "Web Authentication" ;
    rdfs:subClassOf :Authentication,
        [ a owl:Restriction ;
            owl:onProperty :may-create ;
            owl:someValuesFrom :SessionCookie ] ;
    :definition "A request-response comprising a user credential presentation to a system and a verification response where the verifying party is a web server." .

:WebFileResource a owl:Class ;
    rdfs:label "Web File Resource" ;
    skos:altLabel "Web Resource" ;
    rdfs:subClassOf :NetworkFileResource,
        [ a owl:Restriction ;
            owl:onProperty :addressed-by ;
            owl:someValuesFrom :URL ] ;
    :definition "A web resource is a resource identified by a Uniform Resource Identifier (URI) and made available from one host to another host via a web protocol and across a network or networks." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Web_resource> .

:WebNetworkTraffic a owl:Class ;
    rdfs:label "Web Network Traffic" ;
    rdfs:subClassOf :NetworkTraffic ;
    :definition "Web network traffic is network traffic that uses a standard web protocol." .

:WebResourceAccess a owl:Class ;
    rdfs:label "Web Resource Access" ;
    rdfs:subClassOf :NetworkResourceAccess ;
    :definition "Ephemeral digital artifact comprising a request of a network resource and any response from that network resource using a standard web protocol." .

:WebScriptFile a owl:Class ;
    rdfs:label "Web Script File" ;
    skos:altLabel "Web Script" ;
    rdfs:subClassOf :ExecutableScript ;
    :definition "A file containing a script in a web-scripting programming language. Web scripts may be present and run on the client or on the server side." .

:WebServer a owl:Class ;
    rdfs:label "Web Server" ;
    rdfs:subClassOf :Server ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Web_server> ;
    :definition "A web server is server software, or hardware dedicated to running this software, that can satisfy client requests on the World Wide Web. A web server can, in general, contain one or more websites. A web server processes incoming network requests over HTTP and several other related protocols. While the major function is to serve content, a full implementation of HTTP also includes ways of receiving content from clients. This feature is used for submitting web forms, including uploading of files." .

:WebServerApplication a owl:Class ;
    rdfs:label "Web Server Application" ;
    skos:altLabel "Web App",
        "Web Application" ;
    rdfs:subClassOf :ServiceApplication ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Web_application> ;
    :definition "A web server application (or web app) is an application software that runs on a web server, unlike computer-based software programs that are stored locally on the Operating System (OS) of the device. Web applications are accessed by the user through a web browser with an active internet connection. These applications are programmed using a client-server modeled structure-the user (\"client\") is provided services through an off-site server that is hosted by a third-party. Examples of commonly-used, web applications, include: web-mail, online retail sales, online banking, and online auctions." .

:WebSessionActivityAnalysis a owl:Class,
        owl:NamedIndividual,
        :UserBehaviorAnalysis ;
    rdfs:label "Web Session Activity Analysis" ;
    rdfs:subClassOf :UserBehaviorAnalysis,
        [ a owl:Restriction ;
            owl:onProperty :analyzes ;
            owl:someValuesFrom :WebResourceAccess ] ;
    :d3fend-id "D3-WSAA" ;
    :definition "Monitoring changes in user web session behavior by comparing current web session activity to a baseline behavior profile or a catalog of predetermined malicious behavior." ;
    :kb-article """## How it works
User web session data is collected over a period of time to create a user behavior profile. Data collected includes clicks made on a website, average time between clicks, filling out web forms, order in which pages are viewed, and downloading files. Current user web session behavior is then compared against the use behavior profile to identify anomalies and a likelihood that the current user web session is malicious. Current user web session behavior can also be compared to predetermined known malicious behavior profiles that are developed through analysis of malware in run time at a threat research facility.

## Considerations
* Potential for false positives from anomalies that are not associated with malicious activity.
* Attackers may not differentiate their web session activity enough to trigger an alert.""" ;
    :kb-reference :Reference-HostIntrusionPreventionSystemUsingSoftwareAndUserBehaviorAnalysis_SophosLtd,
        :Reference-SystemAndMethodForDetectionOfAChangeInBehaviorInTheUseOfAWebsiteThroughVectorVelocityAnalysis_SilverTailSystems,
        :Reference-SystemAndMethodForNetworkSecurityIncludingDetectionOfAttacksThroughPartnerWebsites_EMCIPHoldingCoLLC,
        :Reference-SystemAndMethodThereofForIdentifyingAndRespondingToSecurityIncidentsBasedOnPreemptiveForensics_PaloAltoNetworksInc .

:WeightedMean a owl:Class ;
    rdfs:label "Weighted Mean" ;
    rdfs:subClassOf :CentralTendency .

:WideAreaNetwork a owl:Class ;
    rdfs:label "Wide Area Network" ;
    skos:altLabel "WAN" ;
    rdfs:subClassOf :Network ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Local_area_network> ;
    :definition "By contrast to a local area network (LAN), a wide area network (WAN), not only covers a larger geographic distance, but also generally involves leased telecommunication circuits or Internet links." .

:WindowsRegistry a owl:Class ;
    rdfs:label "Windows Registry" ;
    rdfs:subClassOf :SystemConfigurationDatabase ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Windows_Registry> ;
    :definition "The Windows Registry is a hierarchical database that stores low-level settings for the Microsoft Windows operating system and for applications that opt to use the registry. The kernel, device drivers, services, Security Accounts Manager, and user interface can all use the registry. The registry also allows access to counters for profiling system performance." .

:WindowsRegistryKey a owl:Class ;
    rdfs:label "Windows Registry Key" ;
    rdfs:subClassOf :SystemConfigurationDatabaseRecord,
        [ a owl:Restriction ;
            owl:onProperty :windows-registry-key ;
            owl:someValuesFrom xsd:string ],
        [ a owl:Restriction ;
            owl:onProperty :windows-registry-value ;
            owl:someValuesFrom xsd:string ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Windows_Registry#Keys_and_values> ;
    :definition "Windows registry keys are container objects similar to folders. Registry values are non-container objects similar to files. Keys may contain values and subkeys. Keys are referenced with a syntax similar to Windows' path names, using backslashes to indicate levels of hierarchy. Keys must have a case insensitive name without backslashes." .

:WindowsShortcutFile a owl:Class ;
    rdfs:label "Windows Shortcut File" ;
    skos:altLabel "Shell Link" ;
    rdfs:subClassOf :ShortcutFile ;
    :definition "A Microsoft Windows shortcut file." ;
    rdfs:seeAlso <http://dbpedia.org/resource/Shortcut_(computing)#Microsoft_Windows>,
        <http://dbpedia.org/resource/Symbolic_link#Shortcuts> .

:WirelessAccessPoint a owl:Class ;
    rdfs:label "Wireless Access Point" ;
    skos:altLabel "WAP" ;
    rdfs:subClassOf :NetworkNode,
        :RFTransceiver ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Wireless_access_point> ;
    :definition "In computer networking, a wireless access point (WAP), or more generally just access point (AP), is a networking hardware device that allows other Wi-Fi devices to connect to a wired network. The AP usually connects to a router (via a wired network) as a standalone device, but it can also be an integral component of the router itself. An AP is differentiated from a hotspot which is a physical location where Wi-Fi access is available." .

:WirelessRouter a owl:Class ;
    rdfs:label "Wireless Router" ;
    rdfs:subClassOf :Router,
        :WirelessAccessPoint ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Wireless_router> ;
    :definition "A wireless router is a device that performs the functions of a router and also includes the functions of a wireless access point. It is used to provide access to the Internet or a private computer network. Depending on the manufacturer and model, it can function in a wired local area network, in a wireless-only LAN, or in a mixed wired and wireless network." ;
    rdfs:seeAlso "Wireless Access Point" .

:WriteFile a owl:Class ;
    rdfs:label "Write File" ;
    rdfs:subClassOf :SystemCall,
        [ a owl:Restriction ;
            owl:onProperty :modifies ;
            owl:someValuesFrom :File ] ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Write_(system_call)> ;
    :definition "The write is one of the most basic routines provided by a Unix-like operating system kernel. It writes data from a buffer declared by the user to a given device, such as a file. This is the primary way to output data from a program by directly using a system call. The destination is identified by a numeric code. The data to be written, for instance a piece of text, is defined by a pointer and a size, given in number of bytes. write thus takes three arguments." .

:ZeroClientComputer a owl:Class ;
    rdfs:label "Zero Client Computer" ;
    rdfs:subClassOf :ThinClientComputer ;
    rdfs:isDefinedBy <http://dbpedia.org/resource/Thin_client#Zero_client> ;
    :definition "Zero client is also referred as ultra thin client, contains no moving parts but centralizes all processing and storage to just what is running on the server. As a result, it requires no local driver to install, no patch management, and no local operating system licensing fees or updates. The device consumes very little power and is tamper-resistant and completely incapable of storing any data locally, providing a more secure endpoint." .

### Individuals

:AdobePDFFile1.3 a :DocumentFile,
        owl:NamedIndividual ;
    rdfs:label "Adobe PDF File 1.3" ;
    :may-contain :JavascriptFile .

:AMD64CodeSegment a :ImageCodeSegment,
        owl:NamedIndividual,
        :ProcessCodeSegment ;
    rdfs:label "AMD64 Code Segment" .

:ARM32CodeSegment a :ImageCodeSegment,
        owl:NamedIndividual,
        :ProcessCodeSegment ;
    rdfs:label "ARM32 Code Segment" .

:ASCIIDomainName a :DomainName,
        owl:NamedIndividual ;
    rdfs:label "ASCII Domain Name" .

:BashScriptFile a :ExecutableScript,
        owl:NamedIndividual ;
    rdfs:label "Bash Script File" .

:Book a owl:NamedIndividual,
        :ReferenceType ;
    rdfs:label "Book" .

:BSDProcess a owl:NamedIndividual,
        :Process ;
    rdfs:label "BSD Process" .

:CCICatalog_v2022-04-05 a :ControlCorrelationIdentifierCatalog,
        owl:NamedIndividual ;
    rdfs:label "CCI Catalog v2022-04-05" ;
    :archived-at "https://public.cyber.mil/stigs/cci/"^^xsd:anyURI ;
    rdfs:seeAlso "https://public.cyber.mil/stigs/cci/" ;
    :version "2022-04-05" .

:DISA_FSO a :Organization,
        owl:NamedIndividual ;
    rdfs:label "DISA FSO" ;
    :definition "Defense Information Systems Agency (DISA) Field Security Office (FSO)" .

:FQDNDomainName a :DomainName,
        owl:NamedIndividual ;
    rdfs:label "FQDN Domain Name" .

:GetForegroundWindow a :GetOpenWindows,
        owl:NamedIndividual ;
    rdfs:isDefinedBy "https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-getforegroundwindow" .

:GNUGCCStackGuard a owl:NamedIndividual,
        :StackFrameCanaryValidation ;
    rdfs:label "GNU GCC StackGuard" .

<http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-ApproachesForSecuringAnInternetEndpointUsingFine-grainedOperatingSystemVirtualization_Bromium,Inc.> a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Approaches for securing an internet endpoint using fine-grained operating system virtualization - Bromium, Inc." ;
    :has-link "https://patents.google.com/patent/US20110296412A1"^^xsd:anyURI ;
    :kb-abstract "Approaches for executing untrusted software on a client without compromising the client using micro-virtualization to execute untrusted software in isolated contexts. A template for instantiating a virtual machine on a client is identified in response to receiving a request to execute an application. After the template is identified, without human intervention, a virtual machine is instantiated, using the template, in which the application is to be executed. The template may be selected from a plurality of templates based on the nature of the request, as each template describe characteristics of a virtual machine suitable for a different type of activity. Selected resources such as files are displayed to the virtual machines according to user and organization policies and controls. When the client determines that the application has ceased to execute, the client ceases execution of the virtual machine without human intervention." ;
    :kb-author "Gaurav Banga, Ian Pratt, Kiran Bondalapati, Vikram Kapoor" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Bromium, Inc." ;
    :kb-reference-of :Hardware-basedProcessIsolation ;
    :kb-reference-title "Approaches for securing an internet endpoint using fine-grained operating system virtualization" ;
    :todo "MITRE Analysis was not found" .

<http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-ComputingApparatusWithAutomaticIntegrityReferenceGenerationAndMaintenance_Tripwire,Inc.> a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Computing apparatus with automatic integrity reference generation and maintenance - Tripwire, Inc." ;
    :has-link "https://patents.google.com/patent/US20040060046A1"^^xsd:anyURI ;
    :kb-abstract "An apparatus is equipped to automatically update one or more integrity references of a software entity, when the software entity is installed onto the apparatus. The apparatus is further equipped to periodically determine whether the integrity of the apparatus has been compromised based at least in part on the one or more integrity references of the software entity that are automatically updated during installation of the software entity." ;
    :kb-author "Thomas Good, Robert DiFalco, Gene Kim" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Tripwire, Inc." ;
    :kb-reference-of :ExecutableAllowlisting ;
    :kb-reference-title "Computing apparatus with automatic integrity reference generation and maintenance" ;
    :todo "MITRE Analysis was not found" .

<http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-ContentExtractorAndAnalysisSystem_Bit9Inc,CarbonBlackInc> a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Content extractor and analysis system - Bit 9 Inc, Carbon Black Inc" ;
    :has-link "https://patents.google.com/patent/US20070028110A1"^^xsd:anyURI ;
    :kb-abstract "A security system provides a defense from known and unknown viruses, worms, spyware, hackers, and unwanted software. The system can implement centralized policies that allow an administrator to approve, block, quarantine, and log file activities. The system can extract content of interest from a file container, repackage the content of interest as another valid file type, perform hashes on the content of interest, associate the hash of the container with the hash of the repackaged content, transfer the repackaged content, and store the hash with other security-related information." ;
    :kb-author "Todd Brennan" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Bit 9 Inc, Carbon Black Inc" ;
    :kb-reference-of :ExecutableDenylisting ;
    :kb-reference-title "Content extractor and analysis system" ;
    :todo "MITRE Analysis was not found" .

<http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-ContinuousAuthenticationByAnalysisOfKeyboardTypingCharacteristics_BradfordUniv.,UK> a :AcademicPaperReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Continuous authentication by analysis of keyboard typing characteristics - Bradford Univ., UK" ;
    :has-link "https://ieeexplore.ieee.org/document/491588?reload=true&arnumber=491588"^^xsd:anyURI ;
    :kb-abstract """This paper describes a simple, software based keyboard monitoring system for the IBM PC for the continuous analysis of the typing characteristics of the user for the purpose of continuous authentication. By exploiting the electrical characteristics of the PC keyboard interface together with modifications to the internal system timer, very accurate measurements can be made of keystroke interval and duration, including measurements of rollover. Rollover patterns, particularly when typing common diphthongs, can be highly characteristic of individual users and provide quite an accurate indication of the users identity.
Published in: European Convention on Security and Detection, 1995.""" ;
    :kb-author "S.J. Shepherd" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Bradford Univ., UK" ;
    :kb-reference-of :InputDeviceAnalysis ;
    :kb-reference-title "Continuous authentication by analysis of keyboard typing characteristics" ;
    :todo "MITRE Analysis was not found" .

<http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-DecoyAndDeceptiveDataObjectTechnology_Cymmetria,Inc.> a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Decoy and deceptive data object technology - Cymmetria, Inc." ;
    :has-link "https://patents.google.com/patent/US20170134423A1"^^xsd:anyURI ;
    :kb-abstract """A computer implemented method of detecting unauthorized access to a protected network by monitoring a dynamically updated deception environment, comprising launching, on one or more decoy endpoints, one or more decoy operating system (OS) managing one or more of a plurality of deception applications mapping a plurality of applications executed in a protected network, updating dynamically a usage indication for a plurality of deception data objects deployed in the protected network to emulate usage of the plurality of deception data objects for accessing the deception application(s) wherein the plurality of deception data objects are configured to trigger an interaction with the deception application(s) when used, detecting usage of data contained in the deception data object(s) by monitoring the interaction and identifying one or more potential unauthorized operations based on analysis of the detection.

In order to convince the potential attacker that the deception environment is the real (valid) processing environment and/or part thereof, the campaign manager may construct the false identity according to the public information of the certain user that may typically be available to the potential attacker. By exposing the real (public) information of the certain user to the potential attacker, the false identity may seem consistent and legitimate to the potential attacker. For example, the campaign manager may create a false account, for example, a Facebook account of the certain user that includes the same public information that is publicly available to other Facebook users from the real (genuine) Facebook account of the certain user. The fake company account may include information specific to the role and/or job title of certain user within the company, for example, a programmer, an accountant, an IT person and/or the like.""" ;
    :kb-author "Dean Sysman, Gadi Evron, Imri Goldberg, Itamar Sher, Shmuel Ur" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Cymmetria, Inc." ;
    :kb-reference-of :DecoyPersona ;
    :kb-reference-title "Decoy and deceptive data object technology" ;
    :todo "MITRE Analysis was not found" .

<http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-EvictionGuidanceforNetworksAffectedbytheSolarWindsandActiveDirectory/M365Compromise-CISA> a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Eviction Guidance for Networks Affected by the SolarWinds and Active Directory/M365 Compromise - CISA" ;
    :has-link "https://www.cisa.gov/news-events/analysis-reports/ar21-134a" ;
    :kb-organization "CISA" ;
    :kb-reference-of :CredentialRotation ;
    :kb-reference-title "Eviction Guidance for Networks Affected by the SolarWinds and Active Directory/M365 Compromise" .

<http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-IsolationOfApplicationsWithinAVirtualMachine_Bromium,Inc.> a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Isolation of applications within a virtual machine - Bromium, Inc." ;
    :has-link "https://patents.google.com/patent/US9921860B1"^^xsd:anyURI ;
    :kb-abstract "Approaches for launching an application within a virtual machine. In response to receiving a request to launch an application, a device instantiates, without human intervention and based on a policy, a virtual machine in which the application is to be launched. The policy determines which resources of a device, such as a mobile device or computer system, are accessible to the virtual machine. The policy may, but need not, determine whether the virtual machine has access to a type of resource which obligates the user of the device to make a monetary payment for the user of the resource." ;
    :kb-author "Gaurav Banga, Sergei Vorobiev, Deepak Khajuria, Vikram Kapoor, Ian Pratt, Simon Crosby, Adrian Taylor" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Bromium, Inc." ;
    :kb-reference-of :Hardware-basedProcessIsolation ;
    :kb-reference-title "Isolation of applications within a virtual machine" ;
    :todo "MITRE Analysis was not found" .

<http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-SupplyChainCyber-deception_Cymmetria,Inc.> a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Supply chain cyber-deception - Cymmetria, Inc." ;
    :has-link "https://patents.google.com/patent/WO2017187379A1"^^xsd:anyURI ;
    :kb-abstract "A computer implemented method of detecting unauthorized access to a protected network from external endpoints, comprising monitoring, at a protected network, communication with one or more external endpoints using one or more access clients to access one or more of a plurality of resources of the protected networked, where one or more deception resources created in the protected network map one or more of the plurality of resources, detecting usage of data contained in one or more of a plurality of deception data objects deployed in the one or more access clients by monitoring an interaction triggered by one or more of the deception data objects with the one or more deception resources when used and identifying one or more potential unauthorized operations based on analysis of the detection." ;
    :kb-author "Gadi EVRON; Dean SYSMAN; Imri Goldberg; Shmuel Ur" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Cymmetria, Inc." ;
    :kb-reference-of :DecoyFile ;
    :kb-reference-title "Supply chain cyber-deception" ;
    :todo "MITRE Analysis was not found",
        """Section header did not match either 'MITRE Analysis' or 'Document Abstract' (possible typo?):  Additional Information from Document
The deception data objects 214 may include, for example, one or more of the following:

Cookies and/or history log entries. In case the access client 255 is browsing, for example, to a supplier-facing website (an exemplary resource 222) of the protected network 235, typically, a cookie is added to the to be added to the access client 255 and the website's address added to the history log of the access client 255. In such a case, the campaign manager 216 may, for example, open an iframe to a deception website (an exemplary deception resource 210 corresponding to the exemplary resource 222) in which different cookie(s) and/or different history log entry(s) may be added to the access client 255. The different cookie(s) and/or history log entry(s) may point to the deception environment, for example, a false website, an identical system that is not used by real users (internal and/or external), a proxy that redirects to a real system within the protected network 235, a different service, such as, for example, email, SharePoint and/or the like.

JavaScripts, pop-up windows, pop-under windows and/or any other browsing technique used to browse to another website(s). In case the access client 255 is browsing, for example, to the supplier-facing website, the campaign manager 216 may, for example, initiate a JavaScript, a pop-up window and/or a pop-under window to direct the access client 255 to the deception website in which the different cookie(s) and/or the different history log entry(s) may be added to the access client 255. The JavaScripts, the pop-up windows and/or the pop-under windows may maintain a visibility similarity with the supplier-facing website such that they do not significantly alter the browsing experience of the external user(s) using the access client(s) 255.

Credential object. In case the external user(s) use the RDP serving as the access client 255, upon login of the RDP, the campaign manager 216 may install additional fake credentials on the external endpoint 251 from which the RDP is initiated.

Configuration file. In case the external user(s) use the RDP serving as the access client 255, upon login of the RDP, the campaign manager 216 may install a fake remote access configuration file on the external endpoint 251 from which the RDP is initiated.

Deception file, password and/or the like. In case the external user(s) use the VNC serving as the access client 255, the campaign manager 216 may install additional fake credentials, files, password(s) and/or the like on the external endpoint 251from which the VNC is initiated.

In some cases, the access client 255 may be offered with automatic password completion when accessing a resource, a service and/or an application at the remote network. In such case(s), the campaign manager 216 may manipulate the automatic password completion and provide fake password(s) to the access client 255 accessing the protected network 235.

Archive files, for example, zip, rar, tar.gz and/or the like. In case the external user(s) using the access client 255 performs a backup and/or retrieves data from the protected network 235, the campaign manager 216 may insert one or more deception data objects 214 into one or more of the created archive files.

An account. The campaign manager 216 may provide the external user(s) one or more false accounts for accessing one of more of the deception applications 212. The campaign manager 216 may configure each of the deception data objects 214 to interact with one or more of the deception resources 210. The campaign manager 216 may configure the deception data objects 214 and define their relationships according to a deception policy and/or methods defined for the deception campaign. Naturally, the campaign manager 216 creates and configures the deception data objects 214 according to the resource(s) 222 accessed by the access client(s) 255. The campaign manager 216 also defines the interaction with the deception resource(s) 210 which map the accessed resource(s) 222. For example, the deceptive data object 214 of type "browser cookie" may be created to interact with one or more deception resources 210, for example, a fake website and/or a deception application launched using, for example, a deception resource 210 of type "browser" created during the deception campaign. As another example, a deceptive data object 214 of type "compressed file" may be created for external user(s) using a certain one of the external endpoints 251. As another example, a deceptive data object 214 of type "credentials" may be created for users accessing a certain application 212 of type "ERP". Optionally, the campaign manager 216 periodically and/or dynamically updates one or more of the deception data objects 214 to impersonate an active real (valid) processing environment such that the deception data objects 214 appear to be valid data objects to lead the potential attacker to believe the emulated deception environment is a real one.""" .

<http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-System,Method,AndComputerProgramProductForDetectingAndAssessingSecurityRisksInANetwork_ExabeamInc> a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System, method, and computer program product for detecting and assessing security risks in a network - Exabeam Inc" ;
    :has-link "https://patents.google.com/patent/US20190034641A1"^^xsd:anyURI ;
    :kb-abstract "The present disclosure is directed to a system, method, and computer program for detecting and assessing security risks in an enterprise's computer network. A behavior model is built for a user in the network based on the user's interactions with the network, wherein a behavior model for a user indicates client device(s), server(s), and resources used by the user. The user's behavior during a period of time is compared to the user's behavior model. A risk assessment is calculated for the period of time based at least in part on the comparison between the user's behavior and the user's behavior model, wherein any one of certain anomalies between the user's behavior and the user's behavior model increase the risk assessment." ;
    :kb-author "Sylvain Gil; Domingo Mihovilovic; Nir Polak; Magnus Stensmo; Sing Yip" ;
    :kb-mitre-analysis """This patent describes calculating a risk score to detect anomalies in user activity based on comparing a user's current session with a user behavior model. The user behavior model is comprised of a number of histograms including:

* client devices from which the user logs in
* servers accessed
* data accessed
* applications accessed
* session duration
* logon time of day
* logon day of week
* geo - location of logon origination

The system has an initial training period with x number of days (e. g., 90 days) in which session data is recorded in behavior models before behavior analysis begins.The histograms are then used to determine anomalies between current session activity and a user's behavior model. Values for a histogram category are along one axis and the number of times the value is received for the category is along another axis. If a data point value associated with the current user session is over an anomaly threshold, an alert is generated.""" ;
    :kb-organization "Exabeam Inc" ;
    :kb-reference-of :AuthenticationEventThresholding,
        :AuthorizationEventThresholding,
        :ResourceAccessPatternAnalysis,
        :SessionDurationAnalysis,
        :UserGeolocationLogonPatternAnalysis ;
    :kb-reference-title "System, method, and computer program product for detecting and assessing security risks in a network" .

<http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-TPM2.0LibrarySpecification_TrustedComputingGroup,Incorporated> a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - TPM 2.0 Library Specification - Trusted Computing Group, Incorporated" ;
    :has-link "https://trustedcomputinggroup.org/resource/tpm-library-specification/"^^xsd:anyURI ;
    :kb-abstract """This specification defines the Trusted Platform Module (TPM) a device that enables trust in computing
platforms in general. It is broken into parts to make the role of each part clear. All parts are required in
order to constitute a complete standard. For a complete definition of all requirements necessary to build a TPM, the designer will need to use the appropriate platform-specific specification to understand all of the requirements for a TPM in a specific application or make appropriate choices as an implementer. Those wishing to create a TPM need to be aware that this specification does not provide a complete picture of the options and commands necessary to implement a TPM. To implement a TPM the designer needs to refer to the relevant platform-specific specification to understand the options and settings required for a TPM in a specific type of platform or make appropriate choices as an implementer.""" ;
    :kb-author "Trusted Computing Group" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Trusted Computing Group, Incorporated" ;
    :kb-reference-of :TPMBootIntegrity ;
    :kb-reference-title "TPM 2.0 Library Specification" ;
    :todo "MITRE Analysis was not found",
        "No authors provided for reference" .

:HTTPSURL a owl:NamedIndividual,
        :URL ;
    rdfs:label "HTTPS URL" .

:HTTPURL a owl:NamedIndividual,
        :URL ;
    rdfs:label "HTTP URL" .

:InternationalizedDomainName a :DomainName,
        owl:NamedIndividual ;
    rdfs:label "Internationalized Domain Name" .

:iOSProcess a owl:NamedIndividual,
        :Process ;
    rdfs:label "iOS Process" .

:JavascriptFile a :ExecutableScript,
        owl:NamedIndividual ;
    rdfs:label "Javascript File" .

:LDIFRecord a owl:NamedIndividual,
        :UserAccount ;
    rdfs:label "LDIF Record" .

:LinuxELFFile32bit a :ExecutableBinary,
        owl:NamedIndividual ;
    rdfs:label "Linux ELF File 32bit" ;
    :definition "test" .

:LinuxELFFile64bit a :ExecutableBinary,
        owl:NamedIndividual ;
    rdfs:label "Linux ELF File 64bit" .

:LinuxExec a :CreateProcess,
        owl:NamedIndividual ;
    rdfs:label "Linux Exec" .

:LinuxProcess a owl:NamedIndividual,
        :Process ;
    rdfs:label "Linux Process" .

:LuaScriptFile a :ExecutableScript,
        owl:NamedIndividual ;
    rdfs:label "Lua Script File" .

:M1013 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Application Developer Guidance" ;
    :d3fend-comment "A future release of D3FEND will define a taxonomy of Source Code Hardening Techniques." .

:M1015 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Active Directory Configuration" ;
    :d3fend-comment "M1015 scope is broad, touches on an wide variety of techniques in D3FEND." ;
    :related :AuthenticationCacheInvalidation,
        :DomainTrustPolicy,
        :UserAccountPermissions .

:M1016 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Vulnerability Scanning" ;
    :d3fend-comment "Future D3FEND releases will model the scanning and inventory domains." .

:M1017 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "User Training" ;
    :d3fend-comment "Modeling user training is  outside the scope of D3FEND." .

:M1018 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "User Account Management" ;
    :related :LocalFilePermissions,
        :MandatoryAccessControl,
        :SystemConfigurationPermissions .

:M1019 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Threat Intelligence Program" ;
    :d3fend-comment "Establishing and running a Threat Intelligence Program is outside the scope of D3FEND." .

:M1020 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "SSL/TLS Inspection" ;
    :d3fend-comment "D3FEND models this as an infrastructure dependency to support D3-NTA." ;
    :related :NetworkTrafficAnalysis .

:M1021 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Restrict Web-Based Content" ;
    :d3fend-comment "M1021 scope is broad, touches on an wide variety of techniques in d3fend." ;
    :related :DNSAllowlisting,
        :DNSDenylisting,
        :FileAnalysis,
        :InboundTrafficFiltering,
        :NetworkTrafficAnalysis,
        :OutboundTrafficFiltering,
        :URLAnalysis .

:M1022 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Restrict File and Directory Permissions" ;
    :related :LocalFilePermissions .

:M1024 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Restrict Registry Permission" ;
    :related :SystemConfigurationPermissions .

:M1025 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Privileged Process Integrity" ;
    :related :BootloaderAuthentication,
        :DriverLoadIntegrityChecking,
        :MandatoryAccessControl,
        :ProcessSegmentExecutionPrevention .

:M1026 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Privileged Account Management" ;
    :related :DomainAccountMonitoring,
        :LocalAccountMonitoring,
        :StrongPasswordPolicy .

:M1027 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Password Policies" ;
    :related :One-timePassword,
        :StrongPasswordPolicy .

:M1028 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Operating System Configuration" ;
    :related :PlatformHardening .

:M1029 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Remote Data Storage" ;
    :d3fend-comment "IT disaster recovery plans are outside the current scope of D3FEND." .

:M1030 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Network Segmentation" ;
    :related :BroadcastDomainIsolation,
        :EncryptedTunnels,
        :InboundSessionVolumeAnalysis,
        :InboundTrafficFiltering .

:M1031 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Network Intrusion Prevention" ;
    :related :InboundTrafficFiltering,
        :NetworkTrafficAnalysis,
        :OutboundTrafficFiltering .

:M1032 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Multi-factor Authentication" ;
    :related :Multi-factorAuthentication .

:M1033 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Limit Software Installation" ;
    :related :ExecutableAllowlisting,
        :ExecutableDenylisting .

:M1034 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Limit Hardware Installation" ;
    :related :IOPortRestriction .

:M1035 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Limit Access to Resource Over Network" ;
    :related :NetworkIsolation .

:M1036 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Account Use Policies" ;
    :d3fend-comment "D3-AZET may be related (is potentially related though not called out in ATT&CK definition.)" ;
    :related :AccountLocking,
        :AuthenticationCacheInvalidation,
        :AuthenticationEventThresholding .

:M1037 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Filter Network Traffic" ;
    :related :NetworkIsolation .

:M1038 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Execution Prevention" ;
    :related :DriverLoadIntegrityChecking,
        :ExecutableAllowlisting,
        :ExecutableDenylisting,
        :ProcessSegmentExecutionPrevention .

:M1039 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Environment Variable Permissions" ;
    :related :ApplicationConfigurationHardening,
        :SystemFileAnalysis .

:M1040 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Behavior Prevention on Endpoint" ;
    :related :AuthenticationEventThresholding,
        :AuthorizationEventThresholding,
        :JobFunctionAccessPatternAnalysis,
        :ResourceAccessPatternAnalysis,
        :SessionDurationAnalysis,
        :UserDataTransferAnalysis,
        :UserGeolocationLogonPatternAnalysis,
        :WebSessionActivityAnalysis .

:M1041 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Encrypt Sensitive Information" ;
    :related :DiskEncryption,
        :EncryptedTunnels,
        :FileEncryption,
        :MessageEncryption .

:M1042 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Disable or Remove Feature or Program" ;
    :related :ApplicationConfigurationHardening,
        :ExecutableDenylisting,
        :MandatoryAccessControl .

:M1043 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Credential Access Protection" ;
    :related :Hardware-basedProcessIsolation .

:M1044 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Restrict Library Loading" ;
    :d3fend-comment "D3-SCF is one possible way to filter library loading." ;
    :related :SystemCallFiltering .

:M1045 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Code Signing" ;
    :related :DriverLoadIntegrityChecking,
        :ExecutableAllowlisting,
        :ServiceBinaryVerification .

:M1046 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Boot Integrity" ;
    :related :BootloaderAuthentication,
        :TPMBootIntegrity .

:M1047 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Audit" ;
    :d3fend-comment "M1047 scope is broad, touches on an wide variety of techniques in d3fend." ;
    :related :DomainAccountMonitoring,
        :LocalAccountMonitoring,
        :SystemFileAnalysis .

:M1048 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Application Isolation and Sandboxing" ;
    :d3fend-comment "\"Sandboxing\" is often used to describe a detection environment which includes some forms of analysis (see D3-DA.)\"  Many forms of isolation (e.g., quarantining) are more static in nature and simply limit software's access to system resources." ;
    :related :DynamicAnalysis,
        :Hardware-basedProcessIsolation,
        :MandatoryAccessControl,
        :SystemCallFiltering .

:M1049 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Antivirus/Antimalware" ;
    :d3fend-comment "Process Analysis and subclasses." ;
    :related :FileContentRules,
        :FileHashing,
        :ProcessAnalysis .

:M1050 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Exploit Protection" ;
    :related :ApplicationHardening,
        :ExceptionHandlerPointerValidation,
        :InboundTrafficFiltering,
        :ShadowStackComparisons .

:M1051 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Update Software" ;
    :related :SoftwareUpdate .

:M1052 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "User Account Control" ;
    :related :MandatoryAccessControl .

:M1053 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Data Backup" ;
    :d3fend-comment "Comprehensive IT disaster recovery plans are outside the current scope of D3FEND." .

:M1054 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Software Configuration" ;
    :related :ApplicationConfigurationHardening,
        :CertificatePinning .

:M1055 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Do Not Mitigate" .

:M1056 a :ATTACKMitigation,
        owl:NamedIndividual ;
    rdfs:label "Pre-compromise" ;
    :related :DecoyEnvironment,
        :DecoyObject .

:macOSProcess a owl:NamedIndividual,
        :Process ;
    rdfs:label "macOS Process" .

:MarketingMaterial a owl:NamedIndividual,
        :ReferenceType ;
    rdfs:label "Marketing Material" .

:MicrosoftVCCLCompilerToolBufferSecurityCheck a owl:NamedIndividual,
        :StackFrameCanaryValidation ;
    rdfs:label "Microsoft VCCLCompilerTool BufferSecurityCheck" .

:MicrosoftWordDOCBFile a :DocumentFile,
        owl:NamedIndividual ;
    rdfs:label "Microsoft Word DOCB File" .

:MicrosoftWordDOCFile a :DocumentFile,
        owl:NamedIndividual ;
    rdfs:label "Microsoft Word DOC File" .

:MicrosoftWordDOCMFile a :DocumentFile,
        owl:NamedIndividual ;
    rdfs:label "Microsoft Word DOCM File" .

:MicrosoftWordDOCXFile a :DocumentFile,
        owl:NamedIndividual ;
    rdfs:label "Microsoft Word DOCX File" .

:MicrosoftWordDOTFile a :DocumentFile,
        owl:NamedIndividual ;
    rdfs:label "Microsoft Word DOT File" .

:MicrosoftWordDOTMFile a :DocumentFile,
        owl:NamedIndividual ;
    rdfs:label "Microsoft Word DOTM File" .

:MicrosoftWordDOTXFile a :DocumentFile,
        owl:NamedIndividual ;
    rdfs:label "Microsoft Word DOTX File" .

:MicrosoftWordWBKFile a :DocumentFile,
        owl:NamedIndividual ;
    rdfs:label "Microsoft Word WBK File" .

:MSGEmailFile a :Email,
        owl:NamedIndividual ;
    rdfs:label "MSG Email File" .

:NIST_SP_800-53_R3 a :NISTSP800-53ControlCatalog,
        owl:NamedIndividual ;
    rdfs:label "NIST SP 800-53 R3" ;
    :archived-at "https://csrc.nist.gov/publications/detail/sp/800-53/rev-4/archive/2013-04-30"^^xsd:anyURI ;
    rdfs:seeAlso "https://csrc.nist.gov/publications/detail/sp/800-53/rev-4/archive/2013-04-30" ;
    :version 3 .

:NIST_SP_800-53_R4 a :NISTSP800-53ControlCatalog,
        owl:NamedIndividual ;
    rdfs:label "NIST SP 800-53 R4" ;
    :archived-at "https://csrc.nist.gov/publications/detail/sp/800-53/rev-4/archive/2013-04-30"^^xsd:anyURI ;
    rdfs:seeAlso "https://csrc.nist.gov/publications/detail/sp/800-53/rev-4/archive/2015-01-22" ;
    :version 4 .

:NIST_SP_800-53_R5 a :NISTSP800-53ControlCatalog,
        owl:NamedIndividual ;
    rdfs:label "NIST SP 800-53 R5" ;
    :archived-at "https://csrc.nist.gov/publications/detail/sp/800-53/rev-5/final"^^xsd:anyURI ;
    rdfs:seeAlso "https://csrc.nist.gov/publications/detail/sp/800-53/rev-5/final" ;
    :version 5 .

:non-real-time-analytic a :AnalyticLatency,
        owl:NamedIndividual ;
    rdfs:label "non-real-time-analytic" .

:non-real-time-eviction a :EvictionLatency,
        owl:NamedIndividual ;
    rdfs:label "non-real-time-eviction" .

:PE32ExecutableFile a :ExecutableBinary,
        owl:NamedIndividual ;
    rdfs:label "PE32 Executable File" .

:PE32PLUSExecutableFile a :ExecutableBinary,
        owl:NamedIndividual ;
    rdfs:label "PE32+ Executable File" .

:PowershellScriptFile a :ExecutableScript,
        owl:NamedIndividual ;
    rdfs:label "Powershell Script File" .

:procedure-1 a owl:NamedIndividual,
        :Procedure ;
    rdfs:label "Procedure 1 - T1134.001 Access Token Manipulation" ;
    :implements :T1134.001 ;
    :start :step-1 .

:real-time-analytic a :AnalyticLatency,
        owl:NamedIndividual ;
    rdfs:label "real-time-analytic" .

:real-time-eviction a :EvictionLatency,
        owl:NamedIndividual ;
    rdfs:label "real-time-eviction" .

:Reference-AccessPermissionModification_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2019-07-001: Access Permission Modification - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2019-07-001/"^^xsd:anyURI ;
    :kb-abstract "Adversaries sometimes modify object access rights at the operating system level. There are varying motivations behind this action - they may not want some files/objects to be changed on systems for persistence reasons and therefore provide admin only rights; also, they may want files to be accessible with lower levels of permissions." ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :SystemFileAnalysis ;
    :kb-reference-title "CAR-2019-07-001: Access Permission Modification" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-AccountMonitoring_ForescoutTechnologies a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Account monitoring - Forescout Technologies" ;
    :has-link "https://patents.google.com/patent/US20190205511A1"^^xsd:anyURI ;
    :kb-abstract "Systems, methods, and related technologies for account access monitoring are described. In certain aspects, a login request associated with a device can be analyzed and a score determined. The score and a threshold can be used to determine whether to initiate an action." ;
    :kb-author "Chunhui Zhan, Siying Yang" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Forescout Technologies" ;
    :kb-reference-of :AccountLocking ;
    :kb-reference-title "Account monitoring" ;
    :todo "MITRE Analysis was not found" .

:Reference-ActiveDirectoryDumpingViaNTDSUtil_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2019-08-002: Active Directory Dumping via NTDSUtil - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2019-08-002/"^^xsd:anyURI ;
    :kb-abstract "The NTDSUtil tool may be used to dump a Microsoft Active Directory database to disk for processing with a credential access tool such as Mimikatz. This is performed by launching ntdsutil.exe as a privileged user with command line arguments indicating that media should be created for offline Active Directory installation and specifying a folder path. This process will create a copy of the Active Directory database, ntds.dit, to the specified folder path." ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2019-08-002: Active Directory Dumping via NTDSUtil" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-ActiveFirewallSystemAndMethodology_McAfeeLLC a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Active firewall system and methodology - McAfee LLC" ;
    :has-link "https://patents.google.com/patent/US6550012B1"^^xsd:anyURI ;
    :kb-abstract "System and methodology providing automated or \"proactive\" network security (\"active\" firewall) are described. The system implements methodology for verifying or authenticating communications, especially between network security components thereby allowing those components to share information. In one embodiment, a system implementing an active firewall is provided which includes methodology for verifying or authenticating communications between network components (e.g., sensor(s), arbiter, and actor(s)), using cryptographic keys or digital certificates. Certificates may be used to digitally sign a message or file and, in a complementary manner, to verify a digital signature. At the outset, particular software components that may participate in authenticated communication are specified, including creating a digital certificate for each such software component. Upon detection by a sensor that an event of interest that has occurred in the computer network system, the system may initiate authenticated communication between the sensor component and a central arbiter (e.g., \"event orchestrator\") component, so that the sensor may report the event to the arbiter or \"brain.\" Thereafter, the arbiter (if it chooses to act on that information) initiates authenticated communication between itself and a third software component, an \"actor\" component (e.g., \"firewall\"). The arbiter may indicate to the actor how it should handle the event. The actor or firewall, upon receiving the information, may now undertake appropriate action, such as dynamically creating or modifying rules for appropriately handling the event, or it may choose to simply ignore the information." ;
    :kb-author "Emilio Villa, Adrian Zidaritz, Michael David Varga, Gerhard Eschelbeck, Michael Kevin Jones, Mark James McArdle" ;
    :kb-mitre-analysis " " ;
    :kb-organization "McAfee LLC" ;
    :kb-reference-of :InboundTrafficFiltering ;
    :kb-reference-title "Active firewall system and methodology" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-AdvancedDeviceMatchingSystem a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Advanced device matching system" ;
    :has-link "https://patents.google.com/patent/US10892951B2/"^^xsd:anyURI ;
    :kb-abstract """Disclosed is a device management system for discovery and management of components added to computer systems and sub-systems. The device management system provides for recognizing a newly added component, and determining if the newly added component is already a part of the system inventory. The newly added component is matched with a component currently on the system, based on at least one matching attribute. A point total is calculated for each match level and a final match score is provided. The match score is compared with an aggressiveness level to determine if a match does indeed exist.
""" ;
    :kb-author "Rajneesh Jalan, Joseph M. Schmitt, and Marco Simoes" ;
    :kb-organization "Device42 Inc" ;
    :kb-reference-of :HardwareComponentInventory ;
    :kb-reference-title "Advanced device matching system" .

:Reference-AllLoginsSinceLastBoot_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2015-07-001: All Logins Since Last Boot - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2015-07-001/"^^xsd:anyURI ;
    :kb-abstract """Once a credential dumper like mimikatz runs, every user logged on since boot is potentially compromised, because the credentials were accessed via the memory of lsass.exe. When such an event occurs, this analytic will give the forensic context to identify compromised users. Those users could potentially be used in later events for additional logons.

The time field indicates the first and last time a system reported a user logged into a given system. This means that activity could be intermittent between the times given and should not be considered a duration.""" ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :CredentialCompromiseScopeAnalysis ;
    :kb-reference-title "CAR-2015-07-001: All Logins Since Last Boot" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-AnalysisOfTheWindowsVistaSecurityModel_SymantecCorporation a :AcademicPaperReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Analysis of the Windows Vista Security Model - Symantec Corporation" ;
    :has-link "https://web.archive.org/web/20140407025337/http://www.symantec.com/avcenter/reference/Windows_Vista_Security_Model_Analysis.pdf"^^xsd:anyURI ;
    :kb-abstract "This     paper     provides     an     in-depth     technical     assessment    of    the    security    improvements    implemented    in    Windows Vista, focusing primarily on the areas of User Account Protection  and  User  Interface  Privilege  Isolation.  This  paper  discusses   these   features   and   touches   on   several   of   their   shortcomings. It then demonstrates how it is possible to combine these  attacks  to  gain  full  control  over  the  machine  from  low  integrity, low privilege process." ;
    :kb-author "Matthew Conover" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Symantec Corporation" ;
    :kb-reference-of :MandatoryAccessControl ;
    :kb-reference-title "Analysis of the Windows Vista Security Model" ;
    :todo "Could not determine reference type; TechniqueReference class used instead",
        "MITRE Analysis was not found" .

:Reference-AnomalyDetectionUsingAdaptiveBehavioralProfiles_SecuronixInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Anomaly Detection Using Adaptive Behavioral Profiles - Securonix Inc" ;
    :has-link "https://patents.google.com/patent/US20160226901A1"^^xsd:anyURI ;
    :kb-abstract "The invention provides a system and method for automatic creation of adaptive behavioral profiles for observables associated with resource states and events in a computer network (IT) infrastructure of an enterprise and for detecting anomalies that represent potential malicious activity and threats as deviations from normal behavior. Separate profiles may be created for each behavioral indicator, as well as for each time series of measurements, and aggregated to create an overall behavioral profile. An anomaly probability is determined from the behavioral profile and used to evaluate the data values of observables. Outlier data values which deviate from normal behavior by more than a predetermined probability threshold are identified for risk analysis as possible threats while inliers within the range of normal behavior are used to update the behavioral profile. Behavioral profiles are created for behavioral indicators based upon observables measured over predetermined time periods using algorithms employing statistical analysis approaches that work for any type of data distribution, and profiles are adapted over time using data aging to more closely represent current behavior. Algorithm parameters for creating profiles are based on the type of data, i.e., its metadata." ;
    :kb-author "Igor A. Baikalov; Tanuj Gulati; Sachin Nayyar; Anjaneya Shenoy; Ganpatrao H. Patwardhan" ;
    :kb-mitre-analysis """The patent describes a technique for detecting anomalous activity within an organization's IT infrastructure to identify threats. Behavioral profiles can be grouped by peer groups that identify functionally similar groups of actors (users or resources) based on their attributes and pre-defined grouping rules. For example, users can be grouped by their job title, organizational hierarchy, or location and can be observed for similarities in access patterns, based on granted access entitlements or actual logged resource access.

Behavioral profiles are created from measurements of events over a time period for example:

* Transaction counts
* Concurrent users per hour
* Daily volume of data

Outlier data values which deviate from behavioral profile by more than a predetermined probability threshold are identified for risk analysis as possible threats.""" ;
    :kb-organization "Securonix Inc" ;
    :kb-reference-of :JobFunctionAccessPatternAnalysis ;
    :kb-reference-title "Anomaly Detection Using Adaptive Behavioral Profiles" .

:Reference-Anti-tamperSystemWithSelf-adjustingGuards_ARXANTECHNOLOGIESInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Anti-tamper system with self-adjusting guards - ARXAN TECHNOLOGIES Inc" ;
    :has-link "https://patents.google.com/patent/US20150052603A1"^^xsd:anyURI ;
    :kb-abstract "An anti-tamper system is disclosed that includes self-adjusting guards inserted in software. Self-adjusting guards include invocation criteria and guard function. During run-time, each time the self-adjusting guard is invoked, the invocation criteria is evaluated and the guard function is only executed if the invocation criteria is satisfied. The invocation criteria can be static or dynamic, satisfied randomly with fixed or varying probability, a monotonically or exponentially decreasing function or most any other type of function. The invocation criteria can be satisfied based on elapsed inter-guard invocation time (time since last guard function execution), target inter-guard invocation time, and/or guard execution time. A method is disclosed of inserting self-adjusting guards into software, and executing the software. Evaluating the invocation criteria can include adjusting the invocation criteria when satisfied. The self-adjusting guards can be inserted into the software at a source or object code level." ;
    :kb-author "Kevin Dale Morgan" ;
    :kb-mitre-analysis " " ;
    :kb-organization "ARXAN TECHNOLOGIES Inc" ;
    :kb-reference-of :ProcessCodeSegmentVerification ;
    :kb-reference-title "Anti-tamper system with self-adjusting guards" ;
    :todo "MITRE Analysis was not found" .

:Reference-ApparatusForToProvideContentToAndQueryAReverseDomainNameSystemServer a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Apparatus for to provide content to and query a reverse domain name system server - Barrracuda Networks" ;
    :has-link "https://patents.google.com/patent/US20100174829A1/en?oq=20100174829"^^xsd:anyURI ;
    :kb-abstract "An apparatus is disclosed for to provide content to and query a reverse domain name system (DNS) server without depending on the kindness of domain name system registrars, registrants. DNS replies are observed by firewalls or filters, analyzed, and transmitted to a reverse domain name system server. An embodiment of the present invention can be within a DNS server or SMTP server." ;
    :kb-author "Dean Danko" ;
    :kb-mitre-analysis "This patent includes the description of a method of blocking email traffic from untrusted domains by analyzing the TCP/IP source IP addresses and blocking traffic for IPs whose reverse lookup response FQDN matches a denylist." ;
    :kb-reference-of :ReverseResolutionDomainDenylisting ;
    :kb-reference-title "Apparatus for to provide content to and query a reverse domain name system server" .

:Reference-ArchitectureOfTransparentNetworkSecurityForApplicationContainers_NeuvectorInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Architecture of transparent network security for application containers - Neuvector Inc" ;
    :has-link "https://patents.google.com/patent/US20170093922A1"^^xsd:anyURI ;
    :kb-abstract "A system comprises one or more application containers, each application container including computer-readable instructions and initiated via a container service and isolated using operating system-level virtualization. The system also comprises one or more virtual switches configured to route traffic from the application containers. The system further comprises one or more security containers, each security container configured to transparently intercept traffic from the one or more application containers for analysis of network security. The system further comprises a user interface (UI) container configured to receive configuration settings from a user. The system also comprises an analytics container configured to perform analysis on data received from the one or more security containers. The system also comprises a management container configured to configure settings for the one or more security containers and the analytics container." ;
    :kb-author "Gang Duan" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Neuvector Inc" ;
    :kb-reference-of :MandatoryAccessControl ;
    :kb-reference-title "Architecture of transparent network security for application containers" ;
    :todo "MITRE Analysis was not found" .

:Reference-AuditUserAccountManagement a :GuidelineReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Audit User Account Management" ;
    :has-link "https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/audit-user-account-management"^^xsd:anyURI ;
    :kb-abstract "Audit User Account Management determines whether the operating system generates audit events when specific user account management tasks are performed." ;
    :kb-organization "Microsoft" ;
    :kb-reference-of :DomainAccountMonitoring,
        :LocalAccountMonitoring ;
    :kb-reference-title "Audit User Account Management" .

:Reference-AutomatedComputerVulnerabilityResolutionSystem a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Automated computer vulnerability resolution system" ;
    :has-link "https://patents.google.com/patent/US7308712B2"^^xsd:anyURI ;
    :kb-abstract "A system and process for addressing computer security vulnerabilities. The system and process generally comprise aggregating vulnerability information on a plurality of computer vulnerabilities; constructing a remediation database of said plurality of computer vulnerabilities; constructing a remediation signature to address the computer vulnerabilities; and deploying said remediation signature to a client computer. The remediation signature essentially comprises a sequence of actions to address a corresponding vulnerability. A managed automated approach to the process is contemplated in which the system is capable of selective deployment of remediation signatures; selective resolution of vulnerabilities; scheduled deployment of remediation signatures; and scheduled scanning of client computers for vulnerabilities." ;
    :kb-author "Carl E. Banzhof" ;
    :kb-organization "McAfee LLC" ;
    :kb-reference-of :AssetVulnerabilityEnumeration ;
    :kb-reference-title "Automated computer vulnerability resolution system" .

:Reference-AutomaticallyGeneratingNetworkResourceGroupsAndAssigningCustomizedDecoyPoliciesThereto_IllusiveNetworksLtd a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Automatically generating network resource groups and assigning customized decoy policies thereto - Illusive Networks Ltd" ;
    :has-link "https://patents.google.com/patent/US20170310689A1"^^xsd:anyURI ;
    :kb-abstract "A cyber security system comprising circuitry of a decoy deployer planting one or more decoy lateral attack vectors in each of a first and a second group of resources within a common enterprise network of resources, the first and second groups of resources having different characteristics in terms of subnets, naming conventions, DNS aliases, listening ports, users and their privileges, and installed applications, wherein a lateral attack vector is an object of a first resource within the network that has a potential to be used by an attacker who discovered the first resource to further discover information regarding a second resource within the network, the second resource being previously undiscovered by the attacker, and wherein the decoy lateral attack vectors in the first group conform to the characteristics of the first group, and the decoy lateral attack vectors in the second group conform to the characteristics of the second group." ;
    :kb-author "Shlomo Touboul; Hanan Levin; Stephane Roubach; Assaf Mischari; Itai Ben David; Itay Avraham; Adi Ozer; Chen Kazaz; Ofer Israeli; Olga Vingurt; Liad Gareh; Israel Grimberg; Cobby Cohen; Sharon Sultan; Matan Kubovsky" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Illusive Networks Ltd" ;
    :kb-reference-of :DecoyNetworkResource ;
    :kb-reference-title "Automatically generating network resource groups and assigning customized decoy policies thereto" ;
    :todo "MITRE Analysis was not found" .

:Reference-AutomaticallyGeneratingRulesForConnectionSecurity_Microsoft a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Automatically generating rules for connection security - Microsoft" ;
    :has-link "https://patents.google.com/patent/US20120054825"^^xsd:anyURI ;
    :kb-abstract "A method and system for creating security policies for firewall and connection policies in an integrated manner is provided. The security system provides a user interface through which a user can define a security rule that specifies both a firewall policy and a connection policy. After the security rule is specified, the security system automatically generates a firewall rule and a connection rule to implement the security rule. The security system provides the firewall rule to a firewall engine that is responsible for enforcing the firewall rules and provides the connection rule to an IPsec engine that is responsible for enforcing the connection rules" ;
    :kb-author "Charles D. Bassett; Eran Yariv; Ian M. Carbaugh; Lokesh Srinivas Koppolu; Maksim Noy; Sarah A. Wahlert; Pradeep Bahl" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Microsoft" ;
    :kb-reference-of :InboundTrafficFiltering,
        :OutboundTrafficFiltering ;
    :kb-reference-title "Automatically generating rules for connection security" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-AutorunDifferences_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2013-01-002: Autorun Differences - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2013-01-002/"^^xsd:anyURI ;
    :kb-abstract """The Sysinternals tool Autoruns checks the registry and file system for known identify persistence mechanisms. It will output any tools identified, including built-in or added-on Microsoft functionality and third party software. Many of these locations are known by adversaries and used to obtain Persistence. Running Autoruns periodically in an environment makes it possible to collect and monitor its output for differences, which may include the removal or addition of persistent tools. Depending on the persistence mechanism and location, legitimate software may be more likely to make changes than an adversary tool. Thus, this analytic may result in significant noise in a highly dynamic environment. While Autoruns is a convenient method to scan for programs using persistence mechanisms its scanning nature does not conform well to streaming based analytics. This analytic could be replaced with one that draws from sensors that collect registry and file information if streaming analytics are desired.

Utilizes the Sysinternals autoruns tool (ignoring validated Microsoft entries). Primarily not a detection analytic by itself but through analysis of results by an analyst can be used for such. Building another analytic on top of this one identifying unusual entries would likely be a beneficial alternative.""" ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :SystemFileAnalysis ;
    :kb-reference-title "CAR-2013-01-002: Autorun Differences" ;
    :todo "MITRE Analysis was not found" .

:Reference-BiometricChallenge-ResponseAuthentication-Accenture a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Biometric Challenge-Response Authentication - Accenture" ;
    :has-link "https://www.patentguru.com/US2021110015A1"^^xsd:anyURI ;
    :kb-abstract """Secret biometric responses to authentication challenges for MFA.

Methods, systems, and apparatus, including computer programs encoded on computer storage media, for authenticating users based on a sequence of biometric authentication challenges. In one aspect, a process includes receiving a first image of the face of the user and processing the first image according to a first authentication process to determine whether the face of the user shown in the first image matches the face of an authorized user. A second authentication process including a sequence of biometric authentication challenges is identified. The sequence includes at least one facial expression challenge. The user is authenticated in response to determining that the first authentication process is satisfied based on the face of the user shown in the first image matching the face of the authorized user and the second authentication process is satisfied based on the user providing a valid biometric response to each biometric authentication challenge.""" ;
    :kb-author "Ben McCarty, Ellie Daw" ;
    :kb-mitre-analysis "MITRE Analysis was not found." ;
    :kb-organization "Accenture" ;
    :kb-reference-of :Multi-factorAuthentication ;
    :kb-reference-title "Biometric Challenge-Response Authentication" .

:Reference-BroadcastIsolationAndLevel3NetworkSwitch_HewlettPackardEnterpriseDevelopmentLP a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Broadcast isolation and level 3 network switch - Hewlett Packard Enterprise Development LP" ;
    :has-link "https://patents.google.com/patent/US5920699A"^^xsd:anyURI ;
    :kb-abstract "A network switch comprising a switching Application Specific Integrated Circuit (ASIC) and a Virtual Switching Engine (VSE) connected to a plurality of ports. The switching ASIC has a high-speed memory table which enables it to look up addresses that it has previously obtained and to forward unicast packets to said addresses. The VSE is a CPU that makes switching decisions outside of the ASIC and keeps track of any unknown addresses, forwarding the packets out the appropriate ports and answers broadcast packets by proxy for all known addresses without forwarding any of the packets down the VLANs, thereby freeing the VLAN bandwidth from excessive traffic. The system requires no user configuration because the switching methodology is self-adaptive to the network in which it is inserted and has the ability to perform router functions such as level 2 and 3 switching, spanning tree protocols and compatibility with Internetwork Packet and Internetwork Packet Exchange networks." ;
    :kb-author "Ballard C. Bare" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Hewlett Packard Enterprise Development LP" ;
    :kb-reference-of :BroadcastDomainIsolation ;
    :kb-reference-title "Broadcast isolation and level 3 network switch" ;
    :todo "MITRE Analysis was not found" .

:Reference-CAR-2014-05-001%3ARPCActivity_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2014-05-001: RPC Activity - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2014-05-001/"^^xsd:anyURI ;
    :kb-abstract """Microsoft Windows uses its implementation of Distributed Computing Environment/Remote Procedure Call (DCE/RPC), which it calls Microsoft RPC, to call certain APIs remotely.

A Remote Procedure Call is initiated by communicating to the RPC Endpoint Mapper, which exists as the Windows service RpcEptMapper and listens on the port 135/tcp. The endpoint mapper resolves a requested endpoint/interface and responds to the client with the port that the service is listening on. Since the RPC endpoints are assigned ports when the services start, these ports are dynamically assigned from 49152 to 65535. The connection to the endpoint mapper then terminates and the client program can communicate directly with the requested service.

RPC is a legitimate functionality of Windows that allows remote interaction with a variety of services. For a Windows environment to be properly configured, several programs use RPC to communicate legitimately with servers. The background and benign RPC activity may be enormous, but must be learned, especially peer-to-peer RPC between workstations, which is often indicative of Lateral Movement.""" ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :RPCTrafficAnalysis ;
    :kb-reference-title "CAR-2014-05-001: RPC Activity" ;
    :todo "MITRE Analysis was not found" .

:Reference-CAR-2014-11-007-RemoteWindowsManagementInstrumentation_WMI_OverRPC_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2014-11-007: Remote Windows Management Instrumentation (WMI) over RPC - MITRE" ;
    :has-link ""^^xsd:anyURI ;
    :kb-abstract """As described in ATT&CK, an adversary can use Windows Management Instrumentation (WMI) to view or manipulate objects on a remote host. It can be used to remotely edit configuration, start services, query files, and anything that can be done with a WMI class. When remote WMI requests are over RPC (CAR-2014-05-001), it connects to a DCOM interface within the RPC group netsvcs. To detect this activity, a sensor is needed at the network level that can decode RPC traffic or on the host where the communication can be detected more natively, such as Event Tracing for Windows. Using wireshark/tshark decoders, the WMI interfaces can be extracted so that WMI activity over RPC can be detected.

Although the description details how to detect remote WMI precisely, a decent estimate has been to look for the string RPCSS within the initial RPC connection on 135/tcp. It returns a superset of this activity, and will trigger on all DCOM-related services running within RPC, which is likely to also be activity that should be detected between hosts. More about RPCSS at : rpcss_dcom_interfaces.html""" ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :RPCTrafficAnalysis ;
    :kb-reference-title "CAR-2014-11-007: Remote Windows Management Instrumentation (WMI) over RPC" ;
    :todo "Could not determine reference type; TechniqueReference class used instead",
        "MITRE Analysis was not found",
        "No URL provided for reference" .

:Reference-CAR-2015-04-001%3ARemotelyScheduledTasksViaAT_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2015-04-001: Remotely Scheduled Tasks via AT - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2015-04-001/"^^xsd:anyURI ;
    :kb-abstract """When AT.exe is used to remotely schedule tasks, Windows uses named pipes over SMB to communicate with the API on the remote machine. After authentication over SMB, the Named Pipe “ATSVC” is opened, over which the JobAdd function is called. On the remote host, the job files are created by the Task Scheduler and follow the convention C:\\Windows\\System32\\AT<job\\_id>. Unlike CAR-2013-05-004, this analytic specifically focuses on uses of AT that can be detected between hosts, indicating remotely gained execution.

This pipe activity could be discovered with a network decoder, such as that in wireshark, that can inspect SMB traffic to identify the use of pipes. It could also be detected by looking for raw packet capture streams or from a custom sensor on the host that hooks the appropriate API functions. If no network or API level of visibility is possible, this traffic may inferred by looking at SMB connections over 445/tcp followed by the creation of files matching the pattern C:\\Windows\\System32\\AT\\<job_id\\>.""" ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :IPCTrafficAnalysis ;
    :kb-reference-title "CAR-2015-04-001: Remotely Scheduled Tasks via AT" ;
    :todo "MITRE Analysis was not found" .

:Reference-CAR-2016-04-004_SuccessfulLocalAccountLogin a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2016-04-004: Successful Local Account Login" ;
    :has-link "https://car.mitre.org/analytics/CAR-2016-04-004/"^^xsd:anyURI ;
    :kb-reference-of :LocalAccountMonitoring ;
    :kb-reference-title "Reference - CAR-2016-04-004: Successful Local Account Login" .

:Reference-CAR-2020-04-001%3AShadowCopyDeletion_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2020-04-001: Shadow Copy Deletion - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2020-04-001/"^^xsd:anyURI ;
    :kb-abstract """The Windows Volume Shadow Copy Service is a built-in OS feature that can be used to create backup copies of files and volumes.

Adversaries may delete these shadow copies, typically through the usage of system utilities such as vssadmin.exe or wmic.exe, in order prevent file and data recovery. This technique is commonly employed for this purpose by ransomware.""" ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2020-04-001: Shadow Copy Deletion" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2020-05-001%3AMiniDumpOfLSASS_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2020-05-001: MiniDump of LSASS - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2020-05-001/"^^xsd:anyURI ;
    :kb-abstract """This analytic detects the minidump variant of credential dumping where a process opens lsass.exe in order to extract credentials using the Win32 API call MiniDumpWriteDump. Tools like SafetyKatz, SafetyDump, and Outflank-Dumpert default to this variant and may be detected by this analytic, though keep in mind that not all options for using those tools will result in this specific behavior.

The analytic is based on a Sigma analytic contributed by Samir Bousseaden and written up in a blog on MENASEC. It looks for a call trace that includes either dbghelp.dll or dbgcore.dll, which export the relevant functions/permissions to perform the dump. It also detects using the Windows Task Manager (taskmgr.exe) to dump lsass, which is described in CAR-2019-08-001. In this iteration of the Sigma analytic, the GrantedAccess filter isn’t included because it didn’t seem to filter out any false positives and introduces the potential for evasion.

This analytic was tested both in a lab and in a production environment with a very low false-positive rate. werfault.exe and tasklist.exe, both standard Windows processes, showed up multiple times as false positives.""" ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :SystemCallAnalysis ;
    :kb-reference-title "CAR-2020-05-001: MiniDump of LSASS" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-CAR-2020-05-003%3ARareLolBASCommandLines_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2020-05-003: Rare LolBAS Command Lines - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2020-05-003/"^^xsd:anyURI ;
    :kb-abstract """LoLBAS are binaries and scripts that are built in to Windows, frequently are signed by Microsoft, and may be used by an attacker. Some LoLBAS are used very rarely and it might be possible to alert every time they’re used (this would depend on your environment), but many others are very common and can’t be simply alerted on.

This analytic takes all instances of LoLBAS execution and then looks for instances of command lines that are not normal in the environment. This can detect attackers (which will tend to need the binaries for something different than normal usage) but will also tend to have false positives.

The analytic needs to be tuned. The 1.5 in the query is the number of standard deviations away to look. It can be tuned up to filter out more noise and tuned down to get more results. This means it is probably best as a hunting analytic when you have analysts looking at the screen and able to tune the analytic up and down, because the threshold may not be stable for very long.""" ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2020-05-003: Rare LolBAS Command Lines" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2020-08-001%3ANTFSAlternateDataStreamExecution-SystemUtilities_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2020-08-001: NTFS Alternate Data Stream Execution - System Utilities - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2020-08-001/"^^xsd:anyURI ;
    :kb-abstract "NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because they can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using system utilities such as powershell." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2020-08-001: NTFS Alternate Data Stream Execution - System Utilities" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2020-09-001%3AScheduledTask-FileAccess_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2020-09-001: Scheduled Task - FileAccess - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2020-09-001/"^^xsd:anyURI ;
    :kb-abstract "In order to gain persistence, privilege escalation, or remote execution, an adversary may use the Windows Task Scheduler to schedule a command to be run at a specified time, date, and even host. Task Scheduler stores tasks as files in two locations - C:\\Windows\\Tasks (legacy) or C:\\Windows\\System32\\Tasks. Accordingly, this analytic looks for the creation of task files in these two locations." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :FileCreationAnalysis ;
    :kb-reference-title "CAR-2020-09-001: Scheduled Task - FileAccess" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2020-09-002%3AComponentObjectModelHijacking_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2020-09-002:  Component Object Model Hijacking - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2020-09-002/"^^xsd:anyURI ;
    :kb-abstract "Adversaries may establish persistence or escalate privileges by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. This is typically done by replacing COM object registry entries under the HKEY_CURRENT_USER\\Software\\Classes\\CLSID or HKEY_LOCAL_MACHINE\\SOFTWARE\\Classes\\CLSID keys. Accordingly, this analytic looks for any changes under these keys." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :UserSessionInitConfigAnalysis ;
    :kb-reference-title "CAR-2020-09-002: Component Object Model Hijacking" ;
    :todo "MITRE Analysis was not found" .

:Reference-CAR-2020-09-003%3AIndicatorBlocking-DriverUnloaded_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2020-09-003: Indicator Blocking - Driver Unloaded - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2020-09-003/"^^xsd:anyURI ;
    :kb-abstract "Adversaries may attempt to evade system defenses by unloading minifilter drivers used by host-based sensors such as Sysmon through the use of the fltmc command-line utility. Accordingly, this analytic looks for command-line invocations of this utility when used to unload minifilter drivers." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2020-09-003: Indicator Blocking - Driver Unloaded" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2020-09-004%3ACredentialsInFiles%26Registry_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2020-09-004: Credentials in Files & Registry - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2020-09-004/"^^xsd:anyURI ;
    :kb-abstract "Adversaries may search the Windows Registry on compromised systems for insecurely stored credentials for credential access. This can be accomplished using the query functionality of the reg.exe system utility, by looking for keys and values that contain strings such as “password”. In addition, adversaries may use toolkits such as PowerSploit in order to dump credentials from various applications such as IIS.Accordingly, this analytic looks for invocations of reg.exe in this capacity as well as that of several powersploit modules with similar functionality." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2020-09-004: Credentials in Files & Registry" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2020-09-005%3AAppInitDLLs_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2020-09-005: AppInit DLLs - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2020-09-005/"^^xsd:anyURI ;
    :kb-abstract "Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows or HKEY_LOCAL_MACHINE\\Software\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows are loaded by user32.dll into every process that loads user32.dll. These values can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes. Accordingly, this analytic looks for modifications to these registry keys that may be indicative of this type of abuse." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :SystemInitConfigAnalysis ;
    :kb-reference-title "CAR-2020-09-005: AppInit DLLs" ;
    :todo "MITRE Analysis was not found" .

:Reference-CAR-2020-11-001%3ABootOrLogonInitializationScripts_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2020-11-001: Boot or Logon Initialization Scripts - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2020-11-001/"^^xsd:anyURI ;
    :kb-abstract "Adversaries may schedule software to run whenever a user logs into the system; this is done to establish persistence and sometimes for lateral movement. This trigger is established through the registry key HKEY_CURRENT_USER\\EnvironmentUserInitMprLogonScript. This signature looks edits to existing keys or creation of new keys in that path. Users purposefully adding benign scripts to this path will result in false positives; that case is rare, however. There are other ways of running a script at startup or login that are not covered in this signature. Note that this signature overlaps with the Windows Sysinternals Autoruns tool, which would also show changes to this registry path." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :SystemInitConfigAnalysis ;
    :kb-reference-title "CAR-2020-11-001: Boot or Logon Initialization Scripts" ;
    :todo "MITRE Analysis was not found" .

:Reference-CAR-2020-11-002%3ALocalNetworkSniffing_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2020-11-002: Local Network Sniffing - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2020-11-002/"^^xsd:anyURI ;
    :kb-abstract "Adversaries may use a variety of tools to gain visibility on the current status of things on the network: which processes are listening on which ports, which services are running on other hosts, etc. This analytic looks for the names of the most common network sniffing tools. While this may be noisy on networks where sysadmins are using any of these tools on a regular basis, in most networks their use is noteworthy." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessLineageAnalysis ;
    :kb-reference-title "CAR-2020-11-002: Local Network Sniffing" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2020-11-003%3ADLLInjectionWithMavinject_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2020-11-003: DLL Injection with Mavinject - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2020-11-003/"^^xsd:anyURI ;
    :kb-abstract "Injecting a malicious DLL into a process is a common adversary TTP. Although the ways of doing this are numerous, mavinject.exe is a commonly used tool for doing so because it roles up many of the necessary steps into one, and is available within Windows. Attackers may rename the executable, so we also use the common argument “INJECTRUNNING” as a related signature here. Whitelisting certain applications may be necessary to reduce noise for this analytic." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2020-11-003: DLL Injection with Mavinject" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2020-11-004%3AProcessesStartedFromIrregularParent_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2020-11-004: Processes Started From Irregular Parent - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2020-11-004/"^^xsd:anyURI ;
    :kb-abstract "Adversaries may start legitimate processes and then use their memory space to run malicious code. This analytic looks for common Windows processes that have been abused this way in the past; when the processes are started for this purpose they may not have the standard parent that we would expect. This list is not exhaustive, and it is possible for cyber actors to avoid this discepency. These signatures only work if Sysmon reports the parent process, which may not always be the case if the parent dies before sysmon processes the event." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessLineageAnalysis ;
    :kb-reference-title "CAR-2020-11-004: Processes Started From Irregular Parent" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2020-11-005%3AClearPowershellConsoleCommandHistory_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2020-11-005: Clear Powershell Console Command History - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2020-11-005/"^^xsd:anyURI ;
    :kb-abstract "Adversaries may attempt to conceal their tracks by deleting the history of commands run within the Powershell console, or turning off history saving to begin with. This analytic looks for several commands that would do this. This does not capture the event if it is done within the console itself; only commandline-based commands are detected. Note that the command to remove the history file directly may very a bit if the history file is not saved in the default path on a particular system." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2020-11-005: Clear Powershell Console Command History" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2020-11-006%3ALocalPermissionGroupDiscovery_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2020-11-006: Local Permission Group Discovery - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2020-11-006/"^^xsd:anyURI ;
    :kb-abstract "Cyber actors frequently enumerate local or domain permissions groups. The net utility is usually used for this purpose. This analytic looks for any instances of net.exe, which is not normally used for benign purposes, although system administrator actions may trigger false positives." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2020-11-006: Local Permission Group Discovery" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2020-11-007%3ANetworkShareConnectionRemoval_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2020-11-007: Network Share Connection Removal - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2020-11-007/"^^xsd:anyURI ;
    :kb-abstract "Adversaries may use network shares to exfliltrate date; they will then remove the shares to cover their tracks. This analytic looks for the removal of network shares via commandline, which is otherwise a rare event." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2020-11-007: Network Share Connection Removal" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2020-11-008%3AMSBuildAndMsxsl_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2020-11-008: MSBuild and msxsl - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2020-11-008/"^^xsd:anyURI ;
    :kb-abstract "Trusted developer utilities such as MSBuild may be leveraged to run malicious code with elevated privileges. This analytic looks for any instances of msbuild.exe, which will execute any C# code placed within a given XML document; and msxsl.exe, which processes xsl transformation specifications for XML files and will execute a variaty of scripting languages contained within the XSL file. Both of these executables are rarely used outside of Visual Studio." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2020-11-008: MSBuild and msxsl" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2020-11-009%3ACompiledHTMLAccess_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2020-11-009: Compiled HTML Access - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2020-11-009/"^^xsd:anyURI ;
    :kb-abstract "Adversaries may hide malicious code in .chm compiled HTML files. When these files are read, Windows uses the HTML help executable named hh.exe, which is the signature for this analytic." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2020-11-009: Compiled HTML Access" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2020-11-010%3ACMSTP_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2020-11-010: CMSTP - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2020-11-010/"^^xsd:anyURI ;
    :kb-abstract "CMSTP.exe is the Microsoft Connection Manager Profile Installer, which can be leveraged to setup listeners that will receive and install malware from remote sources in trusted fashion. When CMSTP.exe is seen in combination with an external connection, it is a good indication of this TTP." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2020-11-010: CMSTP" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2020-11-011%3ARegistryEditFromScreensaver a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2020-11-011: Registry Edit from Screensaver" ;
    :has-link "https://car.mitre.org/analytics/CAR-2020-11-011/"^^xsd:anyURI ;
    :kb-abstract "Adversaries may use screensaver files to run malicious code. This analytic triggers on suspicious edits to the screensaver registry keys, which dictate which .scr file the screensaver runs." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :UserSessionInitConfigAnalysis ;
    :kb-reference-title "CAR-2020-11-011: Registry Edit from Screensaver" ;
    :todo "MITRE Analysis was not found" .

:Reference-CAR-2021-01-002%3AUnusuallyLongCommandLineStrings_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2021-01-002: Unusually Long Command Line Strings - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2021-01-002/"^^xsd:anyURI ;
    :kb-abstract "Often, after a threat actor gains access to a system, they will attempt to run some kind of malware to further infect the victim machine. These malware often have long command line strings, which could be a possible indicator of attack. Here, we use sysmon and Splunk to first find the average command string length and search for command strings that stretch over multiple lines, thus identifying anomalies and possibly malicious commands." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2021-01-002: Unusually Long Command Line Strings" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2021-01-003%3AClearingWindowsLogsWithWevtutil_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2021-01-003: Clearing Windows Logs with Wevtutil - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2021-01-003/"^^xsd:anyURI ;
    :kb-abstract "In an attempt to clear traces after compromising a machine, threat actors often try to clear Windows Event logs. This is often done using “wevtutil”, a legitimate tool provided by Microsoft. This action interferes with event collection and notification, and may lead to a security event going undetected, thereby potentially leading to further compromise of the network." ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2021-01-003: Clearing Windows Logs with Wevtutil" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2021-01-004%3AUnusualChildProcessForSpoolsv.ExeOrConnhost.Exe_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2021-01-004: Unusual Child Process for Spoolsv.Exe or Connhost.Exe - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2021-01-004/"^^xsd:anyURI ;
    :kb-abstract "After gaining initial access to a system, threat actors attempt to escalate privileges as they may be operating within a lower privileged process which does not allow them to access protected information or carry out tasks which require higher permissions. A common way of escalating privileges in a system is by externally invoking and exploiting spoolsv or connhost executables, both of which are legitimate Windows applications. This query searches for an invocation of either of these executables by a user, thus alerting us of any potentially malicious activity." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2021-01-004: Unusual Child Process for Spoolsv.Exe or Connhost.Exe" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2021-01-006%3AUnusualChildProcessSpawnedUsingDDEExploit_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2021-01-006: Unusual Child Process spawned using DDE exploit - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2021-01-006/"^^xsd:anyURI ;
    :kb-abstract "Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. DDE is a client-server protocol for one-time and/or continuous inter-process communication (IPC) between applications. Once a link is established, applications can autonomously exchange transactions consisting of strings, warm data links (notifications when a data item changes), hot data links (duplications of changes to a data item), and requests for command execution." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2021-01-006: Unusual Child Process spawned using DDE exploit" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2021-01-007%3ADetectingTamperingOfWindowsDefenderCommandPrompt_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2021-01-007: Detecting Tampering of Windows Defender Command Prompt - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2021-01-007/"^^xsd:anyURI ;
    :kb-abstract "In an attempt to avoid detection after compromising a machine, threat actors often try to disable Windows Defender. This is often done using “sc” [service control], a legitimate tool provided by Microsoft for managing services. This action interferes with event detection and may lead to a security event going undetected, thereby potentially leading to further compromise of the network." ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis "d" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2021-01-007: Detecting Tampering of Windows Defender Command Prompt" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2021-01-008%3ADisableUAC_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2021-01-008: Disable UAC - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2021-01-008/"^^xsd:anyURI ;
    :kb-abstract "Threat actors often, after compromising a machine, try to disable User Access Control (UAC) to escalate privileges. This is often done by changing the registry key for system policies using “reg.exe”, a legitimate tool provided by Microsoft for modifying the registry via command prompt or scripts. This action interferes with UAC and may enable a threat actor to escalate privileges on the compromised system, thereby allowing further exploitation of the system." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2021-01-008: Disable UAC" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2021-01-009%3ADetectingShadowCopyDeletionViaVssadmin.exe_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2021-01-009: Detecting Shadow Copy Deletion via Vssadmin.exe - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2021-01-009/"^^xsd:anyURI ;
    :kb-abstract "After compromising a network of systems, threat actors often try to delete Shadow Copy in an attempt to prevent administrators from restoring the systems to versions present before the attack. This is often done via vssadmin, a legitimate Windows tool to interact with shadow copies. This non-detection of this technique, which is often employed by ransomware strains such as “Olympic Destroyer”, may lead to a failure in recovering systems after an attack." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2021-01-009: Detecting Shadow Copy Deletion via Vssadmin.exe" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2021-02-001%3AWebshell-IndicativeProcessTree_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2021-02-001: Webshell-Indicative Process Tree - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2021-02-001/"^^xsd:anyURI ;
    :kb-abstract "A web shell is a web script placed on an openly accessible web server to allow an adversary to use the server as a gatway in a network. As the shell operates, commands will be issued from within the web application into the broader server operating system. This analytic looks for host enumeration executables initiated by any web service that would not normally be executed within that environment." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2021-02-001: Webshell-Indicative Process Tree" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2021-02-002%3AGetSystemElevation_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2021-02-002: Get System Elevation - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2021-02-002/"^^xsd:anyURI ;
    :kb-abstract "Cyber actors frequently escalate to the SYSTEM account after gaining entry to a Windows host, to enable them to carry out various attacks more effectively. Tools such as Meterpreter, Cobalt Strike, and Empire carry out automated steps to “Get System”, which is the same as switching over to the System user account. Most of these tools utilize multiple techniques to try and attain SYSTEM: in the first technique, they create a named pipe and connects an instance of cmd.exe to it, which allows them to impersonate the security context of cmd.exe, which is SYSTEM. In the second technique, a malicious DLL is injected into a process that is running as SYSTEM; the injected DLL steals the SYSTEM token and applies it where necessary to escalate privileges. This analytic looks for both of these techniques." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessLineageAnalysis ;
    :kb-reference-title "CAR-2021-02-002: Get System Elevation" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2021-04-001%3ACommonWindowsProcessMasquerading_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2021-04-001: Common Windows Process Masquerading - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2021-04-001/"^^xsd:anyURI ;
    :kb-abstract """Masquerading (T1036) is defined by ATT&CK as follows:

“Masquerading occurs when the name or location of an object, legitimate or malicious, is manipulated or abused for the sake of evading defenses and observation. This may include manipulating file metadata, tricking users into misidentifying the file type, and giving legitimate task or service names.”

Malware authors often use this technique to hide malicious executables behind legitimate Windows executable names (e.g. lsass.exe, svchost.exe, etc).

There are several sub-techniques, but this analytic focuses on Match Legitimate Name or Location only.""" ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2021-04-001: Common Windows Process Masquerading" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2021-05-001%3AAttemptToAddCertificateToUntrustedStore_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2021-05-001: Attempt To Add Certificate To Untrusted Store - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2021-05-001/"^^xsd:anyURI ;
    :kb-abstract "Adversaries may add their own root certificate to the certificate store, to cause the web browser to trust that certificate and not display a security warning when it encounters the previously unseen certificate. This action may be the precursor to malicious activity." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2021-05-001: Attempt To Add Certificate To Untrusted Store" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2021-05-002%3ABatchFileWriteToSystem32_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2021-05-002: Batch File Write to System32 - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2021-05-002/"^^xsd:anyURI ;
    :kb-abstract "While batch files are not inherently malicious, it is uncommon to see them created after OS installation, especially in the Windows directory. This analytic looks for the suspicious activity of a batch file being created within the C:\\Windows\\System32 directory tree. There will be only occasional false positives due to administrator actions." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2021-05-002: Batch File Write to System32" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2021-05-003%3ABCDEditFailureRecoveryModification_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2021-05-003: BCDEdit Failure Recovery Modification - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2021-05-003/"^^xsd:anyURI ;
    :kb-abstract "This search looks for flags passed to bcdedit.exe modifications to the built-in Windows error recovery boot configurations. This is typically used by ransomware to prevent recovery." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2021-05-003: BCDEdit Failure Recovery Modification" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2021-05-004%3ABITSJobPersistence_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2021-05-004: BITS Job Persistence - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2021-05-004/"^^xsd:anyURI ;
    :kb-abstract "The following query identifies Microsoft Background Intelligent Transfer Service utility bitsadmin.exe scheduling a BITS job to persist on an endpoint. The query identifies the parameters used to create, resume or add a file to a BITS job. Typically seen combined in a oneliner or ran in sequence. If identified, review the BITS job created and capture any files written to disk. It is possible for BITS to be used to upload files and this may require further network data analysis to identify. You can use bitsadmin /list /verbose to list out the jobs during investigation." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2021-05-004: BITS Job Persistence" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2021-05-005%3ABITSAdminDownloadFile_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2021-05-005: BITSAdmin Download File - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2021-05-005/"^^xsd:anyURI ;
    :kb-abstract "The following query identifies Microsoft Background Intelligent Transfer Service utility bitsadmin.exe using the transfer parameter to download a remote object. In addition, look for download or upload on the command-line, the switches are not required to perform a transfer. Capture any files downloaded. Review the reputation of the IP or domain used. Typically once executed, a follow on command will be used to execute the dropped file. Note that the network connection or file modification events related will not spawn or create from bitsadmin.exe, but the artifacts will appear in a parallel process of svchost.exe with a command-line similar to svchost.exe -k netsvcs -s BITS. It’s important to review all parallel and child processes to capture any behaviors and artifacts. In some suspicious and malicious instances, BITS jobs will be created. You can use bitsadmin /list /verbose to list out the jobs during investigation." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2021-05-005: BITSAdmin Download File" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2021-05-006%3ACertUtilDownloadWithURLCacheAndSplitArguments_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2021-05-006: CertUtil Download With URLCache and Split Arguments - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2021-05-006/"^^xsd:anyURI ;
    :kb-abstract "Certutil.exe may download a file from a remote destination using -urlcache. This behavior does require a URL to be passed on the command-line. In addition, -f (force) and -split (Split embedded ASN.1 elements, and save to files) will be used. It is not entirely common for certutil.exe to contact public IP space. However, it is uncommon for certutil.exe to write files to world writeable paths.\\ During triage, capture any files on disk and review. Review the reputation of the remote IP or domain in question." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2021-05-006: CertUtil Download With URLCache and Split Arguments" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2021-05-007%3ACertUtilDownloadWithVerifyCtlAndSplitArguments_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2021-05-007: CertUtil Download With VerifyCtl and Split Arguments - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2021-05-007/"^^xsd:anyURI ;
    :kb-abstract "Certutil.exe may download a file from a remote destination using -VerifyCtl. This behavior does require a URL to be passed on the command-line. In addition, -f (force) and -split (Split embedded ASN.1 elements, and save to files) will be used. It is not entirely common for certutil.exe to contact public IP space. \\ During triage, capture any files on disk and review. Review the reputation of the remote IP or domain in question. Using -VerifyCtl, the file will either be written to the current working directory or %APPDATA%\\..\\LocalLow\\Microsoft\\CryptnetUrlCache\\Content\\<hash>." ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2021-05-007: CertUtil Download With VerifyCtl and Split Arguments" .

:Reference-CAR-2021-05-008%3ACertutilExeCertificateExtraction_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2021-05-008: Certutil exe certificate extraction - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2021-05-008/"^^xsd:anyURI ;
    :kb-abstract "This search looks for arguments to certutil.exe indicating the manipulation or extraction of Certificate. This certificate can then be used to sign new authentication tokens specially inside Federated environments such as Windows ADFS." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2021-05-008: Certutil exe certificate extraction" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2021-05-009%3ACertUtilWithDecodeArgument_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2021-05-009: CertUtil With Decode Argument - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2021-05-009/"^^xsd:anyURI ;
    :kb-abstract "CertUtil.exe may be used to encode and decode a file, including PE and script code. Encoding will convert a file to base64 with -----BEGIN CERTIFICATE----- and -----END CERTIFICATE----- tags. Malicious usage will include decoding a encoded file that was downloaded. Once decoded, it will be loaded by a parallel process. Note that there are two additional command switches that may be used - encodehex and decodehex. Similarly, the file will be encoded in HEX and later decoded for further execution. During triage, identify the source of the file being decoded. Review its contents or execution behavior for further analysis." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2021-05-009: CertUtil With Decode Argument" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2021-05-010%3ACreateLocalAdminAccountsUsingNetExe_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2021-05-010: Create local admin accounts using net exe - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2021-05-010/"^^xsd:anyURI ;
    :kb-abstract "This search looks for the creation of local administrator accounts using net.exe." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2021-05-010: Create local admin accounts using net exe" ;
    :todo "MITRE Analysis was not found." .

:Reference-CAR-2021-05-011%3ACreateRemoteThreadIntoLSASS_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2021-05-011: Create Remote Thread into LSASS - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2021-05-011/"^^xsd:anyURI ;
    :kb-abstract "Actors may create a remote thread into the LSASS service as part of a workflow to dump credentials." ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :SystemCallAnalysis ;
    :kb-reference-title "CAR-2021-05-011: Create Remote Thread into LSASS" ;
    :todo "MITRE Analysis was not found." .

:Reference-CatiaUAFPlugin a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Catia UAF Plugin" ;
    :has-link "https://www.3ds.com/products-services/catia/products/no-magic/addons/uaf-plugin/"^^xsd:anyURI ;
    :kb-abstract "MagicDraw offers the most robust standards compliant [Unified Architecture Framework (UAF)], DoDAF 2.0, MODAF 1.2, NAF 3, and NAF 4 via a UAF standardized solution. And what's more, No Magic fully supports all architectural framework products ensuring you achieve project results. No Magic also leads the industry in usability and interoprability, ensuring that you avoid unnecessary cost, schedule and performance risk." ;
    :kb-organization "Dassault Systemes" ;
    :kb-reference-of :DataExchangeMapping,
        :OperationalActivityMapping,
        :OperationalDependencyMapping,
        :OrganizationMapping,
        :ServiceDependencyMapping,
        :SystemDependencyMapping ;
    :kb-reference-title "Catia UAF Plugin" .

:Reference-CertificateAndPublicKeyPinning a owl:NamedIndividual,
        :TechniqueReference ;
    rdfs:label "Reference - Certificate and Public Key Pinning" ;
    :has-link "https://owasp.org/www-community/controls/Certificate_and_Public_Key_Pinning"^^xsd:anyURI ;
    :kb-abstract "Certificate and Public Key Pinning technical guide to implementing certificate and public key pinning." ;
    :kb-author "OWASP" ;
    :kb-organization "OWASP" ;
    :kb-reference-of :CertificatePinning ;
    :kb-reference-title "Certificate and Public Key Pinning" .

:Reference-CertificateTransparency a owl:NamedIndividual,
        :TechniqueReference ;
    rdfs:label "Reference - Certificate Transparency" ;
    :has-link "https://www.certificate-transparency.org/"^^xsd:anyURI ;
    :kb-abstract """Google's Certificate Transparency project fixes several structural flaws in the SSL certificate system, which is the main cryptographic system that underlies all HTTPS connections.

These flaws weaken the reliability and effectiveness of encrypted Internet connections and can compromise critical TLS/SSL mechanisms, including domain validation, end-to-end encryption, and the chains of trust set up by certificate authorities.""" ;
    :kb-author "Google" ;
    :kb-organization "Google" ;
    :kb-reference-of :PassiveCertificateAnalysis ;
    :kb-reference-title "Certificate Transparency" .

:Reference-CiscoASR9000AccessListCommands a owl:NamedIndividual,
        :UserManualReference ;
    rdfs:label "Reference - Cisco ASR 9000 Series Aggregation Services Routers - Access List Commands" ;
    :has-link "https://www.cisco.com/c/en/us/td/docs/routers/asr9000/software/asr9k_r4-0/addr_serv/command/reference/ir40asrbook_chapter1.html"^^xsd:anyURI ;
    :kb-abstract "An access control list (ACL) consists of one or more access control entries (ACEs) that collectively define the network traffic profile. This profile can then be referenced by Cisco IOS XR Software software features such as traffic filtering, priority or custom queueing, and dynamic access control. Each ACL includes an action element (permit or deny) and a filter element based on criteria such as source address, destination address, protocol, and protocol-specific parameters." ;
    :kb-organization "Cisco" ;
    :kb-reference-of :NetworkTrafficPolicyMapping ;
    :kb-reference-title "Cisco ASR 9000 Series Aggregation Services Routers - Access List Commands" .

:Reference-CommandLaunchedFromWinLogon_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2014-11-008: Command Launched from WinLogon - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2014-11-008/"^^xsd:anyURI ;
    :kb-abstract "An adversary can use accessibility features (Ease of Access), such as StickyKeys or Utilman, to launch a command shell from the logon screen and gain SYSTEM access. Since an adversary does not have physical access to the machine, this technique must be run within Remote Desktop. To prevent an adversary from getting to the login screen without first authenticating, Network-Level Authentication (NLA) must be enabled. If a debugger is set up for one of the accessibility features, then it will intercept the process launch of the feature and instead execute a new command line. This analytic looks for instances of cmd.exe or powershell.exe launched directly from the logon process, winlogon.exe. It should be used in tandem with CAR-2014-11-003, which detects the accessibility programs in the command line." ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessLineageAnalysis ;
    :kb-reference-title "CAR-2014-11-008: Command Launched from WinLogon" ;
    :todo "MITRE Analysis was not found" .

:Reference-CommandLineUsageOfArchivingSoftware_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2013-07-005: Command Line Usage of Archiving Software - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2013-07-005/"^^xsd:anyURI ;
    :kb-abstract """Before exfiltrating data that an adversary has collected, it is very likely that a compressed archive will be created, so that transfer times are minimized and fewer files are transmitted. There is variety between the tools used to compress data, but the command line usage and context of archiving tools, such as ZIP, RAR, and 7ZIP, should be monitored.

In addition to looking for RAR or 7z program names, command line usage of 7Zip or RAR can be detected with the flag usage of "\\* a \\*". This is helpful, as adversaries may change program names.""" ;
    :kb-author "" ;
    :kb-mitre-analysis " " ;
    :kb-organization "" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2013-07-005: Command Line Usage of Archiving Software" ;
    :todo "MITRE Analysis was not found",
        "No author organizations provided for reference, add one?",
        "No authors provided for reference",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-ComputationalModelingAndClassificationOfDataStreams_CrowdstrikeInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Computational modeling and classification of data streams - Crowdstrike Inc" ;
    :has-link "https://patents.google.com/patent/US20180197089A1/en?oq=US-2018197089-A1"^^xsd:anyURI ;
    :kb-abstract "Example techniques described herein determine a signature or classification of a data stream such as a file. The classification can indicate whether the data stream is associated with malware. A processor can locate training analysis regions of training data streams based on predetermined structure data, and determining training model inputs based on the training analysis regions. The processor can determine a computational model based on the training model inputs. The computational model can receive an input vector and provide a corresponding feature vector. The processor can then locate a trial analysis region of a trial data stream based on the predetermined structure data and determine a trial model input. The processor can operate the computational model based on the trial model input to provide a trial feature vector, e.g., a signature. The processor can operate a second computational model to provide a classification based on the signature." ;
    :kb-author "Sven Krasser; David Elkind; Patrick Crenshaw; Brett Meyer" ;
    :kb-mitre-analysis "Provides a mechanism to classify files using file signatures based on a computational model. Training data that comprises at least a portion of a file, e.g. number of bytes, is used as input to the computational model to develop a file signature and classify the file as malware." ;
    :kb-organization "Crowdstrike Inc" ;
    :kb-reference-of :FileContentRules ;
    :kb-reference-title "Computational modeling and classification of data streams" .

:Reference-Computer-implementedMethodsAndSystemsForIdentifyingVisuallySimilarTextCharacterStrings_GreathornInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Computer-implemented methods and systems for identifying visually similar text character strings - Greathorn Inc" ;
    :has-link "https://patents.google.com/patent/US10320815B2/en?oq=US-10320815-B2"^^xsd:anyURI ;
    :kb-abstract "Methods and systems are disclosed for selecting text character strings from a corpus of relevant strings that would commonly be considered to be visually similar to human viewer to an input string. The initial corpus may be any sufficiently broad or specific source of text, e.g., the names of users in a computer application system. The character strings in the corpus are classified such that direct, character-by-character comparisons may be limited to a small subset of likely-similar strings. The input string is then directly compared to strings that are likely to be similar to it, taking into account individual characters' similarities, combinations of characters that look similar to individual characters, transposition of characters, and simple additions and deletions." ;
    :kb-author "Raymond W. Wallace, III" ;
    :kb-mitre-analysis "Text input is compared to an engine of look-alike sets of text characters. An estimate of similar characters based on the engine is conducted, and an alert is triggered if the estimated similarity is lower than a given threshold." ;
    :kb-organization "Greathorn Inc" ;
    :kb-reference-of :HomoglyphDetection ;
    :kb-reference-title "Computer-implemented methods and systems for identifying visually similar text character strings" .

:Reference-ComputerMotherboardHavingPeripheralSecurityFunctions a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Computer motherboard having peripheral security functions" ;
    :has-link "https://patents.google.com/patent/US8869308B2/en"^^xsd:anyURI ;
    :kb-abstract "A secure motherboard for a computer, wherein each user accessible peripheral port is protected by hardware based peripheral protection circuitry soldered to the motherboard." ;
    :kb-author "Aviv Soffer" ;
    :kb-organization "High Sec Labs Ltd" ;
    :kb-reference-of :IOPortRestriction ;
    :kb-reference-title "Computer motherboard having peripheral security functions" .

:Reference-ComputerWormDefenseSystemAndMethod_FireEyeInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Computer Worm Defense System and Method - FireEye Inc" ;
    :has-link "https://patents.google.com/patent/US20130036472A1"^^xsd:anyURI ;
    :kb-abstract "\"A computer worm defense system comprises multiple containment systems tied together by a management system. Each containment system is deployed on a separate communication network and contains a worm sensor and a blocking system. In various embodiments, the computer worm may be transported from a production network, where the computer worm is not readily identifiable, to an alternate network in the worm sensor where the computer worm may be readily identifiable. Computer worm identifiers generated by a worm sensor of one containment system can be provided not only to the blocking system of the same containment system, but can also be distributed by the management system to blocking systems of other containment systems.\"" ;
    :kb-author "Ashar Aziz" ;
    :kb-mitre-analysis "This patent describes network data being copied by a tap and then analyzed in an analysis environment to determine whether the network data is suspicious using a heuristic module. The analysis environment replays transmission of the suspicious network data between a configured replayer and a virtual machine to detect unauthorized activity." ;
    :kb-organization "FireEye Inc" ;
    :kb-reference-of :FileCarving ;
    :kb-reference-title "Computer Worm Defense System and Method" .

:Reference-ConfigureUserAccessControlAndPermissions a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Configure User Access Control and Permissions" ;
    :has-link "https://docs.microsoft.com/en-us/windows-server/manage/windows-admin-center/configure/user-access-control"^^xsd:anyURI ;
    :kb-abstract "When deployed on Windows Server, Windows Admin Center provides a centralized point of management for your server environment. By controlling access to Windows Admin Center, you can improve the security of your management landscape." ;
    :kb-author "Microsoft" ;
    :kb-reference-of :UserAccountPermissions ;
    :kb-reference-title "Configure User Access Control and Permissions" .

:Reference-CreateRemoteProcessViaWMIC_MITRE_Other a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2016-03-002: Create Remote Process via WMIC - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2016-03-002/"^^xsd:anyURI ;
    :kb-abstract """Adversaries may use Windows Management Instrumentation (WMI) to move laterally, by launching executables remotely.The analytic CAR-2014-12-001 describes how to detect these processes with network traffic monitoring and process monitoring on the target host. However, if the command line utility wmic.exe is used on the source host, then it can additionally be detected on an analytic. The command line on the source host is constructed into something like wmic.exe /node:"\\<hostname\\>" process call create "\\<command line\\>". It is possible to also connect via IP address, in which case the string "\\<hostname\\>" would instead look like IP Address.

Although this analytic was created after CAR-2014-12-001, it is a much simpler (although more limited) approach. Processes can be created remotely via WMI in a few other ways, such as more direct API access or the built-in utility PowerShell.""" ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis,
        :RPCTrafficAnalysis ;
    :kb-reference-title "CAR-2016-03-002: Create Remote Process via WMIC" ;
    :todo "MITRE Analysis was not found" .

:Reference-CredentialDumpingViaMimikatz_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2019-04-004: Credential Dumping via Mimikatz - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2019-04-004/"^^xsd:anyURI ;
    :kb-abstract "Credential dumpers like Mimikatz can be loaded into memory and from there read data from another processes. This analytic looks for instances where processes are requesting specific permissions to read parts of the LSASS process in order to detect when credential dumping is occurring. One weakness is that all current implementations are \"overtuned\" to look for common access patterns used by Mimikatz." ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2019-04-004: Credential Dumping via Mimikatz" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-CredentialDumpingViaWindowsTaskManager_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2019-08-001: Credential Dumping via Windows Task Manager - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2019-08-001/"^^xsd:anyURI ;
    :kb-abstract """The Windows Task Manager may be used to dump the memory space of lsass.exe to disk for processing with a credential access tool such as Mimikatz. This is performed by launching Task Manager as a privileged user, selecting lsass.exe, and clicking "Create dump file". This saves a dump file to disk with a deterministic name that includes the name of the process being dumped.

This requires filesystem data to determine whether files have been created.""" ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :SystemCallAnalysis ;
    :kb-reference-title "CAR-2019-08-001: Credential Dumping via Windows Task Manager" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-CyberCommandSystemCYCS a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Cyber Command System (CYCS)" ;
    :has-link "https://www.mitre.org/research/technology-transfer/technology-licensing/cyber-command-system-cycs"^^xsd:anyURI ;
    :kb-abstract "MITRE’s Cyber Command System (CyCS) tool addresses the objective of improved mission assurance in cyberspace by enabling the mapping of mission operations to the network operations that support those missions. This tool provides mission-impact assessment through situational awareness and impact analysis. CyCS addresses mission-assurance challenges for highly distributed enterprise systems of systems through vulnerability, threat, and consequence management." ;
    :kb-organization "MITRE" ;
    :kb-reference-of :OperationalDependencyMapping ;
    :kb-reference-title "Cyber Command System (CYCS)" .

:Reference-DaggerFactSheet a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Dagger Fact Sheet" ;
    :has-link "https://www.jhuapl.edu/dagger/documents/DaggerFactSheet.pdf"^^xsd:anyURI ;
    :kb-abstract "Dagger is a modeling and visualization tool suite that shows how system failures impact mission status. Updated with manual or real-time status, Dagger is used for mission/system planning, situational awareness during mission execution, and course-of-action analysis." ;
    :kb-author "Jackie Soenneker" ;
    :kb-organization "JHU APL" ;
    :kb-reference-of :OperationalDependencyMapping ;
    :kb-reference-title "Dagger Fact Sheet" .

:Reference-DaggerModelingAndVisualizationForMissionImpactSituationalAwareness a :AcademicPaperReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Dagger: Modeling and visualization for mission impact situational awareness" ;
    :has-link "https://ieeexplore.ieee.org/document/7795296"^^xsd:anyURI ;
    :kb-abstract "Dagger is a modeling and visualization framework that addresses the challenge of representing knowledge and information for decision-makers, enabling them to better comprehend the operational context of network security data. It allows users to answer critical questions such as “Given that I care about mission X, is there any reason I should be worried about what is going on in cyberspace?” or “If this system fails, will I still be able to accomplish my mission?”." ;
    :kb-author "Elisha Peterson" ;
    :kb-organization "JHU APL" ;
    :kb-reference-of :OperationalDependencyMapping ;
    :kb-reference-title "Dagger: Modeling and visualization for mission impact situational awareness" .

:Reference-Database_for_receiving_storing_and_compiling_information_about_email_messages a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Database for receiving, storing and compiling information about email messages" ;
    :has-link "https://patents.google.com/patent/US20050091319A1/"^^xsd:anyURI ;
    :kb-author "Steven Kirsch" ;
    :kb-reference-of :DomainNameReputationAnalysis,
        :IPReputationAnalysis ;
    :kb-reference-title "Database for receiving, storing and compiling information about email messages" .

:Reference-DataExecutionPrevention_Microsoft a owl:NamedIndividual,
        :UserManualReference ;
    rdfs:label "Reference - Mitigate threats by using Windows 10 security features: Data Execution Prevention - Microsoft" ;
    :has-link "https://docs.microsoft.com/en-us/windows/security/threat-protection/overview-of-threat-mitigations-in-windows-10#data-execution-prevention"^^xsd:anyURI ;
    :kb-abstract """Malware depends on its ability to insert a malicious payload into memory with the hope that it will be executed later. Wouldn't it be great if you could prevent malware from running if it wrote to an area that has been allocated solely for the storage of information?

Data Execution Prevention (DEP) does exactly that, by substantially reducing the range of memory that malicious code can use for its benefit. DEP uses the No eXecute bit on modern CPUs to mark blocks of memory as read-only so that those blocks can't be used to execute malicious code that may be inserted by means of a vulnerability exploit.""" ;
    :kb-author "Nick Schonning, Daniel Simpson, Marty Hernandez Avedon, Trond B. Krokli, jreeds, jcaparas, Andres Mariano Gorzelany, Tina Burden, Thomas Raya, Justin Hall, justanotheranonymoususer, Liza Poggemeyer, Dani Halfin, imba-tjd (Authors for entire page)" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Microsoft" ;
    :kb-reference-of :ProcessSegmentExecutionPrevention ;
    :kb-reference-title "Mitigate threats by using Windows 10 security features: Data Execution Prevention" ;
    :todo "MITRE Analysis was not found" .

:Reference-DataProcessingAndScanningSystemsForGeneratingAndPopulatingADataInventory a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Data processing and scanning systems for generating and populating a data inventory" ;
    :has-link "https://patents.google.com/patent/US11240273B2/"^^xsd:anyURI ;
    :kb-abstract "In particular embodiments, a data processing data inventory generation system is configured to: (1) generate a data model (e.g., a data inventory) for one or more data assets utilized by a particular organization; (2) generate a respective data inventory for each of the one or more data assets; and (3) map one or more relationships between one or more aspects of the data inventory, the one or more data assets, etc. within the data model. In particular embodiments, a data asset (e.g., data system, software application, etc.) may include, for example, any entity that collects, processes, contains, and/or transfers personal data (e.g., such as a software application, “internet of things” computerized device, database, website, data-center, server, etc.). The system may be configured to identify particular data assets and/or personal data in data repositories using any suitable intelligent identity scanning technique." ;
    :kb-author "Kabir A. Barday, Mihir S. Karanjkar, Steven W. Finch, Ken A. Browne, Nathan W. Heard, Aakash H. Patel, Jason L. Sabourin, Richard L. Daniel, Dylan D. Patton-Kuhl, Jonathan Blake Brannon" ;
    :kb-organization "OneTrust LLC" ;
    :kb-reference-of :DataInventory ;
    :kb-reference-title "Data processing and scanning systems for generating and populating a data inventory" .

:Reference-DeadCodeElimination a :AcademicPaperReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Dead code elimination" ;
    :has-link "https://nebelwelt.net/files/15LangSec.pdf"^^xsd:anyURI ;
    :kb-abstract "There is a significant body of work devoted to testing, verifying, and certifying the correctness of optimizing compilers. The focus of such work is to determine if source code and optimized code have the same functional semantics. In this paper, we introduce the correctness-security gap, which arises when a compiler optimization preserves the functionality of but violates a security guarantee made by source code. We show with concrete code examples that several standard optimizations, which have been formally proved correct, inhabit this correctness-security gap. We analyze this gap and conclude that it arises due to techniques that model the state of the program but not the state of the underlying machine. We propose a broad research program whose goal is to identify, understand, and mitigate the impact of security errors introduced by compiler optimizations. Our proposal includes research in testing, program analysis, theorem proving, and the development of new, accurate machine models for reasoning about the impact of compiler optimizations on security." ;
    :kb-author "Vijay D'Silva, Mathias Payer, Dawn Song" ;
    :kb-organization "Google Inc, Purdue University, UC Berkeley" ;
    :kb-reference-of :DeadCodeElimination ;
    :kb-reference-title "The Correctness-Security Gap in Compiler Optimization" .

:Reference-DebuggersForAccessibilityApplications_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2014-11-003: Debuggers for Accessibility Applications - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2014-11-006/"^^xsd:anyURI ;
    :kb-abstract """The Windows Registry location HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options allows for parameters to be set for applications during execution. One feature used by malicious actors is the "Debugger" option. When a key has this value enabled, a Debugging command line can be specified. Windows will launch the Debugging command line, and pass the original command line in as an argument. Adversaries can set a Debugger for Accessibility Applications. The analytic looks for the original command line as an argument to the Debugger. When the strings "sethc.exe", "utilman.exe", "osk.exe", "narrator.exe", and "Magnify.exe" are detected in the arguments, but not as the main executable, it is very likely that a Debugger is set.

This analytic could depend on the possibility of the known strings used as arguments for other applications used in the day-to-day environment. Although the chance of the string "sethc.exe" being used as an argument for another application is unlikely, it still is a possibility.""" ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessLineageAnalysis ;
    :kb-reference-title "CAR-2014-11-003: Debuggers for Accessibility Applications" ;
    :todo "Could not determine reference type; TechniqueReference class used instead",
        "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section.",
        "No URL provided for reference" .

:Reference-Deception-BasedResponsesToSecurityAttacks_CrowdstrikeInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Deception-Based Responses to Security Attacks - Crowdstrike Inc" ;
    :has-link "https://patents.google.com/patent/US20140250524A1/en?oq=US-2014250524-A1"^^xsd:anyURI ;
    :kb-abstract "Deception-based techniques for responding to security attacks are described herein. The techniques include transitioning a security attack to a monitored computing device posing as a computing device impacted by the security attack and enabling the adversary to obtain deceptive information from the monitored computing device. Also, the adversary may obtain a document configured to report identifying information of an entity opening the document, thereby identifying the adversary associated with the attack. Further, the techniques include determining that a domain specified in a domain name request is associated with malicious activity and responding to the request with a network address of a monitored computing device to cause the requesting process to communicate with the monitored computing device in place of an adversary server. Additionally, a service may monitor dormant domains names associated with malicious activity and, in response to a change, respond with an alert or a configuration update." ;
    :kb-author "Adam S. Meyers; Dmitri Alperovitch; George Robert Kurtz; David F. Diehl; Sven Krasser" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Crowdstrike Inc" ;
    :kb-reference-of :DecoyNetworkResource ;
    :kb-reference-title "Deception-Based Responses to Security Attacks" ;
    :todo "MITRE Analysis was not found" .

:Reference-DecoyAndDeceptiveDataObjectTechnology_CymmetriaInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Decoy and deceptive data object technology - Cymmetria Inc" ;
    :has-link "https://patents.google.com/patent/US20170134423A1"^^xsd:anyURI ;
    :kb-abstract "A computer implemented method of detecting unauthorized access to a protected network by monitoring a dynamically updated deception environment, comprising launching, on one or more decoy endpoints, one or more decoy operating system (OS) managing one or more of a plurality of deception applications mapping a plurality of applications executed in a protected network, updating dynamically a usage indication for a plurality of deception data objects deployed in the protected network to emulate usage of the plurality of deception data objects for accessing the deception application(s) wherein the plurality of deception data objects are configured to trigger an interaction with the deception application(s) when used, detecting usage of data contained in the deception data object(s) by monitoring the interaction and identifying one or more potential unauthorized operations based on analysis of the detection." ;
    :kb-author "Dean Sysman; Gadi Evron; Imri Goldberg; Itamar Sher; Shmuel Ur" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Cymmetria Inc" ;
    :kb-reference-of :DecoySessionToken,
        :DecoyUserCredential ;
    :kb-reference-title "Decoy and deceptive data object technology" ;
    :todo "MITRE Analysis was not found" .

:Reference-DecoyNetwork-BasedServiceForDeceivingAttackers-AmazonTechnologies a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Decoy Network-Based Service for Deceiving Attackers - Amazon Technologies" ;
    :has-link "https://patents.google.com/patent/US10873601B1"^^xsd:anyURI ;
    :kb-abstract "A decoy network-based service uses a decoy credential to lure an attacker to access the decoy network-based service, and monitors the attacker's activity with respect to the decoy network-based service to determine the attacker's motivation. In various examples, a decoy credential is published on an Internet-accessible site, and a system that provides a network-based service (e.g., a service provider network) subsequently receives an access request from a computing device that includes the decoy credential. Based on the decoy credential, the computing device may be provided access to a decoy network-based service, and application programming interface (API) calls made by the computing device may be routed through a decoy control plane. The data relating to the API calls may be stored and analyzed to determine a motivation of the attacker, which may be used in various downstream applications to improve security for customers of the network-based service." ;
    :kb-author "Thomas Stickle" ;
    :kb-mitre-analysis "MITRE analysis was not found." ;
    :kb-organization "Amazon Technologies" ;
    :kb-reference-of :DecoyUserCredential ;
    :kb-reference-title "Decoy network-based service for deceiving attackers" .

:Reference-DecoyPersonasForSafeguardingOnlineIdentityUsingDeception_ a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Decoy Personas for Safeguarding Online Identity Using Deception - MITRE" ;
    :has-link "https://web.archive.org/web/20180407204216/https://isc.sans.edu/diary/Decoy+Personas+for+Safeguarding+Online+Identity+Using+Deception/16159"^^xsd:anyURI ;
    :kb-abstract """What if online scammers weren't sure whether the user account they are targeting is really yours, or whether the information they compiled about you is real? It's worth considering whether decoy online personas might help in the quest to safeguard our digital identities and data.

I believe deception tactics, such as selective and careful use of honeypots, holds promise for defending enterprise IT resources. Some forms of deception could also protect individuals against online scammers and other attackers. This approach might not be quite practical today for most people, but in the future we might find it both necessary and achievable.

Human attackers and malicious software pursue user accounts and data on-line through harvesting, phishing, password-guessing, software vulnerabilities, and various other means. How might we use decoys to confuse, misdirect, slow down and detect adversaries engaged in such activities?

...

The wealth of personal details available on social networking sites allows attackers to target individuals using social engineering, secret question-guessing and other techniques. For some examples of such approaches, see The Use of Fake or Fraudulent LinkedIn Profiles and Data Mining Resumes for Computer Attack Reconnaissance.

Setting up one or more fake social network profiles (e.g., on Facebook) that use the person's real name can help the individual deflect the attack or can act as an early warning of an impending attack. A decoy profile could purposefully expose some inaccurate information, while the person's real profile would be more carefully concealed using the site's privacy settings. Decoy profiles would be associated with spamtrap email addresses.

Similarly, the person could expose decoy profiles on other sites, for instance those reveal shopping habits (e.g., Amazon), musings (e.g., Twitter), skills (e.g., GitHub), travel (e.g., TripIt), affections (e.g., Pinterest), music taste (e.g., Pandora) and so on. The person's decoy identities could also have fake resumes available on sites such as Indeed and Monster.com.""" ;
    :kb-author "Lenny Zeltser" ;
    :kb-mitre-analysis " " ;
    :kb-organization "SANS" ;
    :kb-reference-of :DecoyPersona ;
    :kb-reference-title "Decoy Personas for Safeguarding Online Identity Using Deception" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-DetectingDDoSAttackUsingSnort a :AcademicPaperReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Detecting DDoS Attack Using Snort" ;
    :has-link "https://www.researchgate.net/publication/338660054_DETECTING_DDoS_ATTACK_USING_Snort"^^xsd:anyURI ;
    :kb-abstract "A DDoS (Distributed Denial-of-Service) attack is very common and easy toexecute and does not require any sophisticated tools. It can happen to anyone. In this project we deploy snort in our home network as a NIDS (Network Intrusion Detection System) to detect a DDoS attack and prevent it." ;
    :kb-author "Manas Gogoi, Sourav Mishra" ;
    :kb-organization "Indian Institute of Information Technology Allahabad" ;
    :kb-reference-of :InboundSessionVolumeAnalysis ;
    :kb-reference-title "DETECTING DDoS ATTACK USING Snort" ;
    :todo "MITRE Analysis was not found" .

:Reference-DetectingNetworkReconnaissanceByTrackingIntranetDark-netCommunications_VECTRANETWORKSInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Detecting network reconnaissance by tracking intranet dark-net communications - VECTRA NETWORKS Inc" ;
    :has-link "https://patents.google.com/patent/US20150264078A1"^^xsd:anyURI ;
    :kb-abstract "A method and system for detecting network reconnaissance is disclosed wherein network traffic can be parsed into unidirectional flows that correspond to sessions. A learning module may categorize computing entities inside the network into assets and generate asset data to monitor the computing entities. If one or more computing entities address a flow to an address of a host that no longer exists, ghost asset data may be recorded and updated in the asset data. When a computing entity inside the network contacts an object in the dark-net, the computing entity may be recorded a potential mapper. When the computing entity tries to contact a number of objects in the dark-net, such that a computed threshold is exceeded, the computing entity is identified a malicious entity performing network reconnaissance." ;
    :kb-author "Nicolas BEAUCHESNE; Sungwook Yoon" ;
    :kb-mitre-analysis "This patent describes detecting an attacker performing internal reconnaissance within an organization's network to gather intelligence about the configuration of the network or identify the next target.  Network packets are collected (ex. tapped from a network switch) and processed to create flows that are used to map out the network to identify network assets as well as ghost assets (addresses not assigned to a device or an existing device that is temporarily disabled). Once this mapping is complete it is used to monitor the network to determine if an attacker is attempting to connect to a ghost asset. If an attacker attempts to connect to a ghost asset over a threshold (ex. contacting four ghost assets in less than seven minutes), an alert is generated." ;
    :kb-organization "VECTRA NETWORKS Inc" ;
    :kb-reference-of :ConnectionAttemptAnalysis ;
    :kb-reference-title "Detecting network reconnaissance by tracking intranet dark-net communications" .

:Reference-DetectingScript-basedMalware_CrowdstrikeInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Detecting script-based malware - Crowdstrike Inc" ;
    :has-link "https://patents.google.com/patent/US20190188384A1"^^xsd:anyURI ;
    :kb-abstract "Described herein are systems, techniques, and computer program products for preventing execution, by a scripting engine, of harmful commands that may be introduced by computer malware or other mechanisms. The system identifies certain host processes that may attempt to utilize a hosted scripting engine. An unmanaged interface module is injected into an identified host process. The unmanaged interface module is configured to detect certain conditions indicating the likelihood that a scripting engine will be instantiated, and in response to inject a managed interface module into the host process. The managed interface module hooks into certain methods of the scripting engine to intercept commands before they are executed by the scripting engine. The managed and unmanaged interface components then communicate with a kernel-mode threat detection component to determine whether any commands should be blocked." ;
    :kb-author "Ion-Alexandru IONESCU; Satoshi Tanda" ;
    :kb-mitre-analysis """The patent describes techniques that can be implemented to detect and block malicious commands and command scripts from being executed by scripting engines.

### Script Execution Monitoring explanation
This patent describes software installed on the host system that hooks into methods of a scripting engine to intercept commands before they are executed and block commands if they are determined to be harmful. For example regular expression checking may be used to identify commands having malicious patterns. Expression checking may be used for script files as well as interactively - typed commands.

### File Content Signatures explanation
This patent includes File Content Signatures because in the case of a script file, a hash of the file is compared against hashes of known malicious script files to determine whether the script file is malicious.""" ;
    :kb-organization "Crowdstrike Inc" ;
    :kb-reference-of :FileContentRules,
        :ScriptExecutionAnalysis ;
    :kb-reference-title "Detecting script-based malware" .

:Reference-DetectionOfMaliciousIDNHomoglyphDomains a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Detection of Malicious IDNHomoglyph Domains" ;
    :has-link "http://essay.utwente.nl/79263/1/Yazdani_MA_EEMCS.pdf"^^xsd:anyURI ;
    :kb-abstract "At early stages of Internet development, users were only able to register or access domains with ASCII characters. The introduction of IDN (Internationalized Domain Name) which uses the larger Unicode character set, made it possible for regional users to deal with domain names using their local language alphabet. Beside the advantages provided by IDN, a new type of network threats has also emerged. The reason behind this is that there are many similar-looking characters in Unicode system, called homoglyphs. These characters could be used by an attacker to lure users by replacing one or more characters of a benign domain." ;
    :kb-author "Ramin Yazdani" ;
    :kb-organization "University of Twente" ;
    :kb-reference-of :HomoglyphDenylisting ;
    :kb-reference-title "Detection of Malicious IDN Homoglyph Domains Using Active DNS Measurements" .

:Reference-DeterministicMethodForDetectingAndBlockingOfExploitsOnInterpretedCode_K2CyberSecurityInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Deterministic method for detecting and blocking of exploits on interpreted code - K2 Cyber Security Inc" ;
    :has-link "https://patents.google.com/patent/US20190180036A1/en?oq=US-2019180036-A1"^^xsd:anyURI ;
    :kb-abstract "In one aspect, a method useful for preventing exploitation of a vulnerability in an interpreted code by monitoring and validating an execution of the interpreted code in a script file by an application server, includes the step of generating a mapping for an incoming network connection to a specified script file to be executed by an application server. The computerized method includes the step of inserting a hook for monitoring an application programming interface (API) call or a privileged instruction executed by the application server. The computerized method includes the step of inserting a validation code configured to validate the API call or the privileged instruction executed by the interpreted code in a script." ;
    :kb-author "Jayant Shukla" ;
    :kb-mitre-analysis "This patent describes a technique for monitoring API calls. During execution of interpreted code the observed API calls are validated against a whitelist of API calls for that interpreted code file. Action is taken if the observed API call is not in accordance with the list." ;
    :kb-organization "K2 Cyber Security Inc" ;
    :kb-reference-of :SystemCallAnalysis ;
    :kb-reference-title "Deterministic method for detecting and blocking of exploits on interpreted code" .

:Reference-DigitalIdentityGuidelines800-63-3 a :GuidelineReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Digital Identity Guidelines 800-63-3" ;
    :has-link "https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-63-3.pdf"^^xsd:anyURI ;
    :kb-author "NIST" ;
    :kb-organization "NIST" ;
    :kb-reference-of :StrongPasswordPolicy ;
    :kb-reference-title "Digital Identity Guidelines" .

:Reference-DistributedMeta-informationQueryInANetwork_Bit9Inc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Distributed meta-information query in a network - Bit 9 Inc" ;
    :has-link "https://patents.google.com/patent/US20070028302A1/en?oq=US-2007028302-A1"^^xsd:anyURI ;
    :kb-abstract "A security system provides a defense from known and unknown viruses, worms, spyware, hackers, and social engineering attacks. The system can implement centralized policies that allow an administrator to approve, block, quarantine, and log file activities. A server associated with a number of hosts can provide a query for host computers to access security-related meta-information in local host stores. The query is pulled from the server by the hosts. The results of the distributed host query are stored and merged on the server, and exported for display, reports, or security response." ;
    :kb-author "Todd Brennan; John Hanratty" ;
    :kb-mitre-analysis """Provides a mechanism to detect, monitor, locate, and control files installed on host computers. Each host has a host agent that analyzes file system activity and takes action based on policies configured on a server. The policies identify whether to block, log, allow, or quarantine actions such as file accesses and execution of executables. Examples of policies include:

* Block/log execution of new executables and detached scripts (e.g., .exe or .bat)
* Block/log reading/execution of new embedded content (e.g., macros in .doc)
* Block/log installation/modification of Web content (alteration of content in .html or .cgi files)
* Block/log execution of new files in an administratively defined 'class'; e.g., an administrator might want to block screen savers .scr, but not the entire class of executables .exe, .dll, .sys, etc . . .""" ;
    :kb-organization "Bit 9 Inc" ;
    :kb-reference-of :FileContentRules ;
    :kb-reference-title "Distributed meta-information query in a network" .

:Reference-DLLInjectionViaLoadLibrary_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2013-10-002: DLL Injection via Load Library - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2013-10-002/"^^xsd:anyURI ;
    :kb-abstract """Microsoft Windows allows for processes to remotely create threads within other processes of the same privilege level. This functionality is provided via the Windows API CreateRemoteThread. Both Windows and third-party software use this ability for legitimate purposes. For example, the Windows process csrss.exe creates threads in programs to send signals to registered callback routines. Both adversaries and host-based security software use this functionality to inject DLLs, but for very different purposes. An adversary is likely to inject into a program to evade defenses or bypass User Account Control, but a security program might do this to gain increased monitoring of API calls. One of the most common methods of DLL Injection is through the Windows API LoadLibrary.

Allocate memory in the target program with VirtualAllocEx
Write the name of the DLL to inject into this program with WriteProcessMemory
Create a new thread and set its entry point to LoadLibrary using the API CreateRemoteThread.
This behavior can be detected by looking for thread creations across processes, and resolving the entry point to determine the function name. If the function is LoadLibraryA or LoadLibraryW, then the intent of the remote thread is clearly to inject a DLL. When this is the case, the source process must be examined so that it can be ignored when it is both expected and a trusted process.""" ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :SystemCallAnalysis ;
    :kb-reference-title "CAR-2013-10-002: DLL Injection via Load Library" ;
    :todo "MITRE Analysis was not found" .

:Reference-DNSWhitelist-DNSWL-EmailAuthenticationMethodExtension a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - DNS Whitelist (DNSWL) Email Authentication Method Extension" ;
    :has-link "https://datatracker.ietf.org/doc/html/rfc8904"^^xsd:anyURI ;
    :kb-reference-of :DNSAllowlisting ;
    :kb-reference-title "DNS Whitelist (DNSWL) Email Authentication Method Extension" .

:Reference-DomainAgeRegistrationAlert_IncRapid7IncRAPID7Inc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Domain age registration alert - Inc Rapid7 Inc RAPID7 Inc" ;
    :has-link "https://patents.google.com/patent/US20170026400A1/"^^xsd:anyURI ;
    :kb-abstract "Systems and methods of identifying a security risk by monitoring and generating alerts based on attempts to access web domains that have been registered within a short period of time and are therefore identified as \"high-risk,\" including identifying an attempt to access a domain; receiving a registration date of the domain; and detecting a security risk based on the registration date of the domain." ;
    :kb-author "Samuel Adams; H D. Moore" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Rapid7 Inc." ;
    :kb-reference-of :DNSTrafficAnalysis ;
    :kb-reference-title "Domain age registration alert" ;
    :todo "MITRE Analysis was not found" .

:Reference-DomainKeysIdentifiedMail-Signatures-IETF a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - RFC 6376: DomainKeys Identified Mail (DKIM) Signatures - IETF" ;
    :has-link "https://tools.ietf.org/html/rfc6376"^^xsd:anyURI ;
    :kb-abstract """DomainKeys Identified Mail (DKIM) permits a person, role, or organization that owns the signing domain to claim some responsibility for a message by associating the domain with the message.  This can be an author's organization, an operational relay, or one of their agents.  DKIM separates the question of the identity of the Signer of the message from the purported author of the message.  Assertion of responsibility is validated through a
cryptographic signature and by querying the Signer's domain directly
to retrieve the appropriate public key.  Message transit from author to recipient is through relays that typically make no substantive change to the message content and thus preserve the DKIM signature.""" ;
    :kb-author "D. Crocker, T. Hansen, M. Kucherawy" ;
    :kb-organization "Internet Engineering Task Force (IETF)" ;
    :kb-reference-of :TransferAgentAuthentication ;
    :kb-reference-title "RFC 6376: DomainKeys Identified Mail (DKIM) Signatures" .

:Reference-DYNAMICBASE_UseAddressSpaceLayoutRandomization_MicrosoftDocs a owl:NamedIndividual,
        :UserManualReference ;
    rdfs:label "Reference - /DYNAMICBASE (Use address space layout randomization) - Microsoft Docs" ;
    :has-link "https://docs.microsoft.com/en-us/cpp/build/reference/dynamicbase-use-address-space-layout-randomization?view=vs-2019"^^xsd:anyURI ;
    :kb-author "Microsoft" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Microsoft" ;
    :kb-reference-of :SegmentAddressOffsetRandomization ;
    :kb-reference-title "/DYNAMICBASE (Use address space layout randomization)" ;
    :todo "Document Abstract was not found",
        "MITRE Analysis was not found",
        "No authors provided for reference" .

:Reference-DynamicSelectionAndGenerationOfAVirtualCloneForDetonationOfSuspiciousContentWithinAHoneyNetwork_PaloAltoNetworksInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Dynamic selection and generation of a virtual clone for detonation of suspicious content within a honey network - Palo Alto Networks Inc" ;
    :has-link "https://patents.google.com/patent/US9882929B1/en?oq=US-9882929-B1"^^xsd:anyURI ;
    :kb-abstract "Techniques for dynamic selection and generation of detonation location of suspicious content with a honey network are disclosed. In some embodiments, a system for dynamic selection and generation of detonation location of suspicious content with a honey network includes a virtual machine (VM) instance manager that manages a plurality of virtual clones executed in an instrumented VM environment, in which the plurality of virtual clones executed in the instrumented VM environment correspond to the honey network that emulates a plurality of devices in an enterprise network; and an intelligent malware detonator that detonates a malware sample in at least one of the plurality of virtual clones executed in the instrumented VM environment." ;
    :kb-author "Taylor Ettema; Huagang Xie" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Palo Alto Networks Inc" ;
    :kb-reference-of :DecoyNetworkResource,
        :StandaloneHoneynet ;
    :kb-reference-title "Dynamic selection and generation of a virtual clone for detonation of suspicious content within a honey network" ;
    :todo "MITRE Analysis was not found" .

:Reference-EmbeddingContextsForOn-lineThreatsIntoResponsePolicyZones-VerisignInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Embedding contexts for on-line threats into response policy zones - Verisign Inc" ;
    :has-link "https://patents.google.com/patent/US10440059B1"^^xsd:anyURI ;
    :kb-abstract """Hierarchical threat intelligence embedded in subdomain CNAMEs of a DNS denylist.

In one embodiment, a response policy zone (RPZ) application generates an RPZ that includes contexts for the on-line threats that are associated with domain names. For a domain name that is associated with an on-line threat, the RPZ application determines a threat specification that describes a characteristic of the on-line threat. The RPZ application then generates an alias based on the domain name and the threat specification. Subsequently, the RPZ application generates a domain name system (DNS) resource record that maps the domain name to the alias, includes the resource record in the RPZ, and transmits the RPZ to a DNS name server that implements the RPZ. Upon receiving a DNS query associated with the domain name, the DNS name server generates a DNS response based on the alias. Because the domain name and the threat specification is reflected in the alias, the DNS response automatically provides a relevant context.""" ;
    :kb-author "Ben McCarty" ;
    :kb-mitre-analysis "MITRE Analysis was not found." ;
    :kb-reference-of :HierarchicalDomainDenylisting ;
    :kb-reference-title "Embedding contexts for on-line threats into response policy zones" .

:Reference-End-to-endCertificatePinning a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - End-to-end certificate pinning" ;
    :has-link "https://patents.google.com/patent/US9847992B2/en?q=certificate+pinning&oq=certificate+pinning"^^xsd:anyURI ;
    :kb-abstract "Some embodiments implement end-to-end certificate pinning for content intake from various content providers and for content distribution to various end users. To ensure secure retrieval of content provider content, the content distributor pins the content provider to one or more certificate authorities." ;
    :kb-author "Tin Zaw, Reed Morrison, Robert J. Peters" ;
    :kb-organization "Verizon Digital Media Services Inc" ;
    :kb-reference-of :CertificatePinning ;
    :kb-reference-title "End-to-end Certificate Pinning" .

:Reference-EnhancingNetworkSecurityByPreventingUser-InitiatedMalwareExecution_ a :AcademicPaperReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Enhancing Network Security By Preventing User-Initiated Malware Execution - MITRE" ;
    :has-link "https://ieeexplore.ieee.org/document/1425209"^^xsd:anyURI ;
    :kb-abstract "In this paper, we describe characteristics of the most widely used defense techniques for the blocking of user-initiated malware and why these techniques are insufficient. We then introduce a module verification strategy that will eliminate, or at least severely reduce, this problem by extending the classic \"defense in depth\" network security strategy. We then describe how the augmentation of a standard operating system loader to include references to a database of cryptographic hashes of module executables can be used to implement this strategy. Finally, we describe our efforts towards the creation of a prototype system that implements the module verification strategy." ;
    :kb-author "John V. Harrison" ;
    :kb-mitre-analysis "This paper describes application whitelisting. New software executable code is compared to a database of allowed software to determine if the new executable code should be loaded and executed. A database of cryptographic hashes is first created for all allowed software executables. Prior to loading any new executable code, a hash is computed and compared against the hash database. If the hash for the new code does not appear in the database, the executable is not loaded and executed." ;
    :kb-organization "" ;
    :kb-reference-of :ExecutableAllowlisting ;
    :kb-reference-title "Enhancing Network Security By Preventing User-Initiated Malware Execution" ;
    :todo "Could not determine reference type; TechniqueReference class used instead" .

:Reference-ExecutionWithAT_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2013-05-004: Execution with AT - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2013-05-004/"^^xsd:anyURI ;
    :kb-abstract "In order to gain persistence, privilege escalation, or remote execution, an adversary may use the Windows built-in command AT (at.exe) to schedule a command to be run at a specified time, date, and even host. This method has been used by adversaries and administrators alike. Its use may lead to detection of compromised hosts and compromised users if it is used to move laterally. The built-in Windows tool schtasks.exe (CAR-2013-08-001) offers greater flexibility when creating, modifying, and enumerating tasks. For these reasons, schtasks.exe is more commonly used by administrators, tools/scripts, and power users." ;
    :kb-author "" ;
    :kb-mitre-analysis " " ;
    :kb-organization "" ;
    :kb-reference-of :ScheduledJobAnalysis ;
    :kb-reference-title "CAR-2013-05-004: Execution with AT" ;
    :todo "MITRE Analysis was not found",
        "No author organizations provided for reference, add one?",
        "No authors provided for reference" .

:Reference-ExecutionWithSchtasks_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2013-08-001: Execution with schtasks - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2013-08-001/"^^xsd:anyURI ;
    :kb-abstract "The Windows built-in tool schtasks.exe provides the creation, modification, and running of scheduled tasks on a local or remote computer. It is provided as a more flexible alternative to at.exe, described in CAR-2013-05-004. Although used by adversaries, the tool is also legitimately used by administrators, scripts, and software configurations. The scheduled tasks tool can be used to gain Persistence and can be used in combination with a Lateral Movement technique to remotely gain execution. Additionally, the command has parameters to specify the user and password responsible for creating the task, as well as the user and password combination that the task will run as. The /s flag will cause a task to run as the SYSTEM user, usually indicating privilege escalation." ;
    :kb-author "" ;
    :kb-mitre-analysis " " ;
    :kb-organization "" ;
    :kb-reference-of :ScheduledJobAnalysis ;
    :kb-reference-title "CAR-2013-08-001: Execution with schtasks" ;
    :todo "MITRE Analysis was not found",
        "No author organizations provided for reference, add one?",
        "No authors provided for reference" .

:Reference-File-modifyingMalwareDetection_CrowdstrikeInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - File-modifying malware detection - Crowdstrike Inc" ;
    :has-link "https://patents.google.com/patent/US20180121650A1/en?oq=US-2018121650-A1"^^xsd:anyURI ;
    :kb-abstract "A security agent implemented on a computing device is described herein. The security agent is configured to detect file-modifying malware by detecting that a process is traversing a directory of the memory of the computing device and detecting that the process is accessing files in the memory according to specified file access patterns. The security agent can also be configured to correlate actions of multiple processes that correspond to a specified file access pattern and detect that one or more of the multiple processes are malware by correlating their behavior." ;
    :kb-author "Daniel W. Brown" ;
    :kb-mitre-analysis """This patent describes a technique for detecting file modifying malware such as wipers and ransomware that overwrite portions of files and encrypt portions of a computer's memory, respectively. Processes that are traversing a directory are identified along with file access patterns. Processes executing on a computing device that are traversing a directory include:

* changing a directory of a process (e.g., iteratively, systematically, repeatedly)
* detecting that a process is conducting an "open directory" operation repeatedly
* the same process traversing through a directory and recording the locations of data files encountered in each sub - directory

In addition to identifying processes traversing a directory, particular file access patterns are also detected that may be indicative of malicious behavior including:
* multiple file types being accessed
* accessing a large number of files
* files located in multiple locations in the directory being accessed

If a process is conducting a traversal of the directory and accessing files according to a defined access pattern associated with malicious behavior, a preventative action is performed.""" ;
    :kb-organization "Crowdstrike Inc" ;
    :kb-reference-of :FileAccessPatternAnalysis ;
    :kb-reference-title "File-modifying malware detection" .

:Reference-FileAndFolderPermissions a owl:NamedIndividual,
        :UserManualReference ;
    rdfs:label "Reference - File and Folder Permissions" ;
    :has-link "https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/bb727008(v=technet.10)?redirectedfrom=MSDN"^^xsd:anyURI ;
    :kb-organization "Microsoft" ;
    :kb-reference-of :LocalFilePermissions ;
    :kb-reference-title "File and Folder Permissions" .

:Reference-FileIntegrityMonitoringinMicrosoftDefenderforCloud-Microsoft a owl:NamedIndividual,
        :UserManualReference ;
    rdfs:label "Reference - File Integrity Monitoring in Microsoft Defender for Cloud - Microsoft" ;
    :has-link "https://learn.microsoft.com/en-us/azure/defender-for-cloud/file-integrity-monitoring-overview" ;
    :kb-organization "Microsoft" ;
    :kb-reference-of :FileIntegrityMonitoring ;
    :kb-reference-title "File Integrity Monitoring in Microsoft Defender for Cloud" .

:Reference-Finding_phishing_sites a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Finding phishing sites" ;
    :has-link "https://patents.google.com/patent/US8839418B2/"^^xsd:anyURI ;
    :kb-author "Geoffrey John Hulten, Paul Stephen Rehfuss, Robert Rounthwaite, Joshua Theodore Goodman, Gopalakrishnan Seshadrinathan, Anthony P. Penta, Manav Mishra, Roderic C. Deyo, Elliott Jeb Haber, David Aaron Ward Snelling" ;
    :kb-reference-of :DomainNameReputationAnalysis,
        :IPReputationAnalysis,
        :URLReputationAnalysis ;
    :kb-reference-title "Finding phishing sites" .

:Reference-FirewallForInterentAccess_SecureComputingLLC a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Firewall for interent access - Secure Computing LLC" ;
    :has-link "https://patents.google.com/patent/GB2317539A"^^xsd:anyURI ;
    :kb-abstract "Regulating the flow of internetwork connections through a firewall (10) having a network protocol stack (14,16,18) which includes an Internet Protocol (IP) layer (16). A determination is made of the parameters characteristic of a connection request, including a netelement parameter characteristic of where the connection request came from. A query is generated and a determination is made whether there is a rule corresponding to that query. If there is a rule corresponding to the query, a determination is made whether authentication is required by the rule. If authentication is required by the rule, an authentication protocol is activated and the connection is activated if the authentication protocol is completed successfully." ;
    :kb-author "Edward B Stockwell, Alan E Klietz" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Secure Computing LLC" ;
    :kb-reference-of :InboundTrafficFiltering ;
    :kb-reference-title "Firewall for interent access" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-FirewallForProcessingAConnectionlessNetworkPacket_NationalSecurityAgency a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Firewall for processing a connectionless network packet - National Security Agency" ;
    :has-link "https://patents.google.com/patent/US7073196B1"^^xsd:anyURI ;
    :kb-abstract "The present invention is a device for and method of accessing a network by initializing a database, an approved list, and a disapproved list; receiving an connectionless network packet; computing a flow tag based on the connectionless network packet; discarding the connectionless network packet and returning to the second step if the flow tag is on the disapproved list; allowing access to the network and returning to the second step if the flow tag is on the approved list; comparing the flow tag to the database if the flow tag is not on the approved list or the disapproved list; discarding the connectionless network packet, adding the flow tag to the disapproved list, and returning to the second step if the database rejects the flow tag; and allowing access to the network, adding the flow tag to the approved list, and returning to the second step if the database accepts the flow tag." ;
    :kb-author "Patrick W. Dowd, John T. McHenry" ;
    :kb-mitre-analysis " " ;
    :kb-organization "National Security Agency" ;
    :kb-reference-of :InboundTrafficFiltering ;
    :kb-reference-title "Firewall for processing a connectionless network packet" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-FirewallForProcessingConnection-orientedAndConnectionlessDatagramsOverAConnection-orientedNetwork_NationalSecurityAgency a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Firewall for processing connection-oriented and connectionless datagrams over a connection-oriented network - National Security Agency" ;
    :has-link "https://patents.google.com/patent/US6615358B1"^^xsd:anyURI ;
    :kb-abstract "The present invention is a device for and method of accessing an information network by initializing a database, an ATM approved list, an IP approved list, and an IP disapproved list; receiving a datagram; discarding the datagram if it is not on the ATM approved list; determining the datagram's type; allowing access to the network and comparing the connection request, if any, to the database if the datagram is ATM signaling; discarding the datagram if the datagram is ATM signaling and the database denies the request; adding the request to the ATM approved list if the datagram is ATM signaling and the database allows the request; allowing access to the network if the datagram is ATM data that excludes IP data and the request is on the ATM approved list; computing a flow tag if the datagram is ATM data that includes IP data; discarding the datagram if the flow tag is on the IP disapproved list; allowing access to the network if the flow tag is on the IP approved list; comparing the flow tag to the database if the flow tag is neither on the IP approved list nor on the IP disapproved list; discarding the datagram and adding the flow tag to the IP disapproved list if the database rejects the flow tag; and allowing access to the network and adding the flow tag to the corresponding approved list if the database accepts the flow tag; and performing these steps on the next datagram" ;
    :kb-author "Patrick W. Dowd, John T. McHenry" ;
    :kb-mitre-analysis " " ;
    :kb-organization "National Security Agency" ;
    :kb-reference-of :InboundTrafficFiltering ;
    :kb-reference-title "Firewall for processing connection-oriented and connectionless datagrams over a connection-oriented network" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-FirewallsThatFilterBasedUponProtocolCommands_IntelCorp a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Firewalls that filter based upon protocol commands - Intel Corp" ;
    :has-link "https://patents.google.com/patent/US6832256B1"^^xsd:anyURI ;
    :kb-abstract "Data transfer is controlled between a first network and a second network of computers by a firewall-proxy combination. Active interpretation of protocol commands exchanged between the first network and the second network is performed to determine specific actions concerning completion of the protocol request. This active firewall-proxy combination may exist on either the first or second network of computers. This method of control provides centralized control and administration for all potentially reachable resources within a network." ;
    :kb-author "James E. Toga" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Intel Corp" ;
    :kb-reference-of :InboundTrafficFiltering ;
    :kb-reference-title "Firewalls that filter based upon protocol commands" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-FirmwareBehaviorAnalysisConFirm a :AcademicPaperReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Firmware Behavior Analysis ConFirm" ;
    :has-link "http://sites.nyuad.nyu.edu/moma/pdfs/pubs/C22.pdf"^^xsd:anyURI ;
    :kb-abstract """The modernization of various critical infrastructure components has dictated the use of microprocessor-based
embedded control systems in critical applications. It is often
infeasible, however, to employ the same level of security measures used in general purpose computing systems, due to the stringent
performance and resource constraints of embedded devices. Furthermore, as software relies on the firmware for proper operation,
no software-level technique can detect malicious behavior of
the firmware. In this work, we propose ConFirm, a low-cost
technique to detect malicious modifications in the firmware
of embedded systems by measuring the number of low-level hardware events that occur during the execution of the firmware.""" ;
    :kb-author "Xueyang Wang, Charalambos Konstantinou, Michail Maniatakos, Ramesh Karri" ;
    :kb-organization "Department of Electrical and Computer Engineering, Polytechnic School of Engineering, New York University and Department of Electrical and Computer Engineering, New York University Abu Dhabi" ;
    :kb-reference-of :FirmwareBehaviorAnalysis ;
    :kb-reference-title """ConFirm: Detecting Firmware Modifications in Embedded Systems
using Hardware Performance Counters""" .

:Reference-FirmwareBehaviorAnalysisVIPER a :AcademicPaperReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Firmware Behavior Analysis VIPER" ;
    :has-link "https://dl.acm.org/doi/pdf/10.1145/2046707.2046711"^^xsd:anyURI ;
    :kb-abstract "Recent research demonstrates that malware can infect peripherals' firmware in a typical x86 computer system, e.g., by exploiting vulnerabilities in the firmware itself or in the firmware update tools. Verifying the integrity of peripherals' firmware is thus an important challenge. We propose software-only attestation protocols to verify the integrity of peripherals' firmware, and show that they can detect all known software-based attacks." ;
    :kb-author "Yanlin Li, Jonathan M. McCune, Adrian Perrig" ;
    :kb-organization "CyLab, Carnegie Mellon University" ;
    :kb-reference-of :FirmwareBehaviorAnalysis ;
    :kb-reference-title "VIPER: Verifying the Integrity of PERipherals' Firmware" .

:Reference-FirmwareEmbeddedMonitoringCodeRedBalloon a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Firmware Embedded Monitoring Code Red Balloon" ;
    :has-link "https://patents.google.com/patent/US10657262B1/en"^^xsd:anyURI ;
    :kb-abstract "Systems and methods for securing embedded devices via both online and offline defensive strategies. One or more security software components may be injected into firmware binary to create a modified firmware binary, which is functionally- and size-equivalent to the original firmware binary. The security software components may retrieve live forensic information related to embedded devices for use in live hardening of the modified firmware binary while the embedded device is online, dynamically patching the firmware" ;
    :kb-author "Ang Cui, Salvatore J. Stolfo" ;
    :kb-organization "Red Balloon Security, Inc" ;
    :kb-reference-of :FirmwareEmbeddedMonitoringCode ;
    :kb-reference-title "Method and apparatus for securing embedded device firmware" .

:Reference-FirmwareEmbeddedMonitoringCodeSymbiotes a :AcademicPaperReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Firmware Embedded Monitoring Code Symbiotes" ;
    :has-link "http://nsl.cs.columbia.edu/projects/minestrone/papers/Symbiotes.pdf"^^xsd:anyURI ;
    :kb-abstract """A large number of embedded devices on the internet, such as
routers and VOIP phones, are typically ripe for exploitation. Little to no defensive technology, such as AV scanners or IDS's, are available to protect these devices. We propose a host-based defense mechanism, which we call Symbiotic Embedded Machines (SEM), that is specifically designed
to inject intrusion detection functionality into the firmware of the device.""" ;
    :kb-author "Ang Cui, Salvatore J. Stolfo" ;
    :kb-organization "Department of Computer Science Columbia University" ;
    :kb-reference-of :FirmwareEmbeddedMonitoringCode ;
    :kb-reference-title "Defending Embedded Systems with Software Symbiotes" .

:Reference-FirmwareVerificationEclypsium a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Firmware Verification Eclypsium" ;
    :has-link "https://patents.google.com/patent/US20200074086A1/en"^^xsd:anyURI ;
    :kb-abstract "Systems and methods are provided herein for monitoring and identifying potential security vulnerabilities in hardware and / or firmware of host devices ." ;
    :kb-author "Yuriy Bulygin, Oleksandr Bazhaniuk" ;
    :kb-organization "ECLYPSIUM , Inc" ;
    :kb-reference-of :FirmwareVerification ;
    :kb-reference-title "Methods and systems for hardware and firmware security monitoring" .

:Reference-FirmwareVerificationTrapezoid a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Firmware Verification Trapezoid" ;
    :has-link "https://patents.google.com/patent/US9674183B2/en"^^xsd:anyURI ;
    :kb-abstract "A trust control management method for security, operable on a computer system generates a unique Trust ID value by combining user-defined values with hardware-specific values associated with the user's computer system and storing the Trust ID value in a memory register physically associated with the hardware of the computer system." ;
    :kb-author "Michael J. Dyer, Jose E. Gonzalez, Albert Caballero" ;
    :kb-organization "Trapezoid, Inc" ;
    :kb-reference-of :FirmwareVerification ;
    :kb-reference-title "System and method for hardware-based trust control management" .

:Reference-FrameworkForNotifyingADirectoryServiceOfAuthenticationEventsProcessedOutsideTheDirectoryService_OracleInternationalCorp a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Framework for notifying a directory service of authentication events processed outside the directory service - Oracle International Corp" ;
    :has-link "https://patents.google.com/patent/US20090077645A1"^^xsd:anyURI ;
    :kb-abstract "Methods, systems and machine-readable media for authenticating an end user for a client application are disclosed. According to one embodiment of the invention, a method of authenticating an end user for a client application using a directory service having an authentication control policy that tracks failed authentication attempts and allows lock out of an account after a predetermined number of failures comprises receiving end user identity information and security information at the client application; sending a search request to the directory service for an entry associated with the end user identity information and, if a match is found, receiving a authentication token from the directory service associated with the end user identity information; comparing the received authentication token with the security information; if the authentication token matches the security information, sending a request to update the directory service to indicate that successful authentication of the end user has occurred; and if the authentication token does not match the security information, sending a request to update the directory service to indicate that a failed attempt at authentication of the end user has occurred." ;
    :kb-author "Buddhika Nandana Kottahachchi" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Oracle International Corp" ;
    :kb-reference-of :AccountLocking ;
    :kb-reference-title "Framework for notifying a directory service of authentication events processed outside the directory service" ;
    :todo "MITRE Analysis was not found" .

:Reference-FWTK-FirewallToolkit_ a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - FWTK - Firewall Toolkit" ;
    :has-link "https://blogs.gartner.com/john_pescatore/2008/10/02/this-week-in-network-security-history-the-firewall-toolkit/"^^xsd:anyURI ;
    :kb-abstract "delivered to DARPA in ~1993" ;
    :kb-author "" ;
    :kb-mitre-analysis " " ;
    :kb-organization "" ;
    :kb-reference-title "FWTK - Firewall Toolkit" ;
    :todo "Could not determine reference type; TechniqueReference class used instead",
        "MITRE Analysis was not found",
        "No author organizations provided for reference, add one?",
        "No authors provided for reference",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-FWTKDocumentation-Fwtk.org a owl:NamedIndividual,
        :TechniqueReference ;
    rdfs:label "Reference - FWTK Documentation - fwtk.org" ;
    :has-link "https://web.archive.org/web/20070510153306/http://www.fwtk.org/fwtk/docs/documentation.html#1.1"^^xsd:anyURI ;
    :kb-abstract """In case you don't already know, FWTK stands for the FireW all Tool Kit. It is used as a base to create a secure firewall system. If you need good documentation, please read the source code. If you are not familiar with C or do not feel comfortable with performing the configuration and security verification yourself, then I would suggest that you purchase a commercial firewall from a vendor (such as TIS, Checkpoint, Raptor, etc.).

A machine needs other tools to secure it, including, but hardly limited to, tools to check files (tripwire), audit tools (tiger/cops), secure access methods (kerberos/ssh), something to watch logs and machine states (swatch/watcher some to mind) and filtering and routing tools such as screend/ipfilterd/ipacl.

Again, I would recommend that you do not proceed to build a production FWTK firewall unless you are familiar with UNIX security.""" ;
    :kb-author "fwtk.org" ;
    :kb-organization "fwtk.org" ;
    :kb-reference-of :InboundTrafficFiltering ;
    :kb-reference-title "FWTK Documentation" ;
    :todo "add all authors",
        "MITRE Analysis was not found" .

:Reference-GenericRegsvr32_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2019-04-002: Generic Regsvr32 - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2019-04-002/"^^xsd:anyURI ;
    :kb-abstract "Regsvr32 can be used to execute arbitrary code in the context of a Windows signed binary, which can be used to bypass application whitelisting. This analytic looks for suspicious usage of the tool. It's not likely that you'll get millions of hits, but it does occur during normal activity so some form of baselining would be necessary for this to be an alerting analytic. Alternatively, it can be used for hunt by looking for new or anomalous DLLs manually." ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessLineageAnalysis ;
    :kb-reference-title "CAR-2019-04-002: Generic Regsvr32" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-GS_BufferSecurityCheck_MicrosoftDocs a owl:NamedIndividual,
        :UserManualReference ;
    rdfs:label "Reference - /GS (Buffer Security Check) - Microsoft Docs" ;
    :has-link "https://docs.microsoft.com/en-us/cpp/build/reference/gs-buffer-security-check?view=vs-2019"^^xsd:anyURI ;
    :kb-abstract " " ;
    :kb-author "" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Microsoft Docs" ;
    :kb-reference-of :StackFrameCanaryValidation ;
    :kb-reference-title "/GS (Buffer Security Check)" ;
    :todo "Document Abstract was not found",
        "MITRE Analysis was not found",
        "No author organizations provided for reference, add one?",
        "No authors provided for reference" .

:Reference-GuardsForApplicationInSoftwareTamperproofing_PurdueResearchFoundation a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Guards for application in software tamperproofing - Purdue Research Foundation" ;
    :has-link "https://patents.google.com/patent/US7287166B1/en?oq=US-7287166-B1"^^xsd:anyURI ;
    :kb-abstract "A method of protecting a software program from unauthorized modification, and a system for practicing the method. The method utilizes self-protecting software code. Armed internally with self-defensive mechanisms, a self-protecting software program is tamper-resistant. Whenever its integrity is compromised, a self-protecting software program may become unusable due to software program crashes or other errors, or may generate subtle errors that do not immediately result render the program unusable but still result in incorrect software program execution. A self-protecting software program also may be able to repair itself to restore the integrity of its damaged code. The system comprises a computer program for automatically adding self-protection features to a software program." ;
    :kb-author "Hoi Chang; Mikhail J. Atallah; John R. Rice" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Purdue Research Foundation" ;
    :kb-reference-of :ProcessCodeSegmentVerification ;
    :kb-reference-title "Guards for application in software tamperproofing" ;
    :todo "MITRE Analysis was not found" .

:Reference-Hardware-assistedSystemAndMethodForDetectingAndAnalyzingSystemCallsMadeToAnOpertingSystemKernel_EndgameInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Hardware-assisted system and method for detecting and analyzing system calls made to an operting system kernel - Endgame Inc" ;
    :has-link "https://patents.google.com/patent/US20180032728A1/en?oq=US20180032728-A1"^^xsd:anyURI ;
    :kb-abstract "The present disclosure relates to a system and method for monitoring system calls to an operating system kernel. A performance monitoring unit is used to monitor system calls and to gather information about each system call. The information is gathered upon interrupting the system call and can include system call type, parameters, and information about the calling thread/process, in order to determine whether the system call was generated by malicious software code. Potentially malicious software code is nullified by a malicious code counter-attack module." ;
    :kb-author "Matthew D. Spisak" ;
    :kb-mitre-analysis """This patent describes a technique for monitoring system calls to detect malicious software code. A system call monitoring module operates at the kernel level and traps system calls.
Monitoring data includes:

* information about the path to the file to be accessed by a system call.
* the memory address or range of addresses to be accessed by a system call.
* the context for the thread within operating system that will be interrupted by a system call.
* the type of system call information about the socket that is being used by system call in order to send or receive data.
* the history of system calls in order to monitor for specific sequences of system calls.
* the frequency or periodicity of a particular system call or set of systems calls.

Captured system call data is analyzed using data analysis algorithms such as machine learning algorithms, artificial intelligence algorithms, pattern recognition algorithms, or other known data analysis techniques. An alert is generated if it is likely that the system call was generated by malicious software code.""" ;
    :kb-organization "Endgame Inc" ;
    :kb-reference-of :SystemCallAnalysis ;
    :kb-reference-title "Hardware-assisted system and method for detecting and analyzing system calls made to an operting system kernel" .

:Reference-HeuristicBotnetDetection_PaloAltoNetworksInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Heuristic botnet detection - Palo Alto Networks Inc" ;
    :has-link "https://patents.google.com/patent/US20160156644A1"^^xsd:anyURI ;
    :kb-abstract "In some embodiments, heuristic botnet detection is provided. In some embodiments, heuristic botnet detection includes monitoring network traffic to identify suspicious network traffic; and detecting a bot based on a heuristic analysis of the suspicious network traffic behavior using a processor, in which the suspicious network traffic behavior includes command and control traffic associated with a bot master. In some embodiments, heuristic botnet detection further includes assigning a score to the monitored network traffic, in which the score corresponds to a botnet risk characterization of the monitored network traffic (e.g., based on one or more heuristic botnet detection techniques); increasing the score based on a correlation of additional suspicious behaviors associated with the monitored network traffic (e.g., based on one or more heuristic botnet detection techniques); and determining the suspicious behavior is associated with a botnet based on the score." ;
    :kb-author "Xinran Wang; Huagang Xie" ;
    :kb-mitre-analysis """This patent describes detecting botnets using heuristic analysis techniques on collected network flows. The heuristic techniques include:

* Identifying suspicious traffic patterns to detect command and control traffic ex. periodically visiting a known malware URL, a host visiting a malware domain twice every 5 hour and 14 minutes (this is a specific pattern for a variant of Swizzor botnets).
* Identifying non-standard behaviors such as connecting to a non-standard HTTP port for HTTP traffic, visiting a non-existent domain, downloading executable files with non-standard executable file extensions, communicating using HTTP header with a shorter than common length
* Analyzing visited domain information to identify the following: visiting a domain with a domain name that is longer than a common domain name length, visiting a dynamic DNS domain, visiting a fast-flux domain, and visiting a recently created domain.

A score is determined based on these factors and if the score is over a threshold, a responsive action is performed.""" ;
    :kb-organization "Palo Alto Networks Inc" ;
    :kb-reference-of :DNSTrafficAnalysis ;
    :kb-reference-title "Heuristic botnet detection" .

:Reference-HostDiscoveryCommands_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2016-03-001: Host Discovery Commands - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2016-03-001/"^^xsd:anyURI ;
    :kb-abstract """When entering on a host for the first time, an adversary may try to discover information about the host. There are several built-in Windows commands that can be used to learn about the software configurations, active users, administrators, and networking configuration. These commands should be monitored to identify when an adversary is learning information about the system and environment. The information returned may impact choices an adversary can make when establishing persistence, escalating privileges, or moving laterally.

Because these commands are built in, they may be run frequently by power users or even by normal users. Thus, an analytic looking at this information should have well-defined white- or blacklists, and should consider looking at an anomaly detection approach, so that this information can be learned dynamically.""" ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2016-03-001: Host Discovery Commands" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-HostIntrusionPreventionSystemUsingSoftwareAndUserBehaviorAnalysis_SophosLtd a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Host intrusion prevention system using software and user behavior analysis - Sophos Ltd" ;
    :has-link "https://patents.google.com/patent/US20110023115A1"^^xsd:anyURI ;
    :kb-abstract "In embodiments of the present invention improved capabilities are described for threat detection using a behavioral-based host-intrusion prevention method and system for monitoring a user interaction with a computer, software application, operating system, graphic user interface, or some other component or client of a computer network, and performing an action to protect the computer network based at least in part on the user interaction and a computer code process executing during or in association with a computer usage session." ;
    :kb-author "Clifford C. Wright" ;
    :kb-mitre-analysis """The patent describes a technique for performing behavior based threat detection. User and code behavior data is collected and stored to create baseline user and code behavior profiles. User behavior data collected over a user session or over multiple sessions can include a user:

* clicking on a link
* scrolling down a page
* opening or closing a window
* downloading a file
* saving a file
* running a file
* typing a keyword

Code behavior monitored includes code:

* copying itself to a system folder
* setting a run key to itself in the registry
* setting a second runkey to itself in the registry in
a different location
* disabling OS tools in the registry
* opening a hidden file

The user interaction and the code process executed during the user session are monitored and compared with predetermined malicious behavior profiles that are typically present in a malicious user session.  The predetermined collection of malicious behaviors are created based on analysis of families of malware in run time in a threat research facility. If a match is made an action is taken that can include isolating the computer on which the user interaction occurs and limiting network access to or from the computer.""" ;
    :kb-organization "Sophos Ltd" ;
    :kb-reference-of :ResourceAccessPatternAnalysis,
        :SystemDaemonMonitoring,
        :WebSessionActivityAnalysis ;
    :kb-reference-title "Host intrusion prevention system using software and user behavior analysis" .

:Reference-HowASLRProtectsLinuxSystemsFromBufferOverflowAttacks_NetworkWorld a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - How ASLR protects Linux systems from buffer overflow attacks - Network World" ;
    :has-link "https://www.networkworld.com/article/3331199/what-does-aslr-do-for-linux.html"^^xsd:anyURI ;
    :kb-abstract "ASLR (Address Space Layout Randomization) is a memory exploitation mitigation technique used on both Linux and Windows systems. Learn how to tell if it's running, enable/disable it, and get a view of how it works." ;
    :kb-author "Sandra Henry-Stocker" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Network World" ;
    :kb-reference-of :SegmentAddressOffsetRandomization ;
    :kb-reference-title "How ASLR protects Linux systems from buffer overflow attacks" ;
    :todo "MITRE Analysis was not found" .

:Reference-HowDoesAntivirusQuarantineWork-SafetyDetectives a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - How Does Antivirus Quarantine Work? - Safety Detectives" ;
    :has-link "https://www.safetydetectives.com/blog/how-does-antivirus-quarantine-work/"^^xsd:anyURI ;
    :kb-abstract "Your antivirus has just finished a regular scan and it’s asking whether you want to quarantine the virus it’s found. You click ‘yes’ without putting much thought into what’s actually happening. But what does quarantining actually mean, what does it do and is it safe for your computer? It’s important to understand the details so that you know what’s happening when you send infected files into quarantine." ;
    :kb-author "Katarina Glamoslija" ;
    :kb-reference-of :FileRemoval ;
    :kb-reference-title "How Does Antivirus Quarantine Work?" .

:Reference-HowToChangeRegistryValuesOrPermissionsFromACommandLineOrAScript a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - How to change registry values or permissions from a command line or a script" ;
    :has-link "https://docs.microsoft.com/en-us/troubleshoot/windows-client/application-management/change-registry-values-permissions"^^xsd:anyURI ;
    :kb-abstract """This article describes how to change registry values or permissions from a command line or a script.

Applies to:   Windows 10 - all editions, Windows Server 2012 R2
Original KB number:   264584""" ;
    :kb-organization "Microsoft" ;
    :kb-reference-title "How to change registry values or permissions from a command line or a script" .

:Reference-HowTrustRelationshipsWorkForResourceForestsInAzureActiveDirectoryDomainServices a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - How trust relationships work for resource forests in Azure Active Directory Domain Services" ;
    :has-link "https://docs.microsoft.com/en-us/azure/active-directory-domain-services/concepts-forest-trust"^^xsd:anyURI ;
    :kb-abstract "Active Directory Domain Services (AD DS) provides security across multiple domains or forests through domain and forest trust relationships. Before authentication can occur across trusts, Windows must first check if the domain being requested by a user, computer, or service has a trust relationship with the domain of the requesting account." ;
    :kb-author "Microsoft" ;
    :kb-reference-of :DomainTrustPolicy ;
    :kb-reference-title "How trust relationships work for resource forests in Azure Active Directory Domain Services" .

:Reference-IdentificationAndExtractionOfKeyForensicsIndicatorsOfCompromiseUsingSubject-specificFilesystemViews a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Identification and extraction of key forensics indicators of compromise using subject-specific filesystem views" ;
    :has-link "https://patents.google.com/patent/US20200004962A1/en"^^xsd:anyURI ;
    :kb-abstract "A stackable filesystem that transparently tracks process file writes for forensic analysis. The filesystem comprises a base filesystem, and an overlay filesystem. Processes see the union of the upper and lower filesystems, but process writes are only reflected in the overlay. By providing per-process views of the filesystem using this stackable approach, a forensic analyzer can record a process's file-based activity-i.e., file creation, deletion, modification. These activities are then analyzed to identify indicators of compromise (IoCs). These indicators are then fed into a forensics analysis engine, which then quickly decides whether a subject (e.g., process, user) is malicious. If so, the system takes some proactive action to alert a proper authority, to quarantine the potential attack, or to provide other remediation. The approach enables forensic analysis without requiring file access mediation, or conducting system event-level collection and analysis, making it a lightweight, and non-intrusive solution." ;
    :kb-author "Frederico Araujo; Anne E. Kohlbrenner; Marc Philippe Stoecklin; Teryl Paul Taylor" ;
    :kb-reference-title "Identification and extraction of key forensics indicators of compromise using subject-specific filesystem views" .

:Reference-IdentificationOfTracerouteNodesAndAssociatedDevices a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Identification of traceroute nodes and associated devices" ;
    :has-link "https://patents.google.com/patent/US10079749B2/en"^^xsd:anyURI ;
    :kb-abstract "Various embodiments pertain to communication network systems. In particular, various embodiments relate to multi-path probing in communication network systems that can be used to estimate the complete topology of the network. A method includes receiving data at a source node from a tracerouting probe in a network. The data includes information about at least one network node. The method also includes determining an identification for the at least one network node based on information. In addition, the method includes using the identification of the at least one network node to determine an identification of at least one device." ;
    :kb-author "Tomas KUBIK, Lan Li, Tomas RYBKA, Karlo ZATYLNY, Chris O'Brien" ;
    :kb-organization "SolarWinds Worldwide LLC" ;
    :kb-reference-title "Identification of traceroute nodes and associated devices" .

:Reference-IdentificationOfVisualInternationalDomainNameCollisions-VerisignInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Identification of visual international domain name collisions - Verisign Inc" ;
    :has-link "https://patents.google.com/patent/US10599836B2/en"^^xsd:anyURI ;
    :kb-abstract """Fuzzy OCR to detect domain name homoglyph attacks.

Various embodiments of the invention disclosed herein provide techniques for detecting a homograph attack. An IDN collision detection server retrieves a first domain name that includes a punycode element. The IDN collision detection server converts the first domain into a second domain name that includes a Unicode character corresponding to the punycode element. The IDN collision detection server converts the second domain name into an image. The IDN collision detection server performs one or more optical character recognition operations on the image to generate a textual string associated with the image. The IDN collision detection server determines that the textual string matches at least a portion of a third domain name.""" ;
    :kb-author "Ben McCarty, Preston Zeh" ;
    :kb-mitre-analysis "MITRE Analysis was not found." ;
    :kb-organization "Verisign Inc" ;
    :kb-reference-of :HomoglyphDetection ;
    :kb-reference-title "Identification of visual international domain name collisions" .

<http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-IdentifyingADenial-of-serviceAttackInACloud-basedProxyService-CloudfareInc.> a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Identifying a denial-of-service attack in a cloud-based proxy service - Cloudfare Inc." ;
    :has-link "https://patents.google.com/patent/US8613089B1"^^xsd:anyURI ;
    :kb-abstract "A cloud-based proxy service identifies a denial-of-service (DoS) attack including determining that there is a potential DoS attack being directed to an IP address of the cloud-based proxy service; and responsive to determining that there are a plurality of domains that resolve to that IP address, identifying the one of the plurality of domains that is the target of the DoS attack. The domain that is under attack is identified by scattering the plurality of domains to resolve to different IP addresses, where a result of the scattering is that each of those domains resolves to a different IP address, and identifying one of those plurality of domains as the target of the DoS attack by determining that there is an abnormally high amount of traffic being directed to the IP address in which that domain resolves." ;
    :kb-author "Lee Hahn Holloway, Srikanth N. Rao, Matthew Browning Prince, Matthieu Philippe Francois Tourne, Ian Gerald Pye, Ray Raymond Bejjani, Terry Paul Rodery, Jr." ;
    :kb-organization "Cloudfare Inc." ;
    :kb-reference-of :InboundSessionVolumeAnalysis ;
    :kb-reference-title "Identifying a denial-of-service attack in a cloud-based proxy service" .

:Reference-IEEE-802_1AB-2016 a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - IEEE Standard for Local and Metropolitan Area Networks - Station and Media Access Control Connectivity Discovery" ;
    :has-link "https://standards.ieee.org/ieee/802.1AB/6047/"^^xsd:anyURI ;
    :kb-organization "IEEE" ;
    :kb-reference-of :HardwareComponentInventory ;
    :kb-reference-title "IEEE Standard for Local and Metropolitan Area Networks - Station and Media Access Control Connectivity Discovery" .

:Reference-IndirectBranchingCalls a :AcademicPaperReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Indirect Branching Calls" ;
    :has-link "https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.1048.1241&rep=rep1&type=pdf"^^xsd:anyURI ;
    :kb-abstract """Return-oriented programming (ROP) has become the
primary exploitation technique for system compromise
in the presence of non-executable page protections. ROP
exploits are facilitated mainly by the lack of complete
address space randomization coverage or the presence
of memory disclosure vulnerabilities, necessitating additional ROP-specific mitigations.
In this paper we present a practical runtime ROP exploit prevention technique for the protection of thirdparty applications. Our approach is based on the detection of abnormal control transfers that take place during
ROP code execution. This is achieved using hardware
features of commodity processors, which incur negligible runtime overhead and allow for completely transparent operation without requiring any modifications to
the protected applications. Our implementation for Windows 7, named kBouncer, can be selectively enabled for
installed programs in the same fashion as user-friendly
mitigation toolkits like Microsoft's EMET. The results of
our evaluation demonstrate that kBouncer has low runtime overhead of up to 4%, when stressed with specially
crafted workloads that continuously trigger its core detection component, while it has negligible overhead for
actual user applications. In our experiments with in-thewild ROP exploits, kBouncer successfully protected all
tested applications, including Internet Explorer, Adobe
Flash Player, and Adobe Reader.""" ;
    :kb-author """Vasilis Pappas, Michalis Polychronakis, Angelos D. Keromytis
Columbia University""" ;
    :kb-organization "Columbia University" ;
    :kb-reference-of :IndirectBranchCallAnalysis ;
    :kb-reference-title "Transparent ROP Exploit Mitigation using Indirect Branch Tracing" .

:Reference-InferentialExploitAttemptDetection_CrowdstrikeInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Inferential exploit attempt detection - Crowdstrike Inc" ;
    :has-link "https://patents.google.com/patent/US10216934B2/en?oq=US-10216934-B2"^^xsd:anyURI ;
    :kb-abstract """A security agent implemented on a monitored computing device is described herein. The security agent is configured to detect an action of interest (AoI) that may be probative of a security exploit and to determine a context in which that AoI occurred. Based on that context, the security agent is further configured to decide whether the AoI is a security exploit and can take preventative action to prevent the exploit from being completed.

Determining that the AoI includes the security exploit is based at least in part on one or more of: determining that the return address is outside memory previously allocated for an object; determining that the object identifier is associated with a vulnerable object; determining that permissions of the memory region include two or more of read, write, and execute; or determining that the memory region is one page in length.

Determining that the return address is outside memory previously allocated for an object and the method further including treating code that the return address points to as malicious code.""" ;
    :kb-author "Daniel W. Brown; Ion-Alexandru Ionescu; Loren C. Robinson" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Crowdstrike Inc" ;
    :kb-reference-of :MemoryBoundaryTracking ;
    :kb-reference-title "Inferential exploit attempt detection" ;
    :todo "MITRE Analysis was not found" .

:Reference-InstantProcessTerminationToolToRecoverControlOfAnInformationHandlingSystem_DellProductsLP a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Instant process termination tool to recover control of an information handling system - Dell Products LP" ;
    :has-link "https://patents.google.com/patent/US20060236108A1/en"^^xsd:anyURI ;
    :kb-abstract "A method and system for automatic termination of unauthorized malevolent processes operating on an information handling system. A list of authenticated and essential process list is stored on the information handling system. Unauthorized processes not contained on the list can be automatically terminated by the user by invoking the present invention with a single click of a mouse or pointer device on an icon residing on the display screen of the information handling system. The offending processes are immediately terminated without generating a user prompt, which would ordinarily provide sufficient time for the malware to spawn additional offending processes. The present invention also provides significant means to recover control of a malware-infected information handling system in order to use repair tools and utilities. The present invention can be deployed at the time of manufacture of an information handling system or independently installed by a user." ;
    :kb-author "Carlton Andrews" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Dell Products LP" ;
    :kb-reference-of :ProcessTermination ;
    :kb-reference-title "Instant process termination tool to recover control of an information handling system" ;
    :todo "MITRE Analysis was not found" .

:Reference-IntegrityAssuranceThroughEarlyLoadingInTheBootPhase_CrowdstrikeInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Integrity assurance through early loading in the boot phase - Crowdstrike Inc" ;
    :has-link "https://patents.google.com/patent/US20170061127A1"^^xsd:anyURI ;
    :kb-abstract "Techniques utilizing library and pre-boot components to ensure that a driver associated with a kernel-mode component is initialized before other drivers during a boot phase are described herein. The library component is processed during a boot phase; the pre-boot component, which may be an alternative to the library component, is processed during a pre-boot phase. By ensuring that the driver is the first driver initialized, the components enable the driver to launch the kernel-mode component before other drivers are initialized. The library component may also determine whether another driver is to be initialized before the kernel-mode component driver, may ensure that kernel-mode component driver is initialized first, and may alert the kernel-mode component. Also, the library component may retrieve information that is to be deleted by the operating system before initialization of drivers and may provide that information to the kernel-mode component." ;
    :kb-author "Ion-Alexandru Ionescu" ;
    :kb-mitre-analysis """To compromise software or to gain control of a host device, a security exploit can modify driver initialization order used by an operating system and place a driver associated with the security exploit first in a list of drivers initialized by the operating system.

This patent describes ensuring that a driver associated with the agent is initialized first. To ensure the driver is initialized first, a dependent DLL associated with the driver is configured to be processed before other dependent DLLs. The dependent DLL can be configured to be processed first by various methods, for example if processing is done in alphabetical order, changing its name to be processed first. The dependent DLL, once processed, executes a number of operations to ensure the driver associated with the agent is initialized first. Furthermore, if the initialization order is modified, an alert is provided to the kernel-mode component that notifies the kernel-mode component it was not first and the order had to be altered. It can then take additional actions such as additional monitoring or remediation.""" ;
    :kb-organization "Crowdstrike Inc" ;
    :kb-reference-of :DriverLoadIntegrityChecking ;
    :kb-reference-title "Integrity assurance through early loading in the boot phase" .

:Reference-IntrusionDetectionUsingAHeartbeat_SophosLtd a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Intrusion detection using a heartbeat - Sophos Ltd" ;
    :has-link "https://patents.google.com/patent/US20180191752A1"^^xsd:anyURI ;
    :kb-abstract "A variety of techniques are disclosed for detection of advanced persistent threats and similar malware. In one aspect, the detection of certain network traffic at a gateway is used to trigger a query of an originating endpoint, which can use internal logs to identify a local process that is sourcing the network traffic. In another aspect, an endpoint is configured to periodically generate and transmit a secure heartbeat, so that an interruption of the heartbeat can be used to signal the possible presence of malware. In another aspect, other information such as local and global reputation information is used to provide context for more accurate malware detection." ;
    :kb-author "Kenneth D. Ray" ;
    :kb-mitre-analysis """This patent describes a health monitor deployed on an endpoint that uses a heartbeat to periodically communicate status to a gateway's remote health monitor. The endpoint health monitor issues a heartbeat for satisfactory status of the endpoint using factors such as:

* checking the status of individual software items executing on the endpoint
* checking that antivirus and other security software is up to date (e. g., with current virus definition files) and running correctly
* checking the integrity of cryptographic key stores
* checking other hardware or software components of the endpoint as necessary or helpful for health monitoring

A disappearance of the heartbeat from the endpoint may indicate that the endpoint has been compromised.""" ;
    :kb-organization "Sophos Ltd" ;
    :kb-reference-of :EndpointHealthBeacon ;
    :kb-reference-title "Intrusion detection using a heartbeat" .

:Reference-LibreNMSDocsNetworkMapExtension a owl:NamedIndividual,
        :UserManualReference ;
    rdfs:label "Reference - Libre NMS - Network Map Extension" ;
    :has-link "https://docs.librenms.org/Extensions/Network-Map/"^^xsd:anyURI ;
    :kb-abstract """LibreNMS has the ability to show you a network map based on:
* xDP Discovery
* MAC addresses""" ;
    :kb-organization "LibreNMS.org" ;
    :kb-reference-of :NetworkMapping ;
    :kb-reference-title "Libre NMS - Network Map Extension" .

:Reference-LibreNMSDocsOxidizedExtension a owl:NamedIndividual,
        :UserManualReference ;
    rdfs:label "Reference - Libre NMS - Oxidized Extension" ;
    :has-link "https://docs.librenms.org/Extensions/Oxidized/"^^xsd:anyURI ;
    :kb-abstract """Integrating LibreNMS with Oxidized brings the following benefits:

* Config viewing: Current, History, and Diffs all under the Configs tab of each device
* Automatic addition of devices to Oxidized: Including filtering and grouping to ease credential management
* Configuration searching""" ;
    :kb-organization "LibreNMS.org" ;
    :kb-reference-of :DiskEncryption ;
    :kb-reference-title "LibreNMSDocs - Oxidized Extension" .

:Reference-LsassProcessDumpViaProcdump_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2019-07-002: Lsass Process Dump via Procdump - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2019-07-002/"^^xsd:anyURI ;
    :kb-abstract """ProcDump is a sysinternal command-line utility whose primary purpose is monitoring an application for CPU spikes and generating crash dumps during a spike that an administrator or developer can use to determine the cause of the spike.

ProcDump may be used to dump the memory space of lsass.exe to disk for processing with a credential access tool such as Mimikatz. This is performed by launching procdump.exe as a privileged user with command line options indicating that lsass.exe should be dumped to a file with an arbitrary name.""" ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2019-07-002: Lsass Process Dump via Procdump" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-LUKS1On-DiskFormatSpecificationVersion1.2.3 a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - LUKS1 On-Disk Format SpecificationVersion 1.2.3" ;
    :has-link "https://mirrors.edge.kernel.org/pub/linux/utils/cryptsetup/LUKS_docs/on-disk-format.pdf"^^xsd:anyURI ;
    :kb-abstract "LUKS is short for \"Linux Unified Key Setup\". It has initially been developed to remedy the unpleasantness a user experienced that arise from deriving the encryption setup from changing user space, and forgotten command line arguments. The result of this changes are an unaccessible encryption storage. The reason for this to happen was, a unstandardised way to read, process and set up encryption keys, and if the user was unlucky, he upgraded to an incompatible version of user space tools that needed a good deal of knowledge to use with old encryption volumes." ;
    :kb-author "Clemens Fruhwirth" ;
    :kb-reference-of :DiskEncryption ;
    :kb-reference-title "LUKS1 On-Disk Format SpecificationVersion 1.2.3" .

:Reference-MaliciousRelayDetectionOnNetworks_VECTRANETWORKSInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Malicious relay detection on networks - VECTRA NETWORKS Inc" ;
    :has-link "https://patents.google.com/patent/US20150264083A1"^^xsd:anyURI ;
    :kb-abstract "A system and method for detecting malicious relay communications is disclosed. Network communications can be received and analyzed using such network components as a network switch. The received traffic can be parsed into sessions. Relay metadata can be extracted from the sessions and further be used to categorize the sessions into one or more types of relay metadata behaviors. Once a significant amount of sessions are detected an alarm may be triggered and/or alarm data may be generated for analysis by network security administrators." ;
    :kb-author "Ryan James PRENGER; Nicolas BEAUCHESNE; Karl Matthew LYNN" ;
    :kb-mitre-analysis "This patent describes a technique for detecting relay networks, i.e. an attacker outside of the organization's network takes control of an internal host to be used as a source of attacks against other internal targets or exfiltrate data out of the organization. In this defensive technique, metadata from collected network packet captures is extracted to categorize network sessions using known relay behaviors. Information such as the number of bytes sent to and from a potential internal relay host, time of session initiation, packet contents, packet size, flow direction, and packet arrival time statistics are used to categorize the sessions and identify relay behavior. This technique assumes that relay network connections' inter-packet arrival times exhibit a high degree of variance in comparison to standard client-to-server connections. If enough evidence of relay behavior is gathered about a given internal host, the host is identified as suspicious and an alert is generated." ;
    :kb-organization "VECTRA NETWORKS Inc" ;
    :kb-reference-of :RelayPatternAnalysis ;
    :kb-reference-title "Malicious relay detection on networks" .

:Reference-MalwareAnalysisSystem_PaloAltoNetworksInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Malware analysis system - Palo Alto Networks Inc" ;
    :has-link "https://patents.google.com/patent/US20150319136A1"^^xsd:anyURI ;
    :kb-abstract "In some embodiments, a malware analysis system includes receiving a potential malware sample from a firewall; analyzing the potential malware sample using a virtual machine to determine if the potential malware sample is malware; and automatically generating a signature if the potential malware sample is determined to be malware. In some embodiments, the potential malware sample does not match a preexisting signature, and the malware is a zero-day attack." ;
    :kb-author "Huagang Xie; Xinran Wang; Jiangxia Liu" ;
    :kb-mitre-analysis "This patent describes a VM sandbox environment that uses heuristic based analysis techniques performed in real-time during a file transfer to determine if the file is malicious. A new signature can then be generated and distributed to automatically block future file transfer requests to download the malicious file." ;
    :kb-organization "Palo Alto Networks Inc" ;
    :kb-reference-of :DynamicAnalysis ;
    :kb-reference-title "Malware analysis system" .

:Reference-MalwareDetectionInEventLoops_CrowdstrikeInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Malware detection in event loops - Crowdstrike Inc" ;
    :has-link "https://patents.google.com/patent/US20190205530A1"^^xsd:anyURI ;
    :kb-abstract "Example techniques locate or identify malware based on events from or at monitored computing devices. A control unit can detect a sequence of events of various types. The control unit can locate a loop within the sequence of events based at least in part on relative frequencies of the event types. The control unit can determine a distribution of event types of the events within the loop, and determining that software running the sequence is associated with malware based at least in part on the distribution of event types within the loop. In some examples, the control unit can locate a point of commonality among a plurality of stack traces associated with respective events within the loop. The control unit can determine a malware module comprising the point of commonality." ;
    :kb-author "Daniel W. Brown" ;
    :kb-mitre-analysis "The patent describes determining if a sequence of events associated with a process are associated with malware. Based on the relative frequency of events, a loop within a sequence of events is located and a distribution of the events within the loop is determined. The distribution of events is then compared against a catalog of distributions to determine if it is associated with malware." ;
    :kb-organization "Crowdstrike Inc" ;
    :kb-reference-of :SystemCallAnalysis ;
    :kb-reference-title "Malware detection in event loops" .

:Reference-MalwareDetectionUsingLocalComputationalModels_CrowdstrikeInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Malware detection using local computational models - Crowdstrike Inc" ;
    :has-link "https://patents.google.com/patent/US20190026466A1"^^xsd:anyURI ;
    :kb-abstract "Example techniques herein determine that a trial data stream is associated with malware (\"dirty\") using a local computational model (CM). The data stream can be represented by a feature vector. A control unit can receive a first, dirty feature vector (e.g., a false miss) and determine the local CM based on the first feature vector. The control unit can receive a trial feature vector representing the trial data stream. The control unit can determine that the trial data stream is dirty if a broad CM or the local CM determines that the trial feature vector is dirty. In some examples, the local CM can define a dirty region in a feature space. The control unit can determine the local CM based on the first feature vector and other clean or dirty feature vectors, e.g., a clean feature vector nearest to the first feature vector." ;
    :kb-author "Sven Krasser,David Elkind, Patrick Crenshaw, Kirby James Koster" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Crowdstrike Inc" ;
    :kb-reference-of :ProcessTermination ;
    :kb-reference-title "Malware detection using local computational models" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-MethodAndApparatusForDetectingMaliciousWebsites_EndgameInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Method and Apparatus for Detecting Malicious Websites - Endgame Inc" ;
    :has-link "https://patents.google.com/patent/US20140331319A1"^^xsd:anyURI ;
    :kb-abstract "A method and apparatus for detecting malicious websites is disclosed." ;
    :kb-author "John Burnet MUNRO, IV; Jason Aaron Trost; Zachary Daniel HANIF" ;
    :kb-mitre-analysis """This patent describes a domain classification engine on the host computer that analyzes URLs clicked by a user or entered into a web browser to visit a website. URL analysis is done by using a combination of techniques:

* Feature extraction: A URL is analyzed against features associated with suspicious URLs such as % of longest consecutive digits in a subdomain, % of longest repeated characters in a subdomain, % of vowels in a high level domain.

* Markov analysis: The probability of a digit occurring in normal language given the preceding two digits is determined. For example, if the received URL is google.com, the probability of a 'g' occurring at the beginning of a word, the probability of an 'o' occurring after a "g, the probability of an "o' occurring after a 'g' and "o, and so forth will be determined. The probability of each digit is then multiplied to get a probability for the whole domain name. Probabilities are determined based on a database of existing usage, such as a dictionary, or a list of known good domain names

* Domain names are compared against an existing dataset of known unauthorized domain names.

A rating is developed based on the results of these techniques, and if the rating is over a set threshold, an action is taken such as blocking access or generating an alert.""" ;
    :kb-organization "Endgame Inc" ;
    :kb-reference-of :URLAnalysis ;
    :kb-reference-title "Method and Apparatus for Detecting Malicious Websites" .

:Reference-MethodAndApparatusForIncreasingTheSpeedAtWhichComputerVirusesAreDetected_McAfeeLLC a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Method and apparatus for increasing the speed at which computer viruses are detected - McAfee LLC" ;
    :has-link "https://patents.google.com/patent/US5502815A"^^xsd:anyURI ;
    :kb-abstract "The method and apparatus for increasing the speed at which computer viruses are detected stores initial state information concerning the file or volume which is being examined for a virus. This information is stored in a cache in a non-volatile storage medium and when files are subsequently scanned for viruses, the current state information is compared to the initial state information stored in the cache. If the initial state information differs from the current state information then the file or volume is scanned for viruses which change the state information of the file or volume. If the initial state information and current state information is the same then the file or volume is scanned for a subset of viruses which do not change the state information." ;
    :kb-author "Paul D. Cozza" ;
    :kb-mitre-analysis " " ;
    :kb-organization "McAfee LLC" ;
    :kb-reference-of :ExecutableDenylisting ;
    :kb-reference-title "Method and apparatus for increasing the speed at which computer viruses are detected" ;
    :todo "MITRE Analysis was not found" .

:Reference-MethodAndApparatusForNetworkFraudDetectionAndRemediationThroughAnalytics_IdaptiveLLC a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Method and Apparatus for Network Fraud Detection and Remediation Through Analytics - Idaptive LLC" ;
    :has-link "https://patents.google.com/patent/US20190081968A1/en"^^xsd:anyURI ;
    :kb-abstract "A system and method for assessing the identity fraud risk of an entity's (a user's, computer process's, or device's) behavior within a computer network and then to take appropriate action. The system uses real-time machine learning for its assessment. It records the entity's log-in behavior (conditions at log-in) and behavior once logged in to create an entity profile that helps identify behavior patterns. The system compares new entity behavior with the entity profile to determine a risk score and a confidence level for the behavior. If the risk score and confidence level indicate a credible identity fraud risk at log-in, the system can require more factors of authentication before log-in succeeds. If the system detects risky behavior after log-in, it can take remedial action such as ending the entity's session, curtailing the entity's privileges, or notifying a human administrator." ;
    :kb-author "Yanlin Wang; Weizhi Li" ;
    :kb-mitre-analysis """This patent describes determining a confidence score to detect anomalies in user activity based on comparing a user's behavior profile with current user activity events.  The following types of events are used to develop a user entity profile:

* logon and logoff times and locations
* starting or ending applications
* reading or writing files
* changing an entity 's authorization
* monitoring network traffic

User events that deviate from the entity profile over a certain threshold trigger a remedial action.""" ;
    :kb-organization "Idaptive LLC" ;
    :kb-reference-of :AuthenticationEventThresholding,
        :AuthorizationEventThresholding,
        :ResourceAccessPatternAnalysis,
        :SessionDurationAnalysis,
        :UserGeolocationLogonPatternAnalysis ;
    :kb-reference-title "Method and Apparatus for Network Fraud Detection and Remediation Through Analytics" .

<http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-MethodAndApparatusForUtilizingATokenForResourceAccess_RsaSecurityInc.> a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Method and apparatus for utilizing a token for resource access - Rsa Security Inc." ;
    :has-link "https://patents.google.com/patent/US5657388A/en"^^xsd:anyURI ;
    :kb-abstract "A method and apparatus for utilizing a token which is preferably a \"dumb token\" to provide secure access by authorized users to a selected resource. The token stores a secret user code in machine readable form, which code is read by a token processor. The token processor also receives a time-varying value and an algorithm, both of which may be stored or generated at either the token or the token processor and preferably a secret personal identification code which may be inputted at the token, but is preferably inputted at the token processor. The secret user code, time-varying value and secret personal identification code are then algorithmically combined by the algorithm, preferably in the token processor, to generate a one-time nonpredictable code which is transmitted to a host processor. The host processor utilizes the received one-time nonpredictable code to determine if the user is authorized access to the resource and grants access to the resource if the user is determined to be authorized. The system may be modified to operate in query/response mode. The token processor may be any of a variety of available portable remote processors or may be a device such as a telephone which is equipped with card or other token reader and with processing capability." ;
    :kb-author "Kenneth P. Weiss" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Rsa Security Inc." ;
    :kb-reference-of :Multi-factorAuthentication ;
    :kb-reference-title "Method and apparatus for utilizing a token for resource access" ;
    :todo "MITRE Analysis was not found" .

:Reference-MethodAndSystemForControllingCommunicationPorts a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Method and system for controlling communication ports" ;
    :has-link "https://patents.google.com/patent/US8566924"^^xsd:anyURI ;
    :kb-abstract "A method for limiting devices and controlling the applications executed from USB ports on personal computers (PCs)." ;
    :kb-author "Steven V Bacastow" ;
    :kb-organization "OL Security LLC" ;
    :kb-reference-of :IOPortRestriction ;
    :kb-reference-title "Method and system for controlling communication ports" .

:Reference-MethodAndSystemForDetectingAlgorithm-generatedDomains_VECTRANETWORKSInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Method and system for detecting algorithm-generated domains - VECTRA NETWORKS Inc" ;
    :has-link "https://patents.google.com/patent/US20150264070A1"^^xsd:anyURI ;
    :kb-abstract "A method and system for detecting algorithm-generated domains (AGDs) is disclosed wherein domain names requested by an internal host are categorized or classified using curated data sets, active services (e.g. Internet services), and certainty scores to match domain names to domain names or IP addresses used by command and control servers." ;
    :kb-author "James Patrick HARLACHER; Aditya Sood; Oskar Ibatullin" ;
    :kb-mitre-analysis """This patent describes detecting algorithm generated domains (AGD). DNS requests and responses are analyzed by first checking whether the domain matches existing data sets that specify different types of AGDs with known characteristics, such as Evil Twin Domains, Sinkholed domains, sleeper cells, ghost domains, parked domains, and/or bulk-registered domains. In addition to comparing domains against known data sets, the following information is collected to perform analysis:

* IP Information: checks for information known about the IP addresses returned in the DNS response, including the number of IP addresses returned, the registered owners of the IP addresses, or different IP addresses returned for the same domain (IP fluxing)
* Domain Registration: examines the domain registration date, domain update date, domain expiration date, registrant identity, and authorized name servers associated with a specific domain name.
* Domain Popularity: provides information on the popularity of a domain name.

Based on analysis of these factors a score is developed; if the score is above a certain threshold, an alert is generated.""" ;
    :kb-organization "VECTRA NETWORKS Inc" ;
    :kb-reference-of :DNSTrafficAnalysis ;
    :kb-reference-title "Method and system for detecting algorithm-generated domains" .

:Reference-MethodAndSystemForDetectingExternalControlOfCompromisedHosts_VECTRANETWORKSInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Method and system for detecting external control of compromised hosts - VECTRA NETWORKS Inc" ;
    :has-link "https://patents.google.com/patent/US9407647B2/en?oq=US-9407647-B2"^^xsd:anyURI ;
    :kb-abstract "A detection engine may be implemented by receiving network traffic and processing the traffic into one or more session datasets. Sessions not initiated by an internal host may be discarded. The frequency between the communication packets from the internal host to external host may be grouped or processed into rapid-exchange instances. The number of rapid-exchange instances, the time intervals between them, and/or the rhythm and directions of the initiation of the instances may be analyzed to determine that a human actor is manually controlling the external host. In some embodiments, when it is determined that only one human actor is involved, alarm data may be generated that indicates that a network intrusion involving manual remote control has occurred or is underway." ;
    :kb-author "Nicolas BEAUCHESNE; Ryan James PRENGER" ;
    :kb-mitre-analysis "This patent describes detecting an external attacker taking remote control of an internal host. Detection includes identifying sessions where the external host controls the internal host in the opposite direction the session was initiated. The number of rapid-exchange communication instances (i.e, communications that occur between the two hosts with little silence gap), the time intervals between them, and/or the rhythm and direction of the instances, are analyzed to determine if an external human actor is manually controlling the internal host." ;
    :kb-organization "VECTRA NETWORKS Inc" ;
    :kb-reference-of :RemoteTerminalSessionDetection ;
    :kb-reference-title "Method and system for detecting external control of compromised hosts" .

:Reference-MethodAndSystemForDetectingMaliciousPayloads_VectraNetworksInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Method and system for detecting malicious payloads - Vectra Networks Inc" ;
    :has-link "https://patents.google.com/patent/EP3293937A1/en?oq=EP-3293937-A1"^^xsd:anyURI ;
    :kb-abstract """Disclosed is an improved method, system, and computer program product for identifying malicious payloads. The disclosed approach identifies potentially malicious payload exchanges which may be associated with payload injection or root-kit magic key usage.

Some examples of data inputs:
    Information for clients and servers, such as IP address and host information
    Payloads for both clients and servers
    Amount of data being transferred
    Duration of communications
    Length of time delay between client request and server response""" ;
    :kb-author "Nicolas Beauchesne; John Steven Mancini" ;
    :kb-mitre-analysis "Extraction of network flow data and using unsupervised machine learning to create a standard baseline. During the monitoring phase, abnormal network metadata will result in an alert." ;
    :kb-organization "Vectra Networks Inc" ;
    :kb-reference-of :Client-serverPayloadProfiling ;
    :kb-reference-title "Method and system for detecting malicious payloads" .

:Reference-MethodAndSystemForDetectingRestrictedContentAssociatedWithRetrievedContent_SophosLtd a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Method and system for detecting restricted content associated with retrieved content - Sophos Ltd" ;
    :has-link "https://patents.google.com/patent/US20160359883A1"^^xsd:anyURI ;
    :kb-abstract "In embodiments of the present invention improved capabilities are described for detecting restricted content associated with retrieved content. The method and system may include receiving a client request for content, saving contextual information from the client request, presenting retrieved content in response to the client request, and presenting the contextual information from the client request, and retrieved content, to a scanning facility. The scanning facility may utilize the contextual information from the client request to aid in the detection of restricted content associated with retrieved content." ;
    :kb-author "Fraser Howard; Paul Baccas; Vanja Svajcer; Benjamin John Godwood; William James McCourt" ;
    :kb-mitre-analysis "This patent describes analyzing contextual information of a Uniform Resource Identifier (URI), such as source or origin of the request URI, patterns in the way the URI is delivered, and the locale of the URI. The contextual information is sent to a scanning facility which uses that information along with a blacklist of known malicious domain names, locations, patterns, etc. to block retrieved content associated with the request URI." ;
    :kb-organization "Sophos Ltd" ;
    :kb-reference-of :URLAnalysis ;
    :kb-reference-title "Method and system for detecting restricted content associated with retrieved content" .

:Reference-MethodAndSystemForDetectingSuspiciousAdministrativeActivity_VectraNetworksInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Method and system for detecting suspicious administrative activity - Vectra Networks Inc" ;
    :has-link "https://patents.google.com/patent/US20180077186A1"^^xsd:anyURI ;
    :kb-abstract "Disclosed is an improved approach for identifying suspicious administrative host activity within a network. Network traffic is examined to learn the behavior of hosts within a network. This provides an effective way of determining whether or not a host is performing suspicious activity over an administrative protocol." ;
    :kb-author "Nicolas Beauchesne; Kevin Song-Kai Ni" ;
    :kb-mitre-analysis "Collect network traffic metadata directed at administrative services over a period of time to establish a baseline. This baseline is then used to determine suspicious activity that falls outside of the established baseline." ;
    :kb-organization "Vectra Networks Inc" ;
    :kb-reference-of :AdministrativeNetworkActivityAnalysis ;
    :kb-reference-title "Method and system for detecting suspicious administrative activity" .

:Reference-MethodAndSystemForDetectingThreatsUsingMetadataVectors_VECTRANETWORKSInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Method and system for detecting threats using metadata vectors - VECTRA NETWORKS Inc" ;
    :has-link "https://patents.google.com/patent/US20160191551A1"^^xsd:anyURI ;
    :kb-abstract "An approach for detecting network attacks using metadata vectors may initially involve receiving network communications or packets, extracting metadata items from the packets. The metadata items describe the communications without requiring deep content inspection of the data payload or contents. The communications may be clustered into groups using the metadata items. If a cluster exceeds a threshold, an alarm may be generated." ;
    :kb-author "Nicolas BEAUCHESNE; David Lopes Pegna; Karl Lynn" ;
    :kb-mitre-analysis "This patent describes detecting network threats by first passively collecting network traffic and storing it for processing. Metadata from network traffic such as packet header information or information about a session (ex. time between request/responses) is extracted. After the metadata is extracted, the data is grouped into cluster maps of matching events to track how many instances of a network communication have occurred, such as five requests sent and five responses received. Threshold limits are set on the clusters to monitor them and if a cluster grows too large (ex. ten instances of requests and responses) this can correspond to unauthorized behavior. This method might detect, for example, a network attack using malicious payloads with automated scripts, in which a bot sends replicated malicious payloads to the same destination port." ;
    :kb-organization "VECTRA NETWORKS Inc" ;
    :kb-reference-of :ProtocolMetadataAnomalyDetection ;
    :kb-reference-title "Method and system for detecting threats using metadata vectors" .

:Reference-MethodAndSystemForDetectingThreatsUsingPassiveClusterMapping_VectraNetworksInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Method and system for detecting threats using passive cluster mapping - Vectra Networks Inc" ;
    :has-link "https://patents.google.com/patent/US20160149936A1"^^xsd:anyURI ;
    :kb-abstract "An approach for detecting network threats is disclosed, that may involve receiving network traffic, plotting the network traffic in a n-dimensional feature space to form a network map, generating a client signature at least by placing new client points in the map, setting a threshold, and generating an alarm if one or more client activity points exceed the threshold. In some embodiments, the network map and the client signature are updated using sliding windows and distance calculations." ;
    :kb-author "David Lopes PEGNA; Nicolas Beauchesne" ;
    :kb-mitre-analysis "This patent describes detecting network threats by first passively collecting network traffic and storing it for processing. The stored network traffic data is used to map network events to create a cluster map. Events are network activity associated with clients, servers, or control modules such as a Kerberos Domain Controller (KDC); account information; services accessed by the client; or the number of times a service is accessed. Events that exceed a threshold from a center of gravity point of a cluster are identified as suspicious activity and an alert is generated." ;
    :kb-organization "Vectra Networks Inc" ;
    :kb-reference-of :ProtocolMetadataAnomalyDetection ;
    :kb-reference-title "Method and system for detecting threats using passive cluster mapping" .

:Reference-MethodAndSystemForProvidingSoftwareUpdatesToLocalMachines a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Method and system for providing software updates to local machines " ;
    :has-link "https://patents.google.com/patent/US10474448B2/en"^^xsd:anyURI ;
    :kb-author "John Melton Reynolds" ;
    :kb-organization "Sophos Ltd" ;
    :kb-reference-title "Method and system for providing software updates to local machines" .

:Reference-MethodAndSystemForUDPFloodAttackDetection-RioreyLLC a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Method and system for UDP flood attack detection - Riorey LLC" ;
    :has-link "https://patents.google.com/patent/US8307430B1"^^xsd:anyURI ;
    :kb-abstract "A system and method is provided to identify UDP attacks. A processor determines a spectral density of packet timing intervals, a natural distance between the spectral density and a uniform distribution, and a non-linear amplifier applying a non-linear amplification to the natural distance to detect a denial-of-service attack. It uses the concept of traffic statistics analysis, i.e., spectral densities of arrived-packet timing intervals, calculates the KL-distance measurement and makes decision based on the output of a non-linear Gaussian amplifier, with which one can easily adjust the amplifier via selecting different parameters of mean and variance to satisfy system requirements of false-positive and false-negative UDP attack detections." ;
    :kb-author "Hongda Chen, Lijin Lu" ;
    :kb-reference-of :InboundSessionVolumeAnalysis ;
    :kb-reference-title "Method and system for UDP flood attack detection" .

:Reference-MethodForControllingComputerNetworkSecurity_CheckpointSoftwareTechnologiesLtd a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Method for controlling computer network security - Checkpoint Software Technologies Ltd" ;
    :has-link "https://patents.google.com/patent/EP0658837B1/"^^xsd:anyURI ;
    :kb-abstract "A method of operating a security system for a computer network in which data is passed in said network as data packets, said system controlling the passage of said data packets in the network according to a security rule, where each aspect of said network controlled by said security rule has been defined, said security rule has been defined in terms of said aspects and converted into a set of filter language instructions." ;
    :kb-author "Gil Shwed" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Checkpoint Software Technologies Ltd" ;
    :kb-reference-of :InboundTrafficFiltering ;
    :kb-reference-title "Method for controlling computer network security" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-MethodForFileEncryption a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Method for file encryption" ;
    :has-link "https://patents.google.com/patent/US9521123B2/en"^^xsd:anyURI ;
    :kb-abstract "A method for encryption and sealing of a plaintext file by hashing the plaintext file to produce a plaintext hash, encrypting the plaintext file to produce ciphertext, hashing the ciphertext to produce a ciphertext hash, hashing the plaintext hash and the ciphertext hash to produce a result hash, and sealing the ciphertext together with the result hash." ;
    :kb-author "Robert R. Jueneman, Duane J. LINSENBARDT, John N. Young, William Reid Carlisle, Burton George Tregub" ;
    :kb-organization "New Kailung Gear Co Ltd" ;
    :kb-reference-of :FileEncryption ;
    :kb-reference-title "Method for file encryption" .

:Reference-MethodUsingKernelModeAssistanceForTheDetectionAndRemovalOfThreatsWhichAreActivelyPreventingDetectionAndRemovalFromARunningSystem_SymantecCorporation a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Method using kernel mode assistance for the detection and removal of threats which are actively preventing detection and removal from a running system - Symantec Corporation" ;
    :has-link "https://patents.google.com/patent/US8239947B1"^^xsd:anyURI ;
    :kb-abstract "A user mode application component invokes the assistance of a kernel mode driver component to detect and/or remediate malicious code on a computer system. The user mode application may include code that detects, for example, spyware and computer viruses, from user mode and when appropriate takes protective action when malicious code is detected. In one aspect, when the user mode application is unable to perform a selected operation in attempting to detect and/or take protective action, the user mode application invokes a kernel mode driver for assistance. The kernel mode driver assists user mode application in detecting malicious code and/or taking protective action by enabling or otherwise performing a selected operation for the user mode application." ;
    :kb-author "Adam Glick, Patrick Gardner, Pieter Viljoen" ;
    :kb-mitre-analysis "This patent describes detecting registry changes using a prohibited change heuristic or a database of prohibited functions/function parameters." ;
    :kb-organization "Symantec Corporation" ;
    :kb-reference-of :SystemDaemonMonitoring ;
    :kb-reference-title "Method using kernel mode assistance for the detection and removal of threats which are actively preventing detection and removal from a running system" .

:Reference-MGT516ManagingSecurityVulnerabilitiesEnterpriseAndCloud a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - MGT516: Managing Security Vulnerabilities: Enterprise and Cloud" ;
    :has-link "https://www.sans.org/cyber-security-courses/managing-enterprise-cloud-security-vulnerabilities/"^^xsd:anyURI ;
    :kb-abstract "Vulnerability, patch, and configuration management are not new security topics. In fact, they are some of the oldest security functions. Yet, we still struggle to manage these capabilities effectively. The quantity of outstanding vulnerabilities for most large organizations is overwhelming, and all organizations struggle to keep up with the never-ending onslaught of new vulnerabilities in their infrastructure and applications. When you add in the cloud and the increasing speed with which all organizations must deliver systems, applications, and features to both their internal and external customers, security may seem unachievable. This course will show you the most effective ways to mature your vulnerability management program and move from identifying vulnerabilities to successfully treating them. 16 Cyber42 and lab exercises" ;
    :kb-author "Jonathan Risto and David Hazar" ;
    :kb-organization "SANS" ;
    :kb-reference-of :OperationalRiskAssessment ;
    :kb-reference-title "MGT516: Managing Security Vulnerabilities: Enterprise and Cloud" .

:Reference-MissionDependencyModelingForCyberSituationalAwareness a :AcademicPaperReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Mission Dependency Modeling for Cyber Situational Awareness" ;
    :has-link "https://csis.gmu.edu/noel/pubs/2016_NATO_IST_148.pdf"^^xsd:anyURI ;
    :kb-abstract "This paper describes a hierarchical graph-based model that captures mission dependencies at various levels of abstraction, showing interdependencies among mission objectives, tasks, information, and cyber assets. For this work, we employ established tools within a structured methodology for cyber resiliency analysis. Our model is focused on a strategic-level military scenario defined in a formal Request for Information (RFI) to industry and research partners by the NATO Multinational Cyber Defense Capability Development (MN CD2) Work Package 2 (WP2). We enhance this scenario with additional mission and operational context, and then build a mission dependency model for the enhanced scenario. It is anticipated that our mission dependency model will be part of an upcoming demonstration of cyber defense situational awareness capabilities in a NATO Communications and Information (NCI) Agency test environment, integrated with data sources that represent the operational military environment." ;
    :kb-author "William Heinbockel, Steven Noel, James Curbo" ;
    :kb-organization "JHU APL" ;
    :kb-reference-of :OperationalDependencyMapping ;
    :kb-reference-title "Mission Dependency Modeling for Cyber Situational Awareness" .

:Reference-MockAttackCybersecurityTrainingSystemAndMethods_WOMBATSECURITYTECHNOLOGIESInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Mock attack cybersecurity training system and methods - WOMBAT SECURITY TECHNOLOGIES Inc" ;
    :has-link "https://patents.google.com/patent/US9558677B2/"^^xsd:anyURI ;
    :kb-abstract "A training system senses a user action that may expose the user to a threat, such as a cybersecurity threat. The user action may be in response to a mock attack delivered via a messaging service, a wireless communication service, a fake malware application or another device, service, system or mechanism. The system selects a training action from a collection of available training actions and causes the training action to be delivered to the user." ;
    :kb-author "Norman Sadeh-Koniecpol, Kurt Wescoe, Jason Brubaker, Jason Hong" ;
    :kb-mitre-analysis " " ;
    :kb-organization "WOMBAT SECURITY TECHNOLOGIES Inc" ;
    :kb-reference-of :DecoyPublicRelease ;
    :kb-reference-title "Mock attack cybersecurity training system and methods" ;
    :todo "MITRE Analysis was not found" .

:Reference-ModelingUserAccessToComputerResources_DaedalusGroupLLC a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Modeling user access to computer resources - Daedalus Group LLC (formerly IBM)" ;
    :has-link "https://patents.google.com/patent/US8214364B2"^^xsd:anyURI ;
    :kb-abstract "Embodiments of the invention provide a method for detecting changes in behavior of authorized users of computer resources and reporting the detected changes to the relevant individuals. The method includes evaluating actions performed by each user against user behavioral models and business rules. As a result of the analysis, a subset of users may be identified and reported as having unusual or suspicious behavior. In response, the management may provide feedback indicating that the user behavior is due to the normal expected business needs or that the behavior warrants further review. The management feedback is available for use by machine learning algorithms to improve the analysis of user actions over time. Consequently, investigation of user actions regarding computer resources is facilitated and data loss is prevented more efficiently relative to the prior art approaches with only minimal disruption to the ongoing business processes." ;
    :kb-author "Joseph P. Bigus, Leon Gong, Christoph Lingenfelder" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Daedalus Group LLC (formerly IBM)" ;
    :kb-reference-of :ResourceAccessPatternAnalysis ;
    :kb-reference-title "Modeling user access to computer resources" ;
    :todo "MITRE Analysis was not found" .

:Reference-ModificationOfAServerToMimicADeceptionMechanism_AcalvioTechnologiesInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Modification of a Server to Mimic a Deception Mechanism - Acalvio Technologies Inc" ;
    :has-link "https://patents.google.com/patent/US20170149825A1"^^xsd:anyURI ;
    :kb-abstract "Provided are devices, computer-program products, and methods (e.g., methods implemented by a production system or security agent program or process) for providing services on a production system to mimic a deception mechanism. For example, a method can include determining a deception characteristic of a deception mechanism and determining a production characteristic of the production system. The method can further include determining an additional service or a modification of an existing service of the production system using the deception characteristic and the production characteristic. In some cases, the additional service and/or the modification can be a deterrent to potential attackers of the production system. The method can further include modifying the production system to mimic the deception mechanism, including adding the additional service to the production system or modifying the existing service using the modification." ;
    :kb-author "Sreenivas Gukal, Rammohan Varadarajan" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Acalvio Technologies Inc" ;
    :kb-reference-of :ConnectedHoneynet ;
    :kb-reference-title "Modification of a Server to Mimic a Deception Mechanism" ;
    :todo "MITRE Analysis was not found" .

:Reference-Munin a owl:NamedIndividual,
        :SourceCodeReference ;
    rdfs:label "Reference - Munin" ;
    :has-link "https://github.com/Neo23x0/munin"^^xsd:anyURI ;
    :kb-author "Florian Roth" ;
    :kb-reference-title "Online Hash Checker for Virustotal and Other Services" .

:Reference-Network-BasedBufferOverflowDetectionByExploitCodeAnalysis_InformationSecurityResearchCentre a :AcademicPaperReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Network-Based Buffer Overflow Detection by Exploit Code Analysis - Information Security Research Centre" ;
    :has-link "https://eprints.qut.edu.au/21172/1/21172.pdf"^^xsd:anyURI ;
    :kb-abstract """Buffer overflow attacks continue to be a major security problem and detecting attacks of this nature
is therefore crucial to network security. Signature based network based intrusion detection systems (NIDS)
compare network traffic to signatures modelling suspicious or attack traffic to detect network attacks. Since
detection is based on pattern matching, a signature modelling the attack must exist for the NIDS to detect it, and
it is therefore only capable of detecting known attacks. This paper proposes a method to detect buffer overflow
attacks by parsing the payload of network packets in search of shellcode which is the remotely executable
component of a buffer overflow attack. By analysing the shellcode it is possible to determine which system
calls the exploit uses, and hence the operation of the exploit. Current NIDS-based buffer overflow detection
techniques mainly rely upon specific signatures for each new attack. Our approach is able to detect previously
unseen buffer overflow attacks, in addition to existing ones, without the need for specific signatures for each
new attack. The method has been implemented and tested for buffer overflow attacks on Linux on the Intel x86
architecture using the Snort NIDS.""" ;
    :kb-author "Stig Andersson, Andrew Clark, and George Mohay" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Information Security Research Centre" ;
    :kb-reference-of :ByteSequenceEmulation ;
    :kb-reference-title "Network-Based Buffer Overflow Detection by Exploit Code Analysis" ;
    :todo "MITRE Analysis was not found" .

:Reference-Network-levelPolymorphicShellcodeDetectionUsingEmulation a :AcademicPaperReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Network-level polymorphic shellcode detection using emulation" ;
    :has-link "https://www.cs.unc.edu/~fabian/course_papers/polymorphic-detect.pdf"^^xsd:anyURI ;
    :kb-author "Michalis Polychronakis" ;
    :kb-reference-of :ByteSequenceEmulation ;
    :kb-reference-title "Network-level polymorphic shellcode detection using emulation" .

:Reference-NetworkFirewallWithProxy_SecureComputingLLC a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Network firewall with proxy - Secure Computing LLC" ;
    :has-link "https://patents.google.com/patent/GB2318031A"^^xsd:anyURI ;
    :kb-abstract "A proxy which is part of a firewall controls exchanges of information between two application entities. The proxy interrogates attempts to establish a communication session by requesting entities with a server entity in lower layers in accordance with defined authentication procedures. The Proxy interfaces with networking software to direct a communication stack to monitor connection requests to any address on specific ports. The requestor's address, and the server's address are checked against a access control list. If either address is invalid, the proxy closes the connection. If both are valid, a new connection is setup such that both the requestor and server are transparently connected to the proxy with variable higher levels being connected in a relay mode. Protocol data units are interrogated for conformance to a protocol session, and optionally further decoded to add additional application specific filtering. In one embodiment, an OSI architecture comprises the levels." ;
    :kb-author "Michael W Green, Ricky Ronald Kruse" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Secure Computing LLC" ;
    :kb-reference-of :InboundTrafficFiltering ;
    :kb-reference-title "Network firewall with proxy" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-NIST-RMF-Quick-Start-Guide-Assess-Step-FAQ a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - NIST RMF Quick Start Guide - Assess Step - Frequently Asked Questions (FAQ)" ;
    :has-link "https://csrc.nist.gov/CSRC/media/Projects/risk-management/documents/05-Assess%20Step/NIST%20RMF%20Assess%20Step-FAQs.pdf"^^xsd:anyURI ;
    :kb-abstract "Once security and privacy controls are implemented, they need to be evaluated for correctness and effectiveness. After the initial assessment is completed and the system enters the operations/maintenance phase of the system development life cycle, the controls are assessed on an ongoing basis according to the organization and system’s continuous monitoring plans. The ongoing assessment supports the authorizing official’s decision to continue or discontinue the system’s authorization to operate. Control effectiveness assessments are performed by an independent third-party assessor or assessment team if the system categorization is moderate or high." ;
    :kb-organization "NIST" ;
    :kb-reference-of :OperationalRiskAssessment ;
    :kb-reference-title "NIST RMF Quick Start Guide - Assess Step - Frequently Asked Questions (FAQ)" .

:Reference-NIST-Special-Publication-800-37-Revision-2 a :GuidelineReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - NIST Special Publication 800-37 Revision 2 - Risk Management Framework for Information Systems and Organizations" ;
    :has-link "https://doi.org/10.6028/NIST.SP.800-37r2"^^xsd:anyURI ;
    :kb-abstract "This publication describes the Risk Management Framework (RMF) and provides guidelines for applying the RMF to information systems and organizations. The RMF provides a disciplined, structured, and flexible process for managing security and privacy risk that includes information security categorization; control selection, implementation, and assessment; system and common control authorizations; and continuous monitoring. The RMF includes activities to prepare organizations to execute the framework at appropriate risk management levels. The RMF also promotes near real-time risk management and ongoing information system and common control authorization through the implementation of continuous monitoring processes; provides senior leaders and executives with the necessary information to make efficient, cost-effective, risk management decisions about the systems supporting their missions and business functions; and incorporates security and privacy into the system development life cycle. Executing the RMF tasks links essential risk management processes at the system level to risk management processes at the organization level. In addition, it establishes responsibility and accountability for the controls implemented within an organization’s information systems and inherited by those systems." ;
    :kb-organization "NIST" ;
    :kb-reference-of :OperationalRiskAssessment ;
    :kb-reference-title "NIST Special Publication 800-37 Revision 2 - Risk Management Framework for Information Systems and Organizations" .

:Reference-NIST-Special-Publication-800-53A-Revision-5 a :GuidelineReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - NIST Special Publication 800-53A Revision 5 - Assessing Security and Privacy Controls in Information Systems and Organizations" ;
    :has-link "https://doi.org/10.6028/NIST.SP.800-53Ar5"^^xsd:anyURI ;
    :kb-abstract "This publication provides a methodology and set of procedures for conducting assessments of security and privacy controls employed within systems and organizations within an effective risk management framework. The assessment procedures, executed at various phases of the system development life cycle, are consistent with the security and privacy controls in NIST Special Publication 800-53, Revision 5. The procedures are customizable and can be easily tailored to provide organizations with the needed flexibility to conduct security and privacy control assessments that support organizational risk management processes and are aligned with the stated risk tolerance of the organization. Information on building effective security and privacy assessment plans is also provided with guidance on analyzing assessment results." ;
    :kb-organization "NIST" ;
    :kb-reference-of :OperationalRiskAssessment ;
    :kb-reference-title "NIST Special Publication 800-53A Revision 5 - Assessing Security and Privacy Controls in Information Systems and Organizations" .

:Reference-NIST-Special-Publication-800-160-Volume-1 a :GuidelineReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - NIST Special Publication 800-160 Volume 1 - System Security Engineering" ;
    :has-link "https://doi.org/10.6028/NIST.SP.800-160v1"^^xsd:anyURI ;
    :kb-abstract "With the continuing frequency, intensity, and adverse consequences of cyber-attacks, disruptions, hazards, and other threats to federal, state, and local governments, the military, businesses, and the critical infrastructure, the need for trustworthy secure systems has never been more important to the long-term economic and national security interests of the United States. Engineering-based solutions are essential to managing the growing complexity, dynamicity, and interconnectedness of today’s systems, as exemplified by cyber-physical systems and systems-of-systems, including the Internet of Things. This publication addresses the engineering-driven perspective and actions necessary to develop more defensible and survivable systems, inclusive of the machine, physical, and human components that compose the systems and the capabilities and services delivered by those systems. It starts with and builds upon a set of well-established International Standards for systems and software engineering published by the International Organization for Standardization (ISO), the International Electrotechnical Commission (IEC), and the Institute of Electrical and Electronics Engineers (IEEE) and infuses systems security engineering methods, practices, and techniques into those systems and software engineering activities. The objective is to address security issues from a stakeholder protection needs, concerns, and requirements perspective and to use established engineering processes to ensure that such needs, concerns, and requirements are addressed with appropriate fidelity and rigor, early and in a sustainable manner throughout the life cycle of the system." ;
    :kb-author "Ron Ross, Michael McEvilley, and Janet Carrier Oren" ;
    :kb-organization "NIST" ;
    :kb-reference-of :OperationalRiskAssessment ;
    :kb-reference-title "NIST Special Publication 800-160 Volume 1 - Systems Security Engineering" .

:Reference-NISTIR-8011-Volume-1 a :GuidelineReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - NISTIR 8011 Volume 1 - Automation Support for Security Control Assessments" ;
    :has-link "https://doi.org/10.6028/NIST.IR.8011-1"^^xsd:anyURI ;
    :kb-abstract "This volume introduces concepts to support automated assessment of most of the security controls in NIST Special Publication (SP) 800-53. Referencing SP 800-53A, the controls are divided into more granular parts (determination statements) to be assessed. The parts of the control assessed by each determination statement are called control items. The control items are then grouped into the appropriate security capabilities. As suggested by SP 800-53 Revision 4, security capabilities are groups of controls that support a common purpose. For effective automated assessment, testable defect checks are defined that bridge the determination statements to the broader security capabilities to be achieved and to the SP 800-53 security control items themselves. The defect checks correspond to security sub-capabilities—called sub-capabilities because each is part of a larger capability. Capabilities and sub-capabilities are both designed with the purpose of addressing a series of attack steps. Automated assessments (in the form of defect checks) are performed using the test assessment method defined in SP 800-53A by comparing a desired and actual state (or behavior)." ;
    :kb-author "Kelley Dempsey, Paul Eavy, and George Moore" ;
    :kb-organization "NIST" ;
    :kb-reference-of :OperationalRiskAssessment ;
    :kb-reference-title "NIST Interagency Report 8011 Volume 1 - Automation Support for Security Control Assessments" .

:Reference-OpenSourceIntelligenceDeceptions_IllusiveNetworksLtd a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Open source intelligence deceptions - Illusive Networks Ltd" ;
    :has-link "https://patents.google.com/patent/US10333976B1/en?assignee=Illusive+Networks+Ltd&oq=Illusive+Networks+Ltd+"^^xsd:anyURI ;
    :kb-abstract "A system to detect attackers who attempt to breach an enterprise network and attackers who have already breached the enterprise network, including an open source intelligence (OSINT) discoverer scanning the Internet to discover data related to an enterprise that is available online, an OSINT replacer generating deceptive files by replacing placeholders within template files with deceptive information, based on the data discovered by the OSINT discoverer, an OSINT distributor planting the deceptive files generated by the OSINT replacer within designated OSINT resources, and a deception management server that alerts an administrator in response to an attacker attempting to make a connection within the network using information in a deceptive file planted by the OSINT distributor." ;
    :kb-author "Hadar Yudovich; Nimrod Lavi; Sharon Bittan; Tom Kahana; Tom Sela" ;
    :kb-mitre-analysis "Seems to focus on configuration oriented files to put in decoy hostnames etc. to publish on internet sites, then monitor the decoy \"objects\"." ;
    :kb-organization "Illusive Networks Ltd" ;
    :kb-reference-of :DecoyFile ;
    :kb-reference-title "Open source intelligence deceptions" .

:Reference-OrganizationalManagementInSAPERPHCM a :BookReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Organizational Management in SAP ERP HCM" ;
    :has-link "https://www.sap-press.com/organizational-management-in-sap-erp-hcm_3996/"^^xsd:anyURI ;
    :kb-author "Soham Ray" ;
    :kb-organization "SAP Press" ;
    :kb-reference-of :OrganizationMapping ;
    :kb-reference-title "Organization Mapping in SAP ERP HCM" .

:Reference-OSQueryWindowsUserCollectionCode a owl:NamedIndividual,
        :SourceCodeReference ;
    rdfs:label "Reference - OS Query Windows User Collection Code" ;
    :has-link "https://github.com/osquery/osquery/blob/d2be385d71f401c85872f00d479df8f499164c5a/osquery/tables/system/windows/users.cpp"^^xsd:anyURI ;
    :kb-reference-title "OS Query Windows User Collection Code" .

:Reference-OutlierParentsOfCmd_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2014-11-002: Outlier Parents of Cmd - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2014-11-002/"^^xsd:anyURI ;
    :kb-abstract """Many programs create command prompts as part of their normal operation including malware used by attackers. This analytic attempts to identify suspicious programs spawning cmd.exe by looking for programs that do not normally create cmd.exe.

While this analytic does not take the user into account, doing so could generate further interesting results. It is very common for some programs to spawn cmd.exe as a subprocess, for example to run batch files or windows commands. However many process don't routinely launch a command prompt - for example Microsoft Outlook. A command prompt being launched from a process that normally doesn't launch command prompts could be the result of malicious code being injected into that process, or of an attacker replacing a legitimate program with a malicious one.""" ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessLineageAnalysis ;
    :kb-reference-title "CAR-2014-11-002: Outlier Parents of Cmd" ;
    :todo "Examine reference for additional techniques",
        "MITRE Analysis was not found" .

:Reference-OverviewOfTheSeccompSandbox a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Overview of the seccomp sandbox" ;
    :has-link "https://code.google.com/archive/p/seccompsandbox/wikis/overview.wiki"^^xsd:anyURI ;
    :kb-reference-of :SystemCallFiltering ;
    :kb-reference-title "Overview of the seccomp sandbox" .

:Reference-PasswordandKeyRotation-SSH a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Password and Key Rotation - SSH" ;
    :has-link "https://www.ssh.com/academy/iam/password-key-rotation" ;
    :kb-organization "SSH" ;
    :kb-reference-of :CredentialRotation ;
    :kb-reference-title "Password and Key Rotation" .

:Reference-PlatformFirmwareResiliencyGuidelines_NIST a :GuidelineReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Platform Firmware Resiliency Guidelines - NIST" ;
    :has-link "https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-193.pdf"^^xsd:anyURI ;
    :kb-abstract "This document provides technical guidelines and recommendations supporting resiliency of platform firmware and data against potentially destructive attacks. The platform is a collection of fundamental hardware and firmware components needed to boot and operate a system. A successful attack on platform firmware could render a system inoperable, perhaps permanently, or requiring reprogramming by the original manufacturer, resulting in significant disruptions to users. The technical guidelines in this document promote resiliency in the platform by describing security mechanisms for protecting the platform against unauthorized changes, detecting unauthorized changes that occur, and recovering from attacks rapidly and securely. Implementers, including Original Equipment Manufacturers (OEMs) and component/device suppliers, can use these guidelines to build stronger security mechanisms into platforms. System administrators, security professionals, and users can use this document to guide procurement strategies and priorities for future systems." ;
    :kb-author "NIST" ;
    :kb-mitre-analysis " " ;
    :kb-organization "NIST" ;
    :kb-reference-of :FirmwareVerification ;
    :kb-reference-title "Platform Firmware Resiliency Guidelines" ;
    :todo "MITRE Analysis was not found" .

:Reference-PointerAuthenticationOnARMv8.3 a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - Pointer Authentication on ARMv8.3" ;
    :has-link "https://www.qualcomm.com/media/documents/files/whitepaper-pointer-authentication-on-armv8-3.pdf"^^xsd:anyURI ;
    :kb-abstract "The pointer authentication scheme introduced by ARM is a software security primitive that makes it much harder for an attacker to modify protected pointers in memory without being detected. In this document, we will provide more details about the Pointer Authentication mechanism, provide a security analysis, and discuss the implementation of certain software security countermeasures, such as stack protection and control flow integrity, using the Pointer Authentication primitives." ;
    :kb-author "Qualcomm Technologies, Inc" ;
    :kb-organization "Qualcomm Technologies, Inc" ;
    :kb-reference-of :PointerAuthentication ;
    :kb-reference-title "Pointer Authentication on ARMv8.3" .

:Reference-PointerAuthenticationProjectZero a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Pointer Authentication Project Zero" ;
    :has-link "https://googleprojectzero.blogspot.com/2019/02/examining-pointer-authentication-on.html"^^xsd:anyURI ;
    :kb-abstract "In this post I examine Apple's implementation of Pointer Authentication on the A12 SoC used in the iPhone XS, with a focus on how Apple has improved over the ARM standard. I then demonstrate a way to use an arbitrary kernel read/write primitive to forge kernel PAC signatures for the A keys, which is sufficient to execute arbitrary code in the kernel using JOP. The technique I discovered was (mostly) fixed in iOS 12.1.3. In fact, this fix first appeared in the 16D5032a beta while my research was still ongoing." ;
    :kb-author "Brandon Azad" ;
    :kb-organization "Project Zero, Google, Inc" ;
    :kb-reference-of :PointerAuthentication ;
    :kb-reference-title "Examining Pointer Authentication on the iPhone XS" .

:Reference-PostSandboxMethodsAndSystemsForDetectingAndBlockingZero-dayExploitsViaApiCallValidation_K2CyberSecurityInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Post sandbox methods and systems for detecting and blocking zero-day exploits via api call validation - K2 Cyber Security Inc" ;
    :has-link "https://patents.google.com/patent/US20190138715A1/"^^xsd:anyURI ;
    :kb-abstract "In one aspect, a method useful for monitoring and validating execution of executable binary code, includes the step of disassembling an executable binary code of an application. The method includes the step of detecting and obtaining location and type of an application programming interface (API) call, system call, and privileged instruction that is executed by the executable binary code. The method includes the step of detecting and obtaining return address from an Al call and system call. The method includes the step of validating location of the API call system call, and privileged instruction. The method includes the step of validating return from the API call and system call." ;
    :kb-author "Jayant Shukla" ;
    :kb-mitre-analysis """The patent describes a technique for monitoring API calls. Executable binary code of an application is first disassembled and scanned for API calls. Based on the recorded API calls, a rule list is generated. Software hooks are placed in the code for monitoring API calls during program execution and then each API call is validated using the generated rule list to permit or deny execution of API calls.

Rules are created that specify the type and location of the API call. For example, data collected for an application can show an API call to libc at address 0x43e0 and an API call by libc at address 0xlfb47. Accordingly, two rules are generated. The first rule specifies the location type and target of the API call at address 0x43e0, as well as the return address. The second rule is for the API call to the kernel and states the target address, return address, instruction, and target type.""" ;
    :kb-organization "K2 Cyber Security Inc" ;
    :kb-reference-of :SystemCallAnalysis ;
    :kb-reference-title "Post sandbox methods and systems for detecting and blocking zero-day exploits via api call validation" .

:Reference-PowershellExecution_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2014-04-003: Powershell Execution - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2014-04-003/"^^xsd:anyURI ;
    :kb-abstract """PowerShell is a scripting environment included with Windows that is used by both attackers and administrators. Execution of PowerShell scripts in most Windows versions is opaque and not typically secured by antivirus which makes using PowerShell an easy way to circumvent security measures. This analytic detects execution of PowerShell scripts.

Powershell can be used to hide monitored command line execution such as:

* net use
* sc start""" ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2014-04-003: Powershell Execution" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-PredictingDomainGenerationAlgorithmsWithLongShort-TermMemoryNetworks_ a :AcademicPaperReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Predicting Domain Generation Algorithms with Long Short-Term Memory Networks" ;
    :has-link "https://arxiv.org/abs/1611.007911"^^xsd:anyURI ;
    :kb-abstract "Various families of malware use domain generation algorithms (DGAs) to generate a large number of pseudo-random domain names to connect to a command and control (C&C) server. In order to block DGA C&C traffic, security organizations must first discover the algorithm by reverse engineering malware samples, then generating a list of domains for a given seed. The domains are then either preregistered or published in a DNS blacklist. This process is not only tedious, but can be readily circumvented by malware authors using a large number of seeds in algorithms with multivariate recurrence properties (e.g., banjori) or by using a dynamic list of seeds (e.g., bedep). Another technique to stop malware from using DGAs is to intercept DNS queries on a network and predict whether domains are DGA generated. Such a technique will alert network administrators to the presence of malware on their networks. In addition, if the predictor can also accurately predict the family of DGAs, then network administrators can also be alerted to the type of malware that is on their networks. This paper presents a DGA classifier that leverages long short-term memory (LSTM) networks to predict DGAs and their respective families without the need for a priori feature extraction. Results are significantly better than state-of-the-art techniques, providing 0.9993 area under the receiver operating characteristic curve for binary classification and a micro-averaged F1 score of 0.9906. In other terms, the LSTM technique can provide a 90% detection rate with a 1:10000 false positive (FP) rate---a twenty times FP improvement over comparable methods. Experiments in this paper are run on open datasets and code snippets are provided to reproduce the results." ;
    :kb-author "Jonathan Woodbridge, Hyrum S. Anderson, Anjum Ahuja, Daniel Grant" ;
    :kb-mitre-analysis " " ;
    :kb-organization "" ;
    :kb-reference-of :DNSTrafficAnalysis ;
    :kb-reference-title "Predicting Domain Generation Algorithms with Long Short-Term Memory Networks" ;
    :todo "MITRE Analysis was not found" .

:Reference-PreventingExecutionOfTaskScheduledMalware_McAfeeLLC a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Preventing execution of task scheduled malware - McAfee LLC" ;
    :has-link "https://patents.google.com/patent/US20160105450A1"^^xsd:anyURI ;
    :kb-abstract "A method for preventing malware attacks includes the steps of detecting an attempt on an electronic device to access a task scheduler, determining an entity associated with the attempt to access the task scheduler, determining a malware status of the entity, and, based on the malware status of the entity, allowing or denying the attempted access to the task scheduler. The task scheduler is configured to launch one or more applications at a specified time or interval." ;
    :kb-author "Anil Ramabhatta, Harinath Vishwanath Ramachetty, Nandi Dharma Kishore" ;
    :kb-mitre-analysis "Access to a job scheduler is intercepted using hooking or file filters to identify and analyze the source files, processes, destination files, or destination servers associated with a scheduled job. The identified servers or files associated with a job are compared against an anti-malware signature database or reputation server to determine if it there is a match. If so, execution is denied and an alert is generated." ;
    :kb-organization "McAfee LLC" ;
    :kb-reference-of :ScheduledJobAnalysis ;
    :kb-reference-title "Preventing execution of task scheduled malware" .

:Reference-PrivacyAndSecuritySystemsAndMethodsOfUse a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Privacy and security systems and methods of use" ;
    :has-link "https://patents.google.com/patent/US10128890B2/en"^^xsd:anyURI ;
    :kb-author "Teddy David Thomas" ;
    :kb-reference-title "Privacy and security systems and methods of use" .

:Reference-PrivateVirtualLocalAreaNetworkIsolation_CiscoTechnologyInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Private virtual local area network isolation - Cisco Technology Inc" ;
    :has-link "https://patents.google.com/patent/US20120331142A1"^^xsd:anyURI ;
    :kb-abstract "In one embodiment, a method includes obtaining addresses of end hosts at a switch, the switch configured with a primary virtual local area network and a secondary virtual local area network, creating a private virtual local area network access list comprising the addresses of end hosts permitted to communicate on the secondary virtual local area network, and applying the private virtual local area network access list to interfaces connected to the end hosts permitted to communicate on the secondary virtual local area network. An apparatus is also disclosed." ;
    :kb-author "Anuraag Mittal, Huei-Ping Chen" ;
    :kb-organization "Cisco Technology Inc" ;
    :kb-reference-of :BroadcastDomainIsolation ;
    :kb-reference-title "Private virtual local area network isolation" ;
    :todo "MITRE Analysis was not found" .

:Reference-ProcessesSpawningCmd.exe_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2013-02-003: Processes Spawning cmd.exe - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2013-02-003/"^^xsd:anyURI ;
    :kb-abstract "The Windows Command Prompt (cmd.exe) is a utility that provides a command line interface to Windows operating systems. It provides the ability to run additional programs and also has several built-in commands such as dir, copy, mkdir, and type, as well as batch scripts (.bat). Typically, when a user runs a command prompt, the parent process is explorer.exe or another instance of the prompt. There may be automated programs, logon scripts, or administrative tools that launch instances of the command prompt in order to run scripts or other built-in commands. Spawning the process cmd.exe from certain parents may be more indicative of malice. For example, if Adobe Reader or Outlook launches a command shell, this may suggest that a malicious document has been loaded and should be investigated. Thus, by looking for abnormal parent processes of cmd.exe, it may be possible to detect adversaries." ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessLineageAnalysis ;
    :kb-reference-title "CAR-2013-02-003: Processes Spawning cmd.exe" ;
    :todo "MITRE Analysis was not found",
        "No author organizations provided for reference, add one?",
        "No authors provided for reference",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-ProtectedComputingEnvironment_MicrosoftTechnologyLicensingLLC a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Protected computing environment - Microsoft Technology Licensing LLC" ;
    :has-link "https://patents.google.com/patent/US20060242406A1"^^xsd:anyURI ;
    :kb-abstract "A method of establishing a protected environment within a computing device including validating a kernel component loaded into a kernel of the computing device, establishing a security state for the kernel based on the validation, creating a secure process and loading a software component into the secure process, periodically checking the security state of the kernel, and notifying the secure process when the security state of the kernel has changed." ;
    :kb-author "Sumedh Barde, Jonathan Schwartz, Reid Kuhn, Alexandre Grigorovitch, Kirt Debique, Chadd Knowlton, James Alkove, Geoffrey Dunbar, Michael Grier, Ming Ma, Chaitanya Upadhyay, Adil Sherwani, Arun Kishan" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Microsoft Technology Licensing LLC" ;
    :kb-reference-of :DriverLoadIntegrityChecking ;
    :kb-reference-title "Protected computing environment" ;
    :todo "MITRE Analysis was not found" .

<http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-ProtectingAgainstDistributedDenialOfServiceAttacks-CiscoTechnologyInc.> a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Protecting against distributed denial of service attacks - Cisco Technology Inc." ;
    :has-link "https://patents.google.com/patent/US7171683B2"^^xsd:anyURI ;
    :kb-abstract "A method for authenticating packet communication traffic includes receiving a data packet sent over a network from a source address to a destination address and reading from the packet a value of a field that is indicative of a number of hops traversed by the packet since having been sent from the source address. The authenticity of the source address is assessed responsive to the value." ;
    :kb-author "Guy Pazi, Anat Bremler-Bar, Rami Rivlin, Dan Touitou" ;
    :kb-organization "Cisco Technologies Inc." ;
    :kb-reference-of :InboundSessionVolumeAnalysis ;
    :kb-reference-title "Protecting against distributed denial of service attacks" .

<http://d3fend.mitre.org/ontologies/d3fend.owl#Reference-ProtectingAgainstDistributedNetworkFloodAttacks-JuniperNetworksInc.> a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Protecting against distributed network flood attacks - Juniper Networks Inc." ;
    :has-link "https://patents.google.com/patent/US8789173B2"^^xsd:anyURI ;
    :kb-abstract "A network security device performs a three-stage analysis of traffic to identify malicious clients. In one example, a device includes an attack detection module to, during a first stage, monitor network connections to a protected network device, during a second stage, to monitor a plurality of types of transactions for the plurality of network sessions when a parameter for the connections exceeds a connection threshold, and during a third stage, to monitor communications associated with network addresses from which transactions of the at least one of type of transactions originate when a parameter associated with the at least one type of transactions exceeds a transaction-type threshold. The device executes a programmed action with respect to at least one of the network addresses when the transactions of the at least one of the plurality of types of transactions originating from the at least one network address exceeds a client-transaction threshold." ;
    :kb-author "Krishna Narayanaswamy, Bryan Burns, Venkata Rama Raju Manthena" ;
    :kb-organization "Juniper Networks Inc." ;
    :kb-reference-of :InboundSessionVolumeAnalysis ;
    :kb-reference-title "Protecting against distributed network flood attacks" .

:Reference-PsSuspend a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - PsSuspend - Microsoft" ;
    :has-link "https://learn.microsoft.com/en-us/sysinternals/downloads/pssuspend" ;
    :kb-author "Mark Russinovich" ;
    :kb-organization "Microsoft" ;
    :kb-reference-of :ProcessSuspension ;
    :kb-reference-title "PsSuspend" .

:Reference-QualysNetworkPassiveSensorGettingStartedGuide a owl:NamedIndividual,
        :UserManualReference ;
    rdfs:label "Reference - Qualys Network Passive Sensor Getting Started Guide" ;
    :has-link "https://www.qualys.com/passive-scanning-sensor/"^^xsd:anyURI ;
    :kb-abstract "Qualys Passive Scanning Sensor (PS) continuously monitors all network traffic and flags any asset activity. It identifies and profiles devices the moment they connect to the network, including those difficult to scan, corporate owned, brought by employees, and rogue IT. The data is sent immediately to the Qualys Cloud Platform for centralized analysis." ;
    :kb-organization "Qualys" ;
    :kb-reference-of :HardwareComponentInventory,
        :NetworkNodeInventory ;
    :kb-reference-title "Qualys Network Passive Sensor Getting Started Guide" .

:Reference-QuickExecutionOfASeriesOfSuspiciousCommands_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2013-04-002: Quick execution of a series of suspicious commands - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2013-04-002/"^^xsd:anyURI ;
    :kb-abstract "Certain commands are frequently used by malicious actors and infrequently used by normal users. By looking for execution of these commands in short periods of time, we can not only see when a malicious user was on the system but also get an idea of what they were doing." ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessLineageAnalysis ;
    :kb-reference-title "CAR-2013-04-002: Quick execution of a series of suspicious commands" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-RDPConnectionDetection_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2013-07-002: RDP Connection Detection - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2013-07-002"^^xsd:anyURI ;
    :kb-abstract "The Remote Desktop Protocol (RDP), built in to Microsoft operating systems, allows a user to remotely log in to the desktop of another host. It allows for interactive access of the running windows, and forwards key presses, mouse clicks, etc. Network administrators, power users, and end-users may use RDP for day-to-day operations. From an adversary's perspective, RDP provides a means to laterally move to a new host. Determining which RDP connections correspond to adversary activity can be a difficult problem in highly dynamic environments, but will be useful in identifying the scope of a compromise." ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :RemoteTerminalSessionDetection ;
    :kb-reference-title "CAR-2013-07-002: RDP Connection Detection" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section.",
        "This reference is not a good fit for the stated technique; see where to move it to." .

:Reference-RedHatEnterpriseLinux8SecurityTechnicalImplementationGuide a :GuidelineReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Red Hat Enterprise Linux 8 Security Technical Implementation Guide" ;
    :has-link "https://www.stigviewer.com/stig/red_hat_enterprise_linux_8/"^^xsd:anyURI ;
    :kb-abstract "Red Hat Enterprise Linux 8 Security Guidelines" ;
    :kb-reference-of :ApplicationConfigurationHardening ;
    :kb-reference-title "Red Hat Enterprise Linux 8 Security Technical Implementation Guide" .

:Reference-Reg.exeCalledFromCommandShell_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2013-03-001: Reg.exe called from Command Shell - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2013-03-001/"^^xsd:anyURI ;
    :kb-abstract "Registry modifications are often essential in establishing persistence via known Windows mechanisms. Many legitimate modifications are done graphically via regedit.exe or by using the corresponding channels, or even calling the Registry APIs directly. The built-in utility reg.exe provides a command-line interface to the registry, so that queries and modifications can be performed from a shell, such as cmd.exe. When a user is responsible for these actions, the parent of cmd.exe will likely be explorer.exe. Occasionally, power users and administrators write scripts that do this behavior as well, but likely from a different process tree. These background scripts must be learned so they can be tuned out accordingly." ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessLineageAnalysis,
        :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2013-03-001: Reg.exe called from Command Shell" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-RegistryKeySecurityAndAccessRights a owl:NamedIndividual,
        :UserManualReference ;
    rdfs:label "Reference - Registry Key Security and Access Rights" ;
    :has-link "https://docs.microsoft.com/en-us/windows/win32/sysinfo/registry-key-security-and-access-rights"^^xsd:anyURI ;
    :kb-abstract "The Windows security model enables you to control access to registry keys. For more information about security, see Access-Control Model." ;
    :kb-organization "Microsoft" ;
    :kb-reference-of :UserSessionInitConfigAnalysis ;
    :kb-reference-title "Registry Key Security and Access Rights" .

:Reference-RemoteDesktopLogon_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2016-04-005: Remote Desktop Logon - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2016-04-005/"^^xsd:anyURI ;
    :kb-abstract "A remote desktop logon, through RDP, may be typical of a system administrator or IT support, but only from select workstations. Monitoring remote desktop logons and comparing to known/approved originating systems can detect lateral movement of an adversary." ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :RemoteTerminalSessionDetection ;
    :kb-reference-title "CAR-2016-04-005: Remote Desktop Logon" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-RemotelyLaunchedExecutablesViaServices_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2014-03-005: Remotely Launched Executables via Services - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2014-03-005/"^^xsd:anyURI ;
    :kb-abstract """There are several ways to cause code to execute on a remote host. One of the most common methods is via the Windows Service Control Manager (SCM), which allows authorized users to remotely create and modify services. Several tools, such as PsExec, use this functionality.

When a client remotely communicates with the Service Control Manager, there are two observable behaviors. First, the client connects to the RPC Endpoint Mapper over 135/tcp. This handles authentication, and tells the client what port the endpoint--in this case the SCM--is listening on. Then, the client connects directly to the listening port on services.exe. If the request is to start an existing service with a known command line, the the SCM process will run the corresponding command.

This compound behavior can be detected by looking for services.exe receiving a network connection and immediately spawning a child process.""" ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :RPCTrafficAnalysis ;
    :kb-reference-title "CAR-2014-03-005: Remotely Launched Executables via Services" ;
    :todo "MITRE Analysis was not found" .

:Reference-RemotelyLaunchedExecutablesViaWMI_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2014-12-001: Remotely Launched Executables via WMI - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2014-12-001/"^^xsd:anyURI ;
    :kb-abstract """Adversaries can use Windows Management Instrumentation (WMI) to move laterally by launching executables remotely. For adversaries to achieve this, they must open a WMI connection to a remote host. This RPC activity is currently detected by CAR-2014-11-007. After the WMI connection has been initialized, a process can be remotely launched using the command: wmic /node:"<hostname>" process call create "<command line>", which is detected via CAR-2016-03-002.

This leaves artifacts at both a network (RPC) and process (command line) level. When wmic.exe (or the schtasks API) is used to remotely create processes, Windows uses RPC (135/tcp) to communicate with the the remote machine.

After RPC authenticates, the RPC endpoint mapper opens a high port connection, through which the schtasks Remote Procedure Call is actually implemented. With the right packet decoders, or by looking for certain byte streams in raw data, these functions can be identified.

When the command line is executed, it has the parent process of C:\\windows\\system32\\wbem\\WmiPrvSE.exe. This analytic looks for these two events happening in sequence, so that the network connection and target process are output.""" ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessLineageAnalysis,
        :RPCTrafficAnalysis ;
    :kb-reference-title "CAR-2014-12-001: Remotely Launched Executables via WMI" ;
    :todo "MITRE Analysis was not found" .

:Reference-RemotelyScheduledTasksViaSchtasks_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2015-04-002: Remotely Scheduled Tasks via Schtasks - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2015-04-002/"^^xsd:anyURI ;
    :kb-abstract """An adversary can move laterally using the schtasks command to remotely schedule tasks. Although these events can be detected with command line analytics CAR-2013-08-001, it is possible for an adversary to use the API directly, via the Task Scheduler GUI or with a scripting language such as PowerShell. In this cases, an additional source of data becomes necessary to detect adversarial behavior. When scheduled tasks are created remotely, Windows uses RPC (135/tcp) to communicate with the Task Scheduler on the remote machine. Once an RPC connection is established (CAR-2014-05-001), the client communicates with the Scheduled Tasks endpoint, which runs within the service group netsvcs. With packet capture and the right packet decoders or byte-stream based signatures, remote invocations of these functions can be identified.

Certain strings can be identifiers of the schtasks, by looking up the interface UUID of ITaskSchedulerService in different formats

* UUID 86d35949-83c9-4044-b424-db363231fd0c (decoded)
* Hex 49 59 d3 86 c9 83 44 40 b4 24 db 36 32 31 fd 0c (raw)
* ASCII IYD@$621 (printable bytes only)

This identifier is present three times during the RPC request phase. Any sensor that has access to the byte code as raw, decoded, or ASCII could implement this analytic.""" ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :RPCTrafficAnalysis ;
    :kb-reference-title "CAR-2015-04-002: Remotely Scheduled Tasks via Schtasks" ;
    :todo "MITRE Analysis was not found" .

:Reference-RemoteRegistry_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2014-11-005: Remote Registry - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2014-11-005/"^^xsd:anyURI ;
    :kb-abstract """An adversary can remotely manipulate the registry of another machine if the RemoteRegistry service is enabled and valid credentials are obtained. While the registry is remotely accessed, it can be used to prepare a Lateral Movement technique, discover the configuration of a host, achieve Persistence, or anything that aids an adversary in achieving the mission. Like most ATT&CK techniques, this behavior can be used legitimately, and the reliability of an analytic depends on the proper identification of the pre-existing legitimate behaviors. Although this behavior is disabled in many Windows configurations, it is possible to remotely enable the RemoteRegistry service, which can be detected with CAR-2014-03-005.

Remote access to the registry can be achieved via

* Windows API function RegConnectRegistry
* command line via reg.exe
* graphically via regedit.exe

All of these behaviors call into the Windows API, which uses the NamedPipe WINREG over SMB to handle the protocol information. This network can be decoded with wireshark or a similar sensor, and can also be detected by hooking the API function.""" ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :AdministrativeNetworkActivityAnalysis ;
    :kb-reference-title "CAR-2014-11-005: Remote Registry" ;
    :todo "MITRE Analysis was not found" .

:Reference-Reputation_of_an_entity_associated_with_a_content_item a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Reputation of an entity associated with a content item" ;
    :has-link "https://patents.google.com/patent/US20060253584A1"^^xsd:anyURI ;
    :kb-author "Christopher Dixon, Thomas Pinckney" ;
    :kb-reference-of :FileHashReputationAnalysis ;
    :kb-reference-title "Reputation of an entity associated with a content item" .

:Reference-ReverseDNSBlocking_BarracudaNetworks a owl:NamedIndividual,
        :UserManualReference ;
    rdfs:label "Reference - Reverse DNS Blocking - Barracuda Networks" ;
    :has-link "https://campus.barracuda.com/product/emailsecuritygateway/doc/39819732/reverse-dns-blocking/"^^xsd:anyURI ;
    :kb-author "campus.barracuda.com" ;
    :kb-mitre-analysis "Inbound corporate traffic SMTP traffic on port 25 can be routed through Barracuda Email Security Gateway before reaching the corporate mail server, acting as a traffic filter based on reverse DNS lookups and a denylist for blocking domains." ;
    :kb-reference-of :ReverseResolutionDomainDenylisting ;
    :kb-reference-title "Reverse DNS Blocking" .

:Reference-RevokingaPreviouslyIssuedVerifiableCredential-Microsoft a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - Revoke a previously issued verifiable credential - Microsoft" ;
    :has-link "https://learn.microsoft.com/en-us/azure/active-directory/verifiable-credentials/how-to-issuer-revoke" ;
    :kb-author "Barclay Neira, Christer Ljung, Juan Camilo Ruiz, John Flores" ;
    :kb-organization "Microsoft" ;
    :kb-reference-of :CredentialRevoking ;
    :kb-reference-title "Revoke a previously issued verifiable credential" .

:Reference-RFC2289-AOne-TimePasswordSystem a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - RFC 2289 - A One-Time Password System" ;
    :has-link "https://tools.ietf.org/html/rfc2289"^^xsd:anyURI ;
    :kb-organization "Internet Engineering Task Force (IETF)" ;
    :kb-reference-of :One-timePassword ;
    :kb-reference-title "A One-Time Password System" ;
    :todo "Fix all the things - found this under owl:Thing --PG" .

:Reference-RFC3411-AnArchitectureForDescribingSimpleNetworkManagementProtocolSNMPManagementFrameworks a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - An Architecture for Describing Simple Network Management Protocol (SNMP) Management Frameworks" ;
    :has-link "https://https://datatracker.ietf.org/doc/html/rfc3411"^^xsd:anyURI ;
    :kb-author "D. Harrington, R. Presuhn, B. Wijnen" ;
    :kb-organization "Internet Engineering Task Force (IETF)" ;
    :kb-reference-of :HardwareComponentInventory ;
    :kb-reference-title "An Architecture for Describing Simple Network Management Protocol (SNMP) Management Frameworks" .

:Reference-RFC7208-SenderPolicyFramework-SPF-ForAuthorizingUseOfDomainsInEmail-IETF a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - RFC 7208: Sender Policy Framework (SPF) for Authorizing Use of Domains in Email - IETF" ;
    :has-link "https://tools.ietf.org/html/rfc7208"^^xsd:anyURI ;
    :kb-abstract "Email on the Internet can be forged in a number of ways. In particular, existing protocols place no restriction on what a sending host can use as the \"MAIL FROM\" of a message or the domain given on the SMTP HELO/EHLO commands.  This document describes version 1 of the Sender Policy Framework (SPF) protocol, whereby Administrative Management Domains (ADMDs) can explicitly authorize the hosts that are allowed to use their domain names, and a receiving host can check such authorization." ;
    :kb-author "S. Kitterman" ;
    :kb-organization "Internet Engineering Task Force (IETF)" ;
    :kb-reference-of :TransferAgentAuthentication ;
    :kb-reference-title "RFC 7208: Sender Policy Framework (SPF) for Authorizing Use of Domains in Email" .

:Reference-RFC7489-Domain-basedMessageAuthentication-Reporting-AndConformance-DMARC a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - RFC 7489: Domain-based Message Authentication, Reporting, and Conformance (DMARC) - IETF" ;
    :has-link "https://tools.ietf.org/html/rfc7489"^^xsd:anyURI ;
    :kb-abstract """Domain-based Message Authentication, Reporting, and Conformance(DMARC) is a scalable mechanism by which a mail-originating organization can express domain-level policies and preferences for message validation, disposition, and reporting, that a mail-receiving organization can use to improve mail handling.

Originators of Internet Mail need to be able to associate reliable and authenticated domain identifiers with messages, communicate policies about messages that use those identifiers, and report about mail using those identifiers.  These abilities have several benefits: Receivers can provide feedback to Domain Owners about the use of their domains; this feedback can provide valuable insight about the management of internal operations and the presence of external domain name abuse.

DMARC does not produce or encourage elevated delivery privilege of authenticated email. DMARC is a mechanism for policy distribution that enables increasingly strict handling of messages that fail authentication checks, ranging from no action, through altered
delivery, up to message rejection.""" ;
    :kb-author "M. Kucherawy, E. Zwicky" ;
    :kb-organization "Internet Engineering Task Force (IETF)" ;
    :kb-reference-of :TransferAgentAuthentication ;
    :kb-reference-title "RFC 7489: Domain-based Message Authentication, Reporting, and Conformance (DMARC)" .

:Reference-RFC7642SystemForCrossDomainIdentityManagementDefinitionsOverviewConceptsAndRequirements a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - RFC 7642: System for Cross-domain Identity Management: Definitions, Overview, Concepts, and Requirements" ;
    :has-link "https://datatracker.ietf.org/doc/html/rfc7642"^^xsd:anyURI ;
    :kb-abstract "The System for Cross-domain Identity Management (SCIM) specification is designed to manage user identity in cloud-based applications and services in a standardized way to enable interoperability, security, and scalability.  The specification suite seeks to build upon experience with existing schemas and deployments, placing specific emphasis on simplicity of development and integration, while applying existing authentication, authorization, and privacy models.  The intent of the SCIM specification is to reduce the cost and complexity of user management operations by providing a common user schema and extension model, as well as binding documents to provide patterns for exchanging this schema using standard protocols.  In essence, make it fast, cheap, and easy to move users in to, out of, and around the cloud." ;
    :kb-author "K. LI, B. Khasnabish, A. Nadalin, Z. Zeltsan" ;
    :kb-organization "IETF" ;
    :kb-reference-of :AccessModeling ;
    :kb-reference-title "RFC7642: System for Cross-domain Identity Management: Definitions, Overview, Concepts, and Requirements" .

:Reference-RPCCallInterception_CrowdstrikeInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - RPC call interception - Crowdstrike Inc" ;
    :has-link "https://patents.google.com/patent/US20150163109"^^xsd:anyURI ;
    :kb-abstract "A service proxy is described herein. The service proxy is configured to act as an intermediary between a client and a service. The service proxy may observe communications, modify communications, log communications, or the like, particularly so as to enhance the security and reliability of the host device. In some implementations, the service proxy may cooperate with an operating system to take over a named port object. In some implementations, the service proxy may receive messages as an intermediary between the client and the server. In some implementations, the service proxy may attach to a shared memory to intercept communications. In some implementations, the service proxy may be injected into a client process to appear to be the client itself." ;
    :kb-author "Ion-Alexandru Ionescu" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Crowdstrike Inc" ;
    :kb-reference-of :RPCTrafficAnalysis ;
    :kb-reference-title "RPC call interception" ;
    :todo "MITRE Analysis was not found" .

:Reference-RunDLL32.exeMonitoring_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2014-03-006: RunDLL32.exe monitoring - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2014-03-006/"^^xsd:anyURI ;
    :kb-abstract "Adversaries may find it necessary to use Dyanamic-link Libraries (DLLs) to evade defenses. One way these DLLs can be \"executed\" is through the use of the built-in Windows utility RunDLL32, which allows a user to execute code in a DLL, providing the name and optional arguments to an exported entry point. Windows uses RunDll32 legitimately in its normal operation, but with a proper baseline and understanding of the environment, monitoring its usage could be fruitful." ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2014-03-006: RunDLL32.exe monitoring" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-SAFESEH_ImageHasSafeExceptionHandlers_MicrosoftDocs a owl:NamedIndividual,
        :UserManualReference ;
    rdfs:label "Reference - /SAFESEH (Image has Safe Exception Handlers) - Microsoft Docs" ;
    :has-link "https://docs.microsoft.com/en-us/cpp/build/reference/safeseh-image-has-safe-exception-handlers?view=msvc-160"^^xsd:anyURI ;
    :kb-abstract "When /SAFESEH is specified, the linker will only produce an image if it can also produce a table of the image's safe exception handlers. This table specifies for the operating system which exception handlers are valid for the image." ;
    :kb-author "Mike Blome, Saisang Cai, Colin Robertson, Mike Jones, NextTurn, Gordon Hogenson" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Microsoft" ;
    :kb-reference-of :ExceptionHandlerPointerValidation ;
    :kb-reference-title "/SAFESEH (Image has Safe Exception Handlers)" ;
    :todo "Could not determine reference type; TechniqueReference class used instead",
        "Document Abstract was not found",
        "MITRE Analysis was not found" .

:Reference-SecureCachingOfServerCredentials_DellProductsLP a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Secure caching of server credentials - Dell Products LP" ;
    :has-link "https://patents.google.com/patent/US20100107241A1"^^xsd:anyURI ;
    :kb-abstract "A credential caching system includes receiving a set of authentication credentials, storing the set of authentication credentials in a credential cache memory, wherein the credential cache memory is coupled with a management controller, and supplying the set of authentication credentials for automatic authentication during a reset or reboot. In the event of a security breach, the credential caching system clears the set of authentication credentials from the credential cache memory so that the set of authentication credentials may no longer be used for a reset or reboot." ;
    :kb-author "Muhammed K. JaberMukund P. KhatriKevin T. MarksDon Charles McCall" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Dell Products LP" ;
    :kb-reference-of :AuthenticationCacheInvalidation ;
    :kb-reference-title "Secure caching of server credentials" ;
    :todo "MITRE Analysis was not found" .

:Reference-SecureMultipurposeInternetMailExtensionsMIME-Version3.1 a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.1" ;
    :has-link "https://tools.ietf.org/html/rfc3851"^^xsd:anyURI ;
    :kb-organization "Internet Engineering Task Force (IETF)" ;
    :kb-reference-title "Secure/Multipurpose Internet Mail Extensions (S/MIME) Version 3.1 Message Specification" .

:Reference-Securing_Web_Transactions__TLS_Server_Certificate_Management_Appendix_A_Passive_Inspection a :GuidelineReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Securing Web Transactions TLS Server Certificate Management - Appendix A Passive Inspection" ;
    :has-link "https://www.nccoe.nist.gov/publication/1800-16/VolD/vol-d-appendix.html"^^xsd:anyURI ;
    :kb-abstract "The example implementation demonstrates the ability to perform passive inspection of encrypted TLS connections. The question of whether or not to perform such an inspection is complex. There are important tradeoffs between traffic security and traffic visibility that each organization should consider. Some organizations prefer to decrypt internal TLS traffic, so it can be inspected to detect attacks that may be hiding within encrypted connections. Such inspection can detect intrusion, malware, and fraud, and can conduct troubleshooting, forensics, and performance monitoring. For these organizations, TLS inspection may serve as both a standard practice and a critical component of their threat detection and service assurance strategies." ;
    :kb-author "NIST" ;
    :kb-reference-of :PassiveCertificateAnalysis ;
    :kb-reference-title "Securing Web Transactions TLS Server Certificate Management - Appendix A Passive Inspection" .

:Reference-SecuringWebTransactions a :GuidelineReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Securing Web Transactions" ;
    :has-link "https://www.nccoe.nist.gov/sites/default/files/library/sp1800/tls-serv-cert-mgt-nist-sp1800-16b-final.pdf"^^xsd:anyURI ;
    :kb-abstract """Organizations risk losing revenue, customers, and reputation, and exposing internal or customer data to
attackers if they do not properly manage Transport Layer Security (TLS) server certificates. TLS is the
most widely used security protocol to secure web transactions and other communications on the
internet and internal networks. TLS server certificates are central to the security and operation of
internet-facing and internal web services. Improper TLS server certificate management results in
significant outages to web applications and services-such as government services, online banking, flight operations, and mission-critical services within an organization-and increased risk of security breaches.""" ;
    :kb-author "William Haag, Murugiah Souppaya, Paul Turner, William C. Barker, Brett Pleasant, Susan Symington" ;
    :kb-organization "NIST" ;
    :kb-reference-of :ActiveCertificateAnalysis ;
    :kb-reference-title "Securing Web Transactions" .

:Reference-SecurityArchitectureForTheInternetProtocol a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - Security Architecture for the Internet Protocol" ;
    :has-link "https://datatracker.ietf.org/doc/html/rfc1825"^^xsd:anyURI ;
    :kb-abstract """This memo describes the security mechanisms for IP version 4 (IPv4)
   and IP version 6 (IPv6) and the services that they provide.  Each
   security mechanism is specified in a separate document.  This
   document also describes key management requirements for systems
   implementing those security mechanisms.  This document is not an
   overall Security Architecture for the Internet and is instead focused
   on IP-layer security.""" ;
    :kb-author "Randall Atkinson" ;
    :kb-reference-of :EncryptedTunnels ;
    :kb-reference-title "Security Architecture for the Internet Protocol" .

:Reference-SecuritySystemWithMethodologyForInterprocessCommunicationControl_CheckPointSoftwareTechInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Security System with Methodology for Interprocess Communication Control - Check Point Software Tech Inc" ;
    :has-link "https://patents.google.com/patent/US20040199763"^^xsd:anyURI ;
    :kb-abstract "A security system with methodology for interprocess communication control is described. In one embodiment, a method for controlling interprocess communication is provided that includes steps of: defining rules indicating which system services a given application can invoke; trapping an attempt by a particular application to invoke a particular system service; identifying the particular application that is attempting to invoke the particular system service; and based on identity of the particular application and on the rules indicating which system services a given application can invoke, blocking the attempt when the rules indicate that the particular application cannot invoke the particular system service." ;
    :kb-author "Gregor Freund" ;
    :kb-mitre-analysis "This patent describes a technique for monitoring interprocess communications to prevent malicious applications from requesting system services. API calls are monitored to detect malicious applications attempting to open a communication channel (port) to access system services or sending messages to other applications using user32 API functions. These requests are examined against an external rules engine or whitelist, matches deny or block access and produce an error message such as connection refused or service not available." ;
    :kb-organization "Check Point Software Tech Inc" ;
    :kb-reference-of :IPCTrafficAnalysis ;
    :kb-reference-title "Security System with Methodology for Interprocess Communication Control" .

:Reference-SecurityVulnerabilityInformationAggregation a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Security vulnerability information aggregation" ;
    :has-link "https://patents.google.com/patent/US8544098B2"^^xsd:anyURI ;
    :kb-abstract "Security vulnerability information aggregation techniques are disclosed. Vulnerability information associated with one or more security vulnerabilities is obtained from multiple sources and aggregated into respective unified vulnerability definitions for the one or more security vulnerabilities. Aggregation may involve format conversion, content aggregation, or both in some embodiments. Unified vulnerability definitions may be distributed to vulnerability information consumers in accordance with consumer-specific policies. Storage of vulnerability information received from the sources may allow the aggregation process to be performed on existing vulnerability information “retro-actively”. Related data structures and Graphical User Interfaces (GUIs) are also disclosed." ;
    :kb-author "Christophe Gustave, Stanley Taihai Chow, Douglas Wiemer" ;
    :kb-organization "Nokia Technologies Oy" ;
    :kb-reference-of :AssetVulnerabilityEnumeration ;
    :kb-reference-title "Security vulnerability information aggregation" .

:Reference-ServiceBinaryModifications_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2014-02-001: Service Binary Modifications - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2014-02-001/"^^xsd:anyURI ;
    :kb-abstract "Adversaries may modify the binary file for an existing service to achieve Persistence while potentially evading defenses. If a newly created or modified runs as a service, it may indicate APT activity. However, services are frequently installed by legitimate software. A well-tuned baseline is essential to differentiating between benign and malicious service modifications." ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ServiceBinaryVerification ;
    :kb-reference-title "CAR-2014-02-001: Service Binary Modifications" ;
    :todo "MITRE Analysis was not found" .

:Reference-ServiceOutlierExecutables_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2013-09-005: Service Outlier Executables - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2013-09-005/"^^xsd:anyURI ;
    :kb-abstract "New executables that are started as a service are suspicious. This analytic looks for anomalous service executables." ;
    :kb-author "" ;
    :kb-mitre-analysis " " ;
    :kb-organization "" ;
    :kb-reference-of :ProcessLineageAnalysis ;
    :kb-reference-title "CAR-2013-09-005: Service Outlier Executables" ;
    :todo "MITRE Analysis was not found",
        "No author organizations provided for reference, add one?",
        "No authors provided for reference",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-ServiceSearchPathInterception_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2014-07-001: Service Search Path Interception - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2014-07-001/"^^xsd:anyURI ;
    :kb-abstract "According to ATT&CK, an adversary may escalate privileges by intercepting the search path for legitimately installed services. As a result, Windows will launch the target executable instead of the desired binary and command line. This can be done when there are spaces in the binary path and the path is unquoted. Search path interception should never happen legitimately and will likely be the result of an adversary abusing a system misconfiguration. With a few regular expressions, it is possible to identify the execution of services with intercepted search paths." ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessLineageAnalysis ;
    :kb-reference-title "CAR-2014-07-001: Service Search Path Interception" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-ServicesLaunchingCmd_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2014-05-002: Services launching Cmd - MITRE" ;
    :has-link ""^^xsd:anyURI ;
    :kb-abstract """Windows runs the Service Control Manager (SCM) within the process services.exe. Windows launches services as independent processes or DLL loads within a svchost.exe group. To be a legitimate service, a process (or DLL) must have the appropriate service entry point SvcMain. If an application does not have the entry point, then it will timeout (default is 30 seconds) and the process will be killed.

To survive the timeout, adversaries and red teams can create services that direct to cmd.exe with the flag /c, followed by the desired command. The /c flag causes the command shell to run a command and immediately exit. As a result, the desired program will remain running and it will report an error starting the service. This analytic will catch that command prompt instance that is used to launch the actual malicious executable. Additionally, the children and descendants of services.exe will run as a SYSTEM user by default. Thus, services are a convenient way for an adversary to gain Persistence and Privilege Escalation.""" ;
    :kb-author "" ;
    :kb-mitre-analysis " " ;
    :kb-organization "" ;
    :kb-reference-of :ProcessLineageAnalysis ;
    :kb-reference-title "CAR-2014-05-002: Services launching Cmd" ;
    :todo "Could not determine reference type; TechniqueReference class used instead",
        "MITRE Analysis was not found",
        "No author organizations provided for reference, add one?",
        "No authors provided for reference",
        "No URL provided for reference" .

:Reference-SimultaneousLoginsOnAHost_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2013-02-008: Simultaneous Logins on a Host - MITRE" ;
    :comment "The reference only lists pre-Vista event IDs; current (2020) ones are found at: https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/basic-audit-logon-events" ;
    :has-link "https://car.mitre.org/analytics/CAR-2013-02-008/"^^xsd:anyURI ;
    :kb-abstract """Multiple users logged into a single machine at the same time, or even within the same hour, do not typically occur in networks we have observed.

Logon events are Windows Event Code 4624 for Windows Vista and above, 518 for pre-Vista. Logoff events are 4634 for Windows Vista and above, 538 for pre-Vista. Logon types 2, 3, 9 and 10 are of interest. For more details see the Logon Types table on Microsoft's Audit Logon Events page.""" ;
    :kb-author "MITRE" ;
    :kb-reference-of :AuthenticationEventThresholding ;
    :kb-reference-title "CAR-2013-02-008: Simultaneous Logins on a Host" .

:Reference-SinkholingBadNetworkDomainsByRegisteringTheBadNetworkDomainsOnTheInternet_PaloAltoNetworksInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Sinkholing bad network domains by registering the bad network domains on the internet - Palo Alto Networks Inc" ;
    :has-link "https://patents.google.com/patent/US20160381065A1"^^xsd:anyURI ;
    :kb-abstract "Techniques for sinkholing bad network domains by registering the bad network domains on the Internet are provided. In some embodiments, sinkholing bad network domains by registering the bad network domains on the Internet includes determining a network domain is a bad network domain, in which the bad network domain is determined to be associated with an identified malware (e.g., malware that has been identified and has been determined to be associated with the bad domain), and the bad network domain is sinkholed by registering the bad network domain with a sinkholed IP address; and identifying a host that is infected with the identified malware based on an attempt by the host to connect to the sinkholed IP address." ;
    :kb-author "Huagang Xie; Wei Xu; Nir Zuk" ;
    :kb-mitre-analysis "This patent describes a technique to identify bad domains that are associated with malware and sinkhole the bad domain. Bad domains are identified by receiving malware samples and executing the malware sample in a virtual execution environment to identify network domains that the malware sample attempts to connect to during execution. Network domains that are identified during malware execution are then generated into signatures to identity bad domains for other hosts. Once identified, the bad domains are sinkholed by translating the domain to a valid IP address that is associated with a device controlled by a cloud security provider." ;
    :kb-organization "Palo Alto Networks Inc" ;
    :kb-reference-of :DNSTrafficAnalysis ;
    :kb-reference-title "Sinkholing bad network domains by registering the bad network domains on the internet" .

:Reference-SMBCopyAndExecution_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2013-05-005: SMB Copy and Execution - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2013-05-005/"^^xsd:anyURI ;
    :kb-abstract """An adversary needs to gain access to other hosts to move throughout an environment. In many cases, this is a twofold process. First, a file is remotely written to a host via an SMB share (detected by CAR-2013-05-003). Then, a variety of Execution techniques can be used to remotely establish execution of the file or script. To detect this behavior, look for files that are written to a host over SMB and then later run directly as a process or in the command line arguments. SMB File Writes and Remote Execution may happen normally in an environment, but the combination of the two behaviors is less frequent and more likely to indicate adversarial activity.

This can possibly extend to more copy protocols in order to widen its reach, or it could be tuned more finely to focus on specific program run locations (e.g. %SYSTEMROOT%\\system32) to gain a higher detection rate.""" ;
    :kb-author "" ;
    :kb-mitre-analysis " " ;
    :kb-organization "" ;
    :kb-reference-of :IPCTrafficAnalysis ;
    :kb-reference-title "CAR-2013-05-005: SMB Copy and Execution" ;
    :todo "MITRE Analysis was not found",
        "No author organizations provided for reference, add one?",
        "No authors provided for reference",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-SMBEventsMonitoring_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2013-01-003: SMB Events Monitoring - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2013-01-003/"^^xsd:anyURI ;
    :kb-abstract """Server Message Block (SMB) is used by Windows to allow for file, pipe, and printer sharing over port 445/tcp. It allows for enumerating, and reading from and writing to file shares for a remote computer. Although it is heavily used by Windows servers for legitimate purposes and by users for file and printer sharing, many adversaries also use SMB to achieve Lateral Movement. Looking at this activity more closely to obtain an adequate sense of situational awareness may make it possible to detect adversaries moving between hosts in a way that deviates from normal activity. Because SMB traffic is heavy in many environments, this analytic may be difficult to turn into something that can be used to quickly detect an APT. In some cases, it may make more sense to run this analytic in a forensic fashion. Looking through and filtering its output after an intrusion has been discovered may be helpful in identifying the scope of compromise.

Output Description:
The source, destination, content, and time of each event.""" ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :IPCTrafficAnalysis ;
    :kb-reference-title "CAR-2013-01-003: SMB Events Monitoring" ;
    :todo "MITRE Analysis was not found" .

:Reference-SMBSessionSetups_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2013-09-003: SMB Session Setups - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2013-09-003/"^^xsd:anyURI ;
    :kb-abstract """Account usage within SMB can be used to identify compromised credentials, and the hosts accessed with them.

This analytic monitors SMB activity that deals with user activity rather than file activity.""" ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :AuthorizationEventThresholding,
        :IPCTrafficAnalysis ;
    :kb-reference-title "CAR-2013-09-003: SMB Session Setups" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-SMBWriteRequest-NamedPipes_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2014-03-001: SMB Write Request - NamedPipes - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2014-03-001/"^^xsd:anyURI ;
    :kb-abstract """An SMB write can be an indicator of lateral movement, especially when combined with other information such as execution of that written file. Named pipes are a subset of SMB write requests. Named pipes such as msftewds may not be alarming; however others, such as lsarpc, may.

Monitoring SMB write requests still creates some noise, particularly with named pipes. As a result, SMB is now split between writing named pipes and writing other files.""" ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :IPCTrafficAnalysis,
        :RPCTrafficAnalysis ;
    :kb-reference-title "CAR-2014-03-001: SMB Write Request - NamedPipes" ;
    :todo "MITRE Analysis was not found" .

:Reference-SMBWriteRequest_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2013-05-003: SMB Write Request - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2013-05-003/"^^xsd:anyURI ;
    :kb-abstract "As described in CAR-2013-01-003, SMB provides a means of remotely managing a file system. Adversaries often use SMB to move laterally to a host. SMB is commonly used to upload files. It may be used for staging in Exfiltration or as a Lateral Movement technique. Unlike SMB Reads, SMB Write requests typically require an additional level of access, resulting in less activity. Focusing on SMB Write activity narrows the field to find techniques that actively change remote hosts, instead of passively reading files." ;
    :kb-author "" ;
    :kb-mitre-analysis " " ;
    :kb-organization "" ;
    :kb-reference-of :IPCTrafficAnalysis ;
    :kb-reference-title "CAR-2013-05-003: SMB Write Request" ;
    :todo "MITRE Analysis was not found",
        "No author organizations provided for reference, add one?",
        "No authors provided for reference",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-SNMPNetworkAutoDiscovery a owl:NamedIndividual,
        :UserManualReference ;
    rdfs:label "Reference - SNMP - Network Auto-Discovery" ;
    :has-link "https://docs.device42.com/auto-discovery/network-auto-discovery/"^^xsd:anyURI ;
    :kb-abstract "SNMP, or Simple Network Management Protocol, is a protocol and a standard that is supported by just about any managed network-connected hardware. There are three widely deployed versions: SNMP v1, v2c (most commonly used), and v3. SNMP is typically utilized read-only, but supports read/write, and by default utilized port 161. SNMP exposes management data in the form of ‘variables’, which are organized in what is known as a MIB, or “Management Information Base”. A MIB essentially describes the variables available on a given system, each of which can be remotely queried via SNMP." ;
    :kb-organization "Device 42" ;
    :kb-reference-of :ActiveLogicalLinkMapping ;
    :kb-reference-title "SNMP - Network Auto Discovery" .

:Reference-SoftwareVulnerabilityGraphDatabase a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Software vulnerability graph database" ;
    :has-link "https://patents.google.com/patent/WO2020028535A1"^^xsd:anyURI ;
    :kb-abstract "To analyze open-source code at a large scale, a security domain graph language (\"GL\") has been created that functions as a vulnerability description language and facilitates program analysis queries. The SGL facilitates building and maintaining a graph database to catalogue vulnerabilities found in open-source components. This graphical database can be accessed via a database interface directly or accessed by an agent that interacts with the database interface. To build the graph database, a database interface processes an open-source component and creates graph structures which represent relationships present in the open-source component. The database interface transforms a vulnerability description into a canonical form based on a schema for the graph database and updates the database based on a determination of whether the vulnerability is a duplicate. This ensures quality and consistency of the vulnerability dataset maintained in the graph database." ;
    :kb-author "Darius Tsien Wei FOO, Ming Yi ANG, Asankhaya Sharma, Jie Shun YEO" ;
    :kb-organization "Veracode, Inc." ;
    :kb-reference-of :AssetVulnerabilityEnumeration,
        :SystemDependencyMapping,
        :SystemVulnerabilityAssessment ;
    :kb-reference-title "Software vulnerability graph database" .

:Reference-Squiblydoo_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2019-04-003: Squiblydoo - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2019-04-003/"^^xsd:anyURI ;
    :kb-abstract "Squiblydoo is a specific usage of regsvr32.dll to load a COM scriptlet directly from the internet and execute it in a way that bypasses application whitelisting. It can be seen by looking for regsvr32.exe executions that load the scrobj.dll (which execute the COM scriptlet) or, if that is too noisy, those that also load content directly via HTTP or HTTPS." ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2019-04-003: Squiblydoo" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-StackSmashingProtection_StackGuard_RedHat a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Security Technologies: Stack Smashing Protection (StackGuard) - Red Hat" ;
    :has-link "https://access.redhat.com/blogs/766093/posts/3548631"^^xsd:anyURI ;
    :kb-abstract "In our previous blog, we saw how arbitrary code execution resulting from stack-buffer overflows can be partly mitigated by marking segments of memory as non-executable, a technology known as Execshield. However stack-buffer overflow exploits can still effectively overwrite the function return address, which leads to several interesting exploitation techniques like ret2libc, ret2gets, and ret2plt. With all of these methods, the function return address is overwritten and attacker controlled code is executed when the program control transfers to overwritten address on the stack." ;
    :kb-author "Huzaifa Sidhpurwala" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Red Hat" ;
    :kb-reference-of :StackFrameCanaryValidation ;
    :kb-reference-title "Security Technologies: Stack Smashing Protection (StackGuard)" ;
    :todo "MITRE Analysis was not found" .

:Reference-StreamingPhish a owl:NamedIndividual,
        :TechniqueReference ;
    rdfs:label "Reference - StreamingPhish" ;
    :has-link "https://github.com/wesleyraptor/streamingphish"^^xsd:anyURI ;
    :kb-abstract "This is a utility that uses supervised machine learning to detect phishing domains from the Certificate Transparency log network." ;
    :kb-author "Wes Connell" ;
    :kb-organization "Uber" ;
    :kb-reference-of :PassiveCertificateAnalysis ;
    :kb-reference-title "StreamingPhish" .

:Reference-SuspiciousArguments_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2013-07-001: Suspicious Arguments - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2013-07-001/"^^xsd:anyURI ;
    :kb-abstract "Malicious actors may rename built-in commands or external tools, such as those provided by SysInternals, to better blend in with the environment. In those cases, the file path name is arbitrary and may blend in well with the background. If the arguments are closely inspected, it may be possible to infer what tools are running and understand what an adversary is doing. When any legitimate software shares the same command lines, it must be whitelisted according to the expected parameters." ;
    :kb-author "" ;
    :kb-mitre-analysis " " ;
    :kb-organization "" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2013-07-001: Suspicious Arguments" ;
    :todo "MITRE Analysis was not found",
        "No author organizations provided for reference, add one?",
        "No authors provided for reference",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-SuspiciousRunLocations_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2013-05-002: Suspicious Run Locations - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2013-05-002/"^^xsd:anyURI ;
    :kb-abstract "In Windows, files should never execute out of certain directory locations. Any of these locations may exist for a variety of reasons, and executables may be present in the directory but should not execute. As a result, some defenders make the mistake of ignoring these directories and assuming that a process will never run from one. There are known TTPs that have taken advantage of this fact to go undetected. This fact should inform defenders to monitor these directories more closely, knowing that they should never contain running processes." ;
    :kb-author "" ;
    :kb-mitre-analysis " " ;
    :kb-organization "" ;
    :kb-reference-of :ProcessSpawnAnalysis ;
    :kb-reference-title "CAR-2013-05-002: Suspicious Run Locations" ;
    :todo "MITRE Analysis was not found",
        "No author organizations provided for reference, add one?",
        "No authors provided for reference",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-SynchronizingAHoneyNetworkConfigurationToReflectATargetNetworkEnvironment_PaloAltoNetworksInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Synchronizing a honey network configuration to reflect a target network environment - Palo Alto Networks Inc" ;
    :has-link "https://patents.google.com/patent/US20170019425A1"^^xsd:anyURI ;
    :kb-abstract "Techniques for synchronizing a honey network configuration to reflect a target network environment are disclosed. In some embodiments, a system for synchronizing a honey network configuration to reflect a target network environment includes a device profile data store that includes a plurality of attributes of each of a plurality of devices in the target network environment; a virtual machine (VM) image library that includes one or more VM images; and a virtual clone manager executed on a processor that instantiates a virtual clone of one or more devices in the target enterprise network using a VM image selected from the VM image library that is customized based on one or more attributes for a target device in the device profile data store." ;
    :kb-author "Taylor Ettema, Huagang Xie" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Palo Alto Networks Inc" ;
    :kb-reference-of :IntegratedHoneynet ;
    :kb-reference-title "Synchronizing a honey network configuration to reflect a target network environment" ;
    :todo "MITRE Analysis was not found" .

:Reference-SystemAndAMethodForIdentifyingThePresenceOfMalwareAndRansomwareUsingMini-trapsSetAtNetworkEndpoints_FidelisCybersecuritySolutionsInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System and a method for identifying the presence of malware and ransomware using mini-traps set at network endpoints - Fidelis Cybersecurity Solutions Inc" ;
    :has-link "https://patents.google.com/patent/US9807115B2/en?oq=US-9807115-B2"^^xsd:anyURI ;
    :kb-abstract "A system for identifying the presence of ransomware on a network, including a plurality of resources, interconnected to form a network and at least one decoy drive.The decoy drive includes a plurality of decoy files to be encrypted by the ransomware, and wherein the decoy drive continuously provides the decoy files thereby continuously occupying the ransomware." ;
    :kb-author "Doron Kolton; Rami Mizrahi; Omer Zohar; Benny Ben-Rabi; Alex Barbalat; Shlomi Gabai" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Fidelis Cybersecurity Solutions Inc" ;
    :kb-reference-of :DecoyFile ;
    :kb-reference-title "System and a method for identifying the presence of malware and ransomware using mini-traps set at network endpoints" ;
    :todo "MITRE Analysis was not found" .

:Reference-SystemAndMethodForDetectingHomoglyphAttacksWithASiameseConvolutionalNeuralNetwork_EndgameInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System and method for detecting homoglyph attacks with a siamese convolutional neural network - Endgame Inc" ;
    :has-link "https://patents.google.com/patent/US20190019058A1/"^^xsd:anyURI ;
    :kb-abstract "The present invention utilizes computer vision technologies to identify potentially malicious URLs and executable files in a computing device. In one embodiment, a Siamese convolutional neural network is trained to identify the relative similarity between image versions of two strings of text. After the training process, a list of strings that are likely to be utilized in malicious attacks are provided (e.g., legitimate URLs for popular websites). When a new string is received, it is converted to an image and then compared against the image of list of strings. The relative similarity is determined, and if the similarity rating falls below a predetermined threshold, an alert is generated indicating that the string is potentially malicious." ;
    :kb-author "Jonathan Woodbridge; Anjum Ahuja; Daniel Grant" ;
    :kb-mitre-analysis "This patent describes a mechanism to detect homoglyph strings that involves training a Siamese convolutional neural network to compare images of strings. Strings of legitimate URLs for websites along with known suspicious stings are converted to images during the training process to create an index. New strings are converted to images and then compared to the index for similarity, if the string deviates beyond a threshold an alert is triggered." ;
    :kb-organization "Endgame Inc" ;
    :kb-reference-of :HomoglyphDetection ;
    :kb-reference-title "System and method for detecting homoglyph attacks with a siamese convolutional neural network" .

:Reference-SystemAndMethodForDetectingMalwareInjectedIntoMemoryOfAComputingDevice_EndgameInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System and method for detecting malware injected into memory of a computing device - Endgame Inc" ;
    :has-link "https://patents.google.com/patent/US20190018958A1/en?oq=US20190018958-A1"^^xsd:anyURI ;
    :kb-abstract "In the embodiments described herein, a malicious code detection module identifies potentially malicious instructions in memory of a computing device. The malicious code detection module examines the call stack for each thread running within the operating system of the computing device. Within each call stack, the malicious code detection module identifies the originating module for each stack frame and determines whether the originating module is backed by an image on disk. If an originating module is not backed by an image on disk, the thread containing that originating module is flagged as potentially malicious, execution of the thread optionally is suspended, and an alert is generated for the user or administrator." ;
    :kb-author "Joseph W. Desimone" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Endgame Inc" ;
    :kb-reference-of :ProcessCodeSegmentVerification ;
    :kb-reference-title "System and method for detecting malware injected into memory of a computing device" ;
    :todo "MITRE Analysis was not found" .

:Reference-SystemAndMethodForDetectionOfAChangeInBehaviorInTheUseOfAWebsiteThroughVectorVelocityAnalysis_SilverTailSystems a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System and Method for Detection of a Change in Behavior in the Use of a Website Through Vector Velocity Analysis - Silver Tail Systems" ;
    :has-link "https://patents.google.com/patent/US20100235909A1/en?oq=US+20100235909+A1"^^xsd:anyURI ;
    :kb-abstract "A system and software for identifying the change of user behavior on a website includes analyzing the actions of users on a website comprising a plurality of fields or input parameters that identify the actions performed on a website including fields related to previous actions by that user or other users of the website. The fields or input parameters are represented in a vector format where vectors represent different sessions of activity on the website, pages of the website, users of the website, or other attributes of the use of a website. Analysis is performed to determine if new sessions are similar or dissimilar to previously known sessions and if a session is converging or diverging from known sessions based on the velocity and direction of the velocity of the vectors in the vector space." ;
    :kb-author "Mike Eynon; Laura Mather; Erik Westland; Jim Lloyd" ;
    :kb-mitre-analysis "This patent describes a technique for detecting fraudulent behavior on a website. Website behavior is mapped to build a multidimensional representation of user actions on a website that is updated as additional actions are recorded. Example actions on a website that are recorded include clicks by a user on the website and entering data into forms. Current behavior is compared against baseline recorded behavior and if current behavior deviates above a threshold, an alert is issued." ;
    :kb-organization "Silver Tail Systems" ;
    :kb-reference-of :WebSessionActivityAnalysis ;
    :kb-reference-title "System and Method for Detection of a Change in Behavior in the Use of a Website Through Vector Velocity Analysis" .

:Reference-SystemAndMethodForIdentifyingThePresenceOfMalwareUsingMini-trapsSetAtNetworkEndpoints_FidelisCybersecuritySolutionsInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System and method for identifying the presence of malware using mini-traps set at network endpoints - Fidelis Cybersecurity Solutions Inc" ;
    :has-link "https://patents.google.com/patent/US9807114B2/en?oq=US-9807114-B2"^^xsd:anyURI ;
    :kb-abstract "A system for identifying the presence of advanced persistent threats on a network including a plurality of resources, interconnected to form a network, at least one decoy resource, at least one mini-trap installed on at least one of the plurality of resources and functionally associated with at one of the at least one decoy resource, the at least one mini-trap comprising deceptive information directing malware accessing the at least one mini-trap to the decoy resource associated therewith, and a manager node forming part of the network, locally or remotely, and configured to manage placement of the at least one mini-trap on the at least one of the plurality of resources and association between the at least one mini-trap and the decoy resource associated therewith." ;
    :kb-author "Doron Kolton; Rami Mizrahi; Omer Zohar; Benny Ben-Rabi; Alex Barbalat; Shlomi Gabai" ;
    :kb-mitre-analysis """Questionable or all files (as determined by the enterprise) are forwarded to the decoy network. Using a manager node user interface, you can setup fake information (ex. IP address of a decoy FTP server)
and deploy decoy physical or virtual endpoints.""" ;
    :kb-organization "Fidelis Cybersecurity Solutions Inc" ;
    :kb-reference-of :DecoyNetworkResource,
        :DecoyUserCredential ;
    :kb-reference-title "System and method for identifying the presence of malware using mini-traps set at network endpoints" .

:Reference-SystemAndMethodForInternetSecurity_CylanceInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System and method for internet security - Cylance Inc" ;
    :has-link "https://patents.google.com/patent/US20120117644A1"^^xsd:anyURI ;
    :kb-abstract "A computer implemented method for preventing SQL injection attacks comprises intercepting a web request associated with a web service at a first software hook in a first web service execution context, persisting at least a portion of the intercepted web request in a storage location associated with the first software hook and accessible to at least one additional execution context, intercepting a database query generated by at least one web service processing operation at a second software hook associated with the execution of the query, wherein the query is generated in response to the intercepted web request and the second hook retrieves the persisted portion of the intercepted web request, comparing a portion of the persisted portion of the intercepted web request with at least a portion of the intercepted database query, and determining, prior to the query being executed, whether the query corresponds to a potential SQL injection attack." ;
    :kb-author "Derek A. Soeder" ;
    :kb-mitre-analysis "This patent describes a technique for detecting SQL injection attacks. Software hooks are installed in a web service or application to intercept function calls, events, or messages that are passed between software components. Intercepted database queries associated with a web request are analyzed character by character and if it contains a character that would modify the syntax the query is rejected or sanitized. Security rules and policies may also determine rejection. For example, an administrator or developer may implement a rule that rejects any database query that is excessively long or that contains a particular string, such as \"Xp cmdshell\"." ;
    :kb-organization "Cylance Inc" ;
    :kb-reference-of :DatabaseQueryStringAnalysis ;
    :kb-reference-title "System and method for internet security" .

:Reference-SystemAndMethodForManagedSecurityAssessmentAndMitigation a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System and method for managed security assessment and mitigation" ;
    :has-link "https://patents.google.com/patent/US9544324B2"^^xsd:anyURI ;
    :kb-abstract "In an embodiment of the invention, a system for assessing vulnerabilities includes: a security management system; a network device in a system under test (SUT), wherein the network device is privy to traffic in the SUT; and wherein the SMS is privy to traffic that is known by the network device and/or to one or more traffic observations that is known by the network device." ;
    :kb-author "Scott Parcel" ;
    :kb-organization "Cenzic Inc, Trustwave Holdings Inc" ;
    :kb-reference-of :NetworkVulnerabilityAssessment ;
    :kb-reference-title "System and method for managed security assessment and mitigation" .

:Reference-SystemAndMethodForNetworkSecurityIncludingDetectionOfAttacksThroughPartnerWebsites_EMCIPHoldingCoLLC a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System and Method for Network Security Including Detection of Attacks Through Partner Websites - EMC IP Holding Co LLC" ;
    :has-link "https://patents.google.com/patent/US20110302653A1/en?oq=US+20110302653+A1"^^xsd:anyURI ;
    :kb-abstract "A computer readable storage medium has instructions for execution on a computer. The instructions monitor transactions between a server and a set of clients. An evaluation of session indicators associated with the transactions is performed. Individual sessions between the server and individual clients of the plurality of clients are isolated in response to the evaluation." ;
    :kb-author "Matt Frantz; Andreas Wittenstein; Mike Eynon; Laura Mather; Jim Lloyd; James Schumacher; Duane Murphy" ;
    :kb-mitre-analysis "This patent describes a technique for detecting man-in-the-browser attacks. Current user session data is compared with the average user session that is based on collected data representing average values across all user sessions over a data-collection period. User session data includes average time between clicks and the order in which website pages are viewed. The comparisons are combined to generate a score that indicates the likelihood that the current session is a man-in-the-browser attack." ;
    :kb-organization "EMC IP Holding Co LLC" ;
    :kb-reference-of :WebSessionActivityAnalysis ;
    :kb-reference-title "System and Method for Network Security Including Detection of Attacks Through Partner Websites" .

:Reference-SystemAndMethodForProcessHollowingDetection_CarbonBlackInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System and Method for Process Hollowing Detection - Carbon Black Inc" ;
    :has-link "https://patents.google.com/patent/US20170272462A1"^^xsd:anyURI ;
    :kb-abstract "A method and system for remediating a process hollowing intrusion on a user device comprising detecting a process starting on the user device, preparing the process to monitor Application Programming Interface (API) calls between the process and an operating system of the user device, determining whether the process is associated with a process hollowing intrusion based on information associated with the process and/or the API calls, and executing security policies against the process associated with the process hollowing intrusion. In examples, it is determined whether the child process is associated with a process hollowing intrusion in response to determining whether one or more API calls associated with known process hollowing intrusions modify executable memory of and/or modify an entry point address of the child process." ;
    :kb-author "Jeffrey Albin Kraemer, Paul Matthew Drapeau" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Carbon Black Inc" ;
    :kb-reference-of :ProcessSelf-ModificationDetection ;
    :kb-reference-title "System and Method for Process Hollowing Detection" ;
    :todo "MITRE Analysis was not found" .

:Reference-SystemAndMethodForProvidingAnActivelyInvalidatedClient-sideNetworkResourceCache_IMVU a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System and method for providing an actively invalidated client-side network resource cache - IMVU" ;
    :has-link "https://patents.google.com/patent/US9578081B2/en"^^xsd:anyURI ;
    :kb-abstract "A system and method for providing an actively invalidated client-side network resource cache are disclosed. A particular embodiment includes: a client configured to request, for a client application, data associated with an identifier from a server; the server configured to provide the data associated with the identifier and to establish a queue associated with the identifier at a scalable message queuing system, the client being configured to subscribe to the queue at the scalable message queuing system to receive invalidation information associated with the data; the server being further configured to signal the queue of an invalidation event associated with the data; the scalable message queuing system being configured to convey information indicative of the invalidation event to the client; and the client being further configured to re-request the data associated with the identifier from the server upon receipt of the information indicative of the invalidation event." ;
    :kb-author "Jon Watte" ;
    :kb-mitre-analysis " " ;
    :kb-organization "IMVU" ;
    :kb-reference-of :AuthenticationCacheInvalidation ;
    :kb-reference-title "System and method for providing an actively invalidated client-side network resource cache" ;
    :todo "MITRE Analysis was not found" .

:Reference-SystemAndMethodForScanningRemoteServicesToLocateStoredObjectsWithMalware a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System and method for scanning remote services to locate stored objects with malware" ;
    :has-link "https://patents.google.com/patent/US11368475B1/"^^xsd:anyURI ;
    :kb-abstract "A system and method for retrieval and analysis of stored objects for malware is described. The method involves receiving a scan request message from a customer to conduct analytics on one or more objects stored within a third-party controlled service. In response to receipt of the scan request message, the system generates a redirect message. The redirect message redirects the customer to an authentication portal of the third-party controlled service operating as a logon page and configures receipt by the system of access credentials for the third-party controlled service upon verification of the customer. Using the access credentials, the system is able to retrieve the one or more objects using the access credentials and performing analytics on each object of the one or more objects to classify each object as malicious or benign." ;
    :kb-author "Sai Vashisht" ;
    :kb-organization "Mandiant Inc, FireEye Security Holdings US LLC" ;
    :kb-reference-of :EmailRemoval ;
    :kb-reference-title "System and method for scanning remote services to locate stored objects with malware" .

:Reference-SystemAndMethodForValidatingIn-memoryIntegrityOfExecutableFilesToIdentifyMaliciousActivity_EndgameInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System and method for validating in-memory integrity of executable files to identify malicious activity - Endgame Inc" ;
    :has-link "https://patents.google.com/patent/US20190018962A1/en?oq=15648887"^^xsd:anyURI ;
    :kb-abstract "In the embodiments described herein, a malicious code detection module identifies potentially malicious instructions in volatile memory of a computing device before the instructions are executed. The malicious code detection module identifies an executable file, such as an .exe file, in memory, validates one or more components of the executable file against the same file stored in non-volatile storage, and issues an alert if the validation fails." ;
    :kb-author "Joseph W. Desimone" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Endgame Inc" ;
    :kb-reference-of :ProcessCodeSegmentVerification ;
    :kb-reference-title "System and method for validating in-memory integrity of executable files to identify malicious activity" ;
    :todo "MITRE Analysis was not found" .

:Reference-SystemAndMethodForVulnerabilityRiskAssessment a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System and method for vulnerability risk analysis" ;
    :has-link "https://patents.google.com/patent/US9317692B2"^^xsd:anyURI ;
    :kb-abstract "Embodiments of the present invention are directed to a method and system for automated risk analysis. The method includes accessing host configuration information of a host and querying a vulnerability database based on the host configuration information. The method further includes receiving a list of vulnerabilities and accessing a plurality of vulnerability scores. The list of vulnerabilities corresponds to vulnerabilities of the host. Vulnerabilities can be removed from the list based on checking for installed fixes corresponding to vulnerability. A composite risk score can then be determined for the host a nd each software product of the host based on the plurality of vulnerability scores. An aggregate risk score can then be determined for the host and each software product of the host based on the plurality of vulnerability scores." ;
    :kb-author "Matthew Cruz Elder, Darrell Martin Kienzle, Pratyusa K. Manadhata, Ryan Kumar Persaud" ;
    :kb-organization "CA Inc" ;
    :kb-reference-of :AssetVulnerabilityEnumeration ;
    :kb-reference-title "System and method for vulnerability risk analysis" .

:Reference-SystemAndMethodsThereofForCausalityIdentificationAndAttributionsDeterminationOfProcessesInANetwork_PaloAltoNetworksIncCyberSecdoLtd a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System and methods thereof for causality identification and attributions determination of processes in a network - Palo Alto Networks IncCyber Secdo Ltd" ;
    :has-link "https://patents.google.com/patent/US20170195350A1/en?oq=US-2017195350-A1"^^xsd:anyURI ;
    :kb-abstract "A system is used for detection of advanced persistent and non-persistent threats in a computerized environment. The system is connected to a plurality of user devices coupled to an enterprise's network. The system receives via an interface an electronic notification of at least one event in the operating system of the computer. The system then analyzes the at least one event. The system then generates a causality chain for the at least one event respective of the analysis. The causality chain comprises all the threads that attributed to the at least one event in a chronological order. The system then identifies a main thread that started the causality chain that led to the at least one event. Then, the system determines whether the main thread is associated with malicious software. Upon determination that the main thread is associated with malicious software, the causality chain is marked as infected." ;
    :kb-author "Gil BARAK" ;
    :kb-mitre-analysis "This patent describes detecting malicious processes on a host. Agents are deployed on hosts that monitor all initiated processes and determine whether a process was initiated at boot or initiated by another process. If not initiated at boot or by another process, the process is identified as suspicious and an alert is triggered." ;
    :kb-organization "Palo Alto Networks IncCyber Secdo Ltd" ;
    :kb-reference-of :ProcessLineageAnalysis ;
    :kb-reference-title "System and methods thereof for causality identification and attributions determination of processes in a network" .

:Reference-SystemAndMethodsThereofForDetectionOfPersistentThreatsInAComputerizedEnvironmentBackground_PaloAltoNetworksIncCyberSecdoLtd a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System and methods thereof for detection of persistent threats in a computerized environment background - Palo Alto Networks IncCyber Secdo Ltd" ;
    :has-link "https://patents.google.com/patent/US20170206358A1/en?oq=US-2017206358-A1"^^xsd:anyURI ;
    :kb-abstract "A system is used for detection of advanced persistent and non-persistent threats in a computerized environment. The system is connected to a plurality of user devices coupled to an enterprise's network. The system receives via an interface an electronic notification of at least one event in the operating system of the computer. The system then analyzes the at least one event. The system then generates a causality chain for the at least one event respective of the analysis. The causality chain comprises all the threads that attributed to the at least one event in a chronological order. The system then identifies a main thread that started the causality chain that led to the at least one event. Then, the system determines whether the main thread is associated with malicious software. Upon determination that the main thread is associated with malicious software, the causality chain is marked as infected." ;
    :kb-author "Gil BARAK" ;
    :kb-mitre-analysis "The patent describes detecting malicious events on a host. For each new event (e.x. new file request received from a user device, a change in an existing file in a container) a causality chain is developed for all threads associated with the event. The causality chain identifies the thread that started the process of the event (main thread). If a thread in the causality chain has no parent, i.e. no main thread associated with it, the process is identified as malicious." ;
    :kb-organization "Palo Alto Networks IncCyber Secdo Ltd" ;
    :kb-reference-title "System and methods thereof for detection of persistent threats in a computerized environment background" .

:Reference-SystemAndMethodsThereofForIdentificationOfSuspiciousSystemProcesses_PaloAltoNetworksInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System and methods thereof for identification of suspicious system processes - Palo Alto Networks Inc" ;
    :has-link "https://patents.google.com/patent/US20170286683A1/en?oq=US-2017286683-A1"^^xsd:anyURI ;
    :kb-abstract "A computerized method for identification of suspicious processes executing on an end-point device communicatively connected to network, the network communicatively connected to a server, the method comprising receiving, by the server, a record of at least one process, initiated by and executing on by the end-point device. One or more parameters associated with the at least one process are identified. A first time pointer is identified corresponding to the identified one or more parameters, a first time pointer. A second time pointer at which a user associated with the end-point device initiated a user dependent process is identified. Whether the second time pointer occurred before the first time pointer is identified. It is determined whether the at least one process was initiated by the user based on identification of user dependent processes and corresponding attribution. An action is performed based on the above determination." ;
    :kb-author "Gil BARAK" ;
    :kb-mitre-analysis "The patent describes detecting malicious processes by identifying the order of process initiation. The start of a user initiated process (user query, opening an application, etc.) is compared with the start of processes initiated by the device (ex. during boot). In addition, a determination is made on whether processes are not initiated by a user by examining process parameters such as type of process, its creator, source, etc. If it is determined that a user initiated process was started before a process initiated by the device and a process was not initiated by the user, the process is marked as suspicious." ;
    :kb-organization "Palo Alto Networks Inc" ;
    :kb-reference-of :ProcessLineageAnalysis ;
    :kb-reference-title "System and methods thereof for identification of suspicious system processes" .

:Reference-SystemAndMethodsThereofForLogicalIdentificationOfMaliciousThreatsAcrossAPluralityOfEnd-pointDevicesCommunicativelyConnectedByANetwork_PaloAltoNetworksIncCyberSecdoLtd a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System and methods thereof for logical identification of malicious threats across a plurality of end-point devices (epd) communicatively connected by a network - Palo Alto Networks IncCyber Secdo Ltd" ;
    :has-link "https://patents.google.com/patent/US20180373870A1/en?oq=US-2018373870-A1"^^xsd:anyURI ;
    :kb-abstract "A computerized method for logical identification of malicious threats across a plurality of end-point devices (EPD) communicatively connected by a network, comprising collecting over the network an identifier associated with each file of a plurality of files, wherein each file of the plurality of files is installed on at least one of the plurality of EPDs and wherein the identifier is the same for each like file of the plurality of file. Information associated with an identified subset of files is collected, wherein the information indicates at least a time at which the at least one file was installed on one or more of the plurality of EPDs and the way the at least one file spread within the network. The collected information is analyzed according to a set of predetermined computerized investigation rules. The analysis is used to determine whether at least a file of the identified subset files is a suspicious file." ;
    :kb-author "Gil BARAK" ;
    :kb-mitre-analysis "This patent describes detecting suspicious files using file metadata such as the prevalence of the file deployed on the network, file installation times, and how the file was spread within the network. The combination of these factors are used to determine a risk score of the file and if below a threshold, sends an alert." ;
    :kb-organization "Palo Alto Networks IncCyber Secdo Ltd" ;
    :kb-reference-of :FileContentRules ;
    :kb-reference-title "System and methods thereof for logical identification of malicious threats across a plurality of end-point devices (epd) communicatively connected by a network" .

:Reference-SystemAndMethodsThereofForPreventingRansomwareFromEncryptingDataElementsStoredInAMemoryOfAComputer-basedSystem_PaloAltoNetworksInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System and methods thereof for preventing ransomware from encrypting data elements stored in a memory of a computer-based system - Palo Alto Networks Inc" ;
    :has-link "https://patents.google.com/patent/US20170308711A1/en?oq=US-2017308711-A1"^^xsd:anyURI ;
    :kb-abstract "A computerized method for preventing ransomware from encrypting data elements stored in a memory of a computer-based system, the method comprising identifying at least one identifier for a data element, wherein the at least one identifier indicates at least a position of the data element within the memory. An optimal number of virtual traps is determined for the data element corresponding to the at least one identifier. An optimal position for each of the virtual traps is determined corresponding to the at least one identifier. The virtual traps are send to the determined optimal position within the memory." ;
    :kb-author "Gil BARAK" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Palo Alto Networks Inc" ;
    :kb-reference-of :DecoyFile ;
    :kb-reference-title "System and methods thereof for preventing ransomware from encrypting data elements stored in a memory of a computer-based system" ;
    :todo "MITRE Analysis was not found" .

:Reference-SystemAndMethodThereofForIdentifyingAndRespondingToSecurityIncidentsBasedOnPreemptiveForensics_PaloAltoNetworksInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System and method thereof for identifying and responding to security incidents based on preemptive forensics - Palo Alto Networks Inc" ;
    :has-link "https://patents.google.com/patent/US20160142424A1"^^xsd:anyURI ;
    :kb-abstract "A system is connected to a plurality of user devices coupled to an enterprise's network. The system continuously collects, stores, and analyzes forensic data related to the enterprise's network. Based on the analysis, the system is able to determine normal behavior of the network and portions thereof and thereby identify abnormal behaviors within the network. Upon identification of an abnormal behavior, the system determines whether the abnormal behavior relates to a security incident. Upon determining a security incident in any portion of the enterprise's network, the system extracts forensic data respective of the security incident and enables further assessment of the security incident as well as identification of the source of the security incident. The system provides real-time damage assessment respective of the security incident as well as the security incident's attributions." ;
    :kb-author "Gil BARAK; Shai MORAG" ;
    :kb-mitre-analysis """This patent describes detecting abnormal behavior related to a security incident by collecting and analyzing forensic data in real time. Forensic data may include:

* URLs visited
* data downloaded or streamed
* messages received and sent
* amount of memory used for processing

The data is then analyzed according to a set of dynamically created rules to determine normal behavior patterns associated with the network or user devices. Anomalies between current behavior and normal behavior patterns trigger an alert.""" ;
    :kb-organization "Palo Alto Networks Inc" ;
    :kb-reference-of :ResourceAccessPatternAnalysis,
        :UserDataTransferAnalysis,
        :WebSessionActivityAnalysis ;
    :kb-reference-title "System and method thereof for identifying and responding to security incidents based on preemptive forensics" .

:Reference-SystemForDetectingThreatsUsingScenario-basedTrackingOfInternalAndExternalNetworkTraffic_VECTRANETWORKSInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System for detecting threats using scenario-based tracking of internal and external network traffic - VECTRA NETWORKS Inc" ;
    :has-link "https://patents.google.com/patent/US20160191563A1"^^xsd:anyURI ;
    :kb-abstract "Disclosed is an improved approach to implement a system and method for detecting insider threats, where models are constructed that is capable of defining what constitutes the normal behavior for any given hosts and quickly find anomalous behaviors that could constitute a potential threat to an organization. The disclosed approach provides a way to identify abnormal data transfers within and external to an organization without the need for individual monitoring software on each host, by leveraging metadata that describe the data exchange patterns observed in the network." ;
    :kb-author "Nicolas BEAUCHESNE; David Lopes Pegna" ;
    :kb-mitre-analysis """Determination of anomalous data transfers is performed over a given time period. For example, a check of a pull vs. push data ratio can be established over a specific time period, e.g., over a three-hour period, over a one day period, over a one week period, etc.

The system can also establish a baseline behavior for data exchange for each host in terms of pull vs. push data ratio for each resource contacted by the host.

Network packet capture data is collected and metadata is extracted. Aggregate data push/pull information from the metadata is then analyzed for a given host versus specific client to server relationships. This technique can potentially catch lateral data transfers, and may have filtering on alerting logic to only raise alarms when external hosts receive large data transfers.""" ;
    :kb-organization "VECTRA NETWORKS Inc" ;
    :kb-reference-of :PerHostDownload-UploadRatioAnalysis ;
    :kb-reference-title "System for detecting threats using scenario-based tracking of internal and external network traffic" .

:Reference-SystemForImplementingThreatDetectionUsingDailyNetworkTrafficCommunityOutliers_VECTRANETWORKSInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System for implementing threat detection using daily network traffic community outliers - VECTRA NETWORKS Inc" ;
    :has-link "https://patents.google.com/patent/US20160191560A1"^^xsd:anyURI ;
    :kb-abstract "A method and system for identifying insider threats within an organization is provided. The approach constructs an internal connectivity graph to identify communities of hosts/users, and checks for abnormal behavior relative to past behaviors." ;
    :kb-author "David Lopes Pegna; Himanshu Mhatre; Oliver Brdiczka" ;
    :kb-mitre-analysis "This patent describes techniques for detecting insider attacks. Network packet capture data is collected and stored for processing. Metadata is extracted for each communication session on the organization's network and includes information on source and destination host destination port, number of connection attempts, size of data exchanged, duration and time of the communication. The metadata is used to build a connectivity graph of the network and identify groups of similar hosts that exhibit similar behavior. For each group of similar behavior identified, a baseline behavior pattern profile is developed. Network activity for a host within a group that deviates over a threshold from the baseline behavior patterns is identified as suspicious and an alert is generated." ;
    :kb-organization "VECTRA NETWORKS Inc" ;
    :kb-reference-of :NetworkTrafficCommunityDeviation,
        :ProtocolMetadataAnomalyDetection ;
    :kb-reference-title "System for implementing threat detection using daily network traffic community outliers" .

:Reference-SystemForImplementingThreatDetectionUsingThreatAndRiskAssessmentOfAsset-actorInteractions_VECTRANETWORKSInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - System for implementing threat detection using threat and risk assessment of asset-actor interactions - VECTRA NETWORKS Inc" ;
    :has-link "https://patents.google.com/patent/US20160191559A1"^^xsd:anyURI ;
    :kb-abstract "Disclosed is an approach to detect insider threats, by tracking unusual access activity for a specific user or computer with regard to accessing key assets over time. In this way, malicious activity and the different preparation phases of attacks can be identified." ;
    :kb-author "Himanshu Mhatre; David Lopes Pegna; Oliver Brdiczka" ;
    :kb-mitre-analysis "The patent describes an insider threat detection system that analyzes packets sent within a network to identify and isolate malicious behavior. Current network traffic is collected and developed into a baseline that establishes the amount of data sent and received between a specific asset and a host. Current data transfer values are then compared with the baseline to identify anomalies." ;
    :kb-organization "VECTRA NETWORKS Inc" ;
    :kb-reference-of :UserDataTransferAnalysis ;
    :kb-reference-title "System for implementing threat detection using threat and risk assessment of asset-actor interactions" .

:Reference-SystemsAndMethodsForDetectingAnd_orHandlingTargetedAttacksInTheEmailChannel_GraphusInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Systems and methods for detecting and/or handling targeted attacks in the email channel - Graphus Inc" ;
    :has-link "https://patents.google.com/patent/US20170324767A1"^^xsd:anyURI ;
    :kb-abstract "Techniques for detecting and/or handling target attacks in an enterprise's email channel are provided. The techniques include receiving aspects of an incoming email message addressed to a first email account holder, selecting a recipient interaction profile and/or a sender profile from a plurality of predetermined profiles stored in a memory based upon the received properties, determining a message trust rating associated with the incoming email message based upon the incoming email message and the selected recipient interaction profile and/or the sender profile; and generating an alert identifying the incoming email message as including a security risk based upon the determined message trust rating. The recipient interaction profile includes information associating the first email account holder and a plurality of email senders from whom email messages have previously been received for the first email account holder, and the sender profile includes information associating a sender of the incoming email message with characteristics determined from a plurality of email messages previously received from the sender." ;
    :kb-author "Manoj Kumar Srivastava" ;
    :kb-mitre-analysis """The patent describes using sender trust rating and sender MTA trust rating as an indicator of level of email security risk.

### Sender Reputation explanation
This patent includes Sender Reputation because it describes sender trust rating being used as an indicator of the level of security risk and/or trust level associated with an email sender. The sender trust rating may be determined based on one or more of:

* length of time sender has known the enterprise
* number of recipients in the enterprise the sender interacts with
* sender vs. enterprise originated message ratio
* sender messages open vs. not-open ratio
* number of emails received from this sender
* number of emails replied for this sender
* number of emails from this sender not opened
* number of emails from this sender not opened that contain an attachment
* number of emails from this sender not opened that contain a URL
* number of emails sent to this sender
* number of email replies received from this sender

Based on the trust rating an alert is generated identifying the incoming email message as a security risk.

### Sender MTA Reputation explanation
This patent includes Sender MTA Reputation because it describes sender MTA trust rating as an indicator of the level of security risk and/or trust level associated with a sender MTA. The trust rating may be determined based on one or more of:

* length of time MTA has interacted with the enterprise
* number of sender domains sending emails from the MTA
* number of recipients in the enterprise the MTA sends emails to
* number of emails received from this MTA
* number of email replies received from this MTA

Based on the trust rating an alert is generated identifying the incoming email message as a security risk.""" ;
    :kb-organization "Graphus Inc" ;
    :kb-reference-of :SenderMTAReputationAnalysis,
        :SenderReputationAnalysis ;
    :kb-reference-title "Systems and methods for detecting and/or handling targeted attacks in the email channel" .

:Reference-SystemsAndMethodsForDetectingCredentialTheft_SymantecCorp a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Systems and methods for detecting credential theft - Symantec Corp" ;
    :has-link "https://patents.google.com/patent/US10162962B1"^^xsd:anyURI ;
    :kb-abstract "The disclosed computer-implemented method for detecting credential theft may include (i) monitoring a secured computing system's credential store that may include at least one sensitive credential that may be used to facilitate authentication of a user that is attempting to access the secured computing system, (ii) gathering, while monitoring the credential store, primary evidence of an attempted theft of the sensitive credential from the credential store, (iii) gathering corroborating evidence of the attempted theft of the sensitive credential, and (iv) performing a security action in response to gathering the primary evidence and the corroborating evidence of the attempted theft. The primary evidence of the attempted theft of the sensitive credential may include evidence of any suspicious access of the sensitive credential from the credential store that occurs outside of a procedure of authenticating the user. Various other methods, systems, and computer-readable media are also disclosed." ;
    :kb-author "Adam Glick; Brian Schlatter; Feng Li; Akshata Krishnamoorthy Rao" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Symantec Corp" ;
    :kb-reference-of :CredentialCompromiseScopeAnalysis ;
    :kb-reference-title "Systems and methods for detecting credential theft" ;
    :todo "MITRE Analysis was not found" .

:Reference-TamperProofMutatingSoftware_ARXANTECHNOLOGIESInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Tamper proof mutating software - ARXAN TECHNOLOGIES Inc" ;
    :has-link "https://patents.google.com/patent/US9262600B2/en?oq=US9262600B2"^^xsd:anyURI ;
    :kb-abstract "System and method is disclosed for protecting client software running on a client computer from tampering using a secure server. Prior to or independent of executing the client software, the system integrates self-protection into the client software; removes functions from the client software for execution on the server; develops client software self-protection updates; and periodically distributes the updates. During execution of the client software, the system receives an initial request from the client computer for execution of the removed function; verifies the initial request; and cooperates with the client computer in execution of the client software if verification is successful. If verification is unsuccessful, the system can attempt to update the client software on the client computer; and require a new initial request. Client software can be updated on occurrence of a triggering event. Communications can be encrypted, and the encryption updated. Authenticating checksums can be used for verification." ;
    :kb-author "Kevin Dale Morgan" ;
    :kb-mitre-analysis " " ;
    :kb-organization "ARXAN TECHNOLOGIES Inc" ;
    :kb-reference-of :ProcessCodeSegmentVerification ;
    :kb-reference-title "Tamper proof mutating software" ;
    :todo "MITRE Analysis was not found" .

:Reference-TCGTrustedAttestationProtocolUseCasesForTPMFamilies1.2And2.0AndDICE a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - TCG Trusted Attestation Protocol Use Cases for TPM Families 1.2 and 2.0 and DICE" ;
    :has-link "https://trustedcomputinggroup.org/wp-content/uploads/TCG_TNC_TAP_Use_Cases_v1r0p35_published.pdf"^^xsd:anyURI ;
    :kb-reference-title "TCG Trusted Attestation Protocol Use Cases for TPM Families 1.2 and 2.0 and DICE" .

:Reference-Technical_Specifications_for_Construction_and_Management_of_Sensitive_Compartmented_Information_Facilities a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - Technical Specifications for Construction and Management of Sensitive Compartmented Information Facilities" ;
    :has-link "https://www.dni.gov/files/Governance/IC-Tech-Specs-for-Const-and-Mgmt-of-SCIFs-v15.pdf"^^xsd:anyURI ;
    :kb-author "National Counterintelligence and Security Center" ;
    :kb-reference-of :RFShielding ;
    :kb-reference-title "Technical Specifications for Construction and Management of Sensitive Compartmented Information Facilities" .

:Reference-TechniquesForImpedingAndDetectingNetworkThreats_VerisignInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Techniques for impeding and detecting network threats - Verisign Inc" ;
    :has-link "https://patents.google.com/patent/US10904273B1/"^^xsd:anyURI ;
    :kb-abstract """Infinite DNS decoy trap resource to catch threats scanning for network resources to attack.

In various embodiments, a name server transmits a canonical name as resolution to another canonical name. In operation, when a resource name is requested for resolution, a determination is made that the resource name corresponds to a trap resource name. A first canonical name is transmitted as resolution to the trap resource name. The first canonical name is requested for resolution, and a second canonical name is transmitted as resolution. By providing trap canonical names as resolutions to trap canonical names, unauthorized software making the resolution requests is kept occupied with requesting resolution of canonical name after canonical name, impeding the ability of the unauthorized software from traversing a network.""" ;
    :kb-author "Ben McCarty, James Graham" ;
    :kb-mitre-analysis "MITRE Analysis was not found." ;
    :kb-organization "Verisign Inc" ;
    :kb-reference-of :DecoyNetworkResource ;
    :kb-reference-title "Techniques for impeding and detecting network threats" .

:Reference-TenablePassiveNetworkMonitoring a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Tenable Passive Network Monitoring" ;
    :has-link "https://www.tenable.com/sites/default/files/solution-briefs/SB-Passive-Network-Monitoring.pdf"^^xsd:anyURI ;
    :kb-abstract "Tenable Nessus® Network Monitor (NNM), a passive monitoring sensor, continuously discovers active assets on the network and assesses them for vulnerabilities. NNM is based on patented network discovery and vulnerability analysis technology that continuously monitors and profiles non-intrusively. It monitors IPv4, IPv6 and mixed network traffic at the packet layer to determine topology, services and vulnerabilities." ;
    :kb-organization "Tenable" ;
    :kb-reference-of :PassiveLogicalLinkMapping,
        :PassivePhysicalLinkMapping ;
    :kb-reference-title "Tenable Passive Network Monitoring" .

:Reference-Testing_Metrics_for_Password_Creation_Policies_by_Attacking_Large_Sets_of_Revealed_Passwords a :AcademicPaperReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Testing Metrics for Password Creation Policies by Attacking Large Sets of Revealed Passwords" ;
    :has-link "https://www.cs.umd.edu/~jkatz/security/downloads/passwords_revealed-weir.pdf"^^xsd:anyURI ;
    :kb-author "Matt Weir, Sudhir Aggarwal, Michael Collins, Henry Stern" ;
    :kb-reference-of :StrongPasswordPolicy ;
    :kb-reference-title "Testing Metrics for Password Creation Policies by Attacking Large Sets of Revealed Passwords" .

:Reference-ThePyramidOfPain-DavidBianco a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - The Pyramid of Pain - David Bianco" ;
    :has-link "http://detect-respond.blogspot.com/2013/03/the-pyramid-of-pain.html"^^xsd:anyURI ;
    :kb-abstract "This article identifies progressive levels of adversary difficulty encountered for various types of indicators." ;
    :kb-author "David Bianco" ;
    :kb-reference-of :IdentifierActivityAnalysis ;
    :kb-reference-title "The Pyramid of Pain" .

:Reference-ThreatDetectionForReturnOrientedProgramming_CrowdstrikeInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Threat detection for return oriented programming - Crowdstrike Inc" ;
    :has-link "https://patents.google.com/patent/US20140075556A1"^^xsd:anyURI ;
    :kb-abstract "This disclosure describes, in part, techniques for detecting security exploits associated with return-oriented programming. The techniques include determining that a retrieved count is indicative of malicious activity, such as return oriented programming. The count may be retrieved from a processor performance counter of prediction mismatches, the prediction mismatches resulting from comparisons of a call stack of a computing device and of a shadow call stack maintained by a processor of the computing device. The techniques further include performing at least one security response action in response to determining that the count indicates malicious activity." ;
    :kb-author "Georg WICHERSKI" ;
    :kb-mitre-analysis "This patent describes a technique for detecting shellcode security exploits. A call stack of a computing device is compared with a shadow call stack maintained by a processor of the computing device since a return oriented program may only be able to control or spoof the call stack and not the shadow call stack. Mismatches between the two are counted and if the number of mismatches exceeds a certain threshold it is an indication of malicious activity and a security response action is performed." ;
    :kb-organization "Crowdstrike Inc" ;
    :kb-reference-of :ShadowStackComparisons ;
    :kb-reference-title "Threat detection for return oriented programming" .

:Reference-ThreatDetectionThroughTheAccumulatedDetectionOfThreatCharacteristics_SophosLtd a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Threat detection through the accumulated detection of threat characteristics - Sophos Ltd" ;
    :has-link "https://patents.google.com/patent/US9104864B2/en?oq=US-9104864-B2"^^xsd:anyURI ;
    :kb-abstract "Embodiments of the present disclosure provide for improved capabilities in the detection of malware, where malware threats are detected through the accumulated identification of threat characteristics for targeted computer objects. Methods and systems include dynamic threat detection providing a first database that correlates a plurality of threat characteristics to a threat, wherein a presence of the plurality of the threat characteristics confirms a presence of the threat; detecting a change event in a computer run-time process; testing the change event for a presence of one or more of the plurality of characteristics upon detection of the change event; storing a detection of one of the plurality of characteristics in a second database that accumulates detected characteristics for the computer run-time process; and identifying the threat when each one of the plurality of characteristics appears in the second database." ;
    :kb-author "Clifford Penton; Irene Michlin" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Sophos Ltd" ;
    :kb-reference-of :ProcessCodeSegmentVerification ;
    :kb-reference-title "Threat detection through the accumulated detection of threat characteristics" ;
    :todo "MITRE Analysis was not found" .

:Reference-TivoliApplicationDependencyDiscoverManager7_3_0DependenciesBetweenResources a owl:NamedIndividual,
        :UserManualReference ;
    rdfs:label "Reference - Tivoli Application Dependency Discovery Manager 7.3.0 - Dependencies between resources" ;
    :has-link "https://www.ibm.com/docs/en/taddm/7.3.0?topic=model-dependencies-between-resources"^^xsd:anyURI ;
    :kb-organization "IBM" ;
    :kb-reference-of :DataExchangeMapping,
        :ServiceDependencyMapping,
        :SystemDependencyMapping ;
    :kb-reference-title "Tivoli Application Dependency Discovery Manager 7.3.0 - Dependencies between resources" .

:Reference-TokenlessBiometricTransactionAuthorizationMethodAndSystem a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Tokenless biometric transaction authorization method and system" ;
    :has-link "https://patents.google.com/patent/US5870723A/"^^xsd:anyURI ;
    :kb-abstract "A method and system for tokenless authorization of commercial transactions between a buyer and a seller using a computer system. A transaction is proposed by a seller, and the buyer signals his acceptance by entering his personal authentication information comprising a PIN and at least one biometric sample, forming a commercial transaction message. The commercial transaction message is forwarded to the computer system, where the computer system compares the personal authentication information in the commercial transaction message with previously registered buyer biometric samples. If the computer system successfully identifies the buyer, a financial account of the buyer is debited and a financial account of the seller is credited, and the results of the transaction are presented to both buyer and seller. As a result of the invention, a buyer can conduct commercial transactions without having to use any tokens such as portable man-made memory devices such as smartcards or swipe cards. The invention allows buyers to quickly select one of a group of different financial accounts from which to transfer funds. The invention further indicates to the user that the authentic computer system was accessed by the use of a private code that is returned to the buyer after the identification is complete. The invention additionally permits an authorized buyer to alert authorities in the event of an emergency, such as when a transaction is coerced." ;
    :kb-organization "SmartTouch Inc" ;
    :kb-reference-of :BiometricAuthentication ;
    :kb-reference-title "Tokenless biometric transaction authorization method and system" .

:Reference-Tripwire a owl:NamedIndividual,
        :UserManualReference ;
    rdfs:label "Reference - Tripwire" ;
    :has-link "https://linux.die.net/man/8/tripwire" ;
    :kb-reference-of :FileIntegrityMonitoring ;
    :kb-reference-title "Reference - Tripwire" .

:Reference-TrustedAttestationProtocolUseCases a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - Trusted Attestation Protocol Use Cases" ;
    :has-link "https://trustedcomputinggroup.org/wp-content/uploads/TCG_TNC_TAP_Use_Cases_v1r0p35_published.pdf"^^xsd:anyURI ;
    :kb-article """## Document Abstract
This specification defines the Trusted Platform Module (TPM) a device that enables trust in computing platforms in general. It is broken into parts to make the role of each part clear. All parts are required in order to constitute a complete standard. For a complete definition of all requirements necessary to build a TPM, the designer will need to use the appropriate platform-specific specification to understand all of the requirements for a TPM in a specific application or make appropriate choices as an implementer. Those wishing to create a TPM need to be aware that this specification does not provide a complete picture of the options and commands necessary to implement a TPM. To implement a TPM the designer needs to refer to the relevant platform-specific specification to understand the options and settings required for a TPM in a specific type of platform or make appropriate choices as an implementer.""" ;
    :kb-reference-title "Trusted Attestation Protocol Use Cases" .

:Reference-TrustedCommunicationsWithChildProcesses_MicrosoftTechnologyLicensingLLC a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Trusted Communications With Child Processes - Microsoft Technology Licensing LLC" ;
    :has-link "https://patents.google.com/patent/US20120174210A1"^^xsd:anyURI ;
    :kb-abstract "A method to identify a child process to a parent process in an operating system includes obtaining a token and login identifier from the operating system. The parent process creates a remote procedure call communications endpoint to communicate with the child process. Thereafter, a child process is spawned by the parent process. A child-initiated request to communicate with the parent process is then received by the parent process. In order to verify the identity of the child-initiated request, the parent process impersonates the child process and receives as identifier that identifies the requestor child process. The requestor process identifier and the spawned child identifier are compared. Based on the comparison, the parent process responds to the child-initiated request. In another embodiment, process identifiers are used by the parent process to verify the identity of a child process the requests communication with the parent process." ;
    :kb-author "Kedarnath Atmaram Dubhashi, Jonathan D. Schwartz, Sambavi Muthukrishnan, Simon Skaria" ;
    :kb-mitre-analysis "This patent describes a technique for detecting malicious processes that claim to be the child process of a legitimate parent process. During the spawning of a child process, a child process identifier is generated. The child process identifier is a unique identifier that can be used to identify a child process. The child process identifier is transmitted by the security system of the operating system to the parent process. The parent process keeps track of the child process identifier. When a new child-initiated communications request is received by the parent process, the parent process checks if the requesting child process identifier and the child process identifier that the parent process is tracking are the same. If the identifiers are not the same, the parent process refuses the request." ;
    :kb-organization "Microsoft Technology Licensing LLC" ;
    :kb-reference-title "Trusted Communications With Child Processes" .

:Reference-UACBypass_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2019-04-001: UAC Bypass - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2019-04-001/"^^xsd:anyURI ;
    :kb-abstract "Bypassing user account control (UAC Bypass) is generally done by piggybacking on a system process that has auto-escalate privileges. This analytic looks to detect those cases as described by the open-source UACME tool." ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :ProcessLineageAnalysis ;
    :kb-reference-title "CAR-2019-04-001: UAC Bypass" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-UEFIPlatformInitialization-Specification a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - UEFI Platform Initialization (PI) Specification" ;
    :has-link "https://uefi.org/sites/default/files/resources/PI_Spec_1_7_A_final_May1.pdf"^^xsd:anyURI ;
    :kb-reference-of :BootloaderAuthentication ;
    :kb-reference-title "UEFI Platform Initialization (PI) Specification" .

:Reference-UnifiedArchitectureFrameworkUAF a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - Unified Architecture Framework (UAF)" ;
    :has-link "https://www.omg.org/spec/UAF/"^^xsd:anyURI ;
    :kb-abstract "UAF is an OMG standard that assists in development of architectural descriptions in commercial industry firms, federal government agencies and defense organizations. UAF has a variety of use cases from Enterprise and Mission architecting, to System of Systems (SoS) and Cyber-physical Systems engineering, as well as being an enabler for Digital Transformation efforts and for Department of Defense Architecture Framework (DoDAF) and NATO Architecture Framework (NAF) modeling. Architectural Descriptions in UAF are aligned with ISO/IEC/IEEE 42010:2011, Systems and software engineering -- Architecture description. " ;
    :kb-organization "OMG" ;
    :kb-reference-of :DataExchangeMapping,
        :OperationalActivityMapping,
        :OperationalDependencyMapping,
        :OrganizationMapping,
        :ServiceDependencyMapping,
        :SystemDependencyMapping ;
    :kb-reference-title "Unified Architecture Framework (UAF)" .

:Reference-USBFilterForHubMaliciousCodePreventionSystem a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - USB filter for hub malicious code prevention system" ;
    :has-link "https://patents.google.com/patent/US9990325B2/en"^^xsd:anyURI ;
    :kb-abstract "The present invention relates generally to computer systems, and more specifically, to a universal serial bus (USB) filter hub for a computer system." ;
    :kb-author "Steven R Hetzler, Daniel F Smith" ;
    :kb-organization "International Business Machines Corp" ;
    :kb-reference-of :IOPortRestriction ;
    :kb-reference-title "Universal serial bus (USB) filter hub malicious code prevention system" .

:Reference-UseDNSPolicyForApplyingFiltersOnDNSQueries a owl:NamedIndividual,
        :UserManualReference ;
    rdfs:label "Reference - Use DNS Policy for Applying Filters on DNS Queries" ;
    :has-link "https://docs.microsoft.com/en-us/windows-server/networking/dns/deploy/apply-filters-on-dns-queries"^^xsd:anyURI ;
    :kb-organization "Microsoft" ;
    :kb-reference-title "Use DNS Policy for Applying Filters on DNS Queries" .

:Reference-UseOfAnApplicationControllerToMonitorAndControlSoftwareFileAndApplicationEnvironments_SophosLtd a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Use of an application controller to monitor and control software file and application environments - Sophos Ltd" ;
    :has-link "https://patents.google.com/patent/US20180032727A1"^^xsd:anyURI ;
    :kb-abstract "In embodiments of the present invention, a framework for an extensible, file-based security system is described for determining an appropriate application, application environment, and/or access or security control measure based at least in part on a file's reputation. In response to the selection of a file, an application controller may be used to select a software application from two or more software applications to open the selected file, based at least in part on the selected file's reputation. If launched, a software application may be configured to open the file in an environment, such as a virtual machine, quarantined environment, and the like, that is appropriate for the file based at least in part on the reputation information. A software application may be a secure software application configured to manage secure files, or an insecure software application configured to manage insecure files. The selected file, and communications relating to the selected software application, may be managed according to the selected software application's secure or insecure configuration. Further, the selected software application may associate reputation information with all files that are modified and/or created by the selected software application, including at least in part, reputation information matching that of the selected file." ;
    :kb-author "Andrew J. Thomas" ;
    :kb-mitre-analysis "This patent describes received files being open in an environment such as a virtual machine or quarantined environment to associate file reputation information that determines if a file is a threat." ;
    :kb-organization "Sophos Ltd" ;
    :kb-reference-of :DynamicAnalysis ;
    :kb-reference-title "Use of an application controller to monitor and control software file and application environments" .

:Reference-UserActivityFromClearingEventLogs_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2016-04-002: User Activity from Clearing Event Logs - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2016-04-002/"^^xsd:anyURI ;
    :kb-abstract "It is unlikely that event log data would be cleared during normal operations, and it is likely that malicious attackers may try to cover their tracks by clearing an event log. When an event log gets cleared, it is suspicious. Alerting when a \"Clear Event Log\" is generated could point to this intruder technique. Centrally collecting events has the added benefit of making it much harder for attackers to cover their tracks. Event Forwarding permits sources to forward multiple copies of a collected event to multiple collectors, thus enabling redundant event collection. Using a redundant event collection model can minimize the single point of failure risk." ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :SystemFileAnalysis ;
    :kb-reference-title "CAR-2016-04-002: User Activity from Clearing Event Logs" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-UserActivityFromStoppingWindowsDefensiveServices_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2016-04-003: User Activity from Stopping Windows Defensive Services - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2016-04-003/"^^xsd:anyURI ;
    :kb-abstract "Spyware and malware remain a serious problem and Microsoft developed security services, Windows Defender and Windows Firewall, to combat this threat. In the event Windows Defender or Windows Firewall is turned off, administrators should correct the issue immediately to prevent the possibility of infection or further infection and investigate to determine if caused by crash or user manipulation." ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :SystemDaemonMonitoring ;
    :kb-reference-title "CAR-2016-04-003: User Activity from Stopping Windows Defensive Services" ;
    :todo "MITRE Analysis was not found" .

:Reference-UseRkillToStopMalwareProcesses-Ghacks.net a owl:NamedIndividual,
        :TechniqueReference ;
    rdfs:label "Reference - Use Rkill to Stop Malware Processes - ghacks.net" ;
    :has-link "https://www.ghacks.net/2011/07/29/use-rkill-to-stop-malware-processes/"^^xsd:anyURI ;
    :kb-author "Melanie Gross" ;
    :kb-organization "ghacks.net" ;
    :kb-reference-of :ProcessTermination ;
    :kb-reference-title "Use Rkill to Stop Malware Processes" .

:Reference-UserLoggedInToMultipleHosts_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2013-02-012: User Logged in to Multiple Hosts - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2013-02-012/"^^xsd:anyURI ;
    :kb-abstract """Most users use only one or two machines during the normal course of business. User accounts that log in to multiple machines, especially over a short period of time, may be compromised. Remote logins among multiple machines may be an indicator of Lateral Movement.

Certain users will likely appear as being logged into several machines and may need to be "whitelisted." Such users would include network admins or user names that are common to many hosts.""" ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :AuthenticationEventThresholding,
        :AuthorizationEventThresholding ;
    :kb-reference-title "CAR-2013-02-012: User Logged in to Multiple Hosts" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-UserLoginActivityMonitoring_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2013-10-001: User Login Activity Monitoring - MITRE" ;
    :has-link "https://car.mitre.org/analytics/CAR-2013-10-001/"^^xsd:anyURI ;
    :kb-abstract """Monitoring logon and logoff events for hosts on the network is very important for situational awareness. This information can be used as an indicator of unusual activity as well as to corroborate activity seen elsewhere.

Could be applied to a number of different types of monitoring depending on what information is desired. Some use cases include monitoring for all remote connections and building login timelines for users. Logon events are Windows Event Code 4624 for Windows Vista and above, 518 for pre-Vista. Logoff events are 4634 for Windows Vista and above, 538 for pre-Vista.""" ;
    :kb-author "MITRE" ;
    :kb-organization "MITRE" ;
    :kb-reference-of :AuthenticationEventThresholding ;
    :kb-reference-title "CAR-2013-10-001: User Login Activity Monitoring" ;
    :todo "MITRE Analysis was not found",
        "No section headers were given (MITRE Analysis or Document Abstract); all text placed in kb-abstract section." .

:Reference-UsingSpanningTreeProtocolSTPToEnhanceLayer2NetworkTopologyMaps a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Using spanning tree protocol (STP) to enhance layer-2 topology maps" ;
    :has-link "https://patents.google.com/patent/US8045488B2"^^xsd:anyURI ;
    :kb-abstract "Spanning Tree Protocol (STP) data is obtained via network switch (SNMP) queries to enhance identification of switch-to-switch links in Layer-2 mapping. In particular, by analyzing the STP data, ambiguity in determining switch uplink ports may be reduced. Specifically, the STP data can be used in conjunction with other topography data to provide Layer-2 connectivity for nodes on a network topology. Layer-2 address mapping tables are collected from a topology mapping, and STP data is collected, along with address translation tables (ARP) tables. Using this information, switches are identified using Layer-2 address tables. The STP data can be correlated by comparing data in switches, identifying switch ports directly connected to other switch ports, and eliminating direct switch-to-switch port connections from consideration for further Layer-2 node mappings." ;
    :kb-author "Michael Jon Swan" ;
    :kb-organization "SolarWinds Worldwide LLC" ;
    :kb-reference-of :ActivePhysicalLinkMapping ;
    :kb-reference-title "Using spanning tree protocol (STP) to enhance layer-2 topology maps" .

:Reference-VirtualizedProcessIsolation_AdvancedMicroDevicesInc a owl:NamedIndividual,
        :PatentReference ;
    rdfs:label "Reference - Virtualized process isolation - Advanced Micro Devices Inc" ;
    :has-link "https://patents.google.com/patent/US20180081829A1"^^xsd:anyURI ;
    :kb-abstract "Systems, apparatuses, and methods for implementing virtualized process isolation are disclosed. A system includes a kernel and multiple guest VMs executing on the system's processing hardware. Each guest VM includes a vShim layer for managing kernel accesses to user space and guest accesses to kernel space. The vShim layer also maintains a separate set of page tables from the kernel page tables. In one embodiment, data in the user space is encrypted and the kernel goes through the vShim layer to access user space data. When the kernel attempts to access a user space address, the kernel exits and the vShim layer is launched to process the request. If the kernel has permission to access the address, the vShim layer copies the data to a region in kernel space and then returns execution to the kernel." ;
    :kb-author "David A. Kaplan" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Advanced Micro Devices Inc" ;
    :kb-reference-of :Hardware-basedProcessIsolation ;
    :kb-reference-title "Virtualized process isolation" ;
    :todo "MITRE Analysis was not found" .

:Reference-Web-BasedEnterpriseManagement a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - Web-Based Enterprise Management" ;
    :has-link "https://www.dmtf.org/standards/wbem"^^xsd:anyURI ;
    :kb-organization "Distributed Management Task Force (DMTF)" ;
    :kb-reference-of :ConfigurationInventory,
        :HardwareComponentInventory,
        :NetworkNodeInventory,
        :SoftwareInventory ;
    :kb-reference-title "Web-Based Enterprise Management" .

:Reference-WebAuthentication_AnAPIForAccessingPublicKeyCredentials%0ALevel2 a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label """Reference - Web Authentication: An API for accessing Public Key Credentials
Level 2""" ;
    :has-link "https://www.w3.org/TR/webauthn-2/"^^xsd:anyURI ;
    :kb-abstract "This specification defines an API enabling the creation and use of strong, attested, scoped, public key-based credentials by web applications, for the purpose of strongly authenticating users. Conceptually, one or more public key credentials, each scoped to a given WebAuthn Relying Party, are created by and bound to authenticators as requested by the web application. The user agent mediates access to authenticators and their public key credentials in order to preserve user privacy. Authenticators are responsible for ensuring that no operation is performed without user consent. Authenticators provide cryptographic proof of their properties to Relying Parties via attestation. This specification also describes the functional model for WebAuthn conformant authenticators, including their signature and attestation functionality." ;
    :kb-author "W3C" ;
    :kb-reference-of :CredentialTransmissionScoping ;
    :kb-reference-title """Web Authentication: An API for accessing Public Key Credentials
Level 2""" .

:Reference-WhatIsNX_XDFeature_RedHat a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - What is NX/XD feature?" ;
    :has-link "https://access.redhat.com/solutions/2936741"^^xsd:anyURI ;
    :kb-abstract """What is NX/XD feature ?
How to check whether NX/XD is enabled ?
How to enable or disable NX/XD?

NX/XD is a hardware cpu feature which is provided in almost all the hardware. Some BIOS has advanced option of enabling or disabling it.
NX stands for No eXecute and XD stands for eXecute Disable. Both are same and is a technology used in processors to prevent execution of certain types of code.""" ;
    :kb-author "Red Hat" ;
    :kb-mitre-analysis " " ;
    :kb-organization "Red Hat" ;
    :kb-reference-of :ProcessSegmentExecutionPrevention ;
    :kb-reference-title "What is NX/XD feature?" ;
    :todo "MITRE Analysis was not found",
        "No authors provided for reference" .

:Reference-Windows10STIG a :GuidelineReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - Windows 10 STIG" ;
    :has-link "https://www.stigviewer.com/stig/windows_10/"^^xsd:anyURI ;
    :kb-abstract "Windows 10 STIG guidance." ;
    :kb-reference-of :ApplicationConfigurationHardening ;
    :kb-reference-title "Windows 10 Security Technical Implementation Guide" .

:Reference-Windows-Management-Infrastructure a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - Windows Management Infrastructure (MI)" ;
    :has-link "https://docs.microsoft.com/en-us/previous-versions/windows/desktop/wmi_v2/windows-management-infrastructure"^^xsd:anyURI ;
    :kb-organization "Microsoft" ;
    :kb-reference-of :ConfigurationInventory,
        :HardwareComponentInventory,
        :NetworkNodeInventory,
        :SoftwareInventory ;
    :kb-reference-title "Windows Management Infrastructure" .

:Reference-Windows-Management-Instrumentation a owl:NamedIndividual,
        :SpecificationReference ;
    rdfs:label "Reference - Windows Management Instrumentation (WMI)" ;
    :has-link "https://docs.microsoft.com/en-us/windows/win32/wmisdk/wmi-start-page"^^xsd:anyURI ;
    :kb-organization "Microsoft" ;
    :kb-reference-of :ConfigurationInventory,
        :HardwareComponentInventory,
        :NetworkNodeInventory,
        :SoftwareInventory ;
    :kb-reference-title "Windows Management Instrumentation" .

:Reference-WindowsRemoteManagement_WinRM_MITRE a :ExternalKnowledgeBase,
        owl:NamedIndividual ;
    rdfs:label "Reference - CAR-2014-11-006: Windows Remote Management (WinRM) - MITRE" ;
    :has-link ""^^xsd:anyURI ;
    :kb-abstract " " ;
    :kb-author "MITRE" ;
    :kb-mitre-analysis " " ;
    :kb-organization "MITRE" ;
    :kb-reference-of :AdministrativeNetworkActivityAnalysis ;
    :kb-reference-title "CAR-2014-11-006: Windows Remote Management (WinRM)" ;
    :todo "Could not determine reference type; TechniqueReference class used instead",
        "Document Abstract was not found",
        "MITRE Analysis was not found",
        "No URL provided for reference" .

:Reference-www.biometric-solutions.com_keystroke-dynamics a :InternetArticleReference,
        owl:NamedIndividual ;
    rdfs:label "Reference - http://www.biometric-solutions.com/keystroke-dynamics.html - biometric-solutions.com" ;
    :has-link "http://www.biometric-solutions.com/keystroke-dynamics.html"^^xsd:anyURI ;
    :kb-abstract """Keystroke dynamics or typing dynamics refers to the automated method of identifying or confirming the identity of an individual based on the manner and the rhythm of typing on a keyboard. Keystroke dynamics is a behavioral biometric, this means that the biometric factor is 'something you do'.

Already during the second world war a technique known as The Fist of the Sender was used by military intelligence to distinguish based on the rhythm whether a morse code message was send by ally or enemy. These days each household has at least one computer keyboard, making keystroke dynamics the easiest biometric solution to implement in terms of hardware.

With keystroke dynamics the biometric template used to identify an individual is based on the typing pattern, the rhythm and the speed of typing on a keyboard. The raw measurements used for keystroke dynamics are dwell time and flight time.""" ;
    :kb-author "Biometric Solutions" ;
    :kb-organization "Biometric Solutions" ;
    :kb-reference-of :InputDeviceAnalysis ;
    :kb-reference-title "Keystroke Dynamics" ;
    :todo "MITRE Analysis was not found" .

:RegOpenKeyA a :GetSystemConfigValue,
        owl:NamedIndividual .

:RegOpenKeyExA a :GetSystemConfigValue,
        owl:NamedIndividual .

:RegOpenKeyExW a :GetSystemConfigValue,
        owl:NamedIndividual .

:RegOpenKeyTransactedA a :GetSystemConfigValue,
        owl:NamedIndividual .

:RegOpenKeyTransactedW a :GetSystemConfigValue,
        owl:NamedIndividual .

:RegOpenKeyW a :GetSystemConfigValue,
        owl:NamedIndividual .

:RegSetKeyValueA a owl:NamedIndividual,
        :SetSystemConfigValue .

:RegSetKeyValueW a owl:NamedIndividual,
        :SetSystemConfigValue .

:RegSetValueA a owl:NamedIndividual,
        :SetSystemConfigValue .

:RegSetValueExA a owl:NamedIndividual,
        :SetSystemConfigValue .

:RegSetValueExW a owl:NamedIndividual,
        :SetSystemConfigValue .

:RegSetValueW a owl:NamedIndividual,
        :SetSystemConfigValue .

:RubyScriptFile a :ExecutableScript,
        owl:NamedIndividual ;
    rdfs:label "Ruby Script File" .

:step-1 a owl:NamedIndividual,
        :Step ;
    rdfs:label "Step 1 - Copy Token" ;
    :invokes :CopyToken ;
    :next :step-2 .

:step-2 a owl:NamedIndividual,
        :Step ;
    rdfs:label "Step 2 - Impersonate User" ;
    :creates :Authentication ;
    :invokes :ImpersonateUser .

:WebSocketURL a owl:NamedIndividual,
        :URL ;
    rdfs:label "Web Socket URL" .

:WHOISCompatibleDomainRegistration a :DomainRegistration,
        owl:NamedIndividual ;
    rdfs:label "WHOIS Compatible Domain Registration" .

:WindowsBatchFile a :ExecutableScript,
        owl:NamedIndividual ;
    rdfs:label "Windows Batch File" .

:WindowsProcess a owl:NamedIndividual,
        :Process ;
    rdfs:label "Windows Process" .

:X86CodeSegment a :ImageCodeSegment,
        owl:NamedIndividual,
        :ProcessCodeSegment ;
    rdfs:label "X86 Code Segment" .

### Axioms

[] a owl:AllDisjointClasses ;
    owl:members (
            :BooleanExpressionMatching
            :EquivalenceMatching
            :StringPatternMatching ) .

[] a owl:AllDisjointClasses ;
    owl:members (
            :Classifying
            :Forecasting
            :Generation
            :Matching
            :Summarizing ) .

[] a owl:AllDisjointClasses ;
    owl:members (
            :Clustering
            :Grouping
            :Histogramming ) .

[] a owl:AllDisjointClasses ;
    owl:members (
            :CoefficientOfVariation
            :InterquartileRange
            :MeanAbsoluteDeviation
            :MedianAbsoluteDeviation
            :Range
            :StandardDeviation
            :Variance ) .

[] a owl:AllDisjointClasses ;
    owl:members (
            :CramersV
            :GoodmanAndKruskalsGamma
            :KendallsRankCorrelationCoefficient
            :PearsonsCorrelationCoefficient
            :PhiCoefficient
            :Point-biserialCorrelationCoefficient
            :RankCorrelationCoefficient
            :SomersD
            :SpearmansRankCorrelationCoefficient ) .

[] a owl:AllDisjointClasses ;
    owl:members (
            :D3FENDUseCase
            :TargetAudience
            :UseCaseGoal
            :UseCasePrerequisite
            :UseCaseProcedure
            :UseCaseStep ) .

[] a owl:AllDisjointClasses ;
    owl:members (
            :GeometricMean
            :HarmonicMean
            :Mean
            :Median
            :Mode
            :TrimmedMean
            :WeightedMean ) .

[] a owl:AllDisjointClasses ;
    owl:members (
            :Kurtosis
            :Moments
            :Skewness ) .

[] a owl:AllDisjointClasses ;
    owl:members (
            :LevenshteinMatching
            :RegexMatching
            :SoundexMatching
            :SubstringMatching ) .

### Annotations

<wptmp:entity#Reference%20-%20%20CAR-2016-04-004:%20Successful%20Local%20Account%20Login> :kb-organization "MITRE/NSA" .

<wptmp:entity#Reference%20-%20DNS%20Whitelist%20(DNSWL)%20Email%20Authentication%20Method%20Extension> :kb-author "Alessandro Vesely" .

### Serialized using the ttlser deterministic serializer v1.2.1
